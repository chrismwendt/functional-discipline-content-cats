@article{Pickering,
abstract = {Data accessors allow one to read and write components of a data structure, such as the fields of a record, the variants of a union, or the elements of a container. These data accessors are collectively known as optics; they are fundamental to programs that manipulate complex data. Individual data accessors for simple data structures are easy to write, for example as pairs of 'getter' and 'setter' methods. However, it is not obvious how to combine data accessors, in such a way that data accessors for a compound data structure are composed out of smaller data accessors for the parts of that structure. Generally, one has to write a sequence of statements or declarations that navigate step by step through the data structure, accessing one level at a timeâ€”which is to say, data accessors are traditionally not first-class citizens, combinable in their own right. We present a framework for modular data access, in which individual data accessors for simple data struc-tures may be freely combined to obtain more complex data accessors for compound data structures. Data accessors become first-class citizens. The framework is based around the notion of profunctors, a flexible gen-eralization of functions. The language features required are higher-order functions ('lambdas' or 'closures'), parametrized types ('generics' or 'abstract types') of higher kind, and some mechanism for separating inter-faces from implementations ('abstract classes' or 'modules'). We use Haskell as a vehicle in which to present our constructions, but other languages such as Scala that provide the necessary features should work just as well. We provide implementations of all our constructions, in the form of a literate program: the manuscript file for the paper is also the source code for the program, and the extracted code is available separately for evaluation. We also prove the essential properties, demonstrating that our profunctor-based representations are precisely equivalent to the more familiar concrete representations. Our results should pave the way to simpler ways of writing programs that access the components of compound data structures.},
author = {Pickering, Matthew and Gibbons, Jeremy and Wu, Nicolas},
file = {:ufs/buurlage/docs/literature/poptics.pdf:pdf},
keywords = {compositionality,lens,traversal},
title = {{Profunctor Optics: Modular Data Accessors}},
year = {2017}
}
@misc{Milewski2014,
author = {Milewski, Bartosz},
title = {{Category Theory for Programmers}},
url = {https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/},
urldate = {20-07-2017},
year = {2014}
}
@article{Awodey,
author = {Awodey},
file = {:ufs/buurlage/Documents/awodey.pdf:pdf},
title = {{Category Theory}},
year = {2010}
}
@book{Leinster,
archivePrefix = {arXiv},
arxivId = {arXiv:1612.09375v1},
author = {Leinster, T O M},
eprint = {arXiv:1612.09375v1},
file = {:ufs/buurlage/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Leinster - 1995 - Basic Category Theory.pdf:pdf},
isbn = {9781107044241},
title = {{Basic Category Theory}},
year = {2016}
}
@article{Riehl2016,
author = {Riehl, Emily},
file = {:ufs/buurlage/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Riehl - 2016 - Category Theory in Context.pdf:pdf},
title = {{Category Theory in Context}},
year = {2016}
}
@article{Oosten1995,
abstract = {None},
author = {Oosten, Jaap Van},
doi = {10.2307/2329297},
file = {:ufs/buurlage/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Oosten - 1995 - Basic Category Theory(2).pdf:pdf},
isbn = {0521061199},
issn = {00221082},
journal = {Computer},
number = {January},
pages = {1--88},
pmid = {6635932},
title = {{Basic Category Theory}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.17.6653{\&}rep=rep1{\&}type=pdf},
year = {1995}
}
@misc{MacLane1998,
abstract = {Categories for the Working Mathematician provides an array of general ideas useful in a wide variety of fields. Starting from the foundations, this book illuminates the concepts of category, functor, natural transformation, and duality. The book then turns to adjoint functors, which provide a description of universal constructions, an analysis of the representations of functors by sets of morphisms, and a means of manipulating direct and inverse limits. These categorical concepts are extensively illustrated in the remaining chapters, which include many applications of the basic existence theorem for adjoint functors. The categories of algebraic systems are constructed from certain adjoint-like data and characterized by Beck's theorem. After considering a variety of applications, the book continues with the construction and exploitation of Kan extensions. This second edition includes a number of revisions and additions, including two new chapters on topics of active interest. One is on symmetric monoidal categories and braided monoidal categories and the coherence theorems for them. The second describes 2-categories and the higher dimensional categories which have recently come into prominence. The bibliography has also been expanded to cover some of the many other recent advances concerning categories.},
archivePrefix = {arXiv},
arxivId = {math/0001045},
author = {{Mac Lane}, Saunders},
booktitle = {Categories for the Working Mathematician},
doi = {10.1016/j.jctb.2005.07.005},
eprint = {0001045},
file = {:ufs/buurlage/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mac Lane - 1998 - Categories for the Working Mathematician.pdf:pdf},
isbn = {0387984038},
issn = {00397857},
number = {2},
pages = {xii+314},
pmid = {25246403},
primaryClass = {math},
title = {{Categories for the Working Mathematician}},
url = {http://books.google.co.uk/books?hl=en{\&}lr={\&}id=MXboNPdTv7QC{\&}oi=fnd{\&}pg=PR5{\&}dq=categories+working+mathematician{\&}ots=feQZUjN6YE{\&}sig=kvJcfu5qhZZlkl6T00sSu2JUr4M},
volume = {5},
year = {1998}
}
@article{Barr1998,
abstract = {This book is a textbook in basic category theory, written specifically to be read by researchers and students in computing science. The authors expound the constructions basic to category theory in the context of examples and applications to computing science. Some categorical ideas and constructions are already used heavily in computing sciences and many of these use are described. Other ideas, in particular the concept of adjoint have not appeared as widely in the computing science literature. The authors give an elementary exposition of those ideas they believe to be basic categorical tools, with pointers to possible application. Michael Barr is Peter Redpath Professor in the Department of Mathematics and Statistics at McGill University in Montreal, Quebec. Charles Wells is Professor of Mathematics at Case Western Reserve University in Cleveland, Ohio. This new edition contains all the material from the first and second editions, including the four chapters excised from the second edition and the solutions to all the exercises, as well as added material on factorization systems, monoidal categories, and other topics. All errors known to the authors have been corrected.},
author = {Barr, Michael and Wells, Charles},
file = {:ufs/buurlage/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Barr, Wells - 1998 - Category Theory for Computing Science(2).pdf:pdf},
isbn = {0131204866},
journal = {Computing},
pages = {556},
title = {{Category Theory for Computing Science}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Category+Theory+for+Computing+Science{\#}0},
volume = {1},
year = {1998}
}
