%!PS-Adobe-2.0
%%Creator: dvips(k) 5.94b Copyright 2004 Radical Eye Software
%%Title: 18-18.dvi
%%CreationDate: Wed Dec 12 11:52:59 2007
%%Pages: 67
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMSL10 CMR10 CMR12 CMCSC10 CMSY10 CMTI12 CMMI12 CMMI8
%%+ CMR8 CMBX12 CMR7 CMMI10 CMBX10 stmary10 CMSS12 CMSY8 CMSS8 XYATIP10
%%+ XYBTIP10 CMMI6 CMSY6 rsfs10 XYDASH10 CMBX6 CMBX7 CMMI7 CMTI10 CMR6
%%+ CMBX8 stmary6 MSAM10 CMSS10 MSBM10 CMEX10 LASY10 CMTT12 CMSL12
%%+ CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe 18-18.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2007.12.12:1152
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 6, 05/05/20
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-eqdf.pro 0 0
%!
% PostScript prologue for pst-eqdf.tex.
% Version 2005.03, 2005/05/20
% For distribution, see pstricks.tex.
%
%       HISTORY
% 2005/05/20 : small (unimportant) changes (hv)
% 2005/02/25 : white space removal from expression
% 2004/12/16 : addition of SUM and IFTE
% 2004/11/14 : correction of a priority problem
%              ^ before unary - (new rule FS)
/tx@EqdfDict 400 dict def tx@EqdfDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi and Euler are defined in pstricks.pro
/PIdiv2 1.57079632680 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS                                  %%% NEW 2004/11/14
% FS -> F | +SF | -SF                         %%% NEW 2004/11/14
% F->P|F^P                                    %%% OLD
% F->P|F^SF                                   %%% NEW 2004/11/14  ???? ^FS
% P->(E)|literal
% literal->number|var|var[E]|func(params)%%|-P|+P%%% OLD
% params->E|E,param
%
% E expression, T term, SF signed factor, F factor, P power
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% parser
%% str -> [ LIFO vector ]
/AlgParser { InitParser SetExpr LexStr 0 exch AnalyzeListOfE ExpressionVector /ExpressionVector [] def} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/SetExpr { RemoveWS /ExpressionString exch def } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/InitParser {
  /ExpressionVector [] def  /AddVector [] def
  /AddVectorfree [] def     /MulVector [] def
  /MulVectorfree [] def     /PowVector [] def
  /PowVectorfree [] def     /OpParVector [] def
  /ClParVector [] def       /ParVectorFree [] def
  %%/CompVector [] def      /CompVectorFree [] def
  /BraVector [] def         /SemVector [] def
  /ComVector [] def         /ExpressionVector [] def
  /LoopLevel -1 def         /LoopContext [] def     %%% NEW for SUM function
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/FLbreak { tst not {/L exch def /F exch def 2 copy L eq exch F eq and /tst exch def} {pop pop} ifelse} def
/Negbreak { tst not { dup 0 lt /tst exch def } if } def
/STOP { tst {TOUF} if} def
/tst false def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze Expression List
%% first last
/AnalyzeListOfE {
  exch SemVector {
    exch 1 index 1 sub AnalyzeExpr 1 add
  } forall%%last_char
  exch AnalyzeExpr
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze Expr
%% first last
/AnalyzeExpr {
  FindFirstAdd%% first last pos+
  2 copy abs 1 sub ne
  { 3 -1 roll 1 index abs 1 sub AnalyzeExpr dup abs 1 add 3 -1 roll  AnalyzeTerm EvalAdd }
  { pop AnalyzeTerm } ifelse 
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze Term
%% first last
/AnalyzeTerm {%%19 28 FLbreak STOP
  FindFirstMul%% first last pos*
  2 copy abs 1 sub ne
  { 3 -1 roll 1 index abs 1 sub AnalyzeTerm dup abs 1 add 3 -1 roll  AnalyzeSignedFactor EvalMul }%%% NEW 2004/11/14
  { pop AnalyzeSignedFactor } ifelse%%% NEW 2004/11/14
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% NEW 2004/11/14
%% analyze Signed Factor
%% first last ->
/AnalyzeSignedFactor {
  ExpressionString 2 index get
  dup 45 eq%% a - sign
  { pop exch 1 add exch AnalyzeSignedFactor EvalNeg }
  { 43 eq%%a + sign
    { exch 1 add exch AnalyzeSignedFactor }
    { AnalyzeFactor } ifelse } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze Factor
%% first last ->
/AnalyzeFactor {
  FindFirstPow%% first last pos*
  2 copy abs 1 sub ne
%  { 3 -1 roll 1 index abs 1 sub AnalyzeFactor dup abs 1 add 3 -1 roll  AnalyzePower EvalPow }
  { 3 -1 roll 1 index abs 1 sub AnalyzeFactor dup abs 1 add 3 -1 roll  AnalyzeSignedFactor EvalPow }% NEW 2004/11/14
  { pop AnalyzePower } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze Power
%% first last ->
/compteur 0 def 
/AnalyzePower {
  ExpressionString 2 index get
  dup 40 eq%% an open parenthesis
  { pop 1 index UnfreePar 1 sub exch 1 add exch AnalyzeExpr }
  {  dup 45 eq%% a - sign
    { pop exch 1 add exch AnalyzePower EvalNeg }
    { dup 43 eq%%a + sign
      { pop exch 1 add exch AnalyzePower }
      { dup 46 eq 1 index 48 ge 2 index 57 le and or%%a digit or a dot
      	{ pop AnalyzeNumber }
      	{ pop AnalyzeLiteral } ifelse } ifelse } ifelse } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% analyze parameters list
%% first last
/AnalyzeParam {
  { FindFirstCom%% first last pos,
    3 -1 roll 1 index 1 sub AnalyzeExpr
    2 copy 1 sub ne { 1 add exch } { pop pop exit } ifelse
  } loop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the eventual addition at this level
%% first last -> position
/FindFirstAdd {
  2 copy /Last exch def /First exch def false 0
  AddVector {
    AddVectorFree 2 index get
    { /pos exch def
      %% if it is in the current part of the analysed expr
      pos abs First gt pos abs Last lt and
      { true 0 1 ClParVector length
        dup 0 eq%% no parenthesis
      	{ pop pop pop pop exch not exch exit }
      	{ 1 sub
      	  { ParVectorFree 1 index get
      	    { OpParVector 1 index get pos abs lt%% in this parenthesis level
      	      ClParVector 2 index get pos abs gt and
      	      { pop pop false exit } if%%then exit loop
      	    } if
      	    pop } for
      	  { pop pop true dup exit } if } ifelse } if
    } { pop } ifelse
    1 add
  } forall
  pop
  { pos UnfreeAdd} %% find one mul
  { Last 1 add } ifelse
} def
%%   {
%%    2 copy /Last exch def /First exch def false 0
%%    AddVector {
%%  	AddVectorFree 2 index get
%%  	{ /pos exch def
%%  	  true 0 1 ClParVector length 1 sub
%%  	  { ParVectorFree 1 index get
%%  	    { OpParVector 1 index get pos abs le
%%  	      ClParVector 2 index get pos abs ge and
%%  	      pos abs First lt pos abs Last gt or or
%%  	      { pop pop false exit } if
%%  	    } if
%%  	    pop
%%  	  } for
%%  	  { pop pop true dup exit } if
%%  	}
%%  	{ pop } ifelse
%%  	1 add
%%    } forall
%%    pop
%%    { pos UnfreeAdd}%% find one add
%%    { Last 1 add } ifelse
%%  } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the eventual multiplication at this level
%% first last -> first last position
/FindFirstMul {
  2 copy /Last exch def /First exch def false 0
  MulVector {
    MulVectorFree 2 index get
    { /pos exch def
      %% if it is in the current part of the analysed expr
      pos abs First gt pos abs Last lt and
      { true 0 1 ClParVector length
        dup 0 eq%% no parenthesis
      	{ pop pop pop pop exch not exch exit }
      	{ 1 sub
      	  { ParVectorFree 1 index get
      	    { OpParVector 1 index get pos abs lt%% in this parenthesis level
      	      ClParVector 2 index get pos abs gt and
      	      { pop pop false exit } if%%then exit loop
      	    } if
      	    pop } for
      	  { pop pop true dup exit } if } ifelse } if
    } { pop } ifelse
    1 add
  } forall
  pop
  { pos UnfreeMul} %% find one mul
  { Last 1 add } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the eventual power at this level
%% first last -> first last position
/FindFirstPow {
  2 copy /Last exch def /First exch def false 0
  PowVector {
    PowVectorFree 2 index get
    { /pos exch def
      %% if it is in the current part of the analysed expr
      pos First gt pos Last lt and
      { true 0 1 ClParVector length
      	dup 0 eq%% no parenthesis
      	{ pop pop pop pop exch not exch exit }
      	{ 1 sub
      	  { ParVectorFree 1 index get
      	    { OpParVector 1 index get pos abs lt%% in this parenthesis level
      	      ClParVector 2 index get pos abs gt and
      	      { pop pop false exit } if%%then exit loop
      	    } if
      	    pop } for
      	  { pop pop true dup exit } if } ifelse } if
    } { pop } ifelse
    1 add
  } forall
  pop
  { pos UnfreePow} %% find one ^
  { Last 1 add } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the eventual comma at this level
%% first last -> first last position
/FindFirstCom {
  2 copy /Last exch def /First exch def false 0
  ComVector {
    ComVectorFree 2 index get
    { /pos exch def
      %% if it is in the current part of the analysed expr
      pos First gt pos Last lt and
      { true 0 1 ClParVector length
      	dup 0 eq%% no parenthesisSTOP 
      	{ pop pop pop pop exch not exch exit }
      	{ 1 sub
      	  { ParVectorFree 1 index get
      	    { OpParVector 1 index get pos abs lt%% in this parenthesis level
      	      ClParVector 2 index get pos abs gt and
      	      { pop pop false exit } if%%then exit loop
      	    } if
      	    pop } for
      	  { pop pop true dup exit } if } ifelse } if
    } { pop } ifelse
    1 add
  } forall
  pop
  { pos UnfreeCom} %% find one comma
  { Last 1 add } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the first opened parenthesis (only for func call)
%% first last -> first last position
/FindFirstPar {
  2 copy /Last exch def /First exch def false 0
  OpParVector {
    ParVectorFree 2 index get
    { /pos exch def
      pos First gt pos Last lt and
      { exch not exch exit } if
    } { pop } ifelse
    1 add
  } forall
  pop
  { pos dup UnfreePar }%% find one par
  { Last 1 add } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the first opening bracket
%% first last -> first last position
/FindFirstBra {
  2 copy /Last exch def /First exch def
  BraVector {
    /pos exch def
    pos First gt pos Last lt and
    { exit } if
  } forall
  pos dup UnfreePar%% finding it is mandatory
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Read the number and push it in the vector
%% first last -> 
/AnalyzeNumber {
  1 index sub 1 add ExpressionString 3 1 roll getinterval cvr /n exch def
  /ExpressionVector ExpressionVector aload length n exch 1 add array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Read the literal and push it in the vector
%% first last -> 
/AnalyzeLiteral {
  ExpressionString 1 index get dup 41 eq%%close par at the end => function call
  { pop FindFirstPar%%first last parpos
    ExpressionString 3 index dup 3 index exch sub getinterval
    dup (SUM) eq { sumation }
    { dup (IFTE) eq { condition }
      { 1 index 1 add 3 index 1 sub AnalyzeParam
      	dup cvn /n exch def TrigoFunc
      	/ExpressionVector ExpressionVector aload length
      	/tx@EqdfDict cvx /begin cvx n cvx /end cvx 5 -1 roll 4 add array astore def
      	%%n cvx exch 1 add array astore def
      	pop pop pop } ifelse } ifelse }
  { 93 eq%%close bracket => vector element
    { FindFirstBra%%first last brapos
      ExpressionString 3 index dup 3 index exch sub getinterval cvn /n exch def
      /ExpressionVector ExpressionVector aload length n cvx exch 1 add array astore def
      2 copy 1 add exch 1 sub AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def
      pop pop pop
    }
    { 1 index sub 1 add ExpressionString 3 1 roll getinterval cvn /n exch def
     /ExpressionVector ExpressionVector aload length n cvx exch 1 add array astore def } ifelse } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% push add in the vector
%% kind -> 
%% if kind>0 then add else sub
/EvalAdd {
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll
  0 gt { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% push mul in the vector
%% -> 
/EvalMul {
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll
  0 gt { /mul } { /div } ifelse cvx exch 1 add  array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% push exp in the vector
%% -> 
/EvalPow {
  pop /ExpressionVector ExpressionVector aload length
  /tx@EqdfDict cvx exch /begin cvx exch /EXP cvx exch /end cvx exch 4 add array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% push neg in the vector
%% -> 
/EvalNeg {
  /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Lexical Analyzis of the string
%% -> 
/LexStr {
  /freepar 0 def /lastpar 0 def /lastchar 0 def
  0 ExpressionString
  { dup 40 eq 1 index 91 eq or %% open parenthesis
    { /OpParVector OpParVector aload length dup 3 add index exch 1 add array astore def
      /ClParVector ClParVector aload length -1 exch 1 add array astore def
      /lastpar freepar def /freepar freepar 1 add def /NoPar false def} if
    dup 41 eq 1 index 93 eq or %% close parenthesis
    { ClParVector lastpar 3 index put lastpar
      dup 0 eq
      { pop }
      { { 1 sub dup ClParVector exch get -1 eq { /lastpar exch def exit } { dup 0 eq { pop exit} if } ifelse } loop }
      ifelse } if
    dup 42 eq %% * operator
    %%{ /MulVector MulVector aload length dup 3 add index exch 1 add array astore def } if
    { /MulVector 2 index MulVector aload length 1 add array astore def } if
    dup 43 eq %% + operator
    { %%test if it is a real operator and not the unary operator
      lastchar dup  40 ne      %% open parenthesis
           1 index  59 ne and  %% ;
           1 index  42 ne and  %% *
           1 index  43 ne and  %% +
           1 index  44 ne and  %% ,
           1 index  45 ne and  %% -
           1 index  47 ne and  %% /
           1 index   0 ne and  %% first char
           1 index  94 ne and  %% ^%%2004/11/14
              exch 124 ne and  %% |
      %%{/AddVector AddVector aload length dup 3 add index exch 1 add array astore def } if}
      {/AddVector 2 index AddVector aload length 1 add array astore def } if}
    if
    dup 44 eq %% , separator
    { /ComVector ComVector aload length dup 3 add index exch 1 add array astore def }
    if
    dup 45 eq %% - operator
    { %%test if it is a real operator and not the unary operator
      lastchar dup  40 ne      %% open parenthesis
           1 index  59 ne and  %% ;
           1 index  42 ne and  %% *
           1 index  43 ne and  %% +
           1 index  44 ne and  %% ,
           1 index  45 ne and  %% -
           1 index  47 ne and  %% /
           1 index   0 ne and  %% first char
           1 index  94 ne and  %% ^%%2004/11/14
              exch 124 ne and  %% |
      %%{/AddVector AddVector aload length dup 3 add index neg exch 1 add array astore def } if}
      {/AddVector 2 index neg AddVector aload length 1 add array astore def } if}
    if
    dup 47 eq %% / operator
    %%{ /MulVector MulVector aload length dup 3 add index neg exch 1 add array astore def }
    { /MulVector 2 index neg MulVector aload length 1 add array astore def }
    if
    dup 59 eq 1 index 124 eq or%% ; separator |
    { /SemVector SemVector aload length dup 3 add index exch 1 add array astore def }
    if
    dup 91 eq %% open bracket
    { /BraVector BraVector aload length dup 3 add index exch 1 add array astore def }
    if
    dup 94 eq %% ^ operator
    %%{ /PowVector PowVector aload length dup 3 add index exch 1 add array astore def }
    { /PowVector 2 index PowVector aload length 1 add array astore def }%%2004/11/14
    if
    /lastchar exch def 1 add
  } forall
  /AddVectorFree AddVector CreateFree def
  /MulVectorFree MulVector CreateFree def
  /ParVectorFree OpParVector CreateFree def
  /PowVectorFree PowVector CreateFree def
  /ComVectorFree ComVector CreateFree def
  1 sub
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Create Free vector
%% ->
/CreateFree {
  dup length array exch
  { pop true exch } forall astore
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Unfree parenthesis
%% pos ->
/UnfreePar {
  /pos exch def ParVectorFree 0
  OpParVector { pos eq { exit } if 1 add } forall
  false put
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Unfree mul
%% pos ->
/UnfreeMul {
  MulVectorFree 0
  MulVector { pos eq { exit } if 1 add } forall
  false put
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Unfree add
%% pos ->
/UnfreeAdd {
  AddVectorFree 0
  AddVector { pos eq { exit } if 1 add } forall
  false put
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Unfree exp
%% pos ->
/UnfreePow {
  PowVectorFree 0
  PowVector { pos eq { exit } if 1 add } forall
  false put
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Unfree com
%% pos ->
/UnfreeCom {
  ComVectorFree 0
  ComVector { pos eq { exit } if 1 add } forall
  false put
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.14159265359 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the condition function
%%  ->
/condition {
  %% manage the condition
  1 index 1 add 3 index 1 sub FindFirstCom
  %% find the test char <,>,=,!
  4 index 1 index 1 sub FindTestChar
  4 index 2 index 1 sub AnalyzeExpr 3 1 roll
  1 add 1 index 1 sub AnalyzeExpr exch
  /ExpressionVector ExpressionVector aload length dup 1 add array exch 3 add -1 roll cvx exch astore def
  %% manage the then clause
  MngClause
  %% manage the else clause
  MngClause
  /ExpressionVector ExpressionVector aload length 1 add /ifelse cvx exch array astore def
  mark 8 1 roll cleartomark
} def
/FindTestChar {
  1 exch
  { dup ExpressionString exch get
    dup 60 eq { pop /lt exit } if%%<
    dup 61 eq { pop /eq exit } if%%=
    dup 62 eq { pop /gt exit } if%%>
    pop pop } for
} def
/MngClause {
  3 1 roll FindFirstCom 4 -1 roll 1 add 1 index 1 sub
  /ExpressionVector ExpressionVector exch [] def 3 1 roll AnalyzeExpr
  /ExpressionVector exch aload length 1 add ExpressionVector cvx exch array astore def
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the sumation function
%%  ->
/sumation {
  /LoopLevel LoopLevel 1 add def
  %% create the accumulator
  /ExpressionVector ExpressionVector aload length 1 add 0 exch array astore def
  %% read the variable name
  1 index 1 add 3 index 1 sub FindFirstCom
  ExpressionString 4 -1 roll 2 index 1 index sub getinterval cvn
  /tempvar exch def
  %% read the initial value
  GetNextNumber
  /ExpressionVector ExpressionVector aload length 1 add temp exch array astore def
  %% read the increment value
  GetNextNumber
  /ExpressionVector ExpressionVector aload length 1 add temp exch array astore def
  %% read the limit value
  GetNextNumber
  /ExpressionVector ExpressionVector aload length 1 add temp exch array astore def
  /LoopContext LoopContext aload length 1 add ExpressionVector exch array astore def
  /ExpressionVector [ tempvar /exch cvx /def cvx ] def
  1 add exch AnalyzeExpr
  %% add each term of the sum
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector LoopContext LoopLevel get aload length 2 add
  ExpressionVector cvx exch /for cvx exch array astore def pop pop pop pop } def
/GetNextNumber {
  exch FindFirstCom ExpressionString 4 -1 roll 1 add 2 index 1 index sub getinterval cvi
  /temp exch def } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METHODS FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% MISC FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/RemoveWS {%
  dup length
  0 2 index { 32 ne { 1 add } if } forall
  2 copy ne
  { exch pop string 0 2 index
    { dup 32 ne { 2 index 2 index 3 -1 roll put 1 add } { pop } ifelse } forall
    pop exch pop } { pop pop } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Make a discrete sum
%% var n begin end expr ->
/SUM {} def
%% function arcsine in radians
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup abs 1 eq
  { PIdiv2 exch -1 eq { neg } if }
  { .1 %% asin(x)
    { dup dup PI div 180 mul sin 3 index sub exch PI div 180 mul cos div
      dup abs 1e-6 lt { sub exit } if sub
    } loop
    exch pop } ifelse
} def
%% function arccosine in radians
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup abs 1 eq
  { -1 eq { PI } { 0 } ifelse }
  { 1.5 %% asin(x)
    { dup dup PI div 180 mul cos 3 index sub exch PI div 180 mul sin neg div
      dup abs 1e-6 lt { sub exit } if sub
    } loop
    exch pop } ifelse
} def
%% factorial function
%% n -> n!
/fact { 1 exch 2 exch 1 exch { mul } for } def
end
%% modified exponential funtion for 0
%% x n -> x^n
/EXP { dup 0 eq { pop pop 1 } { exp } ifelse } def
% END pst-eqdf.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.1: CMTT10 1.00B
%%CreationDate: 1992 Apr 26 10:42:42
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 51 /three put
dup 58 /colon put
dup 64 /at put
dup 72 /H put
dup 77 /M put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-4 -235 731 800}readonly def
/UniqueID 5000832 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D19
38DD5C4467F9DD8C5D1A2000B3A6BF2F25629BAEC199AE8BD4BA6ED9BBF7DABF
D0E153BAB1C17900D4FCE209622ACD19E7C74C2807D0397357ED07AB460D5204
EB3A45B7AC4D106B7303AD8348853032A745F417943F9B4FED652B835AA49727
A8B4117AFF1D4BCE831EB510B6851796D0BE6982B76620CB3CE0C22CACDD4593
F244C14EEC0E5A7C4AC42392F81C01BC4257FE12AF33F4BFEA9108FF11CF9714
4DD6EC70A2C4C1E4F328A1EB25E43525FB1E16C07E28CC359DF61F426B7D41EA
6A0C84DD63275395A503AAE908E1C82D389FD12A21E86999799E7F24A994472E
A10EAE77096709BE0D11AAD24A30D96E15A51D720AFB3B10D2E0AC8DC1A1204B
E8725E00D7E3A96F9978BC19377034D93D080C4391E579C34FF9FC2379CB119F
1E5BBEA91AE20F343C6420BE1E2BD0636B04FCCC0BEE0DC2D56D66F06DB22438
452822CBEAF03EE9EAA8398F276EC0D92A7FB978C17805DB2F4A7DFBA56FD6AF
8670EB364F01DE8FCAFBAF657D68C3A03112915736CEABAA8BA5C0AC25288369
5D49BD891FABEFE8699A0AE3ED85B48ACB22229E15623399C93DE7D935734ADA
DA7A1462C111D44AD53EA35B57E5D0B5FC0B481820E43222DB8EFCD5D30E15F9
BA304FA879392EE0BCC0E1A61E74B3A1FC3A3D170218D7244580C7AA0DC65D19
741FA5FE6F8CBF60250ACC27454BBF0897CA4B909C83A56672958752ED4B5E79
E18660764F155E86F09EFA9F7685F2F5027EC85A775287B30E2069DE4E4D5712
E7D033481A53A2702BA7542C71062173039030CF28D8B9C63B5596A9B42B33E7
D922944A38713383D3648A4AF160A3B0C8F3379BA4372BE2E7EA49AABA75AEEE
C5DDE1D8BF68483C3D21271280ABB91D54CC819680322EAB72E1250A760BC8DC
FF798F2ABFC4F3539392985C4CB324B00072295FC160818BB0355FDC4F12E39B
984826450553E3D271F03D8DC2D12A92A4D32034FD16DA13B876DF448467B625
2BA3AEEEC60550844F5300D7FDCBE636D5951411C6F46CF31F03D3517A96309E
02D0DDC6DFB8FFBAAE1AB34DAAFD32AA716301301AF68F407CFAC4FF8CAF758C
C62A6765AB1CD0F3EDD3C556A10E94426AEF2D5B015C5196CE77FA94318AC24F
D38FC825E8B2EFB8E2803754084084CF308B047CD43A736A72A30B92E1D6E1AE
BF4510C724AB326DD8B68C7B7DB16730051EDAFC10D2A983B5A2CE0505CD251F
E4B70FD350F75749950CD2F08701DED9BE9D6B06CF91BBD050A90079CA5DBECD
860FB92423ED0D24E60CE6D68DBD92BAB91FD4037117237F22BC030569DD7C79
37C75CCC592F27B2B3D2CEAF2F0769DC82008E6D9F7E290C92BC10481409D1DD
8F2063EAF595B35F19B964E824CBCCE67DC66158348600AC510E7F30DE6D2781
052AE66E5867DF3636C4F5C22250225BDFD3B89455E4ED9C46B241E6C9F5C635
81EB4508FA80382BB91FDED03C2B966920A3764B754ECDC9238EB07CAAD29591
559E5FB21A90DE77A6D1E42662BFDB8AF468B380EFA3807EADD0305BBF875D70
87C2D614686D594ED6F2179D819B50E9D25D8362F06F210F5BE1C2753862A412
09586470C97F9C400CA7E53AE38E82EEFD4DB4CD35ED5F1A48F87CF1EA6696CF
B0903F4308D222391FB46F54EDD7D7FBE6B62A4BC52F80B962EEA2BEB66332AC
306FF3899AFE0481939B7636BB1E948987F3F4A741EF155329F2B77C153EF867
C3474F25BEB6406149DD4B81407313D342EA769B8C754B51844E7FDA50AF276D
EB6A3B69183F827855C4B9D8C6286A256E69C4810E7260BB6E39C1A9F1A8DCB3
A26A358ABC61904873CC7C67FEFF5FF9619951439278E6CE1E43CA25DE86079D
9FEB4F3308EBCFF9B01526ABFBEC020FFD662F2B020B49AE6B251F3425F5DED0
2C7B79C1C3E082D111FE5D96240CD55CC17EA372D3A2E745BB83465868AE1DD5
CA6F2EE6690AD9CB754EC3D8592FFCBFB04EEB5DF35608DAA3D3967C70BFA5E2
AEF6DD7649C3019EF9A29B16B5182F277D378614415D67E139550F37BD627BBC
ED83A889AB153D2E33B079809BFFD36EEC17F130F546D5B4D0FAB70371038D9F
ED3675EF14CB64631640F5B7B6219E1BEFA4EB2A5B7B4ED5DAE02ACB17914812
141EFC05FCE70DC170834E958D9289DE24846EAFFAA4A92EB2A56F1389D0067F
9B8EB9237722652069A8B12FAE4964A5C54A8EF584E30FAA1BFE2F2FA2FA3D05
31DEB23B779B54A8FA258B775E9CD80A51756FCA68919A3EF0431C8A43F1F834
49F5A8618BEEDE6CF6D8D274CE18EC93471F97507E849E0BDA5DF4A1E8320891
4C0849349F604DD058EBDA6F2C5C75FA926EDAFAC88C45DA070A892837B39B18
2EB484E2B1926A74CE9A3E03F91237129B053B198FC5FB0A2F016A43478BCDBF
9C999130D87002E6B2D04872431CEC95B84252098E8871B15CF4C6D6B917E742
5AE956A44647BB969961ADD6D7E2E58ACF706AAF6E98F797B2070EC85E235F99
CE362B605EFA42DC5597B88510E15188F3C741636710F172D83786416E25D278
4649190DE13B383B980827C3B9790A22C1118C2DB8F32E5903B5E1E284085443
B2B08F33DBB0ED7FA427EF5CB3E53011AB23495EE5140AD09A8BC989CA997D52
C2BAC94F4759D253D33EA2F0FE1C4AE34E54CF428A889624E9C37AC0815ABAA0
E7DC714B73512FA028A6E86F4D023722F2C01FFBEA3D86A62992F6D88902466F
863E4C4822503B86DA13E23798A60E85EF4A82CACA1C7FAAD7DEC2B48E76DC53
A6F85ED5AFD73E701326825DD453F9F420946437CD3A48143E879B9D6304AABB
BB22FDD5ECD2AC95847B01FEE1F528FF03072324EFF61EA6CB85F0735912D2AD
B39BC26C2EFF1FDA28A4B51CA8695C64B9CD7C5612330606EB67CD27A3E356E2
046BDC9FC0F66D4234B03DC37AB36A866FD0B7E2D158160DCF35C3B7127F61D4
841856A8CD25C032C9384C3D34E7580711C5C0DED1F811A5AC2263153C781673
8E631739932E040DA7DB5C91DE3E6A9644B0C93F6454F334A8EA8957093D61B0
13674F5C5C8630AA47D11F486AA89A3783E67234102272139D35BEDAD0CFC595
E2BF584A39D0E0F571A00E49AF5F742367EE71D407E948470E1E16773EB71A80
6059AC1EA9BD38596C91775B2DF19D3A93CE9D6985A5FA697D1B38DB1FD88628
EB4D71A2731BB7207BE8CAE71E5EBBFB5D3E5C3FBB7408E4E1073B2CADDA954F
A55A01FE5AE3C3D3B32F3405EF742E0408CB554B14D41AE5FDD0CA17C2A1B17C
4BFD66F48A08C7CE49B97D0BB4AF6B411CF4E5CC1CF270AD085BAA646A07F466
EACD4D4129BBC264B487DB306DEDD07C14CD2AC1474329059AD7A45370577026
C8816182514A278675B0238AB14B7E281D5F810FEFCAC37A5F50730F8D5DDF45
AA389F1A1C773731FD980F09DCE1917C26074B5F66AD8B5715FD594442940609
97945CDA0155DC80CE238F9100ECAF72C86D251F5878C51BA54A9A11C2AAC431
102F38A96AA67E154B992D7255DF1E00CEB8CBD8CFA8105FDD35D62860B2BFB1
1630C315ABE7CE6CF7173B5990D17753D1E2A7D1352A539A6C8B79C1E9E0F087
5B4A57712B70E4855FA643632FEA62F79C1901CD60C40776EC5939D556FDEB83
90B2BF733C60B3C5B7123EC9F042D34AA478611B4D83D918D6EDA512A3EE9D3B
9B2F1E1762A23059D9A077096E52E021B85888783222F148DE5EA770DD3FAD9D
8AB733278E59B7FD4E56213E40D4D370795C491001F1CD87295771BCE65D05E0
53CA078305A7394B33A1B6C84AEDBAB3D016325F90302FDAE1967E6ADCEB571C
086C71E2820F7D269FC8377FD81025D09BF4E1337E3DE6ECDDDFA2A7A893FE1F
2DD1578C07368C65464D83F443CCC658BF9D6D7E7F602C490BE9B1FF324EC32E
D73677A285CABF755F664B35BFF17FE074789A9010CB68E46170E05219F5C79C
C24608BBBF259E9B597DA1E77AE8980DE35742BB14E4490E956BC89977B407A7
00868FF7CB761BF365CD975CBC090F1A3646123E04304CD9E21389E102BABE3A
9B6D53F8B1B5B92E279717D62FC320C637739052E02DDB2F421BA980215A8B02
9CD1F2580209BFB3838D40EDDF9543E9E6179E0663F0AE8CD45BB5E6A538B595
514F8E39F59360671A16990067ED11B1E8FBC851D7C11DE88F4FEF770843B92A
80B71C9E6E958D6DD05C6F15DADBD2C5AAB82624D4DA940C233DFEB065483106
5A2F13A67CDD8E2A619DFB6711CA3366110C17416C320CC30D5121B430B86F6E
9CECB1BCA7D9C26345EAB515A8E72C799B043A2FE9E58F8BB0A76FA753DA8E5F
92EE47801D067028F088C94A52DD3C694DAA950C0C6C92CE5832BD713EFBAA67
3DCBDFC40B53F17B66AD2C4FF59F9916B3331097FE3BE8EEB6F9DD4474D09135
2CEE977BB4E1881157FAD7B444A9B7DB39F575DE795B47C39211FF5E5640743F
C3F649DDFF2AFA68186C56C89EF935172CF011B1FB90CBB2B4E202CA4D4F659E
DA9FA578E3E18F9965C7C6D7C60B8249A2B9F0C106B43EB6018CFB19878E8360
4C47427CC8A95EF21643398F005DACE1D7DF0F44E1DA4157A3C83581B6CC19A6
51BDDFF5BFABE196E66CE759EA30ED8BDAEEAE5B52834E9E8F2E11F2C465B82C
2ED8450C6F5DB23CF24FA974C3F4CC2582AABF580B2BE4DE06DFD2411D11591B
91083A59CA164CE393F506E03F414EEF1D54ED8E659AF710D7350315355AE001
DC5A2692BC401B7F600E8E5EC06399ABE98AFA3C3EA2F178176044D4DC85DA2D
2C1C85B276179CF977182D52B692B9E7D18290A580A3334889F32305A7C0189B
376ADCC8CCDE9F9C237240F552C4CD87E0C1514F2E306BC541D73F4152434207
0B4F02AF82DB696AF677DB999CB30E388B1BFA89ADBD242B109EA0FA97CA7B4F
7F93001D02469B8D3AB6D85C75FE360832C888910F0D6EEBC33406040C50C547
F3618F068468108D025EBBDF592AA28F47ACB63CC55F17D0F1C09C30E90122AF
84044425592F1A6F8A87410BD3906F139A9D239DF1F66DE616FCA805B1BB2A0C
41698067217E3914282C92593FAD86B4941AF77E14279D39F276DD202FA63DAC
C2DD16DDEDBB345CF9B8FD184EDA8EA6B5AC988D1F55B4679CD74BD135DCAAE7
B978C393341AE9B157F04FC480ABDBAADB6EDE3E40B11685E2B13430702525B3
35EDF1E55C0B709A3B188739BDBDC1D53E26C49F44E4D3445875C80F0FBE24CC
F43786E285C405A248CC7582A658F082A2A5E464C58C69D2E41CD081E2CA9579
F0077B2742AA213E1E360797DFCE5B40D41C721541972AA5C1B11F0A890ED0F0
E3B8EF7E744756A574AF4BB769F7FD7181F514F49D6EC949DB45E4D9E3AC0C74
F52729C5A540CC085DACC42E7C6711C0DACB668DBA00B2AC413FDEE3F0D6EE9D
C3A0F90B80A383C6175310B68B2C6D1AC4D314C953A1E8CBF2F26600B3D5994B
1667D3E8F851C98A0879AD308B443112B064E78D32ED9E3C20EBEE6AD02D41A3
89D4954E0784A82ADB7386FC9268AF68299BDE9AD2A5A0DA3FD90E18ED17B263
54519EDE0F308933C5D6099FA9C4904E4DB947B5DA11F70D92B6B9ABF1051563
A227B07158F911E556081B65B62A36AD330CE6BE4445D6FB164FD88820792476
85BB58ADED44E6BDF153CE26A855DBD134194827C49FEA1921F28B529FD3FF4B
004101D33539A95A0E949EC4912470102F3FFD68E5E9216150D0E062DE1E8F2A
ABF0D7C50FE26E982D82867F1E3D9DBDE8C385AFBC73FEEED54A89C45A7B3F22
8C7302A3244A4086A62EF24F890038AD36891A2ACBB91111B66FBA46B494D1D9
B103CB754FB231E5A7DE85F964D62C7F147B32D7D19BF91F4A3A296DD0521CB7
784E9A0CC1F0B1C90E8EAEFEBE5B79AC83355E1EC1B0145779822EA89B166B6D
C2100242B4E79069BDE7761363225A4D0673922710A3A48D99733BED3149E016
6CBD3BAB8FFF695487483741E2841D9F317B536B5A0A6A31A0602B1F015C0322
0EE1087AC8E7D59A6FC3197BF9E6A3FF3CDBD4071D7DEBF290D6EF8BB981782F
7FD426B11FC0FF8D33E391B58E3E122C219A08616FC9108B314BEE6DF972F3F4
42F1F3716A314CE4885A3481C1E2599080080ED5BC940A3DF420AA3DEF18D82B
8721972D78FBD19F585B654EB7A3512C7D0FA2B82303FC215B7BB062A93CEE8D
6893D884BC06DF4A93769B8F1DFF06ED43E433FFF4F16636F72BF79F897849AD
7D5857487B467AED5B42EAEF91B0BEA941B89D6F3DCB696A4324A444E45B90D4
1573DEE7CC9B5D0014032382C8C44E19C7873A3487C0D050DFF714B942C0FC0A
AADCF89F2B78E1E594F9DEEC815A2EC7FD59F04344DA6C29AE16118C48AB3078
87B2C10609669942A21A5CF828ACD9D2303D1DC7F8021F152482210E42987C67
C2E3314038DC59BE89219C27E93FE6B36808EC367F43F52A1D0BD0DFD0EDC0BE
1D5D779FB002D1D87555E0E16D4D838BE818DE28F48B3DC507E7A9EB1DB3FF41
9F64B5EF5EBC3CDE61F2C1C7DF72E92A2F83F8B6FC312E56DF365A9FB52C6AEF
398BFF71A9B18F5A7A4C4FE3CDBDDA293FB00027D6C954F8D1408BADA3A0FE16
A751A26945FD0C6582A7F55369C45A0F2E6B45D0D7D5F9B323B0BFA99BFA306D
F631E0014F340120716E3C50CA314B2827388E1F918B5D777BFFECD07771C2F1
8FBDCDA871636B2FDF7D82ACD8A196D2AFF717630C3491A241A3B919330E3432
C51EDFFE9D04E79A64EF71EC5623D0AF7E018461BDC56C084886836BCDD6C778
A93FFBDF58DCFC0795D1B5223C464DCFDE36A25085419E72FBB191A246DB8787
C102A6F38F715EA334188B5F9E3A5D717EFDE249BCF414BE56B7728CDA621F19
C64C2476CE92A59097C97257C6E4506355D57124D1DFC96EC4CA1CEC3C3888E1
22113B2A55CE875803C05DD2E6CA0CC3ED88720256A11CC35EB979F87A9E94F8
42FAE737DFBDA1F0FBB89E181CE53EB297F1AC4F8BE40E9E8F6707D037DFBBFB
D6AA6B3B5DCAFEFD85C8AD5304B355CE832097C506AB9675920C0DAF4A4EABB2
3DFC4218DF92D96DE9C36E308F2D3B08172F19A8559BA63B64AE4D2B38FC3CA5
4F981A85BDF252613983FBE82312CDB82606E5406294169A535170E8C8E1F459
87E9B2F823B959F9F90C2CC9F4E054315F01FD3DAC1DF05A87C969D9054D48CE
37EA1BE6B3E00F4C12166916DF2839BBAD0B1357CBBE378DCA170F2230E883DE
BD9E972E64E6DAE2710BBE7DA88D58E2A884D1CF3CF8795153D630D1E9E232E4
27CF135528C47FF918FC4C39A8C869122589C8122BA140FD7A60C62E696DE777
4EDD3035F65DB817BCF8503A071BD82E994BBA08C87ED8A8859AB981502DE955
A3785C8E5D23D906BBA6E1589093336984CE09D632493480858FDD2F8F761913
51B26D9E0B718654D580978CBA090DC54733AA9E3169F54C23CA46AB17805766
3EE9FF8E6919D9D0297343C8AD46AB1E1967E71DF8F1ADD6151BCF2CF3F10E81
12D0BBC4B136AE5E2930E537A8327AE3764CCF9A4A380C546E4DB0273C0FD8E8
320B43FA2C6CD8120F00B194EE012A523F43AEEFDC51B29735E31258E05B1B96
A3A1B995DD6004167FE87AA6195589A095B145402F7F1F1713C7A4C48F134E1D
1ECEA4E42DA1AEB6B09412633EF48F49932888B5350FA2B4ABEAFC89B3D180BC
00127E94F64785F2DBD5B73C0CBEA3316C07BDDC149A41F8630EF3FABF2BF3A2
0E1A74DEB1B58AD339B5890A85A8EB30E78522A29E739AB898268D4AB3750B8F
5443A5BE437DCE6CFD27CFF16EEC8F71804A8D7C1B81AE363BE656944D3C2676
BF01531AC7A06D31D4CC519223741E457315F0A0614266B39980C33E62CE54BE
B55CF59E7BCD452952E7BB2E86A052F35B46F2A87A8CB97466783EF15991F849
579240A6130C3DF7AAF6A37C24266B7869656DB31886631CE9B581A5DE2854A1
0F692088C76B6373FD510E377ADB59950B45E873E75F72675A5169D194126AA2
56FE26CD24EEA1B5C2198B9E87A295F23AD7D6CFA7408CD10CC7137F5DDC70F4
BCC851E17ED7E2578B62DA4454028800A8510080266DF6FBD32264ED779E852D
6432D36D2C5649A57DDBA5904E3961FB9F3F1AA3F464B5276A0D73C40CC91D87
628C6A462970DC80A92AA276236562F39BB9F1EE2CC9C393AA25BD604E37F394
58C8EE9A48E27F9BB6F0428F320C17D3C287B53A2A710E8EF45D2A1CAC81D847
3479911AC6969D522BED3690C824CD158F1F539A358612A492731AE47C24A4EB
D9328944504FD38FA51D5B76A56DA3CC13AEC14E47DD2CDC5ABBFCEAA5C27F34
D82829EFBDE8E678A0481011AB2F7439D796FDA1E0A7EF03102584A38207EA4C
9C57F07728CD6D8A2E3D99E57F73EC0D17E7D0C67661057EF41537904705E601
D69E905779563CA0A5F53CA22D9C49AEE626B24E129E5537DBB1A7FB6BECEDE0
891AF832C0BCD655E65A9B0EC0AD99EA0CF861AC97BA1FE8B42D1D9E50418BB2
E82A1CEE64C6927D2CBED580793242B40C98B248E65AD71A0E11EF69110EB73D
EE99EDFFBA708691F29A700C7443AD48279932287AB18E2E0F3382C6E89BEDDB
8305C19C685AECA6C35E867AAB0B3B92635CBB25BAEE0153627A177A56BB66A2
A96C0203E837A0108C491AB6757BB1C335BBBE20F6E17F26C86F1C2A1D045FAC
144FC0F3C83947F0150A1CBC40B75AAA355C54B39CD8D9AB95BAEE035E4F00BB
E063F95789D37F7DF543D2FFA7D38A100C06336567801D6ABF65B376AC60B3B9
AD8A9FDB86C508089778A297AF29639EAC6E243DDB0116290A7E44CC7A8E82A9
8E346685B72C22F46E1D543A223799D9B1CB48506E38945E96E3989EAF0D2EC5
FAF80DE4508604CA0999730875702D59922EE99AB27BDDCBBF577DDE6AF502CB
38883554FD68087840A31E19CCE78108EFE6998931DE320A675FBE38DD49AC83
ED7F80C7DB0DF3D1667CBD76FD3B87F30684020F449CE43C38DBFA587ACA111F
A9097C2A181EBE608AE51C1AE9CF7DB640174A0BA923661BE489F5A4C45E3318
F605217EC1535B66AB61F697C310FDCA15D9B91E0ACF26B20CE2C7C62C39CA98
81C21FCDA98825DE58E88BE06BE63AE24B5305A467C6AC8D184DF90E620369F8
0E9EFC1E9F7CA18AAE28833AF20282409F418CE7907D32FD7F8574A55F76496B
4229A9A18859B3444F940DCDFEB253D0DE0CE080A7019012F4BD8C8554745474
3F339547878F937CB1F9FBB0463C6E7F67B51229562409F635919C75FAE34057
6F257F6FCD333D36D4AAE2D2C931319957694DF7528682008EE884B2D0E03229
3EA16785671179609B3D571DD3D0C10571EE4E5A687BEB82209CB70140F1F8F4
4D08E43497B20050DFDE697624E3B69FF5C6E7C327E31F6ECE704DF2B5AA6179
9E68385E7285F73EF702C5A79A0C0D83794C4F79F583FA7575542F646F91297E
1E0A6443CD262F88D8C5BCBF0DE0BC06C73A92EFB0E0050EE5BB93664DE31C3A
398B867B9A142F890F03547EE4EEA916E726F1E162550363A3C8963C478D23E4
E385D515D6EC6AE27B1ED7564AA85998E773F41785D5595AD0B3FA6796F4F2C3
C9C4C49F1F24DFC690312CAF9FB6744BC5B715461B40FCA4ECF3B2E66DFE7EF1
BF1F15F24A0408E23BBE4B745A5B696465A88BE91D6D4638AAD67ADDFD7BE4FE
F6AFCAECB0DC6C4477EA6746AB27D72A794EC53D67C3B9CCB5C01AD9C98D7AF7
07F6AC3CE236D915B2680BCB28047D7ADFA83867F0297E947D026CD38C5F4BEC
C458F9F59E8D674F756BD69D856A3073ABF3910FAA05793AE254953CEF6ADAD0
B887AEF81FC99A6B35000F3DD556741CA913759BF67FC39FFA9C7EB42895BC39
5646991C390D1011AC0AF9CD65F59A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSL12
%!PS-AdobeFont-1.1: CMSL12 1.0
%%CreationDate: 1991 Aug 20 16:40:41
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSL12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
end readonly def
/FontName /CMSL12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
/FontBBox{-56 -251 1102 750}readonly def
/UniqueID 5000799 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
55FBD18DCEF738EFB8E96B4B61D9C1A24F5FE2B29EF89EA4320BCB1D16E30E22
AB926EBADAACFDC5784740982ADC9619BFDF3586F8C12E6F6E588B44226DCB87
DEFC33CDC78D0E39CE42F3CD39130758A1DA6723A3BFE0FC6ACE02389569609D
E0A2F8219BCA30B5669A6EF48E4FC32BBCC3CA7CC2C7615DACC771E59FDCBA30
17F349B2BEF4EC6B45905D23BDEEC669B3BF525881857B942BF724608CBA8DA8
37CB92A472B89421D4BA156248D4F4F7AA90DA4EEEB4B3D57A4C2F0F41B7E669
9AA74D9F4743AC680A1EA18B567BBD8A2BCCEAC1795CCB5188C77C5B199027DF
F158135941CD020826973194789ED9B5279136A8B9D0D9979E5E80F95A223851
BC17E0EBB94FDAE8F32FE889774D72FA17E179F5AF39385406FBA973734BCAE5
4DD33DEA30B1BCAA9207D96BDBC6AE9519E3603AC39A09B2A52ADDF935FE10EA
A759515DF32688D0E95B1D37CE23E9F45A114572761B088BAB7464D8A1BF7BEF
EDFEC4E472006F678C5E2F6E61AF9E5A5D6DB85600E53818535889F6C31061A4
9A6C369C2680CB769A5540D5A62429DAEE4E2AF5971BC12DAF37B3DAEB66BA94
2998AD18DD63DF3A15EB2FC41AC343063AEAFCD5D2E1BB23C444D4671A954A93
D554797F45A27AC629EF606552DAF0A70B539A55D6650446540E197351E18723
1A81C4DF4BDAF4FA2F411723FC05B9C2B63676B9AE9013902CF9687200FE6F77
30D33F2319AD36876F2F99783468B94DC015433E24640A767F249797A7B240A8
3628220DFE56BF68BED82B9FEA11E4051191DA2A8C47F96F335DC419013B4E02
384093D7A42DEB5967969CD57C09F23C5BD69423DFCFF95BF56E88F0B424AA03
370D51AE51C287301A35AC6F3D9D27752B63AFCC19F62785F780B14E31E3473E
8D870A489CA1CE5B6F36CF9329DB2EE19781C8B5885F5B6E10BAE12D3A0FC537
40ED68D9690AEFA6AFC540EFAA195E6F2F62F9174EA40F01808158863F4DAF3E
F514253533BDB26001781ABD988A80C1B3D8B9B409681CBE53DFF96CE02E0D07
BE33752DE74F4F393F0DFE57275AB51A6C3DE1A5C0DF632C66F56063098D3D9E
D1EDC91BB12FB67F2A858E09F57DB9C098885DEBD6EB561B69D05BD937D5F5A9
6F3B49E9DCC273A4AAC595B6563074BAEA659FBC84E339B010E6359A4C07DE22
F51340C2D383BAD68E0D6057AB423DAA79E256AB9944B33D87EB97BD6D88D204
8FC1631D7D1651F11349C98A740401B5D22C5BA482B7C1D258C019268BD6B93C
B0242F3CC622991245E5B2070B08EB3E435BF0A6045F3228D64A4C6D678A0196
A12372989AC4226F53475A6AFCB4527C305C8EAAB0CD13298565318AF579314D
7573E16D9E0B429CF16EA9F7D9FB4EFB944E82133BAB282BB606E1C9BBAD3F3C
9D5C1018E8D09101D695D41C867B9FFFF72E9B3B1E4B0AB4DF8CE67627A09F70
A93DAE470915EA4C9EBF1D203B60AC417C8C1CCE5B52115570D179F8AC7F63D6
47B6F2A18F3E966DDB24EAA4DB846A01D0EEC863959E33489336E07630578463
30374E7B92E76E9039AC8ED79C7E8846F5024D51BFDA177CD7BA006C8C97586C
E68E7CC3DFD4544035662D6E8EFCFEAC352DF680B2DA53C3BF0B058350A51B11
FEDAD938AC4D705E81986E9E7B5BAC8C52C0F8E8E97B9A73D0624B1F53449E6B
8B95B0550D5249E013A8A3AC1098017C98897D3FAE65099866436DC7054639A3
A2072EFD44A92B09E87209E36031B8D95D0A08306985BC3C1B2DEAC261780883
23CEACBFBA58E73BF59762EB268F23C046A87A0752972E8562E5DCA9121E4AB9
EB4C36AFCF3B0DB33695936EE94C74FF33EE5ACEC0E5DD3BB2526AB1C5F61C66
FD3CE06BE47F02BDD0164F251CDE41281152F9A345BC0F8BFA4F6FC982162FC2
6D5981E7ADB6D188670A89348C152DED89266AB5BCF7F72A66F7BA569C6B5D65
3D148A0BB87FBF85332CDC0E5BE54FB472751324AB3DC6C2305057121042EBFD
8B1B517D5C626C3C0FBE5282560E4B7A173B23A9301017EF7D7B69BE63CD932D
6235066FF7E5774E0A0D8003DE8440C79F77CD047D6D0A99D3771855D4FFCAF7
E5794C07158197EAC563C2E43D0DC98DC0D51C768C9F4E4FC36C8281BB34D9D0
F75A93D45C5BCC606BECFA44470D35428E3FE88C7AF8A9F84F8625BB539E8DAA
B9048620FA6D8C4BAFE58AF50E966009E2E28C955A4106E7684618C6470ED9A1
CA550FFE98E909C1DC91AA5C776EF93D66FC546604F393319F37EFBE8548CDEB
29653BD6ECDBF060268D50F9EF54E26D593E709A272F96A63B34D77FAB3EDD31
6E1508AFC3A0DC6B133A11D952A479775CE5AFA12AA4A2D0A3AFB5CD7D5CE07C
8556EC6233A57D09CDB94A3E782D3A5A6A7A32828007F302BCC579CC73ABDE18
A23D9E5C15C13A6E47686EE7B20EDCD151200FFE18BFF7A69B759535994EAC4F
528E9BAF8B161A672737BDF6C86D76A9983D88C6A97D08388E98991166B941B6
2871E33A99E0FA82C8C0894B67751E902FB2EFB46237D000005EA4207F547D2D
0FE167C43A4FB82210E0AC673A438C05581B15EBC0B8E219A439051B9CAF1D19
4715F7FD71E99DB316CE1F139EA03A32F78F1A5B55C93E60201B05A6A5596E73
29E627BABC79702911091806EC60B9425F2C981FF8E0AD65505D93D23866E12D
E0CB42FB59BDC617F9FA91300102278A96639468F7226127E87C5E2C0F3D183C
E0F0C79CE796C51888CB6BAEC50FDCA9D8FB85B832DD09B6018361FC595AC07D
7CB6DB0C3146BF4D79A93E6030DE78CC2785B7F5DA0EA6115DABCB3C8FC0E2B6
470D54BE700BE224803D3E2B73C58C710B6F14EE101A487477F154DAD7E92C05
0DE54E1CB4F03E317DC6049671C6068EB9B18914334278384524049D76037247
74A44CD5F883B23A76C54534B0254C9CB2ED7D8781909D707227D5C234921765
DCF253F21F50B14C49120C72B5CA39018FB199BFA54DC93A27AEC5A5821037B9
C8509AF0B1BFE402FEDDA8CFE7349C9F22C0103BCE7BDC9FB78FA569BE69656A
6657F5C63E65EF1D57A5284718E3BEB4A188657A907AE39585007BA73926DCF8
310BFE5D4E20E190F05FB064BBB2E20D9DC26DF904CC81BC60FFACA155E24200
ACCC4AB16C09F7AC47CB304A162FA21023AE30327938D716459E10BC7AF8B6E1
DB389085768A28989548DA46446C541B239C51FDB5273F450AE51E81E50B1731
0DD3E1E03BB2015FCD12B29ED73E005838BD5810F599FF5390B946133F969329
3016C8B8029668489387C267AFA4DFB5ED21680F3C636EBD9FDA56D1D1182E5B
0E4828246AC8810728E5CA6C2ED203A920FFFC7BA859A519E67BC343DE63EABA
D4D6CE7F3E60B094A17B9E32FE391F93B50FA11104FD571834C2B20C6A50A4E8
CEFC715147E3B97D9AE7482F975ADC7ACBFB5CAEE55BCA8F40AC489B27AF0A0E
AD0FEA6F760B5B12B52F2A62CCEC43ECCA59C9252375C98BB2F5CD206A76A817
D3069EFFA65E9C58629F61AE57E2904A2F1C8C319DC879CE1154E4AFB6588E64
9B63193992066154049EE561AFAE05E7F1785B015B92C40242362639AF028BD9
8776D99110D6EA844B8AE2892DE5E16C5438DC433AE64816028A757E0553DD37
A97B20B27518BC51711792206094B0AF58793D2E005EF7FDF1EB66E28CA2976E
130A6E276CB65864E3812AEC4AE4608A4E79C304EA76911F31D2D6D35283B4E1
CF03ADF3AACD6497C188754D5C157447B1EDE7F3BBE6205C7516BBB5008EFAE7
435364DF345307DD57E0BE9D64E052A717776226BBA91AE8D9942FA036A35888
C56FD288AA40528D02A8D5C3379EC53E7FF17D7B2B47BBBFF6F42663321DF9DA
A080016226E655BAABF6D764C2191DC9C03F5AAFB8D300A18848AC08B81A2396
F009C9166D9E796B58746F9DD8F43987DB3A80DD25F2A7FD2B1255FEB689DA59
F7A9E701AAF66D7CDDDCF3B32089FDA010CACCB4538A422027368039F9DA7209
CEC288FC48153FB3D3279A7A7C2AA5F1CE0C1FC911C889DE618ACF0B3E0A78BD
BC4B33884663CFA1E38423FAEF113A9384512BF396D12C0E985C1B0629C8831F
21AF5AF289922DFC0552A551A08087E2D1EA4CE688BBD80338652EA8A3719EC3
95985F77E601D0F9EE44FF25392BD54423A62E27A1CA2BB442EE7AB60CFDABB7
C780F123CC3BCCD6979935E2B563D12CA0ECE284040D68E3D7C04025B5FF709D
683C20D95FEBE60B5AFD4E935006411F9AD456A8D34314A3543271959249E232
BA0048413CD125EB4C6BADFF20981D36E1CE129FB69D62188D2166068D9751E9
B9EFEC7FC4D1A2CC7FA9A4D71B956BC6FF806BEF8CB3423744B8E0BB0715E91C
6C3AA3E2662E708557F32456CFB44ACA7FD5A766F0044BCEA7BCAF8C69A28D8F
A878430A267990FC8A050238CF191EA16E8B75D34913239608F834E246E0CFF9
A6C6223B72BF462595EED741DC3CCE30AFE47B0D9B54A30B10895FDD81C4AEDB
064BD2F44A392333310703A40E87C9DDC71C9233E956A3E379D7D9D1451686CA
B8001C6B429187BEE4C3D092E297E0834AEC913FBF5F6B6C10AADD9635F27F0A
5E6B4441A4108A27AB5D7B435BDD865A8D1F647A49414BC54120E03268DD2FED
215FB6031F3460ECE75C13D3E4277ABA3AE9706B6BCAE68BCFDC4192B78393F6
00E7788DB05854D5AF424DEA9F0D736D6651E6E0D815CDEE1A1CA3FAD5B476DA
A20915B29A04D61C113453C7B2E713AFFCA004936063D92ECDE4B7BFC583A9AE
E61DFFD8F7594B90DC54BA282D058B53C6B7A003BCBB962F0D5930EB975EF334
921A7DE44F334B1B4250EE17D87631BBD3B77E979739DB56A450AB5CD2CED7F8
76D168C9E4EF449C9EAF1BCECB25F71DC36CE4EEBC88C5BE3C836CA49DD14DBD
794CE9CC7E8FDD72451E935DB782298064DD435EB5005F8D5A40CC57B509EB58
7C2F97C23E119ABF0513C5E1B7E4D1654E078DE52AC52240669D8A65CBE175A7
D503C845BF8E28F8906E74AC19F7944FE1A04E9308B27D12E0488387437756F3
1A01BED6A9A77586EEDE05B240C5BDD3A0D9A16528C994EC2C599905989E4D88
2D7A3EF2CD2E51FD1935AF097E244B70ECB810E0526BC07AC4CE880A2B8E7909
28292BAF2FCA37EF6ADD6139089482EB8DC1B29711AC4747FFAABFCC7B20C903
32B6A39D314C76925FE3062356A55CB1ADCC3CAE7B2C3052299600A9F9E37D97
2DFEDBFFBE582A50034EA07E84B7B9D5CA148F9E71B2B4D9C61192148A54FBC8
621B3EEE713C9DE61F9F78CABBFDCFC86C80C316B418CC939A1100BEF1043C5C
BA937E5D59A84FB6659DBAAF349D8A4A101BCBA9FAA50B2835F7E6E4EAB248DB
5CD76857FBDD776BE197280F1B9F7757AFFADDF5EEC38D2016CAF48C23EE6FEB
86A151D42F04A6DD72030A1A0A9AB46229A1222DCC802117A5F7372FC3AFF63E
64827AA898847998D590131DCA386FD1EA1DBDE530CF2A2CF8B9A75B469D4744
1B66336469204EBD2B63803E9DCDD3697BF84C686279CFA56DD94CED9847C494
1BF28B0D8948F5B25A2CB01177143FAFAF5912E327A6A28036226AF7E01F2612
1F95ABFC508E21396ADA789C9033152A5A5D3C96EB7C81DF39665732D234D160
F142991243C7F4C85B7DBF3D2737FD342C51B454476E92FFAA6666024A4EB1CB
DA40377ADD726332B1ABD47256D10A3385F41C313DAC16525D8E97FA5691219A
942722DA8D864DEFDF29D2C28D15EB310522E6A1CE4D4A7C6394ED2CF8B07549
38B2A828F4B3D38C9CA07DF0651A993A5DB56055BFC9B8C6EDA20B5B590B9044
8701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.1: CMTT12 1.0
%%CreationDate: 1991 Aug 20 16:45:46
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 64 /at put
dup 67 /C put
dup 76 /L put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-1 -234 524 695}readonly def
/UniqueID 5000833 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660FE13FF01BC20148F9C480BCD0E
C81D5BFC66F04993DD73F0BE0AB13F53B1BA79FE5F618A4F672B16C06BE3251E
3BCB599BFA0E6041FBD558475370D693A959259A2699BA6E97CF40435B8E8A4B
426343E145DF14E59028D4E0941AB537E34024E6CDE0EA9AF8038A3260A0358D
D5B1DB53582F0DAB7ADE29CF8DBA0992D5A94672DFF91573F38D9BFD1A57E161
E52DA1B41433C82261E47F79997DF603935D2A187A95F7A25D148FB3C2B6AA32
6B982C32C6B25867871ED7B38E150031A3DE568C8D3731A779EAAF09AC5CE6C5
A129C4147E56882B8068DF37C97C761694F1316AF93E33FF7E0B2F1F252735CE
0D9F7BCE136B06EE967ABE0C8DF24DCBBF99874702ED252B677F407CB39678CC
85DDFC2F45C552BA967E4158165ED16FECC4E32AC4D3B3EB8046DCDD37C92FDF
F1F3710BB8EF5CA358ABACA33C7E5ACAD6BF5DC58BDFC3CF09BA2A38291D45A4
C15FF1916FE2EC47FDC80911EB9C61F5D355BEDFC9DB17588547763AC5F0B1CC
12D2FFB32E0803D37E3281DA9CE36C5433655526ACFB3A301C56FAB09DF07B5D
048B47687348DEB96F3F9C53CE56DDD312B93D3918CD92AF53FB9461864D11B8
0138918D0B1270C54873C4012CDE6F886DB11BCEA04B023EBB43E0D0A06BE725
741D08B9DB688731A6C9886C15A83C28DADCC81385EA239E045E8F3670CE03DB
9EE77ED067036595C9F3B1854343BE3A12E486B6E5A2F8AC44FA5378D28DCCEE
306B0E283AA444423F9A4FF38E2B56DCF67A39CEB2C643DAE86865517D5D0371
CB8797208ADEC637330A3A57902C9A88EDB75A7C16FA9850075D9F19578EC666
1353CC1FC512D59DFF847ACCD67AAF5FAE80E456ED4649DC8109FEFBEC0B6BF3
DFD579944A428E5D18ACDF1AEB226BBE2FBC86C2D3A039B06D3787E13ADF55D2
358254415E22E71E5E12F115784F4D84C691D51EFB1825209A51ACFB2D73E54B
DCE06D35472CE3670973C714A35C7A41722324C6AC90EEBE16BC3CFF661C3DA7
C7F9345056F79FD807D2ACCAB5714B4AC53CAB549FC199B56D94B96F0B8011FE
BAFB6F2CCDA3B88AE63FF581727EFD53D5E8D441789881B1A697BCAA7247714B
27596940714EA68E696465330D4A62A5BBC53ECE46A089D971257059420C4838
14ADEFABBDE4840B0A936CAF00A499E71C5494A589A2747F8704DF42CC5CEE25
28C0CD77BC991438F45305AF4E29CD62EBE43B32BD02109FC42982AEAE7C53A1
EA192243155FFD0858ACF340E55FE0B926B70FF952BB927CBD3DC8FF840454EE
8AC5793CE1B37AAE6FA675E71A7FB154620E50E225F7AC8D7F3F9194EC190938
C3B1F07AF81DEAC5963C7D4FB15932EBBC554AB7570AB313C247ADEC2A4364FD
A212C9766851F28856525FC58EAB082BCC68F352DC7A7F0B805752FEF11ECBA4
D8EC8803BEDCBDAC50ED41A1339021B2B54E96AAF4A23560571E726151F5B7EE
79601494F06F95249A1701938F166B57F7EDFC673A170FC1BEEFEE8CF816859A
40C8E239452FFCA7895CD07672F78CA546D18E88394E99C9DD2DD8334938EE4D
E4E34FEC4E44F8993D645FB941E175A5DE0D655AFF01C09AACAE5306A18EB9A5
07782DA966D7C43D45C30F54CC8B1B70E20F4EA1AB3141C516B7700B92DCB884
6B25F4B2540EC56035952ECD561B0D192326FD96258B5410C7B413D875560692
5F359CAD706A93CF7B22C598F0B712E0037623156B37D7592D4098736E0ED6B2
E9F4D76A3C83E6875066BFBED2E008DD8398C80F77F1E76C74EC71F067F37988
77FEB0947565E2411E1B282A510C4B0C80DE9DFF7EA43B246D400C7B322C0EB9
8D9D83989BE593DF2A1F94E874C7886D4A70D2AA75F994C13217173D24F3C4E7
358C75B764A5DA7FE929E98CE15AE3ACF0BCBA384CD6933467EC96426CE85E0E
E95BB73115DB6EFB8302CCD5867FC5219C87D2BBE0D4415B86CF749D3004AD7A
CA2B38CDBBFED1C17971BD566E2D6A379AEE57C0FDD5DEEAE5949CC7F578B396
3AC3660948F3819A87E46CA5D5BCAD9BF0EA0D91EE390942C89C80D009B99539
0E14BE2013A4B2C8CCC8A92E2E4CF183A3EE046170F7385A16E71BF679D85B6C
C3B1BFE5D5149885CB89035A9D5817A83626AC7899503F1937835E6B0FEF86A9
45C007CB26A9C6E3EBE96D1559113002F25CDF168532B1FFA247211E2CF42750
A72146BA31CB5E212FFEBD523049292CCB55EF2C5D2D5C6E806052F221135446
91E58139F2FB365B1125D326D1CBC84A6500BD4602C84CDF9E7C253D163B1B1D
C3B16323635EA88C1DCE3BB13E72769FD581E380ECEF9EDE7B1F2599F5D885D1
0ED8CB3107D7A3D8BC3714F221FE4996B864EAF243A752EC26E0291357E4AC12
412E7E9DB30FA3430B72DD69383AEE228458EB1B2796B672EB3B61D6B32978B9
3E4365778C67703EB4F68D4A615A9AF0B3F7E4D38D0549B389D79FD044585CCE
5E825C1D4948719F88E2384A41DBAE3E1C8D042080AB42525E9480C22A44F282
B3FB368B787FA8792984BE527981B301598080AFB1A652FC1EE0BC4AD2985CA9
DA85C238EE87E3E065F927959A36FCC3BB9203A5F843FADEB0B75539EE9522F7
3457454DD5C197E5E5D4C4D2D7BF3DA13C787BB917BC9AA1660C584DC0D927AE
EED01C032086893A15FB6D18C027C7379D9E3E56E4912A6B8E972756393B12EC
F0C5EFAA161A10A4BA5023E06EC90C25527B9C02B135C78D37E4C4D74B43AAE2
CE30FE65A63CD9C38B911B1280E3BAB5BD4CB96FAB592BD926EDEEFC085E5B08
F8E2B504E982ABFF1E8A422FEDC93571BC04693D4E9ACE27881932A1B1C07D51
BF66F5FA87F57C2FD07ED2AAD1C763A21B6726AFB8FCE1C69AEB2CC849E1BD79
4FC394DAAEE92C4569CD7B3E1EF6EC7AD996DE18DDCCCB98F678D277108336AF
10C0062AA471243B17D4E98EC86145CF2077DD2A758D1A7D35A4B6B5744EC1CA
764656673C349DBF2834C8C07C7B3844CA9DA7EEAC53BE6C7AD2AB0C6514687E
DB58F4AA9B602AFB90B25268B746BB608A6449E66F9E8EE6F9479E20725A35AA
9627C4EFF815BE20C79F7223951EBD5023FC4FB7D2422681D2432366ACA9CCE1
8A689941C2E14BCF89353C5F8D736C44A904C2B424F3E7E2AFE49CD8F2E06B64
24752AC7ADBA4D8EF15F2F13F83C1EFF2B79D97D84A7D00E68E241679C21888E
E6A77CE331F0B2AEDCF2B6D9C804D8B0098A095C2EB773A61F7C1C82C99BA8A9
55EB33BD556F9239191A4B49AF6C329E3D8C13F370C1BAC8C4EF3891F83CF71B
898EA4A754DDAF92EAE557EBAAD8E5F62EAC540F0D88F15CED2F80C321139210
74CA21973C61CDFF7BF356BC9A0DFAAD06A32709C189915E7EF5A74A00693BE7
DB200D63B146323AF3EA4F89430DA89CC65B7E18D7CCB8964C3FBD5A2F978EB9
297D4C02A3F5E4A92D77C3BB3347AA9FF3522A20FA1ECD398C149E8503C9DC7E
06CB63A1D4235DAB35651521F56A4C9102835DBF3A1CB53955E0DE36B0F6891F
3F87D136938A2CC4262C71429EF7B587F6FEF0FC4294D265C15753CFF72EE630
72E650606FAAE5E23CD87119ED01DD3B7EACAECDFB22CA2947551A02681EB42E
9B946A44A02713C477865B0D259E0F1EC48AF4FDCD1E56811AD5C51A95AF478C
F5F5ACCDCA06E76B6A5F167289CA6C2997E981471F21300328D977E4A696B39E
EC84D33F8EB99A0B32484E4FB1F08436C98A0E911D6D2B6DD36167CA577972BB
90753DBCEA47D550F4651222A45682904BB045B2C9CCAE190061809F7A47C78A
C533BF80029A1869F8C8FF14472E9BB22D19B69F86F2DED351D2603CD2F86DEF
4366831BD1814DBA88789478EED0AA3249B60A61EFF7D7AF594581800DADE530
05C94B11CB2F16DF12D7768281AB6F6AA63BC53430E299ECA41F3557FF1AE871
F802A826E335D42BA8A0F3C9420C53338FA3030B3B1091FBF912D72F7F0B5491
E6BBF12F28A14A9F5417630E0B46D126C2AD8BD9FFE2BA70B88596582DCF2551
E4072556E7550A2350F59F884C09A3E7B03AEA9F2596D39AF2249E3424A421E4
4A0490A3F05088DEF5D1F0BB8D6170490E39BC1D620FAC6487B404CE99545767
8EC02D0C11F877FA3A371D80B40F08DD5E53D4CCCF4F43559F05FC52DBAF721F
F21B27530C433FC982B9182841BA84F0A1D6A547A7AA6476ADB1D19A436FCEF5
72979EC45AD75074A75408096BF7B0D273FD767048624CCC6D0BF523FA62FBCB
AC176E6F7C79BF7F45AE25AB45AE08E5EF9C4DF353D65E5F2059761E23BB69A5
BA421F1839B16319D18D72B425A5FE81E7A6ABA0778B51AF96ABD24CE9ACB864
4940BE8B16828BD8569155CD7D158B2F24E2703A98120B2AA094914451AE8A32
DAEACC4E250BE9905AEC986863BC09A5FA0A753AA9D62E330F2A51FAE4E09D26
649A6E4EA480B5546B1D397735CCB0407D9657C5BA411F57A6A42B3A5DE7C96E
CCFE1FD4430B1559ABCDCEA88ACA55351405ABE4979ABC7194F71EE70551ABC1
3F6A7583CE16893B9CB860341E01730197085E5384D1636E2671ECAFF06CD8CA
C265FC600679433C2456D253D673F189660B4B4B84446E5538ED36B11A7922AE
1275410DC192C919733358D754A00489CA9E9E90443ED3476D878556478A7649
8DFA7DA6030227AC502B5FA30DA30BB941F0D25FF73A1179A2491CD8DB8D07FB
4AC77BE0FB3B071392C2AF07A3D73630FE2822C05E6827DFD0AA1D95036F3635
22360EC5215576D3E36DEE5CBCE25F31C5B3D5EE80D90878CFADE4CADB85224C
D200DA0D0F3C26C52819EA4A6A1EBAAEABC47C8233CAB237DAC00C68D600BAD8
938BB279AFD132FAF18E3D05A85BBDE9A6C7A7A0EDCE93089C4F005EEA8434C1
F68685014205FDF2AC38E610746F739D23252AF2219664FF7280E1123355DB8F
DF8A408A0E91B28F1724C53207FE27BE965A4288CE10D07DD817B3A0BA2FD1F8
2BCEAF897DB3B4A3F1967A7F91528D997DD3D92698DF2E719E7F0AB885F6EAFE
DB01CE364E535644D374454DAB0CF89CDCBE011A11B2FF4AEEDC3FEC8E657F18
DDC885485026061D3E2F7A6D1ACFCB6EBFED89FAC42D0678CBCB8482E3684D7A
900F4B9E171D3F4EDE888639C5AA60525D37FB6C96EB3781BAD6335B5E5EECD2
3DB2DA84CE6AF1C258E5EF25FE678DC836661B6E3CED3A3A6CE3AEB16612EA02
63E9D4A1CB84F4AADBFCF2A300A6499E38679BD6137388F09A1A5C82470E09A6
998AF8EEC9180642E7507EA5FA2453BAEF0B0D466B21AE286C6188E57D54829D
99556F98E7357BB3FEE665465BE95DD66300828B2E087AA97D88705E9E582CA6
5A6E9D0530FBB52A114C47D9240DF9F6B448A9F2535E93BE7059B0A4DA50B1B8
0B8C4257AC1A04ECD542F0868644BA933FD50D1C5B0AD1EB5CDB3F780319768B
752085439CFC97252DB4E1D05E7AF6DF5182DEED3FF2CDD47DDAD7BEB5DBC793
50B4AC78FC9302B15D4C86BBBB535B3C63760F7E1875EAFCC7AF835F22CA3893
F44A06B855CE2C972A7BAC406AB2B76BB9EB117DB762380510D6096FAC35751E
A49A408B592755E242BA74DFEEA5FBAFD8858347AB62926B10433B9094AA679C
82CF86D1DFB6E615E8FC6141773DB1F177BF60FDA48D25A7AF645051C1E3164A
66748BA1D855F88832465327C0C24DC1D033C03A0B0DA5B738BB9EC57FBF6591
A8710FA073A6EB472ECB13EEC433611AB95D953D55F88250805BAEEA432AB178
41B0CB45C207028A781DF70AEDF7E6C35FE3CDB8FFBDAE8AFC26F3CACEC21CDC
CF3FA5DDC7855D71C8559A062CAD03305762CFC0320FF8B8B86EA7297DCE17E0
563C6CC7EBC71E9867FB1B9418138BEA82AC7A45E257FA8616A25662E1139EE8
2D317984AC341F85E942A23BE6C17A99444AC4522055371998F46753215E9BA0
E0E534E637EDF5BDA9EB806A4929C80A53E5B2C13999B8F5B29B9ADE14614058
2DCF9D9806199FF424F6EB2548A4E4C4759B25BA7F9B43564B7B655B25BB1923
921C88D468EF83235C1226077874A95453EE293355CA6B053DDE5C7CEB22FDC3
6706BB4E5EF2A89B2E347A4D3B5BE9B75A69DBA801D71ED7889F17B838C5CCE3
8A6108FC0C9CD873BD0C7DB6D4AD7B4BDE5196B32E245AD65A3A4556DB2A3BAD
033EF53B5AA808C14C38856FD20F6E225F8890E492464AB1E0A80D403CD23C46
65ECA6E63F47875555D7BE4079613E07220F742811335D228D8798C3CA08EA77
97349F82375DD668C24071FFA0CC49FB4CCB8378D3C5BA6A177D71F3D1D573EA
BBC569ADA520917B870786FC05A83B5CCE9A77A35113389F22E26DBC72E2755C
8C9D3B49D1E25319364FC55FD27A4F38272826AAE2AA7DFCA2183AC15F1A5FA6
983CB380C8C03CE89E6B082415BD28E4E44832E07D26DE32432158E2C6511A77
8F1E2881A8CF50A58244070A408CC0733130FC48E2D7F7C40FACF9C649B4FD32
40B4F9BDCF0EFC83BB15EC33494708F83DEB84A581D90E362777B967D1747410
ACE0235287D06666351EABE8137146AC39846A6473ADBC846A529CD2F47A90EA
9F3933434522B2AE4D82769F2BD50C8E6DF7F49DCB0572AB001118FF9BFEED1A
3ED1200FDBFC5E73775996A321AD41D2ED29261E28C2C770EA0F6EDE9B770620
D6838937A20B26C08C6B3557D3A7BE0EF28E10B6171515A52A5DB7549020CBF4
54ED4A92523CD22CB8E032CD1EF448329F39A370CD1670426DA04B2D5B822AE4
FA5C6552C2F91C3585AFC79E47C664098E44F9B7D4E03DA3DB4315A3515FE324
FC11440DA28A5BCF7DB08C9ACFD22A6B06CE2FE652D483C4648AB0F7F76F1A70
0683784579F14A080FA03AD6CECD7FCD295A2D76E41551A8B2ED02FF6DEC3B3B
814885FD9E0EA2637257380809D38D290414B7288CC1F4407B80C8A73FAEC2F3
C10ECF5EE6D727586C4B657CE12C53C3DE19C04ABF980E1681C9C7785CF5F8D6
6A9738ABDEF47FB9BE92218B3F7075FABF91ED91C1671CCF589B4A470F8A9498
8C8653FFA1FF1E8897B3444919940C8C761D5DE6C9FBECA4592BDB94957DD8C2
A981388266F72EFC10B250A3B63131330D40A5E225278BB2A379542AAA63A519
4D88C0640871B73A33C98914712F95D95899BAAD2890AE54927381CEEE2B5E55
6781EB5AC5DC29E3E27BD3A37880344E101EBEB708766F9EAF1E0CED61EA8E99
C7EC71B12ABBD12B12C9755F873C04477D821FE2AAFCCA65EA7D6BEB4E531DE7
70CCDFD8B7F30218F2873150543D0138A262B77A3AF3275F8EF99220971E9477
BAE6E336422A99341E867DAA78A8073310819E038F9A1C821967F3C324CE252C
0AD633301484ECB0DD1A44AD366FDDB5EF1BBE1ADAB86803C939A3D9CA879F9A
5C64CCB364F9007AD168705B84C3948FFE7A9A1E5BB4E8D11871CA9A6038B215
522145EF0B4EAD6A5FB94C54D3B35FF62DF9181FF386C96FC41BFF91E6DDA06C
1B4BF51E5BDB52A5C56D86A324ABEA733AA14CF10B4FF00A6291BFB685D5C385
B6255F4B306F5708CF8E5C0DA518AC3DB307077B375001B70226592E7F9AE834
78E6310E31247CCF8C701D8DD91594FCFC8B51FB5652159413B0787231E61FE8
211F955C7503240BBE4D69D21EB67184DD46EB622E2B67C8D3B6403032804547
96575B314F10824A8EB2E73F9D7794E20879210CE2E09185A66A7936507EC416
EFCD819405F57C26DD21F1C5645DE7FD82631B0E550B164AD8A134F4D3843A2D
597CB34A9280D77DFC2E08EA2559EED31A2525EF72A580EC7F803F8CA046A43F
3B4EF7BB10D3B7361748D911CA5892F5880E921BCEC0D80A4EB0B7F37B6A6F1D
4ACDE3BBB2BEA74D58230ABF0E63A39F6972F2B358C24A0CEA566E0D7989013E
95644C14E12FD56CBB5BF293236E6C3A8E981DA1F844A237F0833B6ACC1F7C8B
CAFE8C84CA5758159BD746C909CE538ECDCC8AB38E7537A3BCBED469BF5029FF
D1251397F2EF2A70450A363F4535625BB7C50539A51F0F6783EFE323B17EC99E
1851BD22C511F7E72D162CE89B30E9382445E088F462CD022B0F308C5648EB29
693B400B7469EF1CFC8C5625B39679E62C1FBAE0739947B9656ACA7ECFA876F9
CAB88AA2157DF56C06B67A04E5450427BC5D7C3D056D9F7D8B33CA81F4A45BAA
9A8D30C938146D8939CFEA1B9125202A02D0993850D716AD9AB3ED82E0F7982B
5A27CB44298701D5150B207E6B0BE9283D8CD89ABFDE2A9BBFF2BC01E9649E1F
564C0D3A93D450DCFEAAE0F8C9D3E513CEB90E535B54C69F4235BFFCB6E21A50
CA91DD8D12B911BEDC27E80263B37B84E0BA764FEB2B2AFB453A7A4041C4BA42
EF5D92B9F9B4893E0AF632B027E25F625C77D45D6B3B5CE63A4FD133475CF085
C071A2DBED5AE0438630BD594C0D97708CC3D04111BFF6CF77A6E268EF89CF83
2DBB37C4593475B317DAA79AA07872CE69D198B4EEEF9B57C8E3BEBC15CE96E7
FA4C5C7D8D35CB0A61B0413D803941BDCD3ECFCA326C4323F4A058C76C57F82F
F9479FB226839BEDD5CD9684E1006762E94F0478D70CE592FFCDDE46FBE90DAD
BF895A08661B9FE2ECADD8C8830D24C1AB93D3085369B6BA974DFBA77FF24716
C1D4C7F58D6A7F69D6E0A64B5A9CB040B43EFA36E462C5F9C9E4A160C122B5A6
E17A5541FCABDCDCACF6E69750B8762ADDCA9EB328E05FDB1971C813B57BE493
43C0506B97F7F273D60858E5C6A388A3D415657972E8B1EDF2F778F89681624B
4292B6344F1ADD2FC5D8CDFDACA2A619DD989C37064697E67EB6ED807F9BB4A4
62EE3A0A2FD3945B7D06855F2B4EB7BE8F6F558F80DA9D28F91EB0D803B82CD0
FE4EBA09CD2C6E04FA69BB6C0C769D507B1C27893F160E739951F1EE7778D3CC
2D01D9A234EE245C0A28290C4F39D340B11B7385EF5097FA4A194B857C874539
0CF6758EFAE863C733EA85DA8BA7B214C02A676DBA8100172162B1578A1BBE87
1B25B53FB064791BC10CB60418548F60B51B3C128BEC7FEFD9EFB713E95DBA22
DDFE8567A10AF98459E3F5522232E0CE396C6AE2B2A773F070DEFCF46A5E2432
1D4AD73A6FEE35511FA6169875FC6B089708343B01FD0B0E4296D370C059E589
D4FC94FC189E0419C9870F706A503EE58B43364928917639722CDE0C1EAC8D5A
CAEADAAAFC0909B20DCCD7E224F750EBA320C7F73E3873448E219307C64AF933
7A735AD3AB6FF862B2B200AE4647E27710AFAA2B412E1B9A59670FE326854494
3AA4253D5502149EFB93FBD73CEDE7C91ECEEC23AD6CB799306DBED2013C32A0
716358E29B3028CC5BD612C640B20E3A335B54CD52A3722670F633CF46FED723
1478222935EEFF5AB25E32F7187977F58AF90A6EEC23F08498C7B9D08BB0DEB5
E43445B79B52CD67EB9F8C3F50FE929608C3002E310B2A95F5CC00888250DC6C
478A116AC84FB51E7DB76A1ED38371583CA866C64EF8797822E4EA7BCA2A095C
E9A4F0BA8C78F943D92F9F4DF824171A2CBD1A0F84E5A28A1D28B1E5C84F2519
F43AE6E63F0570C7B967592096C5C865C4C310C6C3ED611E205B52654359C589
377D73AB0813D68F10365CEE327E1B654E7F65FC134CD6E9056D6C35CE08117A
15BD8EC4E6293A9F7B2485B7FD5D73A7713F7B0896F43026C975D5843B11E25D
205DE81C13F5B9D4E020901EB318B4A67FC0E024FEE732F6CAF6B7B69F3EDEFE
EFD2DBACF112E0476F8E1A4272D91329C21616119F1650DD29B76BF34266299A
51F465735073FBFAEBE0EDB9ED2745DE486BD9E7C73F2234BC1B91338CED238B
97B120AAD040BB69CB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LASY10
%!PS-AdobeFont-1.1: LASY10 1.001
%%CreationDate: 1992 Oct 23 20:19:17
%%RevisionDate: 2001 Jun 05 20:19:17
% Copyright (C) 1997, 2001 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.001) readonly def
/Notice (Copyright (C) 1997, 2001 American Mathematical Society. All Rights Reserved) readonly def
/FullName (LASY10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /LASY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /a59 put
readonly def
/FontBBox{-19 -192 944 683}readonly def
/UniqueID 5011949 def
currentdict end
currentfile eexec
D9D66F637A9E5292A4933615152D29EEC26E1BED2E48CAB7AC058698EA30B07E
F8BDB66981B14445E1107420FDAF32EDBD5C26E35B334E3AF24373B2A13984D9
1D56801ACCF98612DE2C19685E0F4D52369AD642D169AB57DAB10665C6C01538
4E7DF30628B47D6551F93A50553E592B5E1540B411A313F39E4149341C981D3C
705F8AD7782F59531404B3C001D8B882E0C5468D00B26040A352ED823D7C8DF4
B632A37A034C6304A39F28739AC3D634CDC707B53474E63135975E7F0FFF2458
99878B3A6D8D7AC6F2A2728768B8C2226075299B8CB08B76AED9A00BF448A646
87014E8B1C1723204BCBB97BF0F735E436F1805B4026CA792A2464E1FDFC4385
B407DAC19BC7769BBEA6BDD0EE65133044D18530C5A3915AC9272AA4A7FC35A4
93A7A0CA8BD1CFA4382085D949EE819A51062591606ECEB5B37419223CC0400E
158F1A0849868CFAE0F71DA6B4FA47A636EDE756530425A6BFE45B8080808B59
6B886D033437677B151285B047C84C2E2FCB71CCDF34E20E925269E5F1A210F0
391066823D8F21E03746BF79AAC6FF91517631686722226462D6A9EC5FFCC806
B959AED95F492481324749E00CA117821C347F9B924BEC8C64C954570252E909
5C33AC8B1320BB1992A88C619DEA7A8FDDE42390EC82A07BD8BB7F0014A41EC8
04225B5063D3F04723F51128DE8ADB79F62903E1955A7D49220223CA34FDC3EB
8FB71700EB9CC40DF747C4CC60AD11D3FC038CB2051F7E97CF7C7F7D0F49CA1F
E0FEFCE664544CD1F7C23B05BA649D373539E7BCC761611C17489084912F77C3
5FB3BC1E91E2B4A47C27BF4989C7703E83C5A505108037DE5006D4F510B8FE1A
570E42E4569FAEBF66058F9D9608A771BEACA2A8AB629DBE939CCBBC116E8BCD
BEC3A33CBF185A68DB60CAC5B21AF4D9B46B3FF4FDFBD6BC3C8101BE15E79245
F0CF8F670CFA19ABC08C34D85B10C17190497EACEF6E401F322B1E281C1755F0
BBF9838AF83A0A1601D78E78FD599819762347A77C71374AB428093048E3F1C9
40CFD63B86C7F70BCD2AC3092DDD3BC91CA714BA28263EB863D5E6E2DBD4FA08
6B22C1D18B16D7042219B9F0BDF5BF10AADB658CBED51C8B272E4DFA11C5A603
8B4A437EABAA699B86819EAA072F7D90A9CE1B52287DD3D26C470AD28C07F7BB
F6BA9450A2EE874D68A3681162DCDC7B1D77B3FAD31C60C18AE2E95C0ACB3F15
6E70CE03827B51FCEA99B5489FD7B9E20F2906C76FE1494CD7C60EF82BF97CB1
917540DB14584FCB0834C1DAEED509FDC03ACDB219009BF9B2DF338980A81D44
25F95467F4C9F2E079B97DD1345FAEA7BF31325661DFAC0ECE2184B77B4D4BC0
3EAB626D30DF1BE9B77A1DC5BCD5D5F69E36F357FF7073072207C7D119FFF8C3
3D8698A9D6E9FF54EC3D9EA02F339D1C305BA3B3C269BFB06F5ACDCFF60E61A0
17C063BAFF168F9BDED3B26BC1FA69963F853FC5367C08B77D3ED5034880C765
CB9B0028F6AC7E9966C7576F5540FEB699D21837ED59A43A9EEA90871C3A6434
0738DB2FF091F941D4D3F0F89B96553FCB4DD7F578C71042791FCCC0946CED2F
91B6399A51C5FFEA36C30399977EE83777C32F912AD665977230260979C271DA
CC5434011E840A06A3F46A755C5042D71D6043482EBA9F5A24111B823B2FCD39
AEFB0E22CC249B57100C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.1: CMSS8 1.0
%%CreationDate: 1991 Aug 20 17:34:12
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 120 /x put
readonly def
/FontBBox{-65 -250 1062 761}readonly def
/UniqueID 5000801 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B17498276F99362748F6E97327D
7CDA3F577075245561191667923D37830EEC37A0161B6A3EC8FDD63CDB8C8D4A
AD39C69A264813FA79C25E85AC95C71AB965F6C14A4A1ACF5BAE27A5F628B172
47CF6A12008558438874199C237501B72BFEFE64B606A327623BD8B217E8349B
7BF5C2204F4DE2FB269845D5714A31151A66064419CCC46A63F8E54B92B5070F
F3D80801DBEC658CD3926B15BE3D4B7591FC36663D3C03926D0D3637B53BCC22
73C8E0001B416A65FC67C53383458DC125FD14FFE391BBBA321B5AF5DEF85DBA
5A5FD759FD2AAB6AF31CDA6202EBB763E3CAC1FF91B1175EF818FD662B60C642
738A3B4F27822A0560BB7C08AD42F976351FA5225A0E6D56C7FBE06A809CC468
FB2E90C84FA56C62CB7BBFC80BD94F5C6BC0EED14433A4A356D2D15DC87B34B0
99A100502F55A32D736757642F9F9719FD9E35A1430A72C254614B4000113705
5474FCFCE47A6978F69FA467B818309E61598EC18089BB924C393B3FF1280D72
E1969BF5AD3D1074FF13202D4CC324396BAFF2397DAB2C516C656B6B240F023D
0C28AEBB957C23012C971D444DD1C4C2BD7DCE178D46CF8EC20DCAB9A930907E
124F3B3B8D16DBF166BA40CD780DE2155BF21EC2C3E0073422E54A09DF4A9491
63B55882122F6B40490D81533CB0E16967E32D4F5B5D5D14F578BAA0137704A3
2386E6AA4E3D160559EB245625253380CE64C30B41B573D7249B0B6157B02EFE
0D82006B4CF4A294FDDAB5B87CAD0B2D3367F9138EE0922FBDD3D7BFE4C6B297
762F95616A75D0FC2D2E22D79172DF1A3287C67BD27658A448FC61077B3033AA
5479ABBF5CD952B5E19E437CD642CDC43FBB26115DCC019FEB3195F4D772F9DE
D31B6257F3C816A9C800124E1920A104F1B4EB4631D408C74D3E8F48CC745EBF
B8B75038B48008828861E9F69CF64385BA1BBA162F5012979339D790769D0472
A0DD4AA9394E63B75A791FF2C84A03573619819E2865F8327657A9CF312F8C58
3E173D2B57BE4DEDD3C4714D296010195F87A03AD5ADEBD3113CB640DD46DAE8
E4E4CF00759515BE91760EB7931100A97FEB5F513D5B38D781A2C3D785EF3F03
5091848DC323A03B1AB0FBEBB76F5097231D06C03744AF751FAA51EB0B1BD14C
D75782DB4BE344E7FE2B290891D05C59638833273A0852293D794666917C7DE3
9F9E7EE37E9FB6221B208A1F2446903082853CA08917B279EE3CD6CB1812A773
62697EED87212D27EC1796036D376870055631147CE3FB916805E7A6625C49CD
E6603692994B249611FC94B2B4DD8A62FB2837A6050072EE71DCC6F790182B7C
EA6BA63DC582E55CA9FACB41ED52F2F25BA51D07CD08CD73B28C377CE9223715
43FF7FD0152C35D63F4DFB4248A01111181D25E34C4B705EC032B3E5DDB4CD4A
72E312649D055D08B486210A022FB35574580DE74B46D01F6B9665C6AD134492
1DB72FF0BBDBF2BE9C2F0480628AD9DEE26555B6C308328DE471906FFFA3E223
C6B52F6F570577369971F84294C48908EFAFFC915FC679022B957C1B843682E1
2F5CE2529A692A1627B3F429E991A72BB5F539E2EEB7F674F416D1B309D8DC12
A467B9F31A521AE743679BC854840AC9401E7855AF307E1404959272ACBCF7E5
2E6619CAE2091D5105752B194F4E781F3802CA33A539B69BF0382836850254B2
7BD1EB7D14246367569E78B99DCCA454FC46AAC61C5405C1D53889F65912EBC2
BE540D783B8A7B65C2A07C4C9089BBCBD5FEB066DFA8902DC402470C0F6CFBC7
24C4B02102B8242DD457EB25B29197C5FBF1847BD93923CBCB9FB3C5A42F530B
E4FBAC92A0B351222D9332A3B15503F4A7CC44A391BE7B9DBBA2CAEF5AC0B646
B357F5188FF627D5A79008A0A9C6B58680C49740BCCE17A5FBDD4EFD7FF8DA10
3DE2A25A7332DB7C18F200B6E30C8EFA0AB70BA37FF3F9ACEC9BAD148777C901
0BFAE37458C4737394471E851507F7C3D8385837D0C9424281083B9A4A6F0797
333313C29B7387EE5E7177269A75749ACFC4070E535544DC2E547EBE353D6D13
9B3F84FEA50BF18AC851876FF4D6583B6E5D79ED21E795D4601BCB100DAFC270
0312707BE25A7761FFE5E364C3BCBD183AEB36C8EDCA044979025FF4B348FC4E
FE841C1E72954C60C0BD5F0B58679C28E3D5F98E19C917BF96ED2D157E2B8EF6
6E1B9CBF4DC738B8D51B5500A3D33D15777925487D4FCB05EBA520C110E25569
B7ED30ACF8D64C93FE78583D3FBEC83BA20728AFAED3F6609F9215C239E2D711
A9A4EFCCE596E29B929824C6E483D0FC918328A6CB4EEA2E706D9FA66158D315
ECE47930E1A39A4373851ADE289C5F2173542C79BAA0432883D0EFF58A61C50E
A968663B132906996B329251D9FEF84169A24762A4A6843077EC34EDB990FBC1
DA692DE385B1A833C4E3F68E416D5907B842EDA0BA701FEC69DB0D5A0CD4F055
FED0E8CE83C19F7EE60C0846342BC6BD0B0088379888D9B022E6984AEF1711D9
A0D01162E3FBE3E323C67843F3148824192EE5D512F5205A25C0A050D9DCB861
F1310E5996AFF8830561B292E661C344A7E5661F046CC47C3C30E54C77646EED
6D4AF3F45D51363C9D0036E35125930EDB499DA76EEB01C52D49952940F04C56
E7C70CC96C21D950A35FCBEE4E650B5E3C28D23DFD027470A194EF4E2B92DA98
639738AC46D637A31775CCA137870ADEBC9EAC0E6F0B3100828DA7CEA8D3C4FE
6A050EB7B6145DF525C0965E81DD3C7C0A66FA18FA29DAD279295B8091392129
9EC22C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /bracketleftbig put
dup 3 /bracketrightbig put
dup 10 /angbracketleftbig put
dup 11 /angbracketrightbig put
dup 63 /arrowvertex put
dup 68 /angbracketleftBig put
dup 69 /angbracketrightBig put
dup 88 /summationdisplay put
dup 104 /bracketleftBig put
dup 105 /bracketrightBig put
dup 121 /arrowbt put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
/UniqueID 5000774 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CAC6A7BEB5D02276E511FFAF2AE11910
DE076F24311D94D07CACC323F360887F1EA11BDDA7927FF3325986FDB0ABDFC8
8E4B40E7988921D551EC0867EBCA44C05657F0DC913E7B3004A5F3E1337B6987
FEBC45F989C8DC6DC0AD577E903F05D0D54208A0AE7F28C734F130C133B48422
BED48639A2B74E4C08F2E710E24A99F347E0F4394CE64EACB549576E89044E52
EABE595BC964156D9D8C2BAB0F49664E951D7C1A3D1789C47F03C7051A63D5E8
DF04FAAC47351E82CAE0794AA9692C6452688A74A7A6A7AD09B8A9783C235EC1
EA2156261B8FB331827145DE315B6EC1B3D8B67B3323F761EAF4C223BB214C4C
6B062D1B281F5041D068319F4911058376D8EFBA59884BA3318C5BC95684F281
E0591BC0D1B2A4592A137FF301610019B8AC46AE6E48BC091E888E4487688350
E9AD5074EE4848271CE4ACC38D8CBC8F3DB32813DDD5B341AF9A6601281ABA38
4A978B98483A63FCC458D0E3BCE6FD830E7E09B0DB987A6B63B74638FC9F21A5
8C68479E1A85225670D79CDDE5AC0B77F5A994CA700B5F0FF1F97FC63EFDE023
8135F04A9D20C31998B12AE06676C362141AAAA395CDEF0A49E0141D335965F2
FB4198499799CECCC8AA5D255264784CD30A3E8295888EFBC2060ADDD7BAC45A
EEEECDFF7A47A88E69D84C9E572616C1AC69A34B5F0D0DE8EE4EDF9F4ADE0387
680924D8D5B73EF04EAD7F45977CA8AD73D4DD45DE1966A3B8251C0386164C35
5880DD2609C80E96D1AB861C9259748E98F6711D4E241A269ED51FF328344664
3AF9F18DCE671611DB2F5D3EA77EE734D2BED623F973E6840B8DAD1E2C3C2666
DD4DD1C1CBB1ACCDE9DBAEDA5FE0BED42D4517BDB3FA3418E0667E7C0D6763B9
5166811E13C04B43FD2AFB91100F8BA4F3EAA56A7BFA034B06BF19CBB619A856
5F2E459C2B429EBDD6D5BF464486A0438D4595C9EBC4A8542461E7B7E680809F
E79B1000497A31C70BC3A149786CC01495D1301A06C686E39F18BF25B869089F
EC1269EBC7BD44CE9E04139CF660BFD939D9196E2AC37580CC238A3ABACD615C
1142298FE61B28334EA3AABBB0B8147BFF51E8617E4574E27A57863BC42BF971
D9431190D30F79934C337951B8732B0F3237F37645E639638CC9DCA16BA56843
DA62201FDFD7BA8CEA7499ED0A3F6E65DBB20C54B92DA5392D4E0E452FA64094
5C777F392BF21C68EBFC19D05ED1D0872ED427F8A6D13EB79B3F9688A3076E63
66C91BB5C25C687BB33F085D08C2D9A82BE5F2E64DFAA73B2D0514DA23EA0E9F
494030939A30C1DAEA6726C49E6B58FC3285054924EEB8C2A89364B0C5E0DCD6
B261EA547B7B13C8A384F785E8F37C6E4BDDABFCE9D6E46BA6DAA31F89D40687
28A200B06D9F3B63C4000132A64A2B4165C538264EE729827F42DF2567CA6740
205F154EF9135EF88220DC52E72B717D941085DBF3DE37454F1281C1B0AC96C7
511D16A459D6A2E78FEF86639EBD59ACA5D3E0B77D778C103A60886ED065B075
7F0196E279AC7FCA31FD08E212079502C3C5272AB07E48A71D6CC35F2C0FAD5F
5C022681CBAD39F899575AC62F60318A2D6392634369CEF6F70FA4E7CC84EEA2
23ED0546A2ED80BA86F5FE93B360E2D47632F26D85F04D866F84F3A90DBAF22E
D8846B94173A56918A2F3D966E977A621AD39EBB67AB682EBFD21C4D80407C50
284489735A240910FCE805AFF183C8A2D83562EF5AA71C44FBFE901FFDF02054
BAFB1E3B46C8F98F85AD98842602986F129FFE8F5B6E5C2A6BB5E85B16593497
2E111971D70FD6FAD3A756C0DB6AB7CAC1FD57E86AC2286ABF59AEAF8C4C45C4
9C27991DADFF597A14E123817122AAD7E19353BA89EF84075FE157D949C4FA94
8F87445DCD4436510E2540E37195632F4F39E31053559B8EE8062DB734912100
1EF2D8D3A846E80842F2B0E5766AE9565D07806D23DE9F3643FB57F473149D87
FFD69B9E8369CFD2561BAB9ED7F917FE3CD69BBFEA801191F6CD01934378F271
B7AE2D443BB681255833E9B0FE07742EDBFD716BFF1E2FF127199B636EF255E2
E777EF4FDA97C16C47F1833A237E6D168EB142E432919E824682C8A828E94C10
5756B85E5A247B8FDC8224917D211C6650D76398B4D67E12DF8C5E5F4B9BDD6F
4343CB1E19695E740BC2AC883A22C123AB4CF2F90ADC5150B8C19EA7C3ADC8DE
645642316B8F1F0E1E779B16CE48ADCD41FB9EFD26FE3A606E110DB778B9BD60
2E2D363CC5B3B0AC0E1A9FC189322596FA6E9CBF9181520D044A1073BFE4E1F3
156CAAAAE86C070D3D416B35BB699EC7CF2E993DA172F9A652CA477BCC96E69E
A75088B0C7D3BC65DF51B076B47756228726C34B6DAAAE711B5408CE1FB9ED27
E1446DE68F05ECDEEF814D0308D44B9EBD11CE3B3172191C7FBF0BCB62470A7C
38C5560BC4CC454513F3F1DFB0A7F6B3FDCBC6D182FF3DF09E8D6F0F06FB7940
1158D6DF7533873DA8445CF5BDEC3758FAA2D8B1C713661A46A018B6A8A4DB18
48DBF98474C06514F4F44E60F04983411E2237AE53C29513AA9F45C8B32DE4A4
058044FF57B6CA8821FAF438931BEDA0010A3813C329F393F7A962B43E1C8D37
DF6E4EC97FA79049C7AA9729D216BE14034D845C538DC780238168F1419C3576
774B2C1142E41E493925096BD0EA762B7926274E43A1BB3C1FD6689A0658FFEE
D8F28FF31915DDD9AAF7C909302D23223AD628784D38579C9599467CF9943035
2F31234F708A346DD3C49ADD4267F96FF6FBCD07F04084B504A6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.1: MSBM10 2.1
%%CreationDate: 1993 Sep 17 11:10:37
% Math Symbol fonts were designed by the American Mathematical Society.
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (2.1) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /MSBM10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 92 /hatwider put
readonly def
/FontBBox{-55 -420 2343 920}readonly def
/UniqueID 5031982 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6A66A4000A13D5F68BFF326D
1D432B0D064B56C598F4338C319309181D78E1629A31ECA5DD8536379B03C383
D10F04E2C2822D3E73F25B81C424627D3D9A158EAB554233A25D3C6849ABA86F
1F25C1667CB57D2E79B7803083CB7CC0616467F68450D9A3FEAB534EB9721003
DBFEEFD050F3AC3492F5C74162A9A531ECEC0F47610B4940E946D21CAA771D30
A6C27ECBA11708CC46C62396BF9D1990D579D0C394899D24FE7A4382EA18E7E1
160E7283AF5BE17254790628E79FCC206F28B5566075B3A5697D5209062544FF
D85FD89D6F43D6588B242AB2666B5D2861CD38A8CE676503EDFAE84D12A71E77
8405E468FE391F4F3F50D2C57ED55512036B0DB8E76A7EF413ED08673E56DE2C
16A3B65CD478433C0D2F9FEC4E662D54DAA43CFA6957D2A9AF8979BE06F70B68
ED4C8C493D6DAC4971A3F1D010A7726D084EC1074FECD7D12D72AE16C26194AF
21AF5774D9B860EEE8608D34F150092F09C19959BAA670022B9A9F263CD391E3
74DD1D1B4CD4D75273CAA4E37F68C631723E08FA35AD34C0AFB4621AE6689861
854D16CE1C375FD159A337E221A6FF1CFFB5693A0623E7EBB58C2969F590D081
AD92DD9E5322E26D6A15023664AC73A355998BCC48ADD0E7A4BC79790519606F
A1FEF6075033BCD1A542ED2F7EE4943A13D927138CB26A52F33F52249DD24930
BBA9773D5DEB5B8115804C2E65EDBCCB17469C47F2591BB232690DAC5F1780A5
6FE9861DC450426725D35E3E8006C022026C0A383B0A6E8AA30A52055E7E139B
DF6ABC491AF90C7A3884582B7407C0DDF37CC49F3CBA0126D07A3639A615400A
01FC5412668335BC7FB0C5C62F533276BC13716EA27CCD3924408650605BEEDE
2A68B5B6105D8766B9DD6A877DE6AEA9C3179677B7C0726022D0F929E7E63574
4692A959C7B4919DEC77FA5012A3CB81439F809D15DA7739FAB5D8E03BD8F283
FB6832C9864D18C4CD499B20534D33C822226FC199D26116A73ABA2B5CAB0B63
42F1B4A3003688088F1F6DA3C61363B4C0C44269FD21F981DA0BDC5D180FFD2C
8BAB61F4330FE5806A35F1235364554FAA1CA61EC79EB01793D586FB1B62F4E9
3FA5AF30CF24A87271CFB59FFED6FB662A77D0A42516634A0604BCB334503FFD
60641E6BC62B28A8B3A44A5D50389994BF95AB3E7184E9954625B28EDBE99914
4558E2F68FDE7E65D0B777A64FB3A7A2E4A27F656FA2F9075269F70B020FAD56
BAFB1BC4FD259C2C9F2299D4421DCFD38C947ED4EAF5FD02B9A31AA37DD2E82A
315797E6456601502E47F85EDE87851E6AAB854DF59522CFA9BC02F4DBB3F024
C6EAC54AC427B5AA039A9697F52ABAA45083CC1159604CBBF1F7BE585146391C
D45F718B12F8CB4C65D6FE61F5D07FE09C3E5F7FECBF1A649853517E4D75CE59
B1A78262991D56EBFAAB32A539C9294B7495C57CF69BC39011E8974CDD3441E2
2F097F60C91B9D4AC8C9E9E0D59875DDD2700D2E5F9BCBB3BD2544AE592B79D6
09522552E75D9DE334A69D63611DC9B83264110C32460CCF6A8153441C7BE182
ACA97D9FF6F67DB816D83E43EFDD7EE2D64B24763434944638242B5745010385
49C0C1D8640F387AEEFEE8103BF02F1A78DC4FB6B6E7EEEC04BCE94C70E43313
6BD1EC718DA124D47B20404D749F7122163A8E1A962DC5CC691B7A5723C56FE3
1F9763B92310BD32567840C81004FE97A0373CD63E170E655792F9D9FBD4C1D1
5906A62803FC4A2B375977A7EA5A63B108ABCD85B4641C79B391AA95805B6C79
DAAA4ABE1A2745
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.1: CMSS10 1.0
%%CreationDate: 1991 Aug 20 17:33:34
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 41 /parenright put
dup 70 /F put
dup 80 /P put
dup 109 /m put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-61 -250 999 759}readonly def
/UniqueID 5000803 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BDCEEA888D07B439DBD4E8B4C9
D198C03874B5E6F8FBF4922065A92BC3E66D05DE53971CB1424510E892442858
D69CE1F76E4DA76C87C763A4B2FE36321E54B1328C9155B8ED6361855A151723
3386AEA3D042B8D89C8C0E9A33E5DF3B466F7BB8C2C8A4ED4CDAFF55FC6D3EE6
0AF2CEBFC1AC3A6E6692F8BB81F82D86BAE85016AD62FCB05467082C2E5AD348
44D1439C2B59F65590E57CA0DE481A7A34E79931B1513C4C30156170409A4BB8
46D412D1DAF88AD30722F12DBCA1CCC6B4BCC28D06B0D29149DDEC520C8FBA13
6B82E2E1790F00B216282FF122EF0D47B70A1B29514DDF7C0435ED238C14BDF5
6DA243117FBEF7398F97EB95597707ED63C6797EBA1B46EA19ABB1DABDA171B3
16CD500F5D64CBFBE4F9CBC3E66A34427D3C4D0C432710289381F9BFD91B4FF4
1E3A896C3EEA2F3105C218877D6C0C6B763760FA364D00065E1CAE9DCB5676ED
286A9ED0D1C946DCA6A2A670EE0936FB4706CC62E234CFEED34AA615C48D2872
A087F30990C85E64BA68F3D5C117123467DB411C9F2D6F6858CC70C1E352C477
713097321B4C4FD4C5CDE305415F998E7245908EEDE6E056A736EA77BD8C639C
3A79FFD0B74B3D28F0494A115F2841CF8A8827AB5608F96FD8998A5F40FB3DFE
3AA0C7696DE4E1D18DC0D6E84B943175FC38FFC42A9C0CBB13A908978C98BFE5
034F88480F32B9DEB2FD228FF6CB0B89B045AB02020C82E3F5716DC640613185
9F597CE262729BC52132F43922B9E28BB71A30AC8709634561B22D13C4FAFE0A
12C4451969226B220038AD8DDA990A4E2CAD53DBEAB698898BBD3046234EB4EA
901287E71CB41296C431383AB85F18882F65BE36923F6C0FD6FAD1834E7C49A3
915F0967CAD843D98F5EDA7FBCE3B3DD4D7A7A3B8A3AA4554CA4067EE545FAD8
BB1AF18BD98F1366623F70D91BEE5BB56EA4FF657D5A9FFC5C5568CFF6C64648
11C0DACB669A777135E4AB46195285A241445923D432180D4790EBBD5F51FDCE
47D9008C0C167DD0E0D45CBEBE61438A654BDF5366562E65E50F3B19E3558863
4887843DF05A7C51241EF5923819B0189B1D3A29B51C640005CAFD6D72B5EC9E
4B7A50C5D471378E17ADD9B0DE2872EDECDF28510602FB8D8D399075AC5539F2
72F4CCB829FD42ABC5A966F9F24CB42F66D4D131C80A7F73A326EDFE6E4E5ED3
9A780191F92DB66481D817857CD30C0B2DEE9BF3B62D15C96DB4F914D7FB2817
1E19E158FD935D8E49B9604E8DBF6B9F67B42E421AEE4BB31B69337456ED2A25
6274B18C1E930296EDA3E560D11D15F0C64A2DE7D4FF7CD266659E2C2086B509
7E5196FE71DCCBBE0A82022791243321238A82DB479C19278F2D62EA5B81B9DD
163CA612252A2A3ADA521F7412C6D4595CBF1A8DD48E1DC4CDE2DCC05E991A3C
16D3D38683F50F7806B83C9CA2761656D168D1B9F94ADD2D919F059FAFCB95FC
B4FA032C122462994238145EDE0B27F06EF79E16F97127E11CCE6F33B1322AC7
0C36148167EFC86A25B17B2B7389A05C1CF08546C2A950DD80C1775D3FD8191B
66A85EF52F584A9514CE4255803708C6BB1CA3B6234E05E81436E994D8B16D11
B146440D2327BF1F1696519BD0952BF63360DBC0D58E16B153B96477DC254BF3
D8120DC00EF39FC2946A4BF02AC6EF7F1B5561F1EA17EAFDA0155C7A4EF0D518
A8015DE0409C221147A64B35FC47CBBF0AB4607A2B364C6F10BB51E6FA8E0E28
6031AFBC532B054CDDB715C18147FA519A8FCA0ED870B59079B65FA0A5245357
ED2C2E9569DC25B01A628C9234A5CC85A32968818CBF9B8EA0D3A78E64C1C13F
2060A503374AA79C4933653AC038973606F97C10C751B751A447A1C869F7D508
FDF76FFBC6F14E159251F96DE96D254D490BA3209BFE3341B143DA7ABEA64066
5FFD38E612D7BE6BA7B2722EB2263717B8940A90B3716F4D90D31263F8F29019
A25DA30131E77FB0EC3C041CB14B4C19A7FDD03C0A1C7AB5254987745FA467D5
D4D7FDD2A31FB618485BD77A8D806F2DE89F786B576E318F8524F273D4269DA7
7C81921A6407FB075F764275733BCF237BC1797481E064FFB803FF389121EC08

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.1: MSAM10 2.1
%%CreationDate: 1993 Sep 17 09:05:00
% Math Symbol fonts were designed by the American Mathematical Society.
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (2.1) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /MSAM10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 6 /diamond put
dup 52 /precedesorcurly put
dup 66 /triangleright put
readonly def
/FontBBox{8 -463 1331 1003}readonly def
/UniqueID 5031981 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1C87678CE98C24B934A76220
4DD9B2FF3A49786028E35DDE10AD2C926BD30AD47015FFE9469DE1F793D1C53A
C8812CBCD402444EAEA7A50EC5FD93D6A04C2783B50EA48059E3E7407537CB8D
4C206846EF0764C05289733920E2399E58AD8F137C229F3CE3E34D2D1EAB2D53
20D44EFAC8EFA4D14A2EFE389D952527F98D0E49BD5BD2C8D58FF9CB9C78D974
75C2AB5467D73D2B5E277A3FDC35909938A9DF0EB91BD9159D3437BE22EE4544
3429AC8E2BFBE34AE54D3BA3AD04BDF3F4F43A2B43992DF88678681B3AB32CFD
A23E2C98D1AF00AB206AC95B78BBE6316F7A0AB6BD3236C28C76288B3C25D1EB
E9ABB3576C5EC15A71D26177F5883E9B48293D59015615E2EEAF2E9BA04151ED
5497B9A1C41CBA44BAFF13EA218F5EAC11952EE336AD1DBE6CE92F002EAA3B3D
3BE4C3792F3405763C4BD93EFC3B4FC34193439561841BA989DD8D9F9AEE7A7B
24AEB4654B35023C9720B8F31AA9452E29753FB7915CB29977E725611E37C0B7
784BCC26FACF8A7A0EB1E54290D27FFE52B2D87FAD080AD15EE1984C37E0EB30
122C3012D3A16B09C28903D138352AB5462674B6CFB63F1371768D094DDF288C
36FB9B58443F872D61F2CD8CED42FE0EFF3D7E9952A172BB1AFECB60BF79F2B6
04265FDE4F78BC9FD619AA733CD0412F1D9A7C13B271BF827DCBDC8ABAE24FF0
74D3C220621D7FF0EFE62D835A221D0A7C139E2E6681FC2BBA58FA3B80D416EC
3854C63BA040A4262B458340DAA18AA6AEA3BBAC61615CB85982B18664D3D3AF
340C65B969071CF2D0CABEB80E04623D0526F862ECA8280EEE236C535F70561A
854181132E677674AD5E14C6636F57541D3C84FB9ABA3977B211E2B3FB686DEF
6A1B2E3769134C2756EC248670DC8DB08711D1AC4AB78F5C604202B0B753CE30
6C4764EDEC75CF18E1231DAE924E5D0A8BAF4A314860989D4D54181826A74ABD
CAD724216514C6553A49CF6D3CF9350719B48C1F15B4F77D06DB173370F5B50B
23978AD2BF0EC3F8987CA613DE0DE0D081B06D2ADCEC6311BAB41EA2A2A1EC0C
30812B512BDEB94E42F52B35FF2532658C806F7419A50284A2B9598EC65E89FA
64B22D4FD2B1E157283A41088639283DAB9F6A713653BD26BB3176C98546C599
ABEBDFC5C320A9744D40D1FA8EF863132DF8A71514F8360AC8AB26C286183D9E
0A3C9C6C5B5718A0A439B7EE73D4EAE06F810FDF85D31CE079847A0DA988967A
D667E514D9F71F6D8EDD8368EE2FF3470DCAB573FD65D08235B0AC0D0A485295
AF487559E13A86B7D2916F59DACB9FE15D3493245DACB9B29740D9C1F10186C3
D995CD2179728F6E07DB6AFA6C788E25EF636E068019D827E8B451F88F4C8C19
919E5666692A7A777AFC6CA97435DBA1E2B7B9DB2BE7E286551D736DE4443ABD
668E8DB9B1B6537B734EFE6CCD2D1CABBE8CD1F0664C782911677A7857958C5F
019C073C8E4512A39EB6A17F1B7362388E6C1F8616FC3BEB5BFFC3CB9D6A6BCA
A0FB86427E14C5064C4E84CC803BA5A48A25ED1571F699EE178756CB5792AEAE
7BADDA63B0355675E8C73E7FD10F628E35D1E28019B224166F9A1AF82C9F13B6
B3E49E4282DA072A56053C96153AF5BF2F020292191E88D52E0F3149EC48167E
C14BEA60AB0146973D830A3C47881F562554E4594670F4F8EBA07F95D517AFDD
7694B6428B6ED329CA994836C33E224ED3A4EB1185F7829FC0FFD5B4893AED19
6EF377FFD97270ADBFEB7ABECC44A70C88B3282CC83A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: stmary6
%!PS-AdobeFont-1.0: stmary6 1.0
%%CreationDate: Sat Jul 18 14:12:40 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (1.0) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (stmary6) readonly def
/FamilyName (stmary6) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Medium) readonly def
end readonly def
/FontName /stmary6 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 56 /talloblong put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-123 -2945 1256 897} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C99ADB
B3214E61CB091BB87421CEF35FF5745EF8DDC51293183D75AE11F26462B918E3
F15A016BF051C59D797E59AC042DB329D8738C9DF453DD062F0BA8A59E23E500
D03758832A6150BF51F1096E643C98DA553929EDAC78FE0F28B0D59B9D510A7D
86C12482265FDD196DA1756923C9F2E367779253E2B6C44D844A0715E00C9688
91F45592A644E45542D0E63C49271131241998BED1924A5087A3E2AF98D610FE
1A4C70D1AFCE0916F8C31239B51875229862D7E1F9AFBA245BAF786A25072F47
A53DC1AD0A7497A70944098E052C092220AE250D3A2DBDF6F34EFB960C6C1A9C
90E0E3BB51B7F66FE1140A12030E6FF0F937A764E6DF572249F4CDF0B31800E2
17D8E05FCA49A28EB43B6C1C534FE663B7F8832720B4163CC37A026986DF4CB1
4CF663278E4EFBE1FD3A49CE021CEDEDA369C84A9CD63F3FFE532B62A8470569
A622623DD8110565025CE01747C9B5109134175B1040295F9C7CF2E72B9CB670
6BD0698AADA32208987DEDB6E97E84D3D88B736A850E18E52D448C49AC41594A
FB2B235138EC0B479C456E8F3B5D72705AB344199B9BFB9FE0D7F69F25ED4954
6CD91B1C8C7DC18CCDC162B2D34B4B48528CE5A9BED29FE37BF0B17198237D54
BC8C6B842993619EF72CF3EDA12ED2DC68D17475D9A6AE053A49FA55F2F55F5F
2736D3FD345B2C55762372564C37BA55C9A46C9BEF5CD3FE8992DCE3CF3BE887
5F58D781939B8FB2EED311CCC03CE1C6B97A3CB6936557A7A736E97715D6E49A
D684470741DEF7BB50BD27E5CF0D004289A1013C1E08AA0D04A89A6C495A9659
C1FE12703659FA80660C4615AF8D1523C40C0F87D2CC92BA846445038CE5FEB0
C0F5C2E49D8C34F99AE19070CDAD7DDC2466E603CF520ECD9CDCFEFE396640FB
CF46C275A7A88287E82DB7F7CC7CC9BFA3DC0043F342A4D54C74BC386AF78767
7CDC3C2F1C7B700179239ED9C23CE1CB96CAC07212566BC5BBC90E3E7D04F441
BE7679F7D60AB6DD408F7701AE23ED0ECDF2560422F2FC41E94E1DA9B6B19795
489A2762760168259B9D676AFCEFAA8A00B8FD17CA9533926FB5641634BE4093
27CE17A41FD4B608121F9C0EE39D07A1E2FE305565A541EB916C69D015E9FB97
E5BDFCBE7C2D905514B81B5BE6008CA81219916A60EDA94EEF343543AA94ABD5
664449451FD2C67D4A39297F9885DDC4093A0B5C3055601D7517B3025FACB8F9
82CABAF6A568ECA29FEC5DE5286AC48347307027F6325B05128F7075F6C59D3A
1E9F51267C163D0931EA84CBDFD91782A1063EE4BD25F4677F44FE1076FE2698
F0AB2D1677CE408FAB8C57F9C8874EA0D0FA52573B112EC03E204C59880B5F49
28DB5E2F7DF5FFBD3AB7799D12B4F29A945A6ED4B5671763B94BED21A5A2E76C
D5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 73 /I put
dup 82 /R put
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 116 /t put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
/UniqueID 5000768 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6208BEFE8DC1935D
F26FC83D45B9D113BFFB0839594230F468F1F1286ECDC781FDF02E527E1868EC
97A9100D2134DE325F146FFA8F64E08DFB1C172CA103F91BA1E5BF9897E42423
F180A3D7C8489A6308C190076B1F59B4EB9149B34721704CD3EF0235D0044948
4E358EA91C9AE4BA1B9BF22FDDF7FDF2FDD436EC4B8F424BF1CB9C9EAB5399EB
66829AB49A414210FC1A4A07ACBE690DAF11CB7BFEC4C82BDC7DED414D6FA40A
EC9E8A3D579CEC7737F9D9CC853678A3833636F8B33B0C66ED837176BEE6E6A8
F6B35919FE284DF3EB31BCF8E2D748EF30C1AD484DB9B4177CE8CECB8FEB6EC5
CB1E2301B2DCC11D878C974BFDD5EE6DEFE6056EA4A0E39A39B7FC1A6DA06711
106932087FF4370D1C25711478FD4AC8E03BE4A289696C70C17BFA087FEE62CA
0FD73307E9D91134BF24CFEA1835F9F2D8829788DCAB55135EEC17A1974EFF3F
4093CC6E13B87084E461E23A4D6862F0EEA282703CCAAF77B9BF050E361D4276
B87A5C192775C12A3863186F455A258D68ABB0C055E40001A7DF2E63C5C8ADD8
939BE7366D1E3226749B9E23E4C2AE4B9E9BE1509AE4E6E51A2027EC08AC5CF1
01743490953E5067001D01D1487F4031379DB5C7666F555041C9F914EC408B2B
3F92ECCD384633B1CFBE950D0C420E2AAA2B563C0D971FC44F2127ED00D52D0B
4CD01F50E19F79F3F6093156C76269193903F5BB98741FFCBD835FBCFCCA999E
02B6A736712541A117E690134A5915D13634B978BB18F0241EEAC306DB1C2695
D6DAFCD4F28DF3EEA1A50A3FC721D2AB878551E230E37FE21382B89450EF7B00
D5BFB0418A0E4E57B13B956E26191B12F8E56F061B7ED858DBDB978542E7BACC
7B81CF6EEB11C5E3A2E298637D5B6D2713A4C01CE18A2BB17AC0F7F2B23ED9E9
8246B6C16113B3E22D09BD03BE4A57E1B70A51280769BB741098C5B293ABB47F
4074320990D76DB8E299B90BA587823F8366D76C3FA2C934CC7D06330BC159FF
7A511884B39D9A5B8FAA007E31C23DD6C3B740EB0D88E3FD807508112578B9BF
23A1252AE7504BEF0D36FDEFA33AF6A3AA0AC9024679F3F981C493C8361A34C5
105653CADE05962BA8449FF8C4904C4963B9696CD68BD94A04637E3426D7D23E
A6B845334548B4363799081BB31956AE4F87D59EB58CDAEECADCEB4609E4BB70
28BD05715640EED058BF693C7F1C2A9EAD03C4CED56E8561DB2B45045B4C44A7
B3B7581F3BA131ACB239A1BE0D19987B5BCF05778BE2253D16E88A4E02D0ED85
BB1F11F6B7533D300A1147C334F9D773033100E738AFE67AA702C26A401BC20D
73B1C14C5130926C5966701E792117072B051C75275FE53105CE8CA3C8E6BE51
34439F1552FA4939F64585C92F5AA011A2B770D2C160A916F6C1D315E92B32D7
4D4CB0BF4C62A123BC6CAF2AA6A237980935192DFA9E1416B1AD5E36B4765DCE
F4F0D88B945272674EA6B734329E31EC87452E2DE5D353CCB2F497F21304EE67
B34ED08AF5EB9A41E1EDA4ABC42267E433264A5718FE059D48920A1D98E322AA
825D57E4CC3FE626D4E4B9F244CACB1B55F1E251A121E947F1D4B7196E634966
19CABEE763F7CF02694AF0A3C435BA91784CAB18B35E0D294501DC8650741B6B
722AB47ABEA770A27F4B3E3EEF641BD87FF03156655D2E2FBD2261EB1FDDCFC8
B9E92753D1A42DA66A1D035B455D98AFE575C561E9621C22E47829EB50660A1C
DCEC2FBDEA01C56CBA42CD4BCE86D330F45BA4EF77F114A652D74D647D718551
7F47B8518CDCDDC2B04268CD4E207AF48BBFBFDEBC2C21D8064145444B51724A
AF96B928A8F19441F28192A56CE433DE2F53423EA381A3865938B61031362322
29227EB153EFDEF0C9282893ED8BBCCB9B4A9C59FB25122874222CB3C80FDA5F
E7DE930B3EFEA9A2A3CA90DDCC3DA336CFCD3A64A108ADEC8F354E725086B926
1F73A3C324FD565D68CC78984911FA5F60B556D1828223C5EBF682E8762AF6BB
DFFCC808139735AC3EF8977894105D1085EB848BA397119DF6F3AA86A93BEEF0
3AB01960AE1A9E927474BCFD49C3859BDB789DFE36B7285D1EDA747C8D0B0CB0
6487F6A45C85FA7832C1172474252F90D7E0A0AF3D203621D44E56393F66EF01
E03AE9D03F900E476A032DE7AE1362698519CA3E39410D7F8DC0050D8E9C9559
5CAB39D6F1A539EB218CCC58B91079930FD25A697761690F4A77EC869A3CDCB3
72231293AE72DB85657F2EB7D20981FC12AC5F92029592EA9EDE2AAF50FDA1B9
1D0587E460C5A046461A609489237641D3F368E46CCC970DDFF621C3FFB412AD
3D9EFC715C8DAE132360FE2953BED16D6ED182B39314FE4CA3B016A9F2E6D1A8
259430C6D67F1A57AA6AE45ABCEF8E42CCE1243CBC567F367749718C81679A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 5 /Pi put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 22 /macron put
dup 24 /cedilla put
dup 25 /germandbls put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA05
16CB2D7A47F5C7697B3E95D147CBE2E020DAC53B81487AD27784C9A507C1957B
7AA997EABE30E90ECFCE19FC036FF3647FED0AFF1F33FB13863341D127CEA81A
0F84406F320EE84950A6A549E6BEE147D4F691A1AF23636AC6C1937BCECA239F
907EC7A8EC3A02D7040923B3DD2C379542F7A9261EA15EEEFBD9C759E6CBA161
EB09D2048B3E0E5EFCBC94ABB7CBDE99B4B1CAD42B8C050948EE1221FBE9B8F6
AD53D5D8EAEEDD322CC9929D8D11C794E60B7ABB1924B2F2CE260C6D9CDC9AAF
D71AE8BF947A7978AA31891BDBAAD8209A2A32E8F4A83F60EF17FB2FDCC82844
C52728B9CD096A5FCF5EB8D13D59468231C7B5A81C1AD0561F1E44723D3E0C74
580AB6460C9B6E87AE9B3423E5C735ED589DED69539D17E3691CEF4A45FB0883
EE0EDF99634371E90FA42E1529455DF26290B253EB68D0ED915B52427A0DC73F
4DC89B923B49A0CD6A9BA994FB4A0185E385536B25655F3247ACD79FE06A736D
894D009BE815137D4DC8E7E5C6F1569DD71C2198274DBD62E359A545DAE09FC2
85EC1BB6E19BE9B1E902D8F01E5ABE8CB479F2B0E2025EDC0CDBE85ECBF87035
05F9AF8854140D8F6029094195BAE4EE37F85737403EAFF6496DD333B78E91E4
D70325B918EDE7346738B9D932A9DB3233BB9DA388E49912E13E3A56071A7E5A
DAED19CF7AABFC7D45953FF2A3CC79E025C3B4D9E6BE5F2617928D938A7E8210
CA92E48FAFAE910DEFBE994C6C74228EBDEFA643CA78FC1C50369FAAE7F4A634
0E674ABB79A651F33C53221F1F09AD94672F46F0917ECF236B074DBCCA06BC8D
BF9A98E36E7F3CDF06E314961030A7BBEEC5510F2BEE3DE212B1BA374D54D4BC
31F7445B18D9E75E3BD2C4F4FA15D1721F2355977AAAC801199147966A57DC5D
4DDCDA287923097B50082F77FE06EDC4E1678DDA402B2F504830F05F7F4F955D
5036B88430E8B8701564BEF5FFADD33548826E53D53A3D170218D55FF3121465
3E3CE652CC80B2CFC66D3CF65F31A0F624AFE479D03CDAB14D51DD40AE0EA50D
2705639D1F348EC688F21F3D8D085096E57A0EFE08CBE3D788BE66B5E4A6EA44
6872818DD270E70317D9A43FB5693685030FC3A275D9F51ABC8797FFB824E1E5
831711B09FCCD0380A9644AB53050CE216C0122F988024533FB00631F09E721B
A80A1A8905A8D516229BC1E717546CA40C129480A7ABBB44B3D2D311C782B0D7
77A4F6E7EC8FCC4803E9F241266BB6B04805BAC547EA0F9A5C6B7177D427E351
1B7633F41B407242A38D4C1FA6479DE09C7ACAB0D9376418AF8FBEAFC6F5E8B2
B88FCC11C921DE1DA42693A1F4AEFB49AB7955D88F42DD87789A0C4494CCEE0C
2F770E82B7B00D637AD0E4EBBE1887EE01FB77BF866BC094C124E3A5D5A8159F
1EB6A21C1B2628401321D17A5F26EAE543BE20F1781BA4CD3A2F9D44A8A3B9DA
2BA595C1B4D11E6EFB010B36740471715572EAC9A45D63D0C9922640E5FAEF84
7679EA07ADCF51C43C25FBFA003819937F3835C3E50D6035012254BAB542981F
079D786027A2E0B93C7FFF417F4729F506C9C6E071731B849CC6FD0CDF63DA33
86702587F5F46A4994805F467CEF08D137585DB65448ABB27C6927C695CA2EAC
D307F9D7F1EAF616D1ECF3FA4E2578D99339547FF5EEEA4C05B9CA894F5B0F32
38F73B1F03F66746CD4C3F420044EA51C94610878968629D2B2717139932B20C
3389DE21937F208D23A3624EC9F0782D234FAC25D19965A7397CB9B0DA478935
D140BD7A33614FBD300AF1E84D565F2B0227D114459840D15F45C02DE65B2A9B
1556981C07CD855A19916ABC098699484E24D7961E468A6CDAC6AA8032B0B73B
D44ADED3E84496F095E3BEC1A2B9CDAB16BA1384BA158EC7FDE3C4B82F95935A
66B76D7551EDD5CAAD2D19D879D23DB2C84B57ED53F552AA7AA0556731BFF199
2A852C3E651D476B4E6278F5DE21DD1F1D4843D773A0807DD05220FF3D6FD258
54FB6721B896309BD93C4596AB90313E703D594BC3B55D1560E3497AE7B96058
D85B377ED2644AEC15BB96B5C5B6BE89C721BE4B1DB59DA3E7D14E73FE08F98D
7EE71A011116A4F7849902B27FE567B329187E2EF610C9976301F5F3213F58C3
D3ED1C9BCCDA8D681C362356E82EEE43924A6C6255DB5729EDBF319D676DED83
88AE74C63E2CAF7E3830707DF538E77C924AC0C707A027B2524897D589C9E511
74855399BD5CBD1B71AF36516227935642B02E5C0757EB1895E07CE172085F56
215DC1A21F00C987EB5E9FBDCB7F8AD1C1BA3BA7E34BAD2D2482F5E25F93C1CB
5E3BE04B6552C4F813328E8BC8F9B05BBAA14EFD47DE08A2E2026ABFB7B670AB
40C6298A180D8D83B59A4FB9953BCCF3085DFD429175447517317915064FB0D6
90B79ADC2104595F50A2FAD40AA60825FC165876ABE8C2BA92CAE7F00797A9B0
1B30A2288F886E0B4C1F3805BBAD38C9768253E7CD0719D7CBDEFF879D16797C
B72D1811EE6B2393910127F73241D0084097FD3D78B437D1E4F24E84F47DDDA6
B2C9008014FB328FB7180C9894471934B95B1772F36A87C02E6EF0089E0DD12F
E5ACFEE004600EF0DA681119FA68447C887E51A91AD4EC7E46ECCEA80C3547FE
91DBA075BD503FFE4A0B00B9CB2A488C4B05E009603635606D2348EAD82065D7
AEF88DC7FC5B58C04FB778B64A1A7013C8475CD66795875300BE0548BD353753
4BD628C7B82EC66C60306CE798A121DFF831ACA5CA1D1319659BEA4C7B51102F
2FDDD19225760503C6DE4A3F444BD004CFADE108DF63446C942C944C847AE7D9
08A574A21C583987223081493E1919C1E643E8889BFC1A9C1767B3767F2E6085
760C66BD57B368CE8B6EA74CC6F07EB6F77A63DCCC2F25D145594FAA52FCF345
740274CEE9304DF3596248FD288DABE008181E5292F2D72496D758A455487AEC
9FBA1D32EF176B57211742201EC8C5C15EA5517CBFEB9D600DECB9FD977474B9
616C7170F486F752138A84D0B80548DE647BEC40E6F3F59D56E60230FAF8FC80
D699362E7FDCA99558AAC5F2E5A1A12A4F8D80C828FF2BF1B7209E389F542E72
625B8B25344D2DCFF0E78EBF40730455D12B1B162F9787B5780F483A79AF502E
2E5A8E9F660B17ECD640DD2F7151BB83BC1C483468833B50C555F4C416182ECF
A93171F3828BC6EF6D352137C9AA586736AE41F45C901899B90E7B1F18450A54
7282B99341FC84129C440CA7E28DD454BCF64F95573047E797C49A0E947D6ADB
C723C8BF653210F6D8B3F065B198F653FC09A0AA7EFF0C0E2FEF56FC544423E0
D85B55AEA31CCBD7711B6ECDAB2EF4724B46223491E2BE14DAA0B6EB934EE5EF
C71AEE0D2BEBD2DC59B6D40272FF5EBB35988BF8B879E2610C15CEA99DF2639F
9591E039E74BFA9ECACAC317CCE0DB1490DEF6F1232503B8A47A0EBE5BE3A361
27C5E5DA8B506425073EB1C86CF2FBC4E6054DF306DF569BF8766BF66001A9A4
5821D2A292E7B33113E636AAD8729C54AE016EC51D5C767CCB99E5DFD4F39203
452839E79E0A02532F7C938BB1C18022B17F8CA7636390F73AD5CD617980FC79
F3224514608A871C5FF9E01C338AF13ED78B19A04A50F4EA501E83DA2245A5CB
43DDE19407DBD0C15E31F4FFBA214FBF0FD976F7E8A6C1BBEC7CFAB97BC4A577
624A011B1DC50FD2A988CF7FDEFEF1627C3E2323B819052BB74C429E15BA678C
21E759190E94AFF82490C842C33C361FE7CE862A4BF71FE14A18ABBAA33477B2
E1EE9D6D3D0830BC2F6BF838096468B9BEB4B7FB71923376145415178DC8D808
9B318BF5243BF5742B3B7F2177D48527FEAAC1BB80510C679EB3BF0A0B45E016
8473E8465DC28B7E3755C8A52758EE58B53A4CF76B0002D5A36BC9F695A89B1C
9FCC76BD2BAEB8EFAF65D9B038C485230E1883239A8491AAE3F308AA21667612
B1413099E120099E7606428812BB6F0E7619A120702EF35975D7C6903531DD69
D1C6213F635AEDB4E8490F86F0F1D5BDD88C5B14C0CAED5B6D6328891E1ED841
1E4089638130556B9DB84B13917A322FEF17E1833A263276957D10CCE87F9910
DD70F4F0CA3F6C3D2E287AA992F13C8E2C3F5197FB2C71421B5EF9EE822D6916
4C2D74D4CFA7BB37B47974A57F142AC7516495F7DE083B44C0139E78CD3BDF7B
04F313B9F5D9CEEF326781AB00A3D27171797D83826687B8D5BDDFAC17C3C686
79C9BC0F8FAAD3019DC51F778C02BD8BBD109737743E8C154776197038B6267F
9FE98AA5291693C9D076C6B2D63E490D9DB0BD8036660871003E3FD48451C213
4D001B5E21BCF46FCBA67B4FF73A900B5E97551331D32216611B2896AFCF671A
5D0C226FF862A6877EA8F41B7C76E09D27ACF34BE69D005BE0C6BE744BA5B75D
4A7F188D0AF5CAD9D5E3779B166370A5C6181C8470F9411D5F4B214BF260F86C
26255DC56FDD76403068E4FE19D89E0AD0BDB232C0C76D893B3869AC3E3CFDFD
CB03386B19299FF830467FE785969A1DED3E6724B423361284E7425D22C73A19
C5FA6C152C5D796E8934A0C5B36E2167987737B1DE08F8E0EBBD00419949867E
5DE4DDA408A5330FCCBC9DE73C0E1B1728E88BF25B69F695C353FF6F5BAEF2E2
C3336D5400E91313D63D57B7715DCE41B3C8E934EDBEC32AE2FF9121AE44E3A9
FA7C70A1ACDC9E7D5C64EE9D46EF5F36E575D1FE69D08BF8BAE0D3E5D6C8B1D9
704CA21FB4BCCC0967F9479176D0CC9E6E2AE3B902F97BD8E15D31EF33CB1CD4
407602893D70E447E510A87E6872B9060FAFF8CE450D189E0244FE6D7C4272A1
7021E69C1C34921FEFDA57501A88330FDBDC7F1D94D10C6B9B44BF8B9159C395
D92F9028D12ABD05DB51A75CFE74982F68D0B53E852DEBF69AC92EC5B93A1ACB
7E4737FFA3473CB4B924D0C7F4B9FF487C0476D379D029540B2E86DEEBED38A4
0A4571960FA90CE9E77C502E27D72BBEA63A5AD1D0132004B154B3C2E31BEF12
0150C3285C7F16B89AB24E4ED7808EFA9675F7AB5F4B18600B4A11244D42C534
97B3F99156814963EBDF1808EA43FFDF77B31D2D0EE797C366915E6FE3445F7F
DF7AFDEA97B8AEDB7FAB31854A7CE8128CAAF83DE47549954EEE32B2411E611E
C96ACB7CEC66DC824F662AE15613AABD16E3823F1E5281E8F34589ED3B362A92
C836F6875E217ECAB1FCADFD998B39ED4D3C3019D3737434E920D711FEBB8ED5
2318A09D242918EF0DCE8083D5000602A426F66783635AEA53967547F134E0C0
3A5BBECB24F037E593715FFAAF51854F282EEF11DA46971EFE45959757EDF401
7080AA8ECF4FB2B2FA8926B81AF3B691350DA585CAA147D286EF1FF744A9C783
0A6E6DC84F423C9C8C3065C027AC6839974FFE343B0BD1E3E04B98D16940CF55
810BAB1AFAAB2BC3DC3C75974BF2F423EDE6635B43AAA373B459785A25861BF1
8D6AFE3FE3DF1CAE2D05215104E91BDB6D570175B96E9DEF4EDCE361DD50164B
9EE0C80AACCDB4F47C963E12252CAED44F3F3567376719DE1EC431963BD80E4C
B6ADEB3D44D26DC9EF35CC9C2EA32F59723E1D92A35408C3849AA017D347AB9D
91A8B12AC3FD977F424F2D2FF8DB101874B8B30BA46CF231C639CF30AC8E4CE6
456038BB37923E019F7185188DAAB11AADBEA8BFB7547F8E44FB7ED98F162ABC
A27A4F18DB74397838184EFBA060658B3987B60878BB8BCCC0226FDF1DE3DEA5
E0638AEF247A872248E713CCB7FCF9B7341F38CCEEF843F3C8E9E88C748FCCA1
53F2A1A7C73CDA3AC88850E340854B82852CF4E954FAC2D9E0062C75D370126E
08938A9FB007CF105807DBEF7051032FCFBBC7753B945BC30FA91DCC353AC160
E184EE00B3200515D1D92DC31AD45A49B13F9398333B9FEA4A36DB8DB071BFCB
A9BB49AE5B6574AC84D75005D9E7B3248599F6E09B7585C290D68DD7DBD241B9
29D30370C632F6BDCB8892BAFA0456C6FAFDF44DF87F84B084D603366FC40B5E
8D8306B5E154559C2342473DBF8FA301049797BD7E1FD387F0FFBDD534D15469
673040A1F8A4DE55986CC9FD033FDB22F559C9B2B993A26881E51520DF4C850B
B96E4A90A9422688928E3AFB2D7CC6289C8294CBBA87D254B276934F10C380FB
2296699805438487ADEDD54600743241BB225A0C2D824D6E1E28B6C274020136
DD6D339414BE2A6527A9E3D5229D51524E88D6FDF6AEAFA64911FF4C7EFBABEF
C265B69AC74BF6E9014C9F26F110BC4B40C5469F543093DD38D65E0BE37EE4F5
CFDC16EA4B686772B88672D7A3E6FE78EDC42B04A4763BE036441834E702E9A9
428C9360663A45AB679F715830A6DBFACE19015842AF55A2AC6E9FA1BA932AB3
FF638D64024B64909EBB26BE82C2C071A6BB016A4BABB268F1C98F4D006BDD19
3ADC47A69B12FCEB2FEB27737961964071EFC90E9063BC920CCE09D60751050E
1C910EA98EFC4210EB8D818B28256BC1DA1432BE6B5D2834D9428E5FE905E1EE
332A3941EE03302960DDD7B462092685E460DB05256BA060267B795C89279449
323F48DBDBDE943CAF15218AFA2FA2CA9D22F5A8A7F8128122515C550162B340
D7BA07DC520677A166F78E6103531797721C43D62BAE609C3460BBC638DAF8E6
13F0C131A5D91E9B2B996A499660754CCB57E26F0659A77769EC638F763A7356
2E851799804093F6E9E2D9AA4AE3C56F44D24471C28AFB9D8DAA62D3610ED527
DCB48C8E16270729BC01A116E725A6EA11E0B3CF27001E4264F00BEAA8F59391
50C4147E27876D7D7823006732D3C31167DEC5F56A1F3D11C6D0465393BE82E5
9FCF0A4CE80513D8BED7E4272A9683EC98C7F1460DA60E6852C7E2FF59FD76B1
459BA2844F954FAFB38D4FB5E968438EDDB53F992CC976265591F20B929B6C80
0BCB0ECA76A54AA013FC39E02986A3B0228BE2539DA99E51DFEC97EF91A592DE
CAEF723D8123050763D5AC4A7AE8BA9ECBCE81DB069FEB748491F0D1418D7C78
950DB7CC588B230C3AABB48A7DEAC8F99662C25F8112D3CAD5427B95ED42E93A
DCE2125417CA3255B17087950AA78C1599E68F3A23CC6D224ADC3D0993B3A1FF
9221B61245E54B213AD403DEFBF3884DEEFCA2271AFE46760F7ECD436E39A021
9778F4C203AA450053F8FEC979FBF4FBF5EBA3B6596AB13966B32D4454A31B34
6FD5F37C702C8E332F524A10AD0AA4693E410CEF5D2CBA99CAD0ECFBAECD5843
51F51DA1FF6EE612559847DC43646404398E2D1E9018CF9C3E4EBBF027C133EC
D41AD1B2B5696CAD22166DB39270803DEB45A6FE54D9553EE77C6DE718D22574
F4DD5AFAC0144DEC0C43D4B62332A2D108C7294226A873BFE8D226E9C37772FC
88CFACF2E5A1824D7A34BAA9E06986F36F1B9F7AF995FC0EF86F9929CAD4982A
01CA9E45F2C16A20AD5D166B03CAA9004B1BB1584A5CE432C1CF5D9EEB0BA20A
FBE0A8047EE50ED3B2EA2370335C43B1615ECB029712F683828E6B2D3BC5A64C
3AF67A1A8A15E3BBE9AF0F785FD1A30C72D15DDF4C48647E41CEBAC9EB78199C
2DBD2C8ED661017704EBC561CD89BD9065911D22F521079511A6CB08C8BE76B1
5CA570FA47CC14C4E36D4D960BDEF7AA069EE68CE45D91F74BF38E43E0684E7B
E074A3D235F9B5F5AE19D56837BB17ADD89518612515F670447E5AC288770E3D
A40EA12F27C4AF3D2F4A165A659D402E40378F0982AB4222D9E1B2264E7785DE
75EFE7CA9C725CD10E3B29623FA7AE60593C0EA01F8FB4DDD3733CDA63CE931E
5961DDDB6240C7C5EF6833005EEDE720E6D343FFFF5BFF00ECD04282B852BF38
92332A97FB45D4C5FE53B5E5100193D0472AD8716EDAFC9BA6CE7A64C15651CB
BE485829482614CA37EE77C8078711CE2E4D1FC4921D9DA790D07146A13CCCBC
F37B0FFD5940FBDD1A5523CB971107B6E2A476CAD93C5D52FE197331589DDFDC
ADAFFDB2B7959A129AE372372AA8C990CBD8081CFE3A29B390FACE115F766A7F
D557A9DEB23614261688AA5FEA9112ED0A870D04076A7206AAACE2AEC0CD35A0
BA71894EFF69FB6921958602B64D675B80442A4B6730660E0CD104511B4CB174
ABE68CD07193F9D903ADEB4DE4A5D04696C27B483F3BB764F2E67BEC80EF8609
2CD5AB97DCCF521134E573FC1198892312C5F0F462454109BC6D7A213D2E6E11
B901A9D363A9A33104797F8D373E0C400475BD4E53A9E9B497AF9340070D2613
1C4438FDA23862E9C6ABCAB1ED9B8454FA79A39DD3E8D2A191DDB3FEE2A0CE8A
94659E64541CC42E19BF8C18091E6EFEB8A552312117D909E7677AE97594CEBE
1D94AF6A58B9CFA99011AE52E686BCC86904336AAD3CAD31F69B420C294D7F3C
63711CF5B4188752F8B0899A71B17DCE79D35B9C5998FA3D192FCB5EFCC7BE6B
07EF92EB0B91943377C625D463334214B5D02F84D46D70C1E66D234F53765584
D0B802E57749BA1D57D6828549E63A0EB031F6B2B3BA0AB493427F02BF9E1F4F
509B00287B57CEAB4CC72A93F4AB3CAEED45DD7B128DD242186D4D714C896F80
E9EE62A25DF5C25A3C7B1EACA5404B72E2C621A324297ECCBA8D5DA123D30A3F
4BACFBD878478239014DC7DCA922FD6233862E998670D77160FFFE40DB9B4155
BA0EABDBD2093622BA3D49022A73BC37144470C0CAF84A8EF63223D4B3937A87
4C3CFD6174F3F8A5E6D7CF00A9AEFC910A8102EFC05E363725E6363AAC7E7719
E9ECBB7DF520474544ED005E3DCFFCA58AD03C019B4A41DEDE09A90DB1B4E9A7
5AEC0C1BA81233D3733C0A0C91DD1303B8F89F838E91FB8EE768A9C3C5967F05
720A49636917BF18CCF961A8803AEDFF7E64FCD430F7841A7CF350CCECCFF85F
AC85B68EFCF237335FEB4C5B93EBCD5292BEAE9432F056F279D2E089086C8291
0AECA668BAA99199010640B85E4A597E6C2C3B4B60A940650500004C03EE1C54
05FF2FB4330A4182F2262591800B8C6452D9718D0D107BEC432FB787A98B51A3
5AF53E675FEF90ACE72323BA7E592654C263AB5217594AEEAD96835BC69AF517
A36A6FD112E0D4D8806615C147B0D6307475D4F951143B93750534D86B2E5DD7
FB5D279D0D6BDC18DD5D82379F76D94EE8B91BD36D9458555FB498DC0E6999C4
37CCCB3853D7645EF2DF697C9D19B05B5AAFB413FBA19A6CB6F872E08F8F9500
6082D03A24C7F04D4B37B531116FE8AECA96156849805C15062746CF74598667
73365ED9ED4F1FBC0F537C0B191B4FA34714028AB5DCA9751850E57D568D0D93
FEA108BEBE5BF35815E4EBA5CD5339F0CA4135449FC3598296737DE43A56824F
98D34F8F0BDAC14E11EF373F522C27BCC5BAB197B35CF860EBA5CA2AC57E986A
F2D8CB1360D1B815135BCF88DCE659C361EB03EE5698EA5C84591C2DDA83C43C
C534650552936586FCCC6FED665E9F970777626E7C9A4CC34F8E6453FC17EB67
B435C974BBC220A3A2E110CD4AE0EF1D773DB23AC556AA2B51440B937623C7A8
5E8DE7A952949AF45327F06EFC8DC336EE3CDBF37E081062E92A767DE16D238C
E4EF156130DADC3422C7CB6173232935B7164335FFD864A72E6FAA23E3C81C2A
75C92EF1FF973ECAB0454835C00492EBE0BFAE63D9C7DA7D16A864DE3F0D26B3
6D36AF1441959F22BB4A8F2BFB579B7E3667F0479A92C0C6EB956CD8FA6F5ABE
42ED8D1FCF851678404500A55AEE5E5F4F31F6DCF869F41B2B6EE7B312538548
851E1C1800D02AC77AAD1B8340DE16F9ABEEEF3C7106E8808A61246B52D1D15D
E6392C1339B61651AF5FAF772A1BF4352BCBB6EFAEF3FA38D7EFF9CA5ABA2FA1
10F4DE06888995B0714834AD18759409DC19B273F8568594F2B3874ECD5892ED
F658F1C086058B521DB0EE19CD1134950EDA401E1D76E39051346B78ACD2E3B9
44A1530B5884C0D43AB51C3D1857074A0DF3B7FAD977A244A8B9FB81E2A1BBB1
F8D300C0B9CA7F910D9F261253BD1F7AE9F20BE03B13E93AEDE1B30B0679C92F
EB2FCD340DD9D402CAE365E630A646ACAC01270E0EC72E44BA4A0B0F781F523D
7E5039EF3C0494EAABECCCC025D89F9CA47DCE2B2CE07E8FCF36D4C9E17F0563
58951E6EFDC432427E0E075E8763F012A984B682BA56AD5FB16359D496E5AB1B
84D80729F1A2C6FE8ED7D555B4988BC33004A725811323F4BECF7D8A7EBBAFE8
4C1DAA186B7A47F5B3CD545235A33BA2735D871B36CA524D0602B7AD92415C40
CE20238D6FE48EC3F5E70DCB174D6F241DE6BECDB11D3C4F67B0BD8D567557FD
7ADF83B82C81E33C010EE1F977CA71480D42F22F0A25DF4E92397489F692881D
3CDAF58087829699768A9E016EB9B43A1C5D979E9EFDF7FCBC0D43818F996602
874C1DE54F40927124553062F27F821C316E9CFD8A016A189B770120B20D7B85
232814AB594F6287181A1443AEB4ACD4A5E0B6F1FB9226C551E9903102390F6A
87BA5F63DE7DA8F942BDA3E403219903922FE1DE605B41A48248B0D273935695
62730563A841398B3D678E047635E158F214A90C0E423A3107E0A1B8E6BCC257
A0A3106063FA5F4B375F85AFB4B6ACC415EB8AACEB032BEA341CBDE08D7ACD6C
FA0813421D8B8443619A8E0C028F9D6CD9FE06C7EFC830EEE0CA6C16FB165FB5
D9D44FFF02EAE2136379146BB7BAFCAD56D3531E0651984D8B05FAF819DB4DFD
67882103857CE720902DA21A00FEA4B57FAA78FBF99EB6AEB0631E4545641D97
480752169E7A8F40241AE11109E3F3F91AE1D274BCCB82BFE0B3102ECDEB45FD
B74436032ADA2FE7AD2B8634F01241140B436B69E645FB453329763E96F2EDC4
B5790D54C3A6F1E99E912A946D8D5EAB37CDB60FD0B783692376836D909FD22D
2FDBCDDFC4F5AF10A1236E83E40D64F6F8665D4F16CB153E5DBA65E9F49A0F77
D23F42FF72E8B50E5A52B321CEF76E75856EC7303F3CF7862A59A99EB1C4E1F9
E52BDADED5D50050067DAFA6C3E5BDBF6E1E49995B0DB8CAB87E439C3CDA959E
FFEAF219B6DB207C9B8261E66A94378C99B610A6F9C10F52B64AF2214B7F1A37
6DF2A20624DB4E447FC0BF91EBF5509601632507F3B38E7CE421AA04EFE56125
CE6DAE29A56F06019E395A83FB5552DA91BC3D12A11B4D92D7CB2C856F484326
054504C1824F4873814BAED80E1299AAF9B52B44F1F9C059864E79F836B7B228
7660278D29DFFEF3E2A9005D34289BBA26BB5FBAC7C0E65E9715E2449D033C9B
146D103BDE73EE3D5449F3D4D90EECB286069B8A791098866A51AE4397F0C0C9
A95C5DE7568DCFD611A6A227B5A51D4896B4F53C8CB6D36E2D0705CBD11C7224
68B2E4DB9ABDA57F722EA604B9F4FAF0729EF3F320C5C9D5E91684E91541B338
7A280901E6B858B3AE5CCBACED00EB4617C7057AAEC1521901FBE8F29090515D
2F9286122FC3DF889CE83A26EB6DA6A44DA5854CD72EC56971938481E18DB726
5682D8C0D97AF2B5A149D6D7E0A7495B7F609A9385AA9AE88BF94A1871AD4383
EFEA898AB410FF42931870D8BECCF75E8AAE922B3D5D42021504D1E88AA5FE29
60E8CB2B0C7006F51D0371A424D8CC083D0A84AFC0F2812ABB13197F83AD0D85
17403D07240FBE5FB8FB323A2903813B48F30E8E3818E6C26E2E719E58C9C8C7
DD284188FF22D13F8AA708819740F7E40AD0A63FAAD413DCD6FDF2BC1CB71125
AD286EC5CDF6A6A0C18021DD5D2E4C17461CC42ED3BD8DCBC1D5E820D51035E7
78F676C587F77C549FC26F04685070673FB4A27E098C3AE95D1AFDB25260FA62
4E774932EE67A4F247BFC1E41C4812558F82F400924EF8B1EEC85EAE9016C285
CD5DBABC2FA16D7A12CA4899D63954514B4ED16BF39CFCFACCEF5EDCB25E3882
87DE7D4E8F298B56DB9491DAA6B0D0FA56A989E356CF5BE5BD1DEE3082B80EF3
7DE559FBB0DFB1830FA4CD240FBC08092F863DDFE3E095544CF8A4999B66C044
86BDC9D4ADC94BD8345059ECA270EF61095752F3F1FB7354C72A1A1D369AA698
E7BA9DFA601377DDBBD261257E5D52351C48872CE882BD31B738EC6C3755EF9E
FB5D83CD27C6B12B5B918A82C218E7044E8CBBCB4A565A3C6F3E357BD8DB688A
417AE86B31F8CC77278970C0AE18814C862FEE4DF4D960B6BE3E6352E29AAE22
7AD853DF9202FE43C41B714BFC096C9A8908FE6541A402B97C702B5E552C987D
8C5EB08C94F66939E490CB1D0E5B03B8DF30DF2D1EEC51C385E912013322B30E
FA997D257801C503F6AB9D6563499E884F457628EBA70741F837A5BC0C110CD1
E827E324942BBC5CDAABB4BBC5180D10320F8B14A83BACB0EFB3E298231DC9E3
3F2DB1CC313C220BF76F28070F5DD0BF2F7BA4BB892BB2C8F3F61E39A08568C6
E18E55EED7FCB4AE69F7590DE761E73BBCD747E6B4137FA154CE3C1368A07200
24836B3F06823315F5DC75C91D4281F73908E91E5C33DDD3F17CCF8343F82D3F
4FF64F74D657E08C7DC9BFF45A634D88F22F20E65B8E3262C72830FDDCB80668
7064B924DB96D9F2A03BF824A2668CE94B1B8E4D3CFC9B6243E30FCB0C6BFD57
2598539EDFDDDC214D1362E44B37F66C6CFD5B273F38728C2A4C4A0BC801CDC2
D9516C2D6FD73ED9CC239FD6433873106C933CB82D90EEA3A2C3B2DB8141C57C
B542E3B4390FEE2C3A915CFBEF045829171A5100D4A26BA39BCCAC621C341B15
45248D61A3E990DFF7794736C31E61D3AC88D14A04ECB908007091EA678BB557
56BBBF40FA2FE5C413F173CEE423F98C59FE5B9FE5623FC19F4A9E5C8943D6B8
8C886BFA7E5B0CF0F85981BE05035389D2828C27E2740B5A3337E20CDAC6F729
A4D79611DBD29A4C76C64EC5C9279A9609694B52EE5A508E8126D6E8B96B66CA
F9B7D67D2B9AC8E418E748CB7A1642AF027DF277096866F094DCDA5A0D528955
18399B29A2E0FEDA523B8290D4812EBEC92CB8163F9C63F40FD3A38CF620294B
577EDF1891447AFD0A1BF324652F1E6C4242285BEA2C64B6D36A3D038DF70021
379419ED227992013CEE40FDCF5EE9AEB1921327B740C75549725964982CF1CC
3EDFC4A363DBC058ED9D62ECA0167B55C286827879C3D13D26F6F1A7F42C01D2
7DE043E2706F5B1CEE8531A4D05459385F1A27365B6C1B1220C76794540EE157
4070322D8BDF4BA210AD5E0A1184E47607B568DA3B1F37BC677F10EBD8578FF8
76897512ACF0DF546A24A4A104835D4C20558CEEAC32099EADDF5EF18FEA8FC6
42D186743492F9DB7228EDE0C47ABAFEA074FA17E03C69A28E2B32205B9D73AB
56983592DB1B6A97D065ABEA47FA39BB83D1D8E267FD79EB8030F40285970558
E78E93AA8ED8A167B35A601DEE494227A8EC508E275D3FC8119D3FCE4DEB1350
4BF9044E8050A12C8050CFCF6CEF4599D327CEB364D2C3FEB4BB707CD11F411D
23D4D88CC10322B4FD60A9F2FABC88C558490D5D30F884C914E44321E23B9E2F
169E299C67FF1425D6F4E191BE384C4DFA1731F99A0A35F56A60B423ABF54F2B
9B9C49F20266EBC448F266DF850EBF38FEDD44A148EC5B9413A57C495E263B75
1C1C22B0991EB2BF4BB161DC0193020F29F493718C4FC8C8A7EED65EF5C38B92
05FEF8B02BD98EB622E743C114090F12BA04D79DAF161353FEB72177ED910A4C
E00B91F0BF079E3867CDB3FAEF289ADF8C1213EFDFE7CAE61BC8BFCB44040096
B411A32350193FF536720E01ACE8776D1CAFDB224CC1AF95952A5C788934CD05
330E6A0A2CF421726C16AF6B9830763209AE6D4159AF4505256514C39CEB19A8
E2BDD475B76F028B5B1DF13C316D0FCFDD923A0410F7AEE8D3EBE10D140F9EFB
327171CFFE4534015C01E0CF0B938B25909D6C18065273EB3571258E5E36BB28
5C82EAD2D0B5894BB2BFF5FD8F56CCF6381883275D1504C22448A3B062734435
0F18829CAD527A992120E6EF1F45BCA8A0BCAEA0772CECAF81038BF11A996B84
B97C93B756112615D9464AB53BEE2C0ADDDC7756D91B3B1BB5046ECB54A853CA
A832B8AC48B406DA4DAF4A8406499C7FF55A2DF8DD347A996878D7CFCC94C516
5D6E66C301C3F23D125444831A370064F631F00DAFF921DAFB7D7CC71FD3FD1C
28E40F3E191F0096600AB806F94AF89F12360D424F698505FEB23433F1A3F63E
5F76B26B2306DE28ABCFDAA4D95C8E9AE928EB23C1EE81F0440B694DC2E4E064
37698CEE4C996720D5E9375F01B93AFCE95D2C52B7C183101751E0C547A19394
B6D468D8F0F972D67D1A1EEF2A46B661D13E265717654852F0775672A2D39E4B
5BF0BAE553782E16B110A11BE945ED3FC06F46D6D4D7FBACD75D6FA2745F21FD
9551F648C805CFA50E48953F47293BCCB1D90C387B972FCAEC8033A045A38011
8B1EB1EAAD8B4D5A9B120AAFB52DB84EFA9D4878725833BD6927C52632D9F51E
5A3EF8966126F54313A0F250F6883DBD33AB7867A10B0DFFEEA5F87FE790C757
AEBC919BF1F815A709030E073E6C39C519A962D2BCDE37AC23B97E41AEC6C740
1E8916826AAE658AAC058AD44A41CE3BD8056654FC94981FFC1B6EDCC3C10A7E
EB7BA39DC74124EC66173B380796C1AC2E85D1376C4A4C2D2021CDB1304497CA
7BEC83B44EA2F7FC6EE7FFB835ADCDA3FDAE3E8798B7DA33902967C971C1FF2A
E29C809B5852E9D8AA7621CBE4DC2A413FD77A56D0BBD984C966970F4F791277
89131AE23606A5C21B83954CB2204D7DEE2648545272CBB7B46760A097F067A2
D2FBFC13893C5B88366878625C4B2EA5362AAF1DA6E0D2C062B24ACD93D02AFB
10B806C1A9942E2A8FAF58AAE317ED8C634A789DD19212F1A6F78C90DAF67110
7404A91AE6990BF3872A2BBB9AACD749DC0F2C9B012DCAB64B5CDAD6A2343767
6C55D21C50F15AB0B246BBE55078EEECDFD3860A83A139EC432BE7E5C62040CA
76FF1503A82A6D57E750E0F8308F6DADD8D06AA8F992F127ACA241672704004A
61C5BF97B71619163C36491A9FA761A6F6A1386CF750CAA5CCBC1B92FF58C8F5
443185E64DC807E7E6E78716302EAE5850EC8F65F8DDF1598A0CE7F63B8E9842
645E9558010F7C09D0DE8A75A28908DC52F3442D93AE8BBC7DDA91784A56893D
46376AD7867294C130D46297C655BA7C38E535E24FA07AC73C5B353E84D49652
D0207E5EAEF60897D87C9798CEDC7D657BD20544FD14DF037596CAB9E52FFE6D
A3DDF26C38BDFAF8AC38C7775BCB3D120A714501AABB661F53C0D31E89334E72
4CCC92A8BFC45B1F73779F80222F9ACB0B19125D720C0AB123A3067F4BA31DD8
1DB9131BEF8B3EBF3FE88A4C789469C7708E364696968E21A110B63C792FEEBF
2729052C7A64D30956F3F80E89F5857CEE52C6D3D26E643BF37AFC3B626B38CF
AC2BA4DEFAAF7D2B882B8EF3525BCD936E2A82351879DDED3DC1E01C914C5E14
DB3660B1FB30F843B824D2A4C537EEBC7B37E7FBBC78574A23A54B6E32439A36
66528920BD032BA53C53CDCDAC50C7B4D77F2A74A6CF0936575D9FA058F533FE
793AC3DD2F5E2FBDB7091A797E8B567181A548EDAA108F0FAD0E9252477FCCCF
C9B9FBCB946EC872AFCC52B90965F3E2B1D6951CA486B6600FC14B520428E673
8A3F9136A7FB8B180D8402FF4366F52B355A60E95B190BBC94D919EA07A00BCE
510F5230FF8AD01E10D33D3832DA36CBB40F9BB1B92832B7CA29A909029DA3B1
97468F4AB51DA98693C2C2A1692CE4A777373388E6F89945232C43AF8956E53E
E8B15616153A184E3306DB290087CD2576CD4A9275237C9D27226CFE27A9686E
C3596B8C2CABFB82F5DADD6DABDE17906412E618B48AC0F49A3A3D92C12E8CEF
5A419ABDE33626D3FA50DB6A37F04EA33C539A89B620074D86DE7D2846844EFC
FFD7276317934537A2CAA9273D479C70EF27DE458C050DA9BE1DBCA57276F49D
BC756263BE5403D40DE13F2620309F0CAEE205F4E7EDAB19EF78C5C9DDD14C40
162EF3407035FD77124A2E2CDB6AEE60FBD4F3027CBE320F8C10B5BEA34253B4
9DF3C3E9A45E30052A59227C494DFD15D641A25CEAF4039800DB7A38804AF150
F07E18F68412CE14BB7C6512CC269D0E520976FB6FD74A67E5CAB46CF341B855
FD54604320C3A126310597FFEBC44EB1C97D073F806FE1C9327BE810CC5C049F
9630D66B355D0F01DAD687D0C9EF621A30D8E4C6547DD5805A16949C90B90E1B
BF9A3EE6647F75F51E465E34C3B81CE234A27A0AB4F57FBDCBDF817612A0E4A9
BAAE843FE45062D609B13A7AF00FD6B5673805D87C5EED17AFE3CDBE3DB62E97
2CB523F6785136607460FC2C5E950723925ED09994011B02F2F178718DAA4225
D06F45150A60639F76652222FC31B1EC8CFCDC03C2089C19F98036F1016D24B4
02DF29C367FA61A9F991AD32ADCF9B55AFE958685C8653D3EB5A339255C02F18
007666145127B38DBC46FD5377FB2CD29BC0CEC16792D6BC93D8622484D31FF1
15E4A72B111DE24F124066FC32CD0E6B82C07B39F242395116876DD6DCD0969F
F6EA9E365E0CD10C9FBE61C5837FA8D1F39C695E3A599C240CC4FABBC69A6C12
11A46ECC522EF9574B3A036E511A812CDF2DD21BAEA5051B6E9CD2323F265A0A
3A02B8B0B9E8F1E497C7F71C2D4C0762E19916E23AB9D03BD7FD32DC35050BA3
DBC2DA065E82A06C44F98444DDAB0B5BCB4CCC933C034EB418A91A86E6C5F269
2590B3CF1C86001CB4AA3CF892BD1DC9DFBE364FBA353194821680476D4BFC46
3CA6ECF7A37B4E0F502BD0069C8F9E9255827EA30372D929BFA1818064BB03B2
F3CF6CF0A38F784612F5D25F8E146751E2F69CCAB3A2AE164103A7D8806C8697
A0E5FC6ADA3E46E285C590742994293F654F028F8B1C8999D05DFC98DDC31A6A
0F7D0834F3866CFFF8F3A3C4069202D6F83A685AE6D70DD10D7437D76BE20696
9A318AC912861AF0C7147FF0FCA95014FD774F02A5E345536E48B6EB478965E4
CD21F5502BD6A7EBD15725D95076628C0CD0FF9E7B052EE737C22C0B7A0CF380
AC0C06C39380A829F60E73B27BB4944BD6072502D0F5391CF18056BEBED97FF7
BBD37C626233923D1104B2204F05EAC4FDF828B2F964113E99941345945E72D1
7EA2A81729D2F0F0C61CCC6E94C450A00A0FEA4F370B3D0BCD4BE861CF8112D6
121DA5A4488F07B06E06E8217C92BBDA7975523B7D9A00BE91B645638F0AD34B
217E03A13F5A743B97AFD829979767F2E8A6B6E3A9A103D29B3C72CB15FDCA59
5299F41A5A5718B16E9A26BFB3B0C20BA1090143907EFFA7A4B7DA7369414004
EBEF5ED79B21C54329EA378DAE968F3009019EEB617380FCBDD8FFB44AFC4196
BC16C08B59B18AD53E52A5684CC308B1F7EA7A9A8B3B6F93F27C6712C23ABBE0
B90B58F034AD6D5098374E40B01221A224FDFB4599801C45454585EDF05545F8
F4EB48240A4F0F9976877C119FE6ABCA0AE2BD5420F8D4C978371C9B252CA611
49BE31F1E363D709D4D98E592D54DD9BB34B68ADCAA24C326FEB83F0154447FE
DC4BD3B76505AA9884066BA33A035B7DE9581F9CA8EA682E838E78CD78661011
A78776FFE40F795E456C5044749C394316C18B4A48C5A3093AE1B646751AE0DB
002FC233D8797A60C9B6FAC43E2621DCD6D1DC713C9770ED13845FF0E6499478
1CF1461332F779B3DBAC7CE69BB90B6CC327677684BD3AB58F9721258B9A35D2
323F417E277AF00EE82377C85CC933F2FEBC6B7DDCC225DCF47A1EF502E351B9
8AEBF07478F8A0CD9F9084B31C988761F999CA7512B30AEE3AEB4FAAD54C214D
6B3C2ED4A06BBF6AD0A2F01D34071BB93CDAB4E41FB9F920DBA818709F94FFE6
17E39CFC889DDBD86AD6C52292A40F1A3B70711FD30D83C50F98A2B1CD7B8061
79A84C56923F2CE4C4EB0D0D820B257640DC0704A27FC9D892462C2C3B11166E
7BED49855FE59184BC4C62A0A4D85BE69394F1FC7B88CB6FFFB91C215BCD7B19
C717E63EE00C1C4D2889E5972BDE822FB4B15A4D17413692D83AE9954C7B6DE1
274D207B1AB48AB87E04D0D42DEB51D1540F953C84DA363B3CAFE616423FD9C1
37972408CFF3FB7825B7A9AAA67040C66362934CA3642C39534F53027AF23448
796B40AA05833EAB9E432C442C13FC27AF199C6C4483143EFD174829214AA564
9132F3186DA7A0754427D885B2DF3E50C5719322D070A5D9D8EA8ADAD86591B3
9F59554CB5968E0DF10B6B58B929A5CB5BFF2B317E45E90FCA3E93CF93BF9CC8
8B11582684AA032C8F03C342E0A6EAA559433F91FC634D26E40D6579B7A3CBE2
05FBCC89091B909AEEE0B9D1AA3F6C280DE70241F2754CA5113269BE0716A5F8
18CBB740949C18EB2508B9C8C7998CDB923E451D3E623F0C81C5983EE9071F3F
18E54BC975B72D35CC62C123B6691A2E606E05C360B6FFBB92EC3B8181F10F80
1A4E46C91BB7CBB1AE666EF3DF8FF76634D04E3AA6DE67942C2690E259BC0570
EDBF700EA235FE9F37D07EE32534AE06B87D475F78CCD4C68FF94189E7AAD024
4258BABBE10CF57EC6DCBE248FF02CE044520CC33592854FF37B2C904187584D
BD87788C5EF2BD4079F2305D8294969F5F6C6FA48035412FD7E505BA46A7E727
343A5A208FD845CDE99648DFFC11FE52228156014E386D8E1525E886226A73A1
8FD7E129C076E40F9275281381FD7972313C87065E5234389FDC660ECC406844
41A0CC54CDF044527FBF8D473237F00BF18B11AE59C9E64B87EE923B404B9652
2A04FCF53DA3B8D4C91196FAF71D77DE15AFA619E3569E10B3867EF7A3ACA2B5
9055F4D30EE8FA323820AD8FF7202F831890A61322CD5DDF9353055346E4054B
1C26BAE9D25D3D5046A79B7F2E4A36DB6B5F4396EFC8326BAB6D4573645034A9
A65D7EF5774C8AB9F79D0D28BABDA39B04564CC571561539CC0CC7F32FBEC9E3
AC42ED623352640F9EC9A9759590BE0DB5D4AC5EF7870D4AD718C305F05A37F3
E5384E8173E3C6730E822BEA6E07DDC1BAB656FB341FDE75C31564785B31EA35
81EDF12D8B745F4F44D0465E228D4BCD6D570F9F112AFF06AFAA48ABB83B67FC
FBE96EB4C20C91B46597E5A0632EFB8339B3A8C19A5808321401396E6EE85551
7D2F3BDE724B405993A63BD33653EED5465CE2B495921221BEF139C5FBE1A06A
90BF3DEB856DD1DBE3F7AC3F63A61D9D37716BB4DF299BB44EF0705B161F7A65
55BD7E237231D2318403835004DD328FE1C6FD1DAFE2E2E3C5B074E643A6CB22
7E12642BBAEFC2E7648CE5A122A79FAAEBB9E7F194DFB077E888CC8A269BCAEB
40DC1E023B76B8CDAA0DAC63A0F21672639FAB84DAF6EDC4FA4514E77660EEFA
D590B8D7FE31CF6E99CB1A097DF2924BA9C557058DB3C4778E4C823C9A4432CE
74EEBA14637ECC4D973B031C44F22FA9DDAA29AAF13D16160A957F78F7042623
ED028DF1F70C7275219FF985DA10BAE7F7813E5E3FDEE0E736CD679821F77F8B
1A2A0A2788EC4EBF19C09632EE51C4D6D63D71F871E86E062BD7E2B9FB8171D0
398D9A5933BF2D1668DB84FC2540DD6765DE5A1F222FB2C5FA5AD215DB3DA1F2
0A2C92429922C4AF715EA38F3F0FF4E8A5E76DC42285CD98D600A123A56179A9
8C1247F066EB3F6E0D868BB4A0510F09165F035402EA16765DFC548663257FDB
491E16BC0ED90215BE3CBE024C00CF02B4632408649DDDE9BE75D9138DC5340A
CD05EDA1D0FC081E07ADE700F912346D154A66B7972A85FA0475908F6A881232
1010FD849D8E5FB61158F3A664C50CCD903F13B75424D0A53C1E99FB77F04057
72295A06092C137E96EC78CD4847A7ADA4B8876A76FF32FBF6BFD06370078B5E
B76B27F0D099E102CDD6BBCF22C1BDC85835109926FB73EE48A2095745173C54
B6ADCE057F27B6F619D36BC2518985E41A1205FCA22EB92A58607A1F17E6595B
9BFCEB98DD9D8BA951FFE3C3F6DC26F831A468FE8F314FC9337E4AA7EE82C26F
2789C57AB9AC7DD7A22B78AF470EF70C834A7198DDD8BE7BC4E98A3DA68B8C40
E7AC0989E5323642066456B175CF482C442EB5033D3F0781EAC4D478502B18B9
14CE81DE7CA9C616189AFA9054A68B68CB5B231BDD062333CC659256A44A1888
B9B226694298B6B05B6C931C9B75608879DE5B778F090D825B9FE87FE89FEE49
42228A0DA1743F7F637E3644619723FA5E0F05572C264FEBA744D42C8D56E75A
2B6C9D40F449FADB8D8760DAFE59F091CA8FAA61923809D5115C967B4DF77CCE
6D7EA4E3D0D157CA6C98A7374370485C7AB0AFFC980FCCC1CD6620F7BF9717E1
97052EA1600A6499EC53A0B1D635397355E2B96FABBD8A0CD46498BE90CC9F15
1B4CE133D38543A7C9FEB3DD68918AD858D5A6A5C7B6386E8E6AA9F8E5C6115B
5F048FB4B1E8477F6018D92CE2B4B6F8022E6C6A3EAA7EF089D8F4196596A21E
1CB6DA7CF4AAEAFB01C5D356A28941A1B08C24A7DA9864699B795ADD2351DFC1
3D25643C7F1B6A8FC8827E3E180F38D5EDFC9A1766A0D1F7791C1F9CB4690A9D
AC8C52ACA65DCC032D9EBC150C0C42A0D96F6C25EC28A0567D297533D891258F
1F2FACB1BBEE9B400B463C62D82D98A601BB0BC0D9F3D56AEC1214406489F549
AD033FB67CF5439D6FAFA72F64D01538955FEB9F313D5B6C7BAA01C9E58815BC
F9004452E421C3A4C94C0103D70FB013868B1C6A03C8613F7F5B6FFC57C7D5DE
B281FC2BE1BFB822919A4127745DBB8530FCAA91567461A72436106B7531FBB0
87B2AF8CBBC8AB31107B5538FA059F2DDEE876AF9713A328F3324DBA3AC0D018
0AC15396EAF932666153409E9BD4F4847EFB299D875122DE8FFA5485D62F5188
18667A3F47E07CF92A2392BE087252C5F945FC9618E4256466E1EE37A1452FDA
795FC01419881E6CCE41FE710888F7E40BD795EEEA69F7375CDED2047D9E0972
1C76
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 18 /reflexsubset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 24 /similar put
dup 33 /arrowright put
dup 41 /arrowdblright put
dup 50 /element put
dup 54 /negationslash put
dup 63 /perpendicular put
dup 91 /union put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 110 /backslash put
dup 113 /coproduct put
dup 114 /nabla put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC57036537C42A2CE49D6C4C9FF1C3908F6
707398A95DFBDD74738ECB713BB7D3092869DF8074F736C6E8F94B200E4C41BB
3838C1D4DC86A2DC2036E37B191CB7EBCD1124EFAEC6E9B59ADC2C4FA5D509D8
15D59F6019BA306075E41798B479263FE89D4893E8C207CF9E3F6E1ACFF89B39
6D18238F251154B10116204CF7FA5CB5D5C5069DABA9E6B339839C96C5C55801
072C78B325382E513485971FB9ECBE1A81D30AD550D7C53ADE620448929820AE
84C0A508539B1055965ED2F17159294CA5D75681FC9EBBD82B259E00FF6E78ED
2B931BA3007833E53A063DD4C7AC02195DE71887947606BECCE03D98CCB05C66
38A2A0365B9227423C581A5533D6368F532F45B8ABC7E640E6D11B13732BA6D8
54799D268FBE0FFCED284A385C31D0F51AC4920B91F7C876C4F7E8C4B629290A
A02DDFB7ACD2553AAB889C587CD05A0A56ED125A65C742B3400F964CA21BF839
1BCFDBE760FE105A2BFE6D349DA6114C6B5504CFF5F5B520C044137BE4E2442D
CD220F9BF5C43805D66C37D3FDA87D2C7FC117AB23655D9F4491952EF9715465
429198D14062167C8F3E84B0D57F830595258A5DF91A21EC8C952688C6ECA335
B0B0838D0810BB71C9E951C1FACE28D31FCD2B76F5488A9D5196E757F5326505
6B70BD8A162087A65BDC6E3C9260DD89F246BD9D064AC971A7EA5278830E6DF7
3A0D510FEA1876BAA32E39246D7F8CAAAEC956C2E8F744CDB2B52149EE4A9600
CE66E490149A4104F95AFE0F67A4EF677D4878C98F4F8D506A07D9BF113CDDC5
C2FD16D190DCBE1328621662021A75A644DDDFD3B149FE0AB32D7BD799F75783
4144C144EADA58CA7506BD6ABE4F84315F3F53D09D1CF31A86B9BADBA0E4D32F
082FEE0CA002DCC9B2755B7939DA449E7AF68931D275D5DEA4AF018FCFF44648
4FAC3C0EFA44B6953134FCB423C2D9F353839E4520E58F787DF69CFB026300B0
009708B7231C072536482B4BAFEF416E44B2F71E3E7BA9333EC7E92D5EAE1C04
EC2ADFD929FEFB879B3DCA12173BBC38DF88975F351B313202553988BF303945
29A16FFCF7FF8694786365DFE32CD5587F3FE0CBCA08A0E23FA238D800A3E687
444272CC69B3F3B0B53118114666937E6258226511A4844D3548A2FDC01AFC35
BAEDF58C59275A3DC74B1E2315D34AD2B6C8C3EB09D7CE988D3938C875AAEED8
E5523D39AFC272FE24B0E1842F842C3D4254321FB9C78C3FCDD6A5E915879A89
C15B1D9C9B83544400D002316426BEFE7D32C844C9B55BC6DC33740E6FEA518B
8771E67024446AE47F7DD13EE6879B2DCD1FFC97203E61E768D96E99C5AF43F6
95D1BCF163A7BD5DCC16973751BF9D1EF4BBE2C2BD1FFEF9B7EA841905D0E2E7
2F76DB65DEA881308E5A2CD26AC7B2CD9BD55BF568E8BBF77C6C5E332597ADF8
9F418581E420732D6F49124F6E862F271A86897711E4644B8CA4F0B386AF20A0
FF0236B7BB8D641C8A90D880B7D64E919321440CA8974926FD76F36155756815
A9FF3E9DD8A93AB011C913B5EA99315753BEDE63716BA5368B47F3B7386F33D8
7E104A94C210421CB99F5A98BCD0B16FA052E6434BC58A74C401EC5AF640B042
A2935BC46B478628EBD976E09D60CDD7ED2F868D4AA1FB818431B3AD246F764C
5F37E82448FC268FB5A90F4D87651A3D7D721E80A6683855B93EA96EBA984F17
4A2C1B3572005B1CE7B55E1047284FB11E487B2419041DB19C1F58726C4C66EC
3D588F39C8F263E22EF6D06F3F75513B4EBBB99E3D0B2E6D61CA8BBE511BE4BE
8BDAF8F5888E098453A631E02B5E36274A5B9345C62B7FB277FB245E622EE53A
46317AE1795115615B725220C2557451B80F5945D487FDE9C4BE45B105254552
4DA3C00939E5CA2DFE55A265E173B90ADC094E9655929F669D87C66830F997B2
ED687D0A9929DC33DA16DA24B0E06164DFA751F368D45C7087A4E20F43F21617
8392B078E30B5313D682C9708D0AE380EA207F75F967A0939BDABEC608D87AFE
70F4A3D5C5CC87A6530351983AD32174ED5CB38EF8CFA77D008041F7A9B0E218
D23839689F80D8A80446BCB617A3B414382DDA3024AB0CD6206CD87C36F5759F
48A547291B143D03D5127469BA89A8E09E9A4F74265269AB5C8ADCC3B0C9DABB
A285B97BB36D15AFEE9A2DAB5CE32AE40A89265AD9148C10A4F927ADD8CAAE50
7D401F892F4B8DD44B241D76D385E62912B39332CB03C91E29B7A24949B01E51
86F9A81F19843C67B5ECE8CD4E62903E2E7F36125228BBDDFF964680FB40040B
BAB7A5B497B5A7433455FB5466817E89ACA70FA1BA2D451599AEC314BDA9F761
86056EECD53EA010500CF05E802F8303CB41AEAE6BEF1244DDB9C3C486D213C1
CAE7728264331BF7BF4976879EDBAB5A90999046D8282D688C61A6A2FAECE386
12CD04992CBE8B3846BF2B26827704D83BBAB585F1CFD0648E7CEFDA7815EF07
260BA4F598CC73F75B6014BE0B66CB3E5BA59CCCF8107817F42322D96364132F
D4A2A90C7D548596C287B1EEB5941F1A225C0F16C09F420E7707A812A83743B5
956F3D8AA99549B92BB005ACA9A69858A574D857BA80AA6759B0F367F036CDFD
831B8B38A2C3E21D8F46538B03E79EE43AA97D794A9FC4223BA8F6A242A88D80
BA4E00B22CB83DF66D108AA72143CF55DF041D69713414568E6712218950AB69
EBD2233ECDB4B90FC3887016A76651A49C582FC6A2B53C5A4F0F88846068E276
6FB235D4F443A86E484C61EAB2652A7A6C019ABBC52C46E524015A77E0109CA8
C46EC6862BB7B973B2BB147CD0650E4079DDECBB78DE6BA92C3A3499B3C19ED2
D8F406C7D00C1B90FEACB49BAD3D3407D5EF9B9D790E82C9682BADE1C485B010
351FAD01B4E800DA350304188EAD09D54D0700A73E227F4F50BF6C714EA0A43E
352296D8F335BEA3051EB2A92F6FEFFD6D1C4D20472291AC5F90276C46443AD1
DC6E0A943927DBB571376CF123A3B9F97FC824CD025909F8D789827DA7B171A1
BA9B7A85C86301599D4668723D7DB5C853DCAF12FFBF161F4D45F15F1B90CCD3
2198F3048440D630D40C0063F9EB162A3BE5C769A70489F1C229052AC00C54D7
13BACD7A3D18E912877D850F69EB1B5C82C2B4EDEC295429575355A67B68A2DD
498B2A09D32E01B2C101F940648316D50D7638645DE780983E651A53929A7F27
BC2D3A92571F64D7F6880D8E3D11E980EF0514260661D45D30D9A7C51B078180
7B30D7DA026AA86D2FA62FAA6F497246A0485F4509EB64F4275FCDC1B99E4870
F324063FF6D88B68A36EF54572F7FE49F7F05945276DB83B4C90CDF5F871115C
6DDA536AC06A195CF098768119841B610D3AA43789D58C8FFB44666F555ED410
1CEF5CDCD47DBAB1715BD9C8AA4A3E9B071B4943E54BA3CEAA1534B7839A745E
BA028EAE4256B0FDF4465A1132DF2AC001EF44391CC037B8D096ACB4DD24AE50
022FBCCD52BA90796B6D03F8CC373DF3E8D7637CA79BDF6535C538FC8F121456
D72AB56BB606D72987560731E9036D2AA7EBEB2CAA568067B2EB2F571D987B94
04E15FCC4D0269662554E1425EDE54A06CFC409EBB7F19891D7ED60D9F8DF200
120AB1F8D4C40504A4723DC5E29996C93E4D1F92C6BA336B3B2E03E614E04C34
9651284DB28B1B5C90BCCE5F654F4119E0AD07BC532A0B7A60D10E1B30443AB9
A6D307AC032A875EFD6D00390C517EA0FF7CF99A1DCE1BF5D73B2177D9B0156C
7351DC701795E4AD455107FC5FA09E641F0233259B31831E977D0033013152E7
0A73DFEAC8047780D7EF402A51DC87538D5A6F30C54D7664EA115DCE0ECA1BD0
85C0D3A0ACF844A50AAC81751BD1E855C872CBABCDA7A311BD52FC5BAEF3F848
406C042CE703DB183DCD93DBFDD25FE832520D507F634F3DF4BE712247F4AD09
E56244535E1B75F27704DD35950BA4EF91D526CE9EAD91D1E83B3E59BE4D3FCA
F251FD20ED2FE8CF5940823BD50C6753059D76FF65621B07B0EC317BC01C7600
2A426EC82E6B041ED253BD8E852622A04EB7AC77AA66A84B451FF8A3A2EA5A36
16F0FBDAB044C55054798C534DD9176FCBD74B7D9B042D93FDAF82D66F80E663
5F7E8FACF40C05FE8E62420B1F1BA0BA67FD80164A11500524A51C58D57CF81C
150283F3987205B0FD42244FEA34E2A4B94AE8A3D6D0FC10379A807209627A90
8FD58E0DEC1C05907B8CBCEF97B01142297C4754A8F2CAD8DF8289E38B606370
638D21799C8579385C4DB1E382F1F28AF9C496DB7AD1312A58A2CCA8D30BF593
8915E289C1760B52E5F15C66004BFA86974885F4EF5C37447AB0ADEE0450E4E4
249DBA1B241E6506EE55E0C85B92FFC63EFE0E1AD1313736F175ACC1998C663E
718F0805A44BC869A03115A11BC0B642A583F748087AE9FC41228B035E070285
B38B8C2AFDC49E82D08E0F21124EF8BEA14D63EC8CC85A8822F2C30185D3E6D6
65CD5F6921BED2FDCF66511783D6FC8E3FC4BAB258A77A99F63174F069E2A0ED
D85EE84CDFA25DAF9C068B05617AC1D08E2259B03D5E0C81057FBCBC5D3C3B09
314DEAFFEA623FB1F20BDB2FD061DB058B16EB8A47415E27B9001E4A47E3E7AC
A94911E39C0108B5884743A82E800361ED0DFF71AB03BDEA631A454DCEE90EAB
4FD2C0E08F5C4AF63B40C608DC2A2DC8B157D2CA488948712D61A422A9EEC1B2
0E1B79AC673DAEBE91EFAAC3A9DE4F0759C94568B09E7DED3E67D8BDF00C1350
294B722158191C54E1972F2F10412F7F08C039D48D4BBE9568BE5CAA07B3A16B
61356266C1925C41520BC113A5C862E021C0538E915F22164A2896E82D0B8DFC
50BC65D6791137B904C78DFDCBD55369C6F708C6A0FBDEA140F9BC3680D9BC4F
9592828F761BC62EC5AC6F0405FD53B883D8063B15D7FFA9A93683F732728FBB
6DC0D7B2D201A1E83916B676A4C46FB175D2387BA09AA0F151CA8D6DE1698251
DB44A61ACD655D70149CC7108E3200EEABC012C45AB5EEDF5ED3EFC085459573
18E001C82B808D9B9EF8CBF6B38AA2B07046B022B573DB3F0BA5D7A6BE2979F7
D5D64E0E12FF4A72A2A6F4E35B4C308F6C51D3421650E10CCECB3D31D61AE9C1
6E18182C210DF6E817BD1FFCEE556402AE5149D4BBB787FF15DA42FC29B5CFA6
3A61D28990438881D01E661CFE41D7E06285133F6A89680B83B7A737312A4FEB
9F14BEBB745FC370984BD95C811C7F46DEBDA369EF2B011214FF475BB2D4E654
DD2BDC00134D6A834FC913E27CA36D32DF337713FF2E91861FD89F8C656D52D2
19697205027CD0AA491A0C9D4FFEA6BBABAAB5D9618F4149BBA5CAC9E29BA18D
0DB76B4EF198F2AB919F934077F4A2A39C8A3B41807D758EC1C5B6867D2F446E
55FEE984D6C5D34876BDBF69C462C5665AB790EEBB4EE96F5D1034A3A59733CE
F56D8F7FD878ABB5FE3CBF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
dup 27 /sigma put
dup 37 /rho1 put
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 102 /f put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
956017667589EE6908966A17DDDE40C2FA52A4C9DA871EAC51CF23BFB0DABC65
D10EEA68DEC82A8622F39F7093EB92D42EAA94CCB3F73193554CD27E1C1F18CF
4397BCBA449249B88948126F9A6E208780E275288A2F74BA9F9C854B89CF2CA9
1A8DAFA363AD87CDBCBDFFE384770FF4E1E0593A5192271DBD9C9D81C83EE551
5BAED8CEDCBF48FEDC69E4527DC2199F525D233BA7DE8F2439C7673004C9B1B7
C2866FAD9DD2541BAC3987A0BE1334D35D934D26167EBA01F71E7604E6DA0283
98AC5A53A449529061823DCD92C1A97CBD2E3D2B2AB6B0A400D5AC2A1403AC2B
89E6C3BF832BD0410E43A19EF27D88E86B2B47BB939C836F820B482705B09204
CD87880324C112DB96990F84E9660C089A2E8BBFFE626983BCD386A39D4A6CE0
1331094C2813DC8059E2F721D420F034E55710FB3F369C7AA17929A07A6FFFC2
5423D2AA1E67E737C72BBF1751B633F69E1083F8DC43ADA711521E1CDD0058CB
5F645E4014D34D8E2CCA1B7AAAC94F57CEBCA0F28291891053AB8AEE8BDA1D96
A2A5C3F89A8E67B12DCB997F0DFBEEDD980372B0714134CA4BF99091FF7B64CF
8ED0992E84FB896B36087B76F7F33F65F03360180EF10030277986065B46F9E1
0D5BD7004724FD4ABAC2E16FF9AD89620A9C21DF8A5C04E7E91F0B2A9F8297C9
B449F98FDF373FDBED1674168FCCD7ABD0A31E933A0F4D9D124A2066E4C9B80E
C514F51C823BBA876133E8B86F18619EF228638E323BE3043BCCA60FB690E384
957B6E3A1060BDD24A7465110C1633E1653F8E0F6B2A30E3465C784CFE95DFAD
55ECA98EC199793F691CB9A6E0261CFDC0A091C9FCBC66C14D445088B0C6D44F
949F972501B3A04E3B54D78E4A252C4585B49BB64009AAAB1D86D3ABBBF72DA9
5DCB2AC8EB93ABDB9A88BB551A2037DD2A308B8BE33CEAE7278664399F89A150
8149C2FF1D26479861A6114739D86DB81A564B4CA3478D802553C91B8480C8C8
6966A3C8F6A14FD797627F69DA189D43211E6D68BD9B4A1A45737441050E1FBA
CC664816B1A8CAF1AB9EE1147EED35AB93EBF811FF1B2B2D997E70DB9AA3ADE8
2D1728E0F41A04B0C0A107616B42037F1B15DFDD6A7889DA0CD51334C0094DE1
42C4678AF2456E55AE750CFD6D20C603C17B5BB6F266A0EA50B9DD948637333B
3007E0DBDD1597A0784C501BD5698740940C1CBDAA4BC4E1315EA529247A63B8
827D22CFE5C9FFC979493A0683B50D5311979ABD448A6F5F5B89DF8BD5E9C0E7
51BDCFB9E94FB4DAB6310A72A58D226228DD52C8A7B07765767231B085C0E71F
B9C2EED5C18ABB3F5D9DFDD6D142D957351976E2017D4A7C54066C9E54D9EB55
0491FCF0F79D2556917EE006F6AB391D08F3D6B5271BCA39C2E5A89DEFEF436D
1072A80F07A9B5CD81690940B2DDB5A1222F814CBF5DFC50EDE8BDB416DAD06F
90EFDF90129356F7201D55060D9EB38C309B96536268955AC3EC23A0631ACFF6
A737C18C0761EDD2CD0338D0C467E491E1149AC3896A1E6573140D2F058C34C5
CBDF0537054A473E7989F94A2560C573629F9457241D5BDE96967A74B7C18106
C713D329810D9428B89E1CE022758DBEFCC39088D32F4BA8A88B16DAA3CFA8D1
076124CA41DA968D7EF60322998EF87597BEA807BDF9276EDE7B234E4FD9FD2C
BDD39AA8011D694733E40547FEE163721460DD56B644AF52F64756A51E94032F
504D1A7E9CD3BB35F69F32ADEDAC16AD6B8F6A2B81D55B683E6E137DF7416F4B
3A03D85DBA3C92538636EC95B563E60F512DA93331E6BBF85E379C64996E36A4
CB3E89A0F1AD9651DF0556AE5DD99262602082C8E55E3616802C4895DF69D4E3
6F5E2C4492C549790F14F1D733A0E8AFC19193D653ED909A081A902030808D7A
4A1ED1A7A70524F32864A86BBBF3CF4F4CF164C776120301E681E3E8AECD1518
C1279A25555EA7B692A6DE2C95E7B63E354DC452FD71C19A652E6E4ED976B09F
B6842C96225BE2B8EC3BE2548AE0D43876E4FE79AB35D285C872993C53B96225
B680119D26140A306BDACBBCE13FFEBF1840472FCB3D9AC4AC6B05D5A2AF95E2
466239BBC5A75609945FC6D65455ABBAC97256D72D67E30EC9B44C986B65F23A
E28EAEB07E3F537BCE19E30022ABF028C9B719E5BDE09004AA1AC2F01627A160
F651B7B05A9D3A869FFF0B9376C8B92BBCA64DC30B999B766C0B9EDC03600FC9
8916FCA4F39819D76504708EF3EB61CDCBA7294B25A359C41827444DF06F482C
569AC7F12CB6A06EED0EB72B6BDE9FE80A24C5ADDC84DA64DE7C2591285BE00A
9F427799995DCC5951573FEC30BC9DB6CAE5D9632C4578B59AFE158BA7D517E5
DEAB34CC412E9E88662B30BD27790B9646F484224D18AC9E09A5FBC15A07992A
66FD975198A4AE8E1FD22C30D5201192A78632BEFD498706F524A616BB8A34EB
21FAEC793A9A01E1F46ECF545E824E1D78868A97A9A49AA6B801134BE7FE9B6D
4E70A67A98BA3EB1F4CB3B0B2D20032ACEF66E6A6033992EA02BEEDC02529302
9FB4AA7964F11FAE1BAD26A8A29D6DE3FD6A4A2D299800370C20AD8F9AFE4407
244699BEA284B8FDE851E6158FDF202B0C502AFB00B5DA7AD0B5D82CEA62115F
0EB977A6CE29B30840B3A3E0BF44A616322D210F73EFB5E85551FA3C0C32D7D1
977B991D0DE119F822482F5D7D9935EBA4342E796FF2ED97ED3C6BBBA06DF6CA
E3B82CD8603EFA34CC42707ED3E17D99A0CF8EDB6D9A01DE39D75FB2A6922B64
44F417071A4CC85DBF025F1A759AEBE075C81CCA7808E95CD08A4E489C88E928
2B7720721EBF73C9042B8D9C97A51883D67430E88122159D71DA3A2A88640B44
7F48FABC404D53819E40C8E13D7495D860CCFA497276FE347072D305AC07ED3F
A0BC351CD69D83BE95CCF44553D1E7CB638FFF889773A870BA446ABDA3503CCC
43644C5C7E37B4502A3ED1D42D81FA8F95ED41ABF350957C87D61CDA5812BE80
D171D7E58FC9EDA2003AEF14AA7DB20F5C0B84CB0CB70725F3AE2E8392B2000E
3F2A6FAE7CC83F942A388E800FAE3E70F9A3F5638341098124D25495B5DDCBF4
6DED9AA6FD5D06A3CB82F920C4686FFD1E005124ADB1E0641BD992D8B29A90C8
406A833EA9DFDBB4344F8BDDE73D62C41ED063B86480853B12A653767FAF5557
E3583EDAAB34F8EC44E24BBD126C2469CBDEF71BBEC9A14B13113EC93F0CC641
EB0AB37080BB4877D4B646DEFBE4B556C0E1E017F204FDC2C6801A28682EDB42
51CFB001AD0CBB5FB2AA0CFC2A1F5331FEFED43220D08A274957E465799B5BBD
1AF57E685B3F187EFB6266C8E6E82D4C58B1030741926519222A78894B522952
CF4E6BCD56D931EC30C05D20CB17539DD75633C975C5335B23C86F37DD71E793
4DF9A5490C14B05A4109A61F37CB358FE1577E6529266E64A85DEE3C93C727D7
BD9A2EEAE7F155A90079CA1E7F6F69002E001A73BDD598B17216559B191ACEDC
D1B8F3043416822A93B93A75D66E80B41A872525780DA63EF4559558FD3B7FF2
52295D1CD892246C830FA8DD3E7E3942802C83705460B0FB97D05E3F5C02511E
79D247C00AB4098470AD384889F290B79D3CE100E6EA91AC5EC1F17BEC71FA42
5904956EE1287DE5259494565196C67F215347EF56DFA593FFFC00C04A5A5C38
29E3D9BA2CC6B5D30C08B030FBECD6DD4B4CDDB9E7118A04851A32C49EBE95E8
85F847A380B8D42F5817267FCCB0224C8AF35B4CE021AF27D8BBCEE8F0B3F0D5
F76D129FFC953F7098D76B42150781FC4B1BD2A249AFCF1C2EF00530E1E422B0
27C47C97BABA721C5652B26E02FBA7078E4BDC3F8166197219B78E399454895C
A637D4199DFA43B81581BCC4373BAA1836ED0A35D109A6B52953E03050C5F4B0
78970BA10FE3F7A892CDC79006722EAF9D2A06F4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX8
%!PS-AdobeFont-1.1: CMBX8 1.0
%%CreationDate: 1991 Aug 20 16:36:07
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /f put
dup 116 /t put
readonly def
/FontBBox{-59 -250 1235 750}readonly def
/UniqueID 5000766 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F05C11F9A72F5DA508C30BC4BF52C8B1EC5FB
7F9DDDD0964A6D59193A389D490DAA6F6ACD02CF71C06802F3AE5A001F2B3A6D
EEB60E9DD26DBCE1D29C825A9BEFE3A6572E70DC7B60344C3E0C9C77ABE1804C
7ED61C544F0B4A3D6C7662DE8575C07BED3F6DBA7D64A9C8613AA152B74A140E
AAD9B66E0FAEED6AF9D1820F361C1269A5E90519A3E6D40782E06778C0AFAA30
E8CEAB87054C4D156C1B14B4E8471D78648FDAC70A3B8ED474FA356393A77420
4211F60E397D2FEFC6A8D91A80C84EB9E38E663249FB91D5C8A5CBA68BA04272
5D5D42497E1CF5CA1E62EC2B139F5CD4D6318EBBA7AE28614D2D88709C2A3762
611524B8A1FFC7B0FCBAF77AD8159C354F4887DB1A27781DE0A4BA7DF2CE2025
D9278CED48584E8E6BDF30BFD24284BA1DF828B637BF84A02908BBCED67372C9
EF44711BC2B1DA343C8D9D27A9745525C774F5D639B7AEC197CEEDD06FD27923
35ED0D402AEEB51134665A47847429D91CF419CA9B09DC905F610F8DFC54E606
ADCDA19D5CC68A7BC7108EC9236C64205B23CE68B9BC38EF3E5BF9E0E6ADF404
7365C8D0436609438C82EEB2F356F79186DDF6C1C797D3C278108B1767D15178
C4C3E8ADC2482BAB9536AE8419E5CF3EE1B6E53BDCE2A83E2E485F496A562C10
B3F5A131BB19D1E5414C86C5F995521076340536E10613E42779FA15EFDB451F
53495CE8EFF239E4EC442E1439594549D45F5276F93D496C9AC712D762D0B702
E894290BA028837304AFDDD8BAA6564E9DC307A14A7A206550FADDC7784DE3BF
3390188BBCDDD929C82B1D7B529553BA75ACF5B385D31EE3902D96B2B5DDFFF1
9F0F90FD791E54128C1717F313486896868A34FAFF22E23CEF046D02C0880503
672707BC0244B02D9A8DE89E72083C14E7AB162CF544738F396940A462F5354B
5EA8D6DEC4802EC1ED3A9B01E26338A31A40210DD5BE11315FA599F2BE35E6B8
12A2F94A50C9888A37368F350F7EACC1EA85F0280FF843D5662A26C6136B0D23
B564C7037C743F3157B4BD1521912E08418AA75859EF9226E4EE173CCD7CA383
8322768E36AEA75C98E1BA744BCBFF8949F5AFCEBF54D98E51DDE57BE99BA957
82ADF9727A634BACD959E89E5DB642C89D01DDE75A967D7F61AEEC6B29473EB6
9149F3B48EF4AB78AF2C7C20849EDA103742C45CE637B5F5544CE9A5D9F36254
97EE954313F30058C8011495EA19DE6EB52F11DCF94C63392B9F796A7C45631C
DEC8A4CEFB7B852EF4BD316548C37E05D5EC2DF9FF585EB89FE4094666F7559C
A5D0FC63756F6FAC91148E4B3FDF8DCAADBFE70810A47D811BFD1D7F61A47D5A
182F3D527506C7FC3EF6A327DFF51C1B187B0738C11571358772E8D89EA61783
1A2E5EBBEB25C8E868673A790B7093AFFD51E29B493E04F96B7C3CA7ABAA3658
DCF00C065169BF41D3CD48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.1: CMR6 1.0
%%CreationDate: 1991 Aug 20 16:39:02
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /caron put
dup 22 /macron put
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
dup 50 /two put
dup 94 /circumflex put
readonly def
/FontBBox{-20 -250 1193 750}readonly def
/UniqueID 5000789 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA17D1AFFF95F4224CF7ECEE45C
BFB7C8C77C22A01C345078D28D3ECBF804CDC2FE5025FA0D05CCC5EFC0C4F87E
CBED13DDDF8F34E404F471C6DD2E43331D73E89BBC71E7BF889F6293793FEF5A
C9DD3792F032E37A364C70914843F7AA314413D022AE3238730B420A7E9D0CF5
D0E24F501451F9CDECE10AF7E14FF15C4F12F3FCA47DD9CD3C7AEA8D1551017D
23131C09ED104C052054520268A4FA3C6338BA6CF14C3DE3BAF2EA35296EE3D8
D6496277E11DFF6076FE64C8A8C3419FA774473D63223FFA41CBAE609C3D976B
93DFB4079ADC7C4EF07303F93808DDA9F651F61BCCF79555059A44CBAF84A711
6D98083CEF58230D54AD486C74C4A257FC703ACF918219D0A597A5F680B606E4
EF94ADF8BF91A5096A806DB64EC96636A98397D22A74932EB7346A9C4B5EE953
CB3C80AA634BFC28AA938C704BDA8DC4D13551CCFE2B2784BE8BF54502EBA9AF
D49B79237B9C56310550BC30E9108BB06EAC755D6AA4E688EFE2A0AAB17F20FE
00CD0BFF1B9CB6BDA0FA3A29A3117388B6686657A150CE6421FD5D420F4F7FB5
B0DAA1BA19D638676E9CF159AC7325EF17B9F74E082BEF75E10A31C7011C0FFA
99B797CE549B5C45238DD0FADD6B99D233AC69282DF0D91EA2DBD08CE0083904
A6D968D5AE3BD159D01BDFF42D16111BC0A517C66B43972080D9DD4F3B9AE7FB
11B035CE715C1218B2D779761D8D7E9DEBE277531BD58F313EBD27E33BEF9DC5
50C7821A8BBC3B9FDF899D7EAA0B94493B97AFEAC503EB5ED7A7AB6CCCC950AF
F6A29F479A2D64381EEF89EDD5ECC4C8BAB98AEAFD0753A44EC329AD3A6C52E7
903E767DBAC5DCB18ABC401C77F9F4D3AB0D9D77E14D670777E4113B4DFC15A5
59FA0FD44C3025882C1DE9D06DA0B1C22FA12DF2792C1D6E511CE6DEAE4A2F8F
6352FE6E64F485AFE5BEE21CE78543B89EDDE6D9E1BF4B156C6F5C927455CE26
6FF5AB28DE41A497154C324EE1BB4E17B9CB3394EA151A6F565E39DB8A4DD050
13539B7CB4EF83B707C7A97B037FCCEE2E28D36A98E4A0FA396C4750D9624B78
DF7147D88A34EA3868BB3CA41AA3B8B652B214A75A894DCC1EC3DD511CEF10D5
0E7E5E11366349B1FE917267D338FD8A713B4B4BC1BBEBCFF68F8B772FF7B419
EF5A9274EE4E2F0F10EC39FDA4FC2D2193F4BB996CE5156C0201AFA845B10BDC
8106019A5B26C5E95B502869F0F9951AD096368FB022E8AD039F9566DEFDD339
37AB198CC9DDD0D8DAB059A3E77EFC7966F0FEAC58A2A8AB45F4C8FBA081B318
13D119906982D24B6018C8EF05AD97F9DC3379E050C99B00E77F643EA0972C1C
FEF1D48DF018C1C23DE08BB0D983A6D2B07EAC6EA0A3F6D129DBA29A7AF5D05E
B6A58890E99344716AC4016F601B8C987F34BBB8FDCDFF9B4F14B19BDC8CC9EE
7534E29A4FC01F6D6701DF93FC2B1CE2CCC690D2B0A352B380A71C690EE9AC75
77C8EB394D146847B22578FEEBE4DE9BF76B46E40B141AAF1A1B988D29CCFF08
9F9C30F07F13654985F8610CF68EC2401B0DAA64C3B1B5B5F1AE13E9453712D2
D9031D2C0BED2A4948CF5277DD0F598BB0A819CD4DA6A26B511B3CC62C7CA6EB
32922591A96CA47D90A4E5556F6B465C914C4512EB461EEA89D08CBDA99799FB
79D85D4F3AFFA8AFA98E6F346DB57EDB3E1A58A5C68BCFE79AC27B9F219D2CE9
01C8EB3A57FC50EDE8F1E0ED1A41E28CABCFF13D5F13609488AEA4D14D724E7E
9C887D9C3E07863D2C603060CD611B8F4E3DA009FF71532AC157AB3A773A119E
AA5941F43A0C457AE85E32C594848C43DCFA7EBC74078D6136DA0EB2006C676F
AD0C9B410319F5A0E49235224B5EE39848A2C0DFF2CEFBC0E5400AA8358BA502
7C0983508C8C8843A60257BE6B8C9E8336EB8C2D8C0BF5CBB467AAECE1AD1C6C
3FFD165ECAA6585BA68B73830A0BFA917CE84D1D7106C97BFBCB92C7D2930945
FB8EFA7B766A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
/UniqueID 5000828 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2D80B2772B05DA60F3DC15A815A6BAFEDC399C7956E75
3851CB3588E22936FBFB63A58300298B11C45D82385C083D07AF133BB1BC941A
FDD9F34D5E0B8087EF2A58C54D8AB7580EE3ED58AEB83B72CB9028F472ADBF11
05A77651F118824F6CD00209EFB60C1D32D46A78E8C8DCB8B0E742828E3B7D17
DF5200D68189C91FB8489CDEE8BC223C4281DDCA5F7DA80BD5C2D66A13AB49D2
3BBBA5D38653AAC7B813F29F450710ABE135CA3AE2ED2112731C8152ECE13039
132650336D906EC4B1E471C17C132E7A1B8DAA02A55E2DC4124A2929C3989106
57C35047F319DF546D864BA17C5A1F360D570FE860C5C364D00B68778B5BCC31
A6853DE483B1F456B72FAD584CA518CF445C5FAA7A8C67A1170A20528761B662
509A633D41B7E72C38A329709A0FA14B38EC39164AD228A5F496C48EE1FCF6D7
412E372C9B81E598C9C34E162B1DCE4E459BEEAC801583400AEDB908A4B526F8
E9A8FE55EC44E31FEE209670F852284C4E25D1B2BB9E76FC896177F04287D6EC
AB3D822A47B52856F658D1FB4DB5ABF357AC6FC6A21C36B607DADBE30CE4277E
821B29D113FACDA66173C315B0DA3026036B93CE4EB04A901FDAD940419449C9
7BBD0737EB5ECD03A2EA1B22386C7CCB17710BD074B1A41C4B7C314DB84BCF62
683ABDFA3ADD392A743203E260B863283CA2A70719161C2FBCB59EFE595532C0
5B475FFBE17188D0A6C79DC53C0A339E993C7855EE1055CBF04B8BA2374F2F24
1DE0285C566F6029635BF6FA88DE324E4F5FBB8BE8D7007D511E51684C029F94
31060C99AAE9ECB5CDAC61CC029F407A2F42B205F3398A6D6AEBEF4FF19D8C66
68868F8799D9AFD2EEC06A60E05BA4F4E66B8736B41D9D8076C641FAD3B62382
5D2F169FE85EF76EAE884B993434693D05D1EBC8D4BDBB63CF1106FD12525564
02D80651F0278079A722D46046355FDC0285BC39F9C7FCEB11643A03558FC231
DB01AF329CFF8A29DE239F13F16B6A3F0BFAE022329EE320F3681B3F0A562FBA
DF042D429558054F785E36DE77170BC9031BD147DA40485D722736E2D5801889
66010D101C2587C81E41A9148101106D0914F81DB1A784AF56A6D46F6D80E12A
489D14AF28C64E81F7DB9404886AAD7A09FBD55C5DB200B361688AA71F0AE3E0
D72330C68F90F5ABE29AAA3F4FBCC35D597731C13AE4E86BACC6E1E43CA5702B
3A81377374DABB966460B5FB835AFA2D9086A48E33F667BF5F060EBDAB6C8314
E602BE949108F2F497A4351E4A41371D6EF852CA455A8A78E966E1CF1B22D967
91AF34BFB71ECAB5691FD007DE626B6822CB79D309C732C68460DE2632C0D3D3
399509618AA3C77192D70B3D658210CB63F0A5F4C421F688B4659E0679D2B324
42CEFF4026FB233BE164CD89E5D4821FB84F4BBDC975E8BF3A213EE5DCF1A7E2
8A51E44CEF5B4B63D3AE303545FBBED1092F20616F0E8C4852011C7C49C026F2
A8C36966BAE242AF32F3DB31E9B8E9F54A6E08372BFD4713DAD904716F6BE3D6
8AC5F54287138CE045919D73AFDE8275E2EE718E137897EE1A04F68139416A4D
1B10C70190C0BD04DED4F52D17B23C8781CCD5B0775F1BD9BB107A94153C3F59
36C8A3C8B2E0189A59559311640681B4EAE921E3635C8E9AFF3FE30BD44744D3
E353368A38A00981B00E154EC2AEFAC6A223F57A5D442AF43060A35807456915
ADF7824C58F42E998FACCB733791CA128CCEEAEB12D1BE0B741EEE99D0B0FE7F
0951D740AE202D4C6B351FCA1B2893617A900BE24F6C5641DC80F37EB12C30E8
3097E86463B9CA5132CEE8AFA3A7CFE08CB7A2C4D2CF61E2EA8667E7D71D5A01
D51F87B367E90FF9352C70D987BA6724CBF838848413C4545C5D4F5E79235826
6AD4BDF74A7FDA106D7D38175B415EC126706F06B83EF32FF9C2377B6E9BBD13
897B899B0145A187C40DBB26F0A9265D1D6FDE4502E8144F54AC1106205C8B52
C4F282BB16A205F0E8B9602AEAD676B07E78FFEC434FE0ED550D2F81301E474E
F7FD1FECFCAA12B906523A5419D881067544C3EF965C33E533C941AF5D722119
0B103F2A11B8D9AF4D4EEA305B4C2C5C932505D3678D797D386F77C096D82D80
DC213948243D293CD246FA9B65A84102B7500F5164B19AC9FB98975821BAD8B8
FF737C53FBA9BA110253C68ECDBFC6B1729ABC2E5B2F2C6868E2ADB92F016772
5C5A182B03B5A47D8DE84E67C09B2E18EA9FF0F22416C17A0F3A2578A7F7544E
8BFC17312CE7DAB0EBDEEB3E9DF43ECB52DC326D729132E805C4E2E8A1128C88
C574766C5945578B1AEC197066F3E9FF6600A76BA169871FBD95B2E4A01E93D9
5A1DC809DF503140FCDBADE1B87119397565613B837098C63DB0FD6C89DEE46D
D3DF3EFACDD27E2CE2557B062916359E4EF708938135E94F051CC7071EFE9D9B
6F30738199870D6C285FA5CF3A80E636179D3BF9982E93CDDD4B3CF7554D1673
C662BF4799EB360911A7EB129276C0216B7C2FF0A3B09F1A25D611F88E449586
A4730F36EF0D1E76D22A6A4F1FA62E648BBEC71F641633C6E827643524CFAE56
8273E3769C02B63B41C4B19183A4E9667701D8FE364834CB54CA9E901D4EC493
FF672A89B304453F259CA55D40B6069D52E5B0EC722115961BB3B56542826FD8
9532E1A888FC637FED428CF11226B6EAF25EBAB80B5157FC991BBC0A6F71A5CA
762639DE4D2C4E81DBDF3A73DAB61099BE71B4382C41CC977F0536A79B516133
526499525588473331D477F63B61AEC5D4EE657EA309E823C35C01BD69D5DA4C
9954CBEB15D89CD7FC704E4686043C6B3B10D9A8DCA7A4DB897798634A892DB5
5C701BB5BE99078D4BDCAD2D8780B158B75D47E4DDC731143609A2CFAB20FBDE
64C045458C77E6C5EBE6BDB7FA16ECBC876F41F0ACACFD7AB229B655F3B1B549
CE4CFBA534574707622F3998FAFE6C11EA28DFC9539F4EE1F1A7B4F6BD261271
62E7DF368FC488153C05922436F4BCE8B473486CB5627840CFEA2E8050E1B950
FFE8294FA2995B919B4DEC4190D857C9BED8EA06C30F46B21644FA279746016B
79030A4D45B462BC9A42172706D8FD2B84D5921D5A3707D0B90CEC2A213A12A2
1AE884FAC26CD9C0C720FEBC5C6FF25EAA0517D98CC63B853127FCCFB0D22E03
84944F1AA7780CEB2992C96371859E220001A98F70572A7825072E019E24FF74
A79F6D6EE6ACBC70EDC68F2EBB7CA020230BAE167A98B1142B6ABA06E87B398B
6B6AEDD2801530A359E2A4008879ECDFD1E0A4E16430887F5F83E79A157843EE
B3461BBCF66BFB485254E2D5819C6895DD8623B8871991BB9435E462B23C3B18
5BDBF48A00D8F163943466871EAF093CB2B492B2756BA2B7F505DB4C4C1FCDD4
284F6B08B2050CA3DA3889A873229E541894F1E67660AFCD15E8DD3F84576BE0
2B2539F6BFEE7E6892CAEC3ACD9A2AD12EB2957074689B5118562B42B1B6382A
23525A42E2DDE0E57E0BDECACE85CFC9449B939C539ACBD441318B4A901417C8
4493ABA693A4C2750EFAEF71F32EFAD17C387B1874A71D7562A4BE791A2BAA23
093991B19ED45BAABFE6431633F462E2CAF450E1C308C6002291A3C86158389C
148BDEA5A3856BB50AD6B865154C89CDDC98B1EC074629A4B19E12231DBD9D83
3FE0520B343753CA0D7B0D82B0089B94FAD6BF4BE656C25E11D0C6F607270FE1
468333B5F6FD4E02331EA0851AFBCCAABD86E320B5718B2FE6C4D37A7F71008F
2B7CF693A44BECE5C6AF85CB0065381DC7F7DFBF205000A40484E28AF08B4665
206C87C80D8C8061B9C9C19A847BCB562CF881455F829F64FABB3E01EE1A7508
2C3411338B3547E467DF307AACACB77394DC542B4A68A2A22DFF206FAAF6A66D
DB1B302AE561586B9DDD4DFD58FAFCE6172C2BB2C8B5B663236FB05BCD11971A
F6191F21CD9F332A767A0D51DC26CF59B6EC75E6917010C15CC25B11C45D31AC
74CBC9A33452E8F6790C516676A92ACD4E74F9971424F6AD4137E95043DC73DD
1935F51CE765AD4AE5E53CD68BC02623829707ABE16B8E646EDCAF8E070366B4
A8CA4980FF4D990FFC6D24B227FB558371AE22D7AB0B8354832408C7640D3090
ED1E80D195EF02D04D66EC38034F02C10DE46DB2ED67F423525336B7651B4AA8
62EA28B11840DA01AB15E5C252FBBAF7F1484ACDE827573F68AF6AA0B1A48DF1
7F3737A3A3D6D7F04B3B439078F4EA9FD6899A51E8D05466CAC1A06C7A12424A
77C709682D292B633381B9A0DBBC4220C5CC9B252B88CADE5500BCAA924AE2D6
EEDA3A7BF0826A05670288C2ECF1D7F59BBCC907C99D12E757F5CD784485820F
1479955E2260DD0E64CB3B99419A5E934C1C38EB8340038EA8B1505C943BA78F
5AC5914CF28501CC048F1B83787934E02D0399B9025BFBC5CAED95C5B09BF22E
056638095865E6FD999A34228A34B7A447510E8E27B73D287FEB432ADC54F56C
B7C6147B767B361ABCB85A0D20ECE1D997EB7A786B8020E3933F0211794A7303
5239BBCE6AE4A2F811EDE004A7C7DCADFA468E3938F9B737AA5EE706B0718F28
DB8E710FAB31E290D652B37994DEB135D932701A87DEF97EDD3F5BA19B57E55F
99EE2AA1FBBBB8944B83170BCC0CB1842E8AAB0BCD3C39C94D384DC3AD232FDC
8A4A073B0DFBD7A1E85A19BC62B644CA42F00DCB9ADB643087063234D4512246
29B2B30C212F48BC97C3F62C9670213AD2A93A15D1FE0DD11DE592BF6F45B6A3
219FEFE49DFD9E43F3A754509D311EC29711DECA8F6B880C474F7997102544C5
E7272C890FCA6DAA79F44872D29256A8484CAB7BB6A0ED97491442A6AA0DC587
514975749260820B19AC907D165AE940FE0C5E8626CCF3ECCDAFBFDE5FF5CD6D
92598CBDEF047713537A69FEE9A2C4B0C7F4DEDA903BCA118ED162B7EF00701B
76769BC3B887C92CA656BD2B7B6A5478E2771C9656B387A36593F059D129DA00
7CDC988ACC0A4E134803E18FD249EBC32916847859665B510DBE1B9BBCEED8DB
E0A5B0BC135561843C36DC9E27DF1DC6C1AECDF9155321E55E446A5A640ADF18
70AFDBD94B2318212756801AD25DC0AD24E04C3CC556EC8472A79230CC187C18
BB28F7251931F5A11990B824356CFEE7B749B242426E61B89168E244EC5F96F2
78D7D2FD2315CF2BA3FA5B8365A5761B5785BF58B6896A74084A575F146ABC34
C3F406855B5B7146D1A444674694D78D51E4F3CCB6C68E6011684F345C8196A9
CF67AEED15620F09DC53EA50EE88236A19AC697BC24AE8E2CC907A8E539DD465
9C720EB93CF293195E36559BA9C41FE2AC5B00FFC7DEEBE2BD4D2D344EF3B387
B3CCB3FADD41D3EF0235805DC01ECBBAA782533ED0FB74001362131A2F484779
4E63BC3387EDC78FD9AA971602C6618D438DA46D62E63B94FEFF4DE57DA6C6CA
F8EEF2093124D0B5FF411AE75E93BCA857B6C3885EC52BEDBAD6161C64651158
DE950E7FB4E4919864630CDF106728FBE4937193DAC98826FEECC2AD05339152
DA7E07AEA6835C4B158776B06F212F50692CC4DB70259E6DAA1F4AA57EBBE199
D8A684F5C9A19C6F68484A7265249B451E55E9D74926D593DC31643795867C07
4DDB662B25FFAE178862907C215FFEDDF7645F6FC59EF8D5F0CD4D196A6B515D
F18EAFA3F64E3FD61809F8E21E8AFF88E0C53DE80FC36C837B6BC98F3058F2F6
D081BC6048DB488A87D8D81CADDA993641268AC5875D1A092871A8B69C8B2186
3685D6645238C91D7F5A5F22AD3D695FA1F5998B33A658D7766AE4006EA11398
C084B5CCF312DF87F7E06619802FE991546183C6300827D47A6D14EEEC70524C
6C54
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: rsfs10
%!PS-AdobeFont-1.0: rsfs10 001.000
%%CreationDate: Sat Mar 21 18:47:14 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion from mf curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (rsfs10) readonly def
/FamilyName (rsfs10) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /rsfs10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 76 /L put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-2 -300 1240 728} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
4AF1DC3456B9DA8108CE7F2380A151DBB59CBB616BB498185CD0D0DE28290A9C
1DB96124F5F796C7A2FC57B079E292DD1A2E5EBB88585421F81BBDC63FE33ABC
2DF705A2BE4F6BE21BED49C3E2FC3D528A348CBEF34339397282607E56471B4E
B78EA8C9F24AC14AB83068335F7974D7262C18BEC4AC5FB4CB5E0D7C410A3F08
57FAC1C117ED77399C1E264A853EDDA05A6117D3DFD28F96E44B1B8D3995E42A
E0B030F113EC027670E66FF845D9F93808284DC73F51F44B4C210997E261644C
59B3455D7C3D3AFBD65E28D1AA774273FB1B6E9AB4F56464B0D56911EE6CB802
F1C90982836A63EAACD2B2E9D07850C716F7D1291C59433A10F31CB9FB2F2512
1CE1F7F343CC06008D111D235C75DBEB8CE22E88E207F0ADDD18772276176BFC
F43EEE4F51613C545A2A49B34E4237BE57CEDEF63179B73879C2674AF40B79AE
024EF39D4D01AA6E8E83BC1D5F393AC1F78D133A004DE64C4AE52897C279CFA1
C87E605E5C1CFC2F4C72A0D0F9ED40A8B4F8E9EFEBDC1D60E353DE792A091B4C
39738379EBB7BDCE4D06844931D77A2BA45D857EC30ECCCB37F85274F283C27B
4C9BDB119847F4422B1FBB4059A5ADEAC44D234520322E2259CFDA894D6148CC
1E0EFAEF5666358F343AA0C6ACCEFCE6F3BFE30C43C85ED1FC565196555E51C1
0395BAF253393AAE179F635A2DC0AF3A9BD67D385A9A96A5009D09BE5AA164FE
8A48F5DFBC3C2C7244F57C91356ADF25AE852673C48C9C3D4A2D1F06BED56256
869E52850D83D2A78DA51010268631BCF5562B70ECF818A741398D63ECA44D23
567F5932BDFDA9520FEC5F94C434FC369F0BE91DFC66ADCB1DCD642B0EB6B3F5
4300B6E76DE898B5EAC79E8C71C2C78402E1085C0BFFFC219DC4ECA4A07CD562
2A67C4F65B26A57F8C49E984886DE170D3BD7B462B74259F19F9A269ABE5FB40
8F222758ACA10DC077F4767F12ADBBAFD83E00FEE81212DD08638A4D291567D0
81D4F769B5CD39ECA167E006B69D795DB3D6A49E808326366C21AF4B946A7BAF
34835CA8E94D6EE62401FF8E32AC2DBB545B498B388CBA8583D20B1B3258D7D2
BD6C6592760A68931A6103A50105C5634B346BABC17BAFDC897254CB4960DC6D
666CD1F2248A37F2CD354ACE5EFEAE295973F7FA2EC08BAE68ED4178CC13DD87
BE8C21EB3A9ABF13F7A9C460A2AD90E09371C7A23DDFBEBE5DEFEE4B4788D763
A04DC087117853336A14E2269BD9BAF06212037187433AE9B7678F96A4B3894F
EA6D990549345DBD2BF8255B0025F5169291029FE697BD123AA4EF021B9518A4
8D20DCFCD8F5E62795B99029B0AEC3B7C50FEB08B3706A0989AEDCC4A7DD10B7
684E5D59021ADE17E43F8468EC54971F5A0132415FA3869E1A722073CACCCA91
AB093BC48BE70A482F098369BE7793A6A8549ADEEA0BCD1454B3A8B9591B6614
00E4F79E07022ACDC7705AF295DBA2903489ABB6B2EB9F977F3F4D690B31E8F6
E0850C14A6150680EF84597F1E5486FD79F660C4DD190A3BBEE29BBB9093FDB9
9991507C71753EE604A02B5400E4721133F3D8831697F7A4F802E76BE91554C2
E640F784C649F65CA60EBB2461AA63CB1F7A4969B00889D062FF7E5E2C57FA97
62ABD83F4858D32AF74D8159E8A7AA9D45889CD4D6B6A19E38AE2F074713343D
619D46A2EFD36F9B6DD070EB10982D93A8B6B7ECF1FC11A7338F380927E5F20F
65E61032E53BD00CF49E1F817AE48BF7E9B86B137CA8D14ED5380FCCB5C87B39
6FD7264F7CA0638BC2ABA3F9ECDAB0F6BAFE6AA0A593F8E07F69906E7ECCCA4B
02E89E47DE705EFEA6AED252C2CAF15D3A748549B6F6A61F79CC9DA24EEC9BDF
A45070AF2310F00A2A464B0CB8B5EADD6292E08408C02326B40E27E034DC75E7
E797B53DEB549C6F89AD428BF4E1035E92E55FB21E639AF66E6A3A55B738C87A
9DACF56D583486E8DD0357E35E1805174E39DE3D087BA39A395D484A78488C59
906FFBBB8599D367B68BD03129DFE6B47267A2FA06A0A045D56CDC2ED12658B7
FF166C507B49AAF6FA4A71C74683F2BAB055F557E7B7B72FFD2F1D3C3EE5A545
1D2E3B991D5BA338E60FB97E9B4C0A2D50833E3CE505A453E6873C2CC0362A3C
4235274C47E1A1D2989D9DB4E4C3EAA92AE942536981AFCBB709CA81D8B03B9D
87D6E5B775B359DD3DA48AE2D4DE9E968E53F4D8AC08F2E4DAFB5591D919AA50
F007892803C748D6AAEC38F1E501667386864914D7D81C5657CA2632C4F878C3
64D73F56120366B61BC088A320DCB2079A54DB05DF80D1BD01749DD0379247A6
727CCB3D5D2841A523703B473A92AFD144A5668FA62184DCAB83FBECCB86B363
B58D0DBBAC06BCD2B48D5540F838D5106933DFD66D4E4398B9A1C4A2619E3387
502899295EE5D13F705BD94667AB3DB2945BC0384128873CEDE75EB13E172617
C8C36E41FD85954474FDE54CA65CA2633D261490421CDE0812EC1780E5F72258
1952CF3E800DC59C0EC49BE0C246618B299DDEAFEC7E40E5771BDBC32CAFB56E
BD06CB11BCB859024D0EDB5D99A75FB4F99A5B8ACB8921731FC7E1FBF02D630D
4ADA981D572B96997733E32CF6A1F12CD52A2B68C392FE2B0BCC884292C0DB89
F89B8E2297AEA2DF5FE8CEB0B0B10C52032D4A782739FED48682A4AB8A7DABB6
7A12D9A0115447730490244E9F8BEB7026941217153FB4CA65CF11A46B41E598
598A818ABF0EDF33D9AAACE33601484096278F57B03EA8C604DDC09C9919FAD2
1DFBD1706BF3E266AE0EACC4BC151284A8CC5C3BA30117289010AA8134F62847
56DEC331E6EE7B3BA8860135CBFFB09639AD6FD723AC10C9119D2D4A74DA1701
9E06B36D62DAF9EB50C70A7783A293934C12E398DA97092AF62C37896CA62E91
C0636B35E9E0338EDCB4D3F8871523952B357AEBC4EB3E20070F9F1CEF71368D
D4D3F0A992127DDA5642A30E67F33E2DF1FF8C6E0E20C6927B9931817E928604
3F7D93B69F0AD91169D06A27384D7622D4CFF3B1E1804E81E9C962C9992BF400
D5E3BF2B257D9589DF442CF88E66D30CAE44C80E7C5E4C56E250DE63D5AFBA71
D94757E181D172C54D8339EFB15441BD663F130259537A4A6D4140B837FE60A3
8E420EF9F973442619CE5E19798BD6EF47FD8D0A24A26948C64C19A374D2E217
3C7C440F981DB02632FD22FE608F6AA54F2F280E09563B7804802B9E6DFC44FD
9BCDB11B40C5214C30B0C1F974BFB771E78F6274AFDE4A77DB73D2843043BD11
225931D7713FE7ECBE12745F12AB1587889A68E6A0FA10A17283DD786D0AC616
01D82B72BAB398FF855FA9D64150153F22B7348EBC343BAB5A00B19089D2144A
1933A03FED8B14EEC4BCE5C86CBB907164B2CE11FEE425E4AC29C925D7C765DD
56E792D46887BA72279745E574C9E7CB69FC5E44475CB1B0F76F7371FB2D8365
E3D36A3F31187A2D7361D4F6ECB62EA88E44CA78D15399A85BC8E878A08D7053
85312D16D02C8A9E80DFED3D812D3FD90CC0BEB3E077853BE05E6B0D136E70F0
10C2209310456BC61FD0FC5441CE59E94117EEACDA24B3C0A7725F7D73D0BD0C
32377B3EDAFAEBC08C5ADA3F8950F21CFDAEEC60E26A3CB14CE807511E1026D1
59304452FD968314D4F87F69612D0E396184DD5C8A578F47D884034FAA145DD2
D3BB95CC9F7C0CC0F42231CAA1046D907E2A50AB49DED7D289A914CF6CDC6107
80114C4D9178CFA113CCBAC7143B1053E65B8B48CBB039F75B742D4AFA76E39D
CFE6B563B002E2A13BE83902F6C0280C5576BF03C352107C707BB6360354A314
6C76477C7F21762238B86EE8BDF5654F81F58D96D453A927AFFBC25627A5881B
B00E733582596704F590EC19E36ABED08E52288D57794A539CC55656489A87DD
3F6A31C9E81335B405201F521080A6DBC601E9F49AA7956FEADD7B79D2CF6ACE
4C0DEE26C6BEED3CDD85516B1684993BE46E6634126608D6E308D68D06B37A7E
EB98EB8DD2F3D714A9CD492C028DE658F5B2E5724CBDAA58FFC0834857F14108
F1F25646CC9426AE8BA4E141CFC2A7997A0CB54ECEEEF8B7C64C1A14BE706141
0C0A2D86F332553EA83CCFB53C4238C23F3625C094F5319BEA8496EBE7CF1E51
2E39BF13A1ACE3DA665D178E924D0027054A05A00D02C5CE510932B175011847
DF4C754CF2425FE415CB6FF7245E0A842E6675FF34B37D2F4345516DB7EEB466
C317594D060A7D0484AAAFD7A6AA2F1A00D70097759FC2C970E3087FCC891045
1A0E067970E3DF68A89EA0BF0C328FD11A41D50EF355F95988B17B690E9080F7
28EF34CFF4BFC68804B5E29A1DBF90372B5876DD7D14935FC2DB66A83BD4BB6E
411944794BC0A29818A32DFBB8502CFC63F1830863898D535DFAA1D17F9D3C39
58684E3641E65BA055A92F66F3CC63D9FA9D3162FE5B30419946482449C98A1F
A04B8A0BC477CF77809DA1B4A8728F08D64EEECDAFDF6115BF976E8432289349
8E27395D75825AC60290C6653360E32EF430DC234B91BAEB374FF3166FB53F76
1BFAA204FFB3E8FF918ED7E4B4F3CA938552C6340A68C9EE6EEF747DCA3D4E51
82A4F1B109D67A0CF712690A0CA8F4562F321D00B535A92B20265DD294C7C89F
E4FAEE9FEE43C353C05434306C72C63BFF0E603C474155660F691608E90AD616
F5234AB2E682D7D4526447F3BE70EBB76317E1FD48A708479AC894FB092E195B
E3230D4D0C3FE5D2EEE22904D6D50F38EA95B9AFA38477B30AAE421705376CC1
C94EC0945D236E1665175D15A535DCB350A3D642822FB132DDBF0A6F8D49D4E8
C4680426C3809E53BCE509E6CE6DCF03EC6AC7BD405E791AF98BE6ED70769C29
41D9427255E90F4D6C1E3A38F945DEC31CCF6834D992A6268364DC6DCAD08563
1C08069EC4B402C2940490B23F48FF53954965DAE874F5676F52F014D1B7A5EE
BAA9BB06A39C7A36B44190C49868314440CFB2F2E68F0CFEAAF0A02DEC661C0E
C78B9BF35595BEEB15E3E95C442B56BB5ED435D6A60023D69CA854FB3A000486
D7367204682A8C764E586246B6C094E0A992D9DACB22C74F5DAB34C6A9F5C2A8
454641319104B7556AF5C2C74537D58296B59FDF3B5D6C8471AF2AE03EE6A15D
A8E909A04CF8EBC2C0A833D070694F797C80920CBB9C4C6A3D0585ECC4AAAC77
C2479E853D42EF86015313D6B81D5A747280A45F6AF213624D9D607D6F4E1FD9
A627C9B924E428F3CABCB03EFBE28490F8625C1CDA8F2057FA3A06792B777FF7
63176D811F4B8416B9B6AF7FFAC1CF84957B904136C318DBEB178F902BF04CBD
3B86197CFBC54799406842D9A8ECECD1E956AB3C3BB503E12D2DC8B2969D888C
6668478202C5E930835B9033CF22A2640492151B8E8C427E0E275C81B6F9480A
22917049391856DEF4AF7373881F21391B425CC8F7BBF9001B20FD86E775FB3A
D916770A878A08E3F499EAA9F4A75F7C9B5F3E80B5F66103A377CCF036B34D53
F810D43E0A1A32B6316D5F427D9526391DFDFF4539A7D6317946C607D5B1E769
A2F7DA7D81E49A72673D1E379DBA54287F9625A1524D8D21FF468CD5DA646244
E9F111A5D5C8CB96F830EE1CB24B91C7816B19D7BBA643C00085A6780307A8FB
566302692E54089C80FB7F7CD7ED6D4E4B4EF8C8AD3E89789528835B3BB31674
30D188813C46F946E420003EAA8F4D9B05C667A3FC8BE8F0BD1C2FD7518870C4
FA39F59078B1D44200BF6350A485D47CAC7D0CD18AD88A22811974B7F303A9F0
FCCCE8F23DF0E35C4EB983B469A0C4E351DBC09EF9593955AB38953B15A35D36
DD882F7A3453F6DD5AAC207E1FCB34A4896D4B136302EEEB4EBFB14375E8D48E
8D1B006D269F57F04B0F9ED14DCD0430952921F9BD88E92DE64D7D04E1E27436
BBD1709DA30BB95D93CF17DFE30F09AE7364EFD9A9A05968B615DF178C6E82B4
6DD87EB17C4C5C782C68C2B4A2558A1666AE64E903E0D1752A3DAD3E43180F69
52CE9EF65755D16C1F7910AD38A66FAC82D253D82536F2A5DB77EB055F98A670
D177F2E434D86720C3F26F0F5478A7FED86365985B7890DA17398A1C6BF85056
6F0C9CCF3F7D7020E20F8AAFE3E7A460323B03B707E3867AF29946AF30534515
6AA15B4950688C243B0371ED24862D5B6642EC6031035D11BB3994EE496ECCF5
0686831D49563B03584420951A6CF7436A4B93436C3225EB4CDDAC784AF026DA
70EA65481880212F864818A2888B8FC263FED51F6BD5D0090E2800142C71228B
38DCDF4756A6A4FA417D2E605780291B11B4623F3DF3732A449E1A6B82F5591F
45F24D7E2DCFA94577D43D61D84A3BAD887B3306A70BF8AF653B9A35E6D18CF9
CFA96059407D17FC31C47CB1DDAACFAAF2CB144FE4441C61B2AB71FFBA9E7412
63FD9BC1293D1C9CE0847B964D8EDC124B247BDBB129C8AA82DC7AE2C0AB9C86
151C85BB1703E421DC86A269764457623A24B476564C60FEEE810CB6530B00FF
77AE975C282C13E5C667AF87E5E4121B3CAFB95D76232355CE8208A7654E7CE1
C020289B81E32B37F19B4CE6702C3B3B644DF3B6EB0BC185C9B8739FFA0043BA
6F460FCB9DA55BC406C2687CE2294126C74F9F6787CC35AB5980A3CCFDF50B12
04DE82603E70DFAA62D7B1015B57561CE1832B5D4CC556D15255B51D50D00407
4D920F2A9BD0C27F48C8162801654BF2256ABA8180DCA791
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
readonly def
/FontBBox{0 -250 1171 750}readonly def
/UniqueID 5087382 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC0C51802EA1E0C63E6DE20980D3DD206F0536A88537C60244BA8D64B
5FAA26C67A5BAC9D35F1002999D0BFB71CCB0D74AB347366D7426CFE90FA93F0
40D39FF86D8316C77EFF6703B4D5F41F277DFAA2C71DA78ECC85A83D29955A10
719C8E7D0E5F9FF17B42571F1FB1A2369C6261618293F3DF3751A42F6626C5BF
30E95680515B118AC79B3686915CAEA65E015E0CDB2F70C3BDF9FE336D957E2E
4B6B07FB6A5A912BE4CCCB82B4640F94266ECCD255CE3375939DAB9AE5D4F981
545C0ED2ED624582DB91C3491CE1843AC0320AFB5AA0BFCE6E5B77B25644970D
1085DB16A515EDA89502A045FD39A74A906DE78D3AF30318517676711B269C0E
32780A72BDCC56ED915AF2897B5D02FFF53E8EF36A52C0E52441F657B4F2746F
8AA169C2A1639C47FB157BD464C888D8CDDFDB8FEC5DF34CDD3B9B272C77D0B5
5DF5379ACB911D5A5EDCD547C8A71E60D1904194E39137DA09E2166C5623548F
76438D9F35D340BCBF4EA4EB794586473533530DCE5912C87EC6BFD7F9AEFE7B
B159D98C723690D88B8F22AA51E2DDA04FE359B2EAEAA6CF1CAA0F8B9014289C
6F112E3C649702E15DB40025040D910FA0076408AF1F6D78275D1B984C207DDE
3F7B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX7
%!PS-AdobeFont-1.1: CMBX7 1.0
%%CreationDate: 1991 Aug 20 16:35:49
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
readonly def
/FontBBox{-55 -250 1289 751}readonly def
/UniqueID 5000765 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04F3C90C160DE16F890E93B13B46BB2F4971D900BB550E53F
EC6248832A83CF441B4851445885479839AFAA2903A27676E5FDBCD653467C5B
6757DA1B722133018873A10B4FD9D710BBD9BE518D989B67DD4533F8702D640E
B84C3CC2607748FBD7C4BC6DA98537C7A83BCDCD871BC342E318F22902994EA5
8F5F698960BF55B6DD1ADBAA57D96E80D7C28E06447C5E0131B450234C39D332
D6EBE6E76DD503B658866DF4DB6774597338B1DB90AC6C0ABAEBA29CE9656E89
167D88958F3BF262133689AD41A5B9A90DF2838A221C5067B73066612A0FAD18
6A3670B2A69D1731367C8335600294ABC365F383F983A8AB1E37C1C1804893F7
DBF122DA9C3843D1715ACBEF92F28AECE850981251D1D25F13B0DE4320D26157
D14147622A29E7E7F6A037AF34A0197D57AB2A9F7129001F7F636F3B07E0F12F
D409D880B878EC8C911E3B1F24AE299AC56227FB9D6ECDDDC5F8DFCD18D8D0B1
4BF4C36A2E36F69E7291A1A0F738ED27D586BAAE8C04E00D5B3C88316AD3374C
5164218F5588EEDBF966055C55E9781D75B1D7B9C1A2FD2682E7CB88FA9C6889
8C5510BD1964BB505CABF99F91C7110745DFBC4B8A2A15295320EAF27A97ED84
C6E59474C2832859A5E2536E33893D90929D6D2585C73A6F3D316B96DCF60413
912E288DC3945E3A2C53EE1580FA68D40CC336D9AF2EDB87DAC04ACBF223D379
5482F7EF56A8DE5175D4D988BD67040B7B4634B145F6C995009C1D9671217E37
758B75D54A26EF8D6F56822318B256B2C43B27E2892E250E98F438334182171D
99CF39FD8F18FECC0C511B82F9E4B4F4105FB790D635D44CC9EADB5CB62797B7
1804D607C2DC0FA6B8FA3189DF22689B6A20E4860C367EB8E4DB6A5FCBB08A24
060E178CB7E979D8E7B18B1259AB7065BE1D9DA4D31814C36E91D29000BE8FB5
9497EB35871F940F36A0B0CFF82602F07D265D4269663757747E058D55137CD1
617D5860C4762F2B29A1F346EBA47558B69B1F4DF921D1272A6FAF48839DAB56
C6F036B7A36F84732C561652E034E3BA1CDB5F6136A4CDB78D3C67719CF132BC
3D3324E657808AF382F5A67F9076562A521F4409C4DA7EB605A8F87CD55679A4
A2B336CBE47548CEAA9E08AF2B6E82C05CE0806B6E6680821040EE1D521626B1
A273FF0E53B7C3D958B6EFFF2C0D82202AB9CC1841EF666C4A1E6B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX6
%!PS-AdobeFont-1.1: CMBX6 1.0
%%CreationDate: 1991 Aug 20 16:35:30
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /f put
dup 116 /t put
readonly def
/FontBBox{-49 -250 1367 753}readonly def
/UniqueID 5000764 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F05C11F9A72F5DA508C30BC4BF52C8B1EC5FB
7F9DDDD0964A6D591DFD9EADB67720E5596FA8FBC900296430DED80E17C9C632
C6D81D798EACEE7FE9DD03BB1D083103B504E110AE2A98433FF946B31A9BD010
E531EE48EA92102FC8E1A26D47BE7D613724AB2DA99F90444388FB6828EF2D22
9D97902D566E2F3E9D83F4A88315338D5DBB3C596DBB8026293C2AAAA6E1EA81
2D3A6B6E63BB9BD579F33E12B666757E9C6885DF78FB8571316F7270ED2DE22A
94F2580A51382C23282C5F560063F6E55031F2E5EE94EB4C6E6A83FE65B846AB
DC03417F00E3F923D48041C9A5D891296186EF575D80C5C2954D549D09BB6BE2
6E9F1947619D7CACA8059B516E8FF7D38C3D5F8FAD15618DAF9570675B54460C
5C0B6C929FFA36E49463AF53B519407A648644BCD5C65194C2551BC224F574E4
97F0BF4511C29DE9ECE6D9283F067D061274B3543695BFDE08680244AEBB5DDD
65B7ECE0FD9E23E1F82A845295A31081410135D4111C337C95B1820839E82947
44B6E99C76EF2A6C082363FC40C460A76EEC8C9E0D9E95496D27371B680C4C97
9B6267975FEB4770EB8EE55D4BBABD079CB8856B686AD789DA5B56920A475C99
88BC15BE2D97354CDDB3F529461F09594E9FDE6401B5FEBCE8D804E2BC8433B8
1E87DB162C037A4611B558070F9F7F79F8AFF124EF1033C2AEC73A608C4E4A21
8E7695DF125281E0C45F6C5921B16D6725DF67943B6C68829082D1E03956309E
CAAA93185582014C37C4E6E945A572773B0B0A2D76EE5B168F047E5931044903
70E65092B2E166BBC365D3994AC89B211985D09A3D08ED8B15ECE9FC22454043
D18BA678DE6618940B338101A8F395F1912E89BB616AD7E664D04747A3C3B359
7CB18D41023CFBBC1FAF02CF6969C967F5ACAB72D1586E904F28E64FCB9204A2
41F63CDC2DEDC8EBF06D99037E8104673577DAFCE59537C3A1ED5F7294DAB5AF
2AF36238642B689BB92C86662072E8E8EA1FA27B34424A557D16466B6055DFF3
34FFFD9C38012D95455E76F4B50007FB09099F235BC7CA73B1FFF77298A59211
8B4D0204FE191D455C9A8AAA06A91223991FAE88063FCDE4B5B474F7E53E9F54
DC6D765AA3DA3883E13AA990C41E33A1939417FCEF2A9FC6D337D07071DCEAB2
74C897C6FCFC69BE0E2A3F56FB14775ED99BC023ED7D37162979BB56BDA2E214
361F99C4A4C98524F3A4124CD50D55F363405B053A965800D6D11FCFE60CCE9E
1C4D674DF225025CBBDD606401D11DF9CD96C2D36B266F11130F3425EE807295
656ECC41E2AF795391320943B3B1B76547AB24B49478426CAC02DF9A653D5C0A
18455F3EBD2A7FB2F390C3E11D892447648AFDD015817CF8D8E41F020C5F3DB2
BB7CFA548095CA9A521BBD3C76AA7D5417100F73D9118B247A523C929DB10515
256D114E983CE643A3C84555BF4EA6B0ABA84E7382
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYDASH10
%!PS-AdobeFont-1.1: XYDASH10 001.104
%%CreationDate: 1997 Jul 20 21:19:18
%%RevisionDate: 1997 Aug 28 05:34:12
%%RevisionDate: 1997 Sep 18 10:23:31
%
% XYDASH10: line segments for Xy-pic at 10 point
%
% Original Metafont design Copyright (C) 1991-1997 Kristoffer H. Rose.
% PostScript adaptation Copyright (C) 1994-1997 Ross Moore.
% Hinting and ATM compatibility Copyright (C) 1997 Y&Y, Inc.
%
% This file is part of the Xy-pic macro package.
% Xy-pic Copyright (c) 1991-1997 Kristoffer H. Rose <krisrose@brics.dk>
%
% The Xy-pic macro package is free software; you can redistribute it
% and/or modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
%
% The Xy-pic macro package is distributed in the hope that it will
% be useful, but WITHOUT ANY WARRANTY; without even the implied
% warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this macro package; if not, write to the
% Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
11 dict begin
/FontInfo 9 dict dup begin
/version (001.104) readonly def
/Notice (Copyright (C) 1996, 1997 Ross Moore and Y&Y, Inc.) readonly def
/FullName (XYDASH10) readonly def
/FamilyName (XYDASH) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -300 def
/UnderlineThickness 150 def
end readonly def
/FontName /XYDASH10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /d0 put
dup 1 /d1 put
dup 2 /d2 put
dup 49 /d49 put
dup 59 /d59 put
dup 61 /d61 put
dup 62 /d62 put
dup 63 /d63 put
dup 65 /d65 put
dup 68 /d68 put
dup 70 /d70 put
dup 71 /d71 put
dup 72 /d72 put
dup 74 /d74 put
dup 75 /d75 put
dup 76 /d76 put
dup 77 /d77 put
dup 78 /d78 put
dup 79 /d79 put
dup 80 /d80 put
dup 81 /d81 put
dup 82 /d82 put
dup 83 /d83 put
dup 84 /d84 put
dup 85 /d85 put
dup 86 /d86 put
dup 87 /d87 put
dup 88 /d88 put
dup 100 /d100 put
dup 102 /d102 put
dup 103 /d103 put
dup 104 /d104 put
dup 105 /d105 put
dup 106 /d106 put
dup 107 /d107 put
dup 108 /d108 put
dup 109 /d109 put
dup 110 /d110 put
dup 111 /d111 put
dup 112 /d112 put
dup 113 /d113 put
dup 114 /d114 put
dup 115 /d115 put
dup 116 /d116 put
dup 117 /d117 put
dup 118 /d118 put
dup 119 /d119 put
dup 120 /d120 put
dup 127 /d127 put
readonly def
/FontBBox{-40 -520 503 520}readonly def
/UniqueID 5092844 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A529226
454434A66FB600391E72DBCB27066ACC4F037CF32BDBE1D3FEDB2F47ED471216
614265A890F90F735C48E50F819CB3328DEF7288798EC4F2C110FC584615DA50
CB3270F8E3CFDCF89F6D8F4A766AE1BE4D71002FDE064A5DB86C717534590905
8FB00A60B579BEB0FBC24E561A610384F50BA13268295F448B37D49AE5E5897F
FD7C4D05E340C9755AAB4B78EA191EB05FB2034AEB8CD021AB4B51CD01485AD2
8AA14D2B090A404B50F59937CFC161701277096CCD53099455F93A77100130DB
A0B39A41D94D3F74E74346A26CB6EDD5F02B6729626573DCD63FF968811D58D1
CE45190B7FA7048F1367FF403A4CF44C1480C0E7BCFCA19619DD9A374FA2475D
BB2A58D516495D45DBD6A54A9B4ADC34B278AAF73F01B3E9D7455C43E9B3FB7A
AA3381CCFAA9D3F4E3B7AEAF882963AC861E51A3B452D40F03B5E592EC2EF0DC
E7A1254D7EB78D1EBD1D409AF44B404E38592D1553CD733CDAD08B49B70B2A11
A371A3994E296C03AB25BE2E449A6E1D313B5F345C3BEF75AE9D099FFB43E6B1
91EF1F1FE223BBA42230DCFF7E85B1A33528FE191AFE53F889992A0C3ED9BA8B
C777541201141183BAF645C336C01F37701A461DCD34DFEB41B909DB0E603F07
0730D8E62D9C931C372B31D1A810B12386ECE812FED18F006FAD29D28EA30D94
D5164361F11238EADD1CF8CC21BFCA167D9D03AC61818DCDDD6A2AD7306C420F
53B8DEB01E309F3F6DD0451836FFA20A22DCAD65D0026672F7EAE8C1DEB4FC3B
1023B53F919693D926C30EE0E764D5F0718E1E6FF21E3D073174735335CC51FE
719F62DC60CEAABAB524E07BBF479D5E81A590E1B7B946F2087432026C305B7E
6FE14546E8FB5B354A000C977052F773A2793BD9EFA999AB78A4AF90892DD78C
DA9EA55A92F17FFA79849429B11F475651D8F9E1CA004452D7761344DD5ADBC2
7AAA274A94C80B63C4A1CCB549B98D267F4E4F8ED5CCF79117D6D302044C378A
87FE7AA81BA51BE2E4C84486F42CDEB5110C3F52B4FEF4483AA1F160E6DE68A4
6C5FC0A13D381F0CCA3B83A0386C9ABDF3FC1A4A96659C82D167A7865E2BD299
893DABCA238E613B9864D88C8F608456FA47CDFF5ED00A162D28095F1B64C9F3
64311E9E62F80203C722B00437A0816D491C93C132C7534CD3EE4EAA2C74F757
13F5158B2EE6A8DF7E450D4E8CE61D6B788534D51B9824CC5B4FE74DD68956D8
8B10E3A3B5BC84DE7A304CE0EB73D94A78844259743C3A6CEA2B3527DB99AAEE
5FE9AA56E10932741298AA1B43A017B31D4F95E5F97FC9B5FB17119F1CE2B20B
2BE4EAB2DCCEEAEDB6B082CDCD02F5B186AC670FD619610DD47F63FD59C30727
13247C4A045C15E91C300E22134334810CCD270B133E5FFDF71E1A2410F518E4
6E50027EF5B79F543DB9EB13D247A680157A97FC5D8B2B2CC394FB39B305E016
7D4871A37BD91065E13F9470091AED11AEB63C2060D5D94A4675AF78A461F732
53A4AEBF414A77DF8DAF7BBCDDF01C453272135281C10852868E0ECE754ECC54
A6998703F4C6E24F16022FAC580D125FEFC97D8D32EC335CF1E96657293855DF
496F843A7EE1B9924DCF4BFC2F9E8D1F3FAB0264152C9A7993B280F4432777CE
933BBA13AFD2297163623628B18B48AFCA20BE3255719935C76C5E911E7A4000
9A589C775240D2B625956FC49615F26BBAFBEEDB97F224382237DCE5D2C68CF9
D5FB516A57C0EFE929D46C11D03843AFD69CA853466C1614C6608C920FA596CB
BBACD611F493A9D8EDE63801A6ACDA5EBB1F9496A8D39DADA3EB259139AACB9A
BDDB5A33CB579B2537AB6B2C0ADDD9C5512DB8B5917F6D5C800B8B882541EA4A
9B0B924E8F2A120A5BA861353185D92CD4A4BA4991DBFBE768A05DF8CB5B334C
FAF4CFE11B98BC52DBF371FF2DCCC2ABB77FED397C526F4E67129E43BE39B113
78A04BC9042B312BADD982F6A657D01D78C14B76AF9CD7E29A4AA8DAA4F56157
F5F83F8EB3255E02915A8DF521CF52A8BB3C2AC22C9151BC91E4DD0B4F4FC342
E2B700C4CB3D2E2C9CBA710BBB0B489CA379927C5B8C3D671A3512B8B7338DF4
96CFA6E6280886AAC58A1A2C9B0BEB04ACE887B920DA392D2D708477868A7CEE
E336435388E9923343E4D5A6C3D17ED25B9FA33BC37CE95C60862E42DF6817B1
CA76A9C75D33992794DE9FADFEF454000218BFCFE2DCC8BB17628F8FF1242139
626451F0B905D13A456EF3AA2349900F67FE3BBBC75EFF5B94E83406DED018D2
51884C61338D1D19FDE5822E2941079F368C011C7C53E9C8C05E83156DDE0007
649B27572F92FF7F4091EFE50CFFC9D30D1E9B8AE470FE2E4EA241F9809E2015
A528738130E2DD5D1D5EE49E2661F0F46BE114B1A2118BCF7FF1B1838D42F882
E216724E65AE3A37BA2BFB1B4E41E771DC991ACEDA691E9C66D5264DEEE85B58
CE4AAFE79207F2E34F963DC69BA8C66C66B2C1410BC328DFA891B39EE8F21CB8
9DD66133B6391B4BB0CE8D839D0895AC7588EAD8926B7B4397DBF6ECD56D2EF8
E19702A2F681ADBF75E8CAFD6BFCED869F3982AC764D191F54C3103E725EFF5D
3651053FC3FD7B0B6C38D972DF492969F5E863A84BACFB7B6B12A7FDBEB84FF6
3ECAA869823558E39B5F2EA82323D02043052122DDE325E55E8C2F6A6C26FC0A
9324BD92B2B1C52A754E35789C459862F11D799B4AE7C0FAE0D657237C03053F
DA9BAE2300A25405006A88FA36FC9D361F88E86768D53A99B5B82ACB7D681544
AF7EC201895FA2E4C0DCFEC877D22CA14F80A6B4E2FD664BDC85ECE68AC2D832
EF77C098DD327B5A39F5145E5BAC4C54F4BFF57188D710A48788AA2707BE61A8
A541235A9ADDBAF2D1DE5B38873DB8F3403C8F7691E3007A1DF377CF7FDC27D9
4A7E47C4D5B47DA4111333F57E3C26A0916E9335B2CAA55EE7B253A8305168AC
B7E1F724A4D4D93D15F1F2AD9C8C97F647E88FF880DA6880702C2B16C2CDD569
C5AF0ABFF59A347A9842ED001B4B26B87E7ED6F6F0DF546C114DB89018E60145
29C49DC55F6D9E8ECEC4830CEAE382E472DBBB36C0D005989DA5F42AB23E70D9
08EA30A18FE91AA7CBE7EE382280EFC3AD9397CF45CBDCD513043F1D5D9B9A60
6B59F5DD9B06A204EA4CA7312EFF2CCC80046E9E5F55ECBAEBAD087F2EF984A7
DB34503D080CA74A259861CBC04F1986DE4EEB9F16715CB6FC0DA5D3CE14F16D
AA66CA674AAA8A3BA67A47E808E49337D5775CA4F564BEFB985E96366CC279D2
91B8CE6BF24EC41C2276AAF1430BAF5E018A37F44A44EFF44BDEB57110FCA21B
85861679CBF434519C63DEDDB807E1A4185831AF10E30919AFD0A3BB67D027C6
C26E4E83C707FCC644E7EB97A2209E67953A580E411BC68D1F5E20D89A5F4A6A
11745496A618E9A32DDB22E40B2FBD80AB1A712B8DE931A0539CC437F35CF073
3368BF4FB02F8960A3DDD81AEAA4B579D9DEA7DFBD48DD987B885F2A533BAF18
DB495027736677BE38A0AF7626233024D0E3A6FA0CAA13BA5194E30FAB88C770
BFBFE73216263EB2A5B88BEE438F9679325B49DFBC8CFBF4B6884D75E9C6059F
0A459C06BF9B18D20FA3AD8E3F455FCBBC076CE938ED428030F9EE00DC1DBCA0
975DC99D1B71968C24098A6A3352F3F4F9F2E4D348CA06A2E70E3459C55A4B52
4A57B40739A87005ADEADD30C4D431739145FBD5DBF00B3597F4B73A506F8D54
6C87BD35A7E59211488D7EAEC7AA783AC5ED670C89028BA0D3B53E78E237DBAB
5EC4333BB6A83AB1F81F535CE08928CBE58192C4247BF39E43E179F53A2F059E
1982E6A8A16614EDD617BEB261F4EE15E48FAD5F509415D7633EAE552E7F218F
F42137F059CF91867AA34D0B542BCFE9C95E0969F7944DD429B8788BFB9EF8D8
372691676B6A438E6083860DFA37AA37D6DD894FFB1EEA6E0DBBC8E9E6DC0167
A515B6B149D554699FD3FDD4935AE8D64C0C30E58CEA9C5139A6E800DF033A53
2A85A36730395E72A6ADCFAF5D5469A3A09A727B8416F9536247BCB4FE8EDFEA
0D70513F8E11F95C6DAE46333F1F2F3C10D5FBFED92BF6A1A09D09EBDE4A509A
5EB3E0CFA0FA11A8DE49E327D27BD81A08DA80EF258AB09CE2955E91D4B7A000
016C7DA0F1B8DB93D23806D5B5911FA8EDE31FDDA740B692A08FA3B555935B16
EB37E79ABDDB40955EA8E8D79778688D42EBB8E96B1E5BDE342CF575031F5786
756F616D932A0D17A4CB751B51AF83ACB6F467063E041C5B53C3CF2CB9E28F5C
8F62279D63570B4095A9367171EED5496B49678D7D549C9018581A1082E0DEBD
CDAB710FAEF350F3FF4F05E0387716F2BA4D80EDFC9FAD1F20ADAA0EFC8EAF6A
E1FF189F6D5BF8B27B829CA40602ACC99992E029DCFCAC414B3A09F70A4F4CDA
8539CA4527FA2D1B6D115148A23963F262D7A2334F9CCBA853B77941AFD728A8
448D360DB58F4C7879CD6A0CCF89454ACD39B2AB6868E356B40175F0F47B2693
7ACD42A6857B1052C649FE13F58D2A6DC5EAD61216EA15A4230239E438FD574B
15D7C09CAE84B38486531A5A9AB41871730EB13BB8FDB528BC61C3FD016D707A
AF2FBFA2BD946194BCEFA97DE81FCDF64CB5BD3041B4C9F564DBC67A8619B0DA
82C221D506F6CE17635A7523FFEA97FFEB957F815CA6079FD0D5D9C54E99BE3E
FF07730F8936EE4E001D5CEBFCB348AF178FF2EA5B8A71917005F20B2F65A7EC
6123167D40E2FC7EBB4167B30CDC69AB3FE4D7F5CDAA760126B7D1B2E714AEFE
411FEBBC55300E72D566FFF15F34A60BC81EFDCC282CAB526D8E8427DB4F1369
0BFF447761720835A4B538B51B38D1F7091DC232C6291AD726055FC767F7B229
2E22C7E212816AD49BAA4FE872405674ED1B5FE6850EACE57AD94C50D880527E
984D3424B2356974546FCB54011EE496430C8A79BE6498F527DF7558BFA9B242
0298C01E4DF7683283B832BD75B2066987B4E442A7DC345605EEC9BFFCFB2522
054FBD6F00DDB1279B643AD6E8CEEDFA24BC41A7B27219580C0B247380390E78
535DE6C83947D553F2E0A5EE057F38E2112E98233605AD077AF08EC6D44B2B79
DFC689372F571727756B82458C5759C99E158DA63085B487E26D62DA3304E698
8B69193F04EA2D952FEEBC34762233B22073F458ACA946AF7E3BF7F8FA6AA405
7FC403E247E4BBCFE97524A1FC7F0A0FB81DB419A53AF0629AC70797E60CD3D9
26967787C8DDA467A50E63BFB8984F9E0F64CEA161C759D1A7FE28937FB5E268
002501D34626F0AF8EA24523E7EE8D2C238291BBBA6ADBCB13AE0634085747BF
752032167A200094CB8175C8379011DD79B465C48554DF53A4D7D98AD373AE70
200BCD4E13C4C53E9D9C463B7A7EC59C4916743D54D3C201A8D21E6C21B79164
D92E6E8BDBAF098776090209FE7A37E4A7660685EA61C516778DE4DC9C0E607A
4003319C03CBC9A7AE4462F10657DA6FF5E0F1432D032028E18B2A0EE8C629E7
C2EE0E573BC422AD54A4256D8AF1C9FF36C05732B01538E9B411BE9F75A2353F
D9CF7DF3B3DE702E70D1874D1C48F68C7B773CBCBC6D6DA99B2E5E2B6DD7D44B
03A4C7C943E4E429BDC7129750534730752DC9656028F213044786729B6E38A8
C2DFFFE433DA5F02D87676982427A579CD9D0389A11E7E19929B555C2E71D246
15EBB999C40F2CE0D262FDC13A12D51A7A480019C50A03B4AF889342A045CB66
7F540A50828347BEEB99D12365A2E6996D973B8BA895812AE4C8C1BD4E938091
5093EA1D2AAE3C6C2B47F9B65BB52787869E5A7C56B2F8AC132B11075C2860DA
9012EEBCB54186A9F3FD5C936FBF3854F284085C08F225BFFBD20A888BD44E97
4DFD7E6DC1B6247EB73EE5C32B052B1B0D47A9B4BC298A76C7B39282E5385700
C5C8DA859F09D50A4752CABD5970FFD0AEB061EC5D0D0AFD8C3D51A3A72F2FBE
47585156E094CFA20365E8CAB82B94ABD1C3F6BEE2C6BA33CFF72F51931E387D
3683FFD2860ABC8A21548D6C9F4B0C8CE8FEE2A839892DC86549BFABFC56A617
9179CBBCE3D679EE0DCD15D442F705B879F1BB3DDAE37F9CC96A03D7E97E8079
0F964A43053DBA2B7611AAB5A1BF8B096EA495949F348EC185A25F3FF5FE86EE
25CE01D9F8896D4B1AD040E086550FDB5CF26F90090E15EEE44439938832E601
70A2B4184E3CE94110B34CADEF061DFFBD69AAF0AB007E75A0845585EC2967F4
03F6827936E7295AA075EEC4393A814715F1495BDAADCC72B4923EF583ACB796
11316994C864B190B965C5841C957ABE2C09EEDBDF87BB220CD421A1F0081781
E1D3381E241FF75CAF096AA56A27415B02ADF96E99A9787E3A97002C1FF503B1
285FD77C28C42831148BB1D0FBA14D21BFF8B80873908B90E0DC34659A0D14A4
E51B4CD0DEA9EDB2A8F9C710821351CBFE2441865660AC9DAC5A75BBD262EB5A
3358E21553886B89B6C1B5F84ADD46686A840C9D382DFAB7C5BECCED16EE5F22
8660152426F2C9B0FD8B4EF5E625CD98DF8E04B2988A62BD726F5F662DA3DE3F
D1A634EFCBFF355DD5A3FB9D1492C4226FC556E617C7EC30AC3A4198A225FC5C
D061EB206F679C10BB8B245A361AF31E0DF7BB178115403A77282E3CC0D0BC98
D25A082D97851FE8F878F0D49D5B99892F5FE34F46E8CC01DAE34B9773B343EF
4793AC9B2E4959770F3E2FA922FA68F2682F42B949FBE011B7573CE426EB22C3
E94458F7C85E5AE26E45DD8CE6D91770221CDB5B989A735149FC97C634D40CD7
68A2A2C84DB176423575E5CC144F6004E2CA35E6EA4DF06A47CFB2FE8ACDAA4E
089D15C047503A9D0738D4D08B2EAC5192F06BFDFC4E107580EB7030458D9564
5C9909850488B5CE25C569C5005587AF4C1C6C50C59D3A1931151602A3EF85D3
2961E4CF053838CD71703662FA0A063774ACAA02FD65BE0676D2A46084B65BBC
459CFDBB82E6C901F8C425EFD8B12FE5B4748C1B3A0457873267B82D2EF43AE5
79200C86BCB74BA5F3CF322956AF48CD7149CC9715134EB1686C440D42FE1EFA
376220D4EDBF246F1758482D735A3BF294EDE93DEC10635DAF5D798ACF53A89F
A786B5678E519C26EC143FCA02487C36D8F03B4EC6B5BE57015F2AE5E69160B8
D5CD2AFB74B8554D66125DDD44F6147E339270D367DF1C3C2EB4D73F5600EBEB
DF2E275F81DD1B8B28C1875835BE1235990F165267208DB505D5A5A993A6A6FD
2BBEADD5A79206E8A7B4C62FE12F0FE225F8C975A94D6A7BC3E0FEE23CEFABF3
2F6831B3F3AE3969718B86B3D32752D487E540015B82A785C50AE7B715B8EA5D
E7A7925A3052B8DCD5511E80C3B91BE88BFA77530F9FF1DA5C22581DC866E9D0
EF4FE92ADA47E0E14EB6052A56EEE1B4635C21BB27B47BA44E55CF37098ECF8E
B02DDCB32D5070FAD4899164697E14CC02B03CDCB8FAED57DAA670A1FDCC0FC9
D6377EFB0B3ABCB7B4316ABE45EAD3F843204AE8DF5D60E2E8ECB27558C9BD2E
43BD44BEBE6FB8D782FD658925574E52853CAD3FC029874BBBE34002592F86C2
9388D21E1BB8C189DB1D2827B9C21D24BAB963B2B642901695089A8170E7ECBB
0E17161A38F761F0633697508BB77EA9257FE4629739F90D7006B42300F6F71D
C5AA16AD03D32501A2FFDA8519C00B1D1A61E11B8D88BF35FC76C2F327F0F758
4A8A6D388A4186B31DA260D41CB9841DDF41433E9EE09FEAFE7654CE3C645376
07669CF2F22290D9915BF807A7D67712FBF368D29456E1B1A7F3BA11A2E8100D
0E7BCBDDEB0611539E9E6D516EE557ED73CBFBF570428AAE4D47742740F8A4E9
4FBA43D8239C2176508740B87F30274D06FA01CD735402FE5C8AE8716C8CBE7E
0F9D25CF421A40AF42D3322258AB5C9991E9203FF33169EE6A2D4F6224247A48
8E2E9FB0A6738A71F62D5CC0778043F8279A7BAC4B187BDB03130B16BE6A48B5
E9B7C8891AD72CA3F27CCA0A9E1E36AA657A6D873F03F11BF3A5DD367A475F89
900487A2289F32E19C7AF95D8EDBD62168E858B0A87939F9239C62581929027E
1785AA083F2AC717B1E24CBDBEAAF26990A09BCFDFCC432CBCB8ADD6409B58BF
D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: stmary10
%!PS-AdobeFont-1.0: stmary10 001.000
%%CreationDate: Sun Mar 22 10:51:38 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion of metafont curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (stmary10) readonly def
/FamilyName (stmary10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /stmary10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /varotimes put
dup 79 /bindnasrepma put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-123 -2958 1055 803} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C99ADB
B3214E61CB091BB87421CEF35FF5745EF8DDC51293183D75AE11F26462B918E3
F15A016BF051C59D797E59AC042DB329D8738C9DF453DD062F0BA8A59E23E500
D03758832A6150BF51F1096E643C98DA553929EDAC78FE0F28B0D59B9D56721D
00317093DC68A43C1B7BB7F4EF1D185ED2AA7A6E6F2D367BA67AFB0E7EC23092
A210DB79335BDA6ABBDAF5E5C4842B0A1EEA9B308FEAF483C1E8ED22088C4876
BE91F5D97B1EF9C6C943DC1FED8893EA22A5A265001D8B50A4F9FFDF83700265
B2385BDCDDAFC00F453DCB457F0AF33A1D8FF22BA6C4A7951F591ECE699C3D14
E75F936B66F381315F7DABAF8408AEBA61B6BCCD94269FB8AF5614B23A6FAA9B
331A47310A3337123061ED33479DD2F676F112024F940969472F7302693D0058
762EFEB05BA41394AB193F4563F3909CDE861E5D53A6238C45EF9710BE15FBCA
5D20A8223E5B377CC3B3438C5257F4033D36D2F6F43125802E53A348A51F9D87
A07E47DE15DB238C3B64337A44F4C88167C0FA1671468E030FCD02FF3D075687
3956DFF8A78C4BBFA06C711CBD066DE67958FB6D857C2B8851B1759285D79A11
EE35885A02259A2A785C64151FA9BED5BD06B8A0F84F05696E88FAC35B54F9E7
468DFF37F9DB581707C977F96CE3585CCC85FE9481C8E7ACBB9CCAD0B4D05070
4609CB0F1CF22B7C2F2BF7DA7064EB101904D2E7941490B5700104D9F84810B9
3F60D774F2FAC9BF95712C97B1F097BEAD4EDE4569609C00D66C3038FCAF7C14
6A92804F163A09FE1883EE040640E8C9E5476C6DE456D731C8DFD998B1DE9DB6
E5FEE8DD02F53DBE587DAD016B69F8AAC48AEF9D9F3379FCD592E02C98E65265
B0330B5F90F3B2FA275130A38A51B654C98317E867F78A93B8E847EAD914493C
6D26742E16DCD21E6AC62884E41A3CBF9BC0BB4B083155753E262EBB88B1188A
A5757A22951FCEEF0035FCDB592821C77978CBDC7BB06DA2289639211F070C28
6D6107790BE7B3C7F55F6840440E36581874A117F879FF966298B0FCEF744C8E
00300B4AB28E3A0D20565BBD3D4DAF867655D5FFE8B96DEC9F3E71E5F4A44E16
00D8933AB62879A541530FA1ABCA84E043EF7C2E675BCB40590BA9D4354473FB
279EC62561ACBDC77F7ED60825C75260C7BA8A9288B97C90179E0BFBB4CFD703
4EEC535E10ACED838A8E2C234512C50ED954C734308E20675034C204442745C2
231BE5FEC5B530A000BB4851CA3232279597AFD587B25278168F35F479635FCE
BB24F3850B81CCA0D8032EC57EC162D5CB4F95AD394342960BC49E65506F2A02
6227369CC8843CB2AC36FC01065AF3DE5C8C207ACBE06FEBB9B110B893D3BB81
498AA5A8EAFC6CFCD2C22F88673897DC334BA7D9CA88B2458B357F2ED2773B90
766998F2B0CF2E5E553716F3F3693FDEB4F2CC3773A497C2AFC80E7ACBBABF4B
F5FA5DDF50E4EBBB8567213AD4983B07D4EF82289BC7CD2D7E687BA698B5CFCE
98631304326532551002FE8A98EFF82D0711F1ACE1F7163B35B6CE4425FB325D
F517791008C2CC6E97F5DB2328F3596D598F358015B1B05156A19AE39ED7C98A
75C1951D895AF7A2EDE481BF28A8908E079EBEBF7F39C89D777A5AE2287D57A3
F5EC1587E175F64558BA90266261A19D634D5F6E323AF973F639496F9246FABA
05C336C8999315B4218BDAD1DB4BE9E3E07A3EBD91EB6DC24E8E7AE68EE93820
B4F25F802ADDDCB93990C71E229509B62EE1FD09E06FD9C959588FE5D46A6C4F
64195B40E47D6C66F325F92A1E89753199ABACA5F0A6303F96C1158080E53FF2
AEAC875E718A33EB8014E854FA34F3A5CFCC0057C12DDD6D82690D9DC5FC1653
E7FC71903EF0710D0EBBFD1C9775B0B4F767134315A04D36080304F20C63E775
EA53578C9821A774AFA72D1C8F95E29CDD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.1: CMSY6 1.0
%%CreationDate: 1991 Aug 15 07:21:34
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 48 /prime put
dup 94 /logicaland put
dup 95 /logicalor put
readonly def
/FontBBox{-4 -948 1329 786}readonly def
/UniqueID 5000816 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D5FC1B2109839E5B52DFB7605D7BA557CC35D6
49F6EB651B83771034BA0C39DB8D426A24543EF4529E2D939125B5157482688E
9045C2242F4AFA4C489D975C029177CD6497EACD181FF151A45F521A4C4043C2
1F3E76EF5B3291A941583E27DFC68B9211105827590393ABFB8AA4D1623D1761
6AC0DF1D3154B0277BE821712BE7B33385E7A4105E8F3370F981B8FE9E3CF3E0
007B8C9F2D934F24D591C330487DDF179CECEC5258C47E4B32538F948AB00673
F9D549C971B0822056B339600FC1E3A5E51844CC8A75B857F15E7276260ED115
C5FD550F53CE5583743B50B0F9B7C4F836DEF0E4DAFB5591D919AA50F0078928
03C748D6E926C1F493B1C7F9573016B615ECF2B62C88534FCAD46221D7A20BC5
82BE6756538242A42EE1D9B0622CADABCA834E12346D0E0751A8A67B8A222235
062F00F8D0E42E76FABD38549F50D07CDBF401E0111DED75489374FBF860CBA8
256A9D4137E788E1029A507BD9114519466CCCBE4235E18C325B758B4A64DCF7
A8E75F74E68D101892E2498EDB345F59A4646848677CCD3C6858857619B61632
B8E4F5341C57AB5C03EE6DAC22EE69B3C3067FA87D87B0A461464A443D5BCE59
DBA7CF021B65CA2620127032F44FFE39AF2914771EE5BBDB10DD0508D0B6AA8C
E3B2DC4E69ADAEC65AF2800AC854AC064204331749735ED93708E7A8C2E71ED0
1F9566BDA78C61FDB6DF891ED6DF4000237614BCB95E573E4E4917D63D19CBB3
3B83DB56E68A174088A505BED91BB1130AE938A9A19C2D9B08A802070DDA2725
1F397FEE9F18779085290E34035B13538143FA843D0201F94F50DEE644EC6133
907BB3BA44B9D3D470809CD8901D18A6B9B5E46B113E644887DE6C7317707528
C2ED91968ED247828BE5C27EE5696981571F24318C4CC1B8612395462520FDE4
BC605F0B10C7304531F3BB864FB4FFCD76B836389C309558B81D9AEDBE93128A
EFE34C0514FCC3560E25163FDF2D1B76888BFA1F8A6C737896BFDFD3DE00221E
12884EFD53D407DC4C6833795F769F3BD111C75B055006EFCC62C8E91653EA05
7306C85A40B4F23D4924
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.1: CMMI6 1.100
%%CreationDate: 1996 Jul 23 07:53:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
readonly def
/FontBBox{11 -250 1241 750}readonly def
/UniqueID 5087381 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DDF0342CA1080743A076089583
6AD6FB2DC4C13F077F17789476E48402796E685107AF60A63FB0DE0266D55CF1
8D0AD65B9342CB686E564758C96164FFA711B11C1CE8C726F3C7BB1044BBD283
9AA4675747DF61E130A55E297CA5F0182A3F12F9085AF2F503481071724077A9
387E27879A9649AD5F186F33500FAC8F7FA26634BDCE1221EC0ED0E359E5EA5E
6166526FEB90C30D30099FBDC1BC2F9B62EFEEC48345160804AA98F8D0AA54B7
A480E715426651865C8E444EDB798C7E11040AF6E5A7ED1888653C6DBF5E6169
70BCD9C063B63B561EF165BF3AF11F8E519F37C6FDA2827685739DE2C48B5ADE
EE84F067D704D4511DBFA49E166D543CFD9ECD7417055D8A827F51E087CD2927
BAFC7E6CFBD70B0FE969F890A11149D3D44D422C3370495DA9951AEE7253A49F
3A9444C8CD9158D84117299F7F2332FEB0F94E6ED8BC7AA789A3219BC2F227D3
3B5BC75FB53B55D72AF4A6A7BB613FA235B11BB37D059FD87127CEF73D5B3FBF
9F91ABAD78BD9240BD9525EBA78095EA0BDB25D1A19E876F292882EAD5619D46
D20317A345D931F4FF4EAE6216C27044CBA525E3B917CEA25A04C120466C4B93
FC720E6BA832A06CCA0A3916CEF0968D49085AEBD243C41A448289A6F05CE3F5
79148DC112A3CC7E8FF810B8C1A09E05F496C0F1EBA334E42E05C376C98F5F69
C06C71BFC0A2F3AC9951CFBB143C66FB84F9C4ED27DF70869352D61BD5E11508
0797B87C7BBD9D6B4435A339057C62703403E5F5AB4211C00AE4829E02879D37
D1EB7A2B89015F0001B6D47238AF936E7DF0707CAB20B2BF49DDC763F9AC7A31
1A5E799913F46BB3D38CB1CC3AF56E13706D072BEEEB92B7115C7DD732658AFA
5DD45D2A03E1A7725A13F96530B10FD666B18C5F5641F6908A1BBAA39283A216
719B91A9D42AD3EB6C58649268B6A30539FC7CDD14301425C5C4C4F64EC548A0
A65D37A2BCD3DED705BEB7A5831EF3157AEA954DA2F26693D1ACF228C52B9539
76AAF7AFAD097B014ECAAC099CE06269CE5D68EAF84A10F99DABDA104074F8AB
F7AC7066327D6568E3DF095440306A9613C44DB9D215E3C66814A8CB81EDDB03
F9A7A0120A34995A1B67724A64FCB08CC98DB3E9643593B9FAE040377158D12E
6524AA3891BBC9555D09749B984830DB0804A45561BDF85689C8231B588FB8B2
A5A55F23DB82ECEAE11752A3E95F760BF8D090C61C6FE2B2EDA84DE46CD8424F
5911913B1F5DA1DA3C88BF67C0FB90742EB5456A50810AFD81F802E756AB15C4
37E02FECD75C9EAC4CADBA447FE06003A1CE6EEF96723B00F57F5C5B7CA9E8D6
EDC249D8326FAB1641B379A5A3E15E04462D7109E262E1B257473ECDDF8D7061
CAE9C998B19A18911E21ECD8A3387DD938A029DA4F4F31A97A2C1779E4EA6682
0EDCEDC4FBDF3501CAAC7FF376AA463F0DE7D7308649DC934D2A57168A6AD2B8
37600A14562C1B031315A38C53325462F545F113A1F5264686F7B2CDFF067957
CDC42CB04BB32A8CE54260148AEA07987A000D137721BEEE1D10DDC0394C4D20
8150D0C13A04D234A4EDEBB2C62A9BB025B10F25F8793ADC82868B2A1ED4C7D3
ACF4C8DF07332389BDA12C330E7B1CD787F98741B859A48E7EC1BB3C6B97F8C3
E969A6BC3A43C3EA1A2991BC4F324ABE0F7E0293E03FAEF3E89D07C07D4B26F5
D59862C0E08025FBCD14BA0301EA4F34AA21CE7945F62CCD50EC518DDC9142D2
F499C6F129776DADC366A09804166ABDC7639A9BDBC70351134885E0F2CB3692
8E0EC85DDB0B8BF12390BDEE1C70D8E401A318508E0B37125547B921B52DF0DA
826DE05921EDAF9CD687EE0FD8586877DC0DC205C987327DA7E75701378B18A4
820D40180CCBA228E94845C174FF02611F789BF529C2D7D23E51829FA9BBE1E3
B56319B5221CC242F1A5CB6CBD6D08F0D6C8CE025B8505A90685A13F09338EE6
4E71D43297A5534030B47111D4CA83A477ABEDD1980E17C2B7662D498ECEF90F
69CC04E3D0DD4B19E2DD91E324ABF50DB91B4899DEF7C05F32BC0A78E7CD531B
E1716EE1941E069C9EA26BDD67D1752DA490B3E0532139B6DADFFAA20553B97A
BB063AF5F8FB472895623FCE0CB4EF870957F04AA8EC8747301AD453C97246B5
4446323FE3FD8BC9A0F5065A86BE27A3E3145C7F3F0FF3CD03ED5A8A84AE2DA6
6A1271D0E34D8A5850B4C98439FCA05E65EC43EE14E0FCDE507F78685040229F
39CF444C3037A25A159621DADC5CBEA6EA6CC413F79C1B534418F80D21C380AD
682E1F7C5F4995827000C660F39ABFC6DB692C0E74EA5B96B36BB33E7449BF7F
C4E58A4D5B37EDBAA8022EF761C77C8CFCDCA25B37535FD6162F8DB32F4DFEA9
B2CBF30EA67C183D2551F62B3D27F8D668D9547ED17C9EA27A25ECE6EE964A4B
23B310596CA6E589340F037A3A076C1A43307B92001F0145652EE37F12150324
E7D39016C3BDCD0DFA71CEF50BF86AF7B28F987CA2EF67D5AB7604FC18955661
EE18532302D81B6CF3E6EF5B177A11F0D59E2E93D26EEAD6B2558D6186088961
D503EDBED0D2F8D10FD627384D90BD3274548F33EC5654B4269AB556C74A9FDB
1A8A85862EFF187FE167D86A2E437FDF1EEE487743500AE0762622D923739C92
60A3559ED87784D3EACAD1247705BD6ACC4987F74E2735931D481E89FDC695C3
D64577BE2368EA44D2BCB26E10D6CBB30710B1E5BAFF63DEB04AE2DA260835AF
BA6D7AEF9C6BE2DD653F56020F93784743E6CE969A732B0182DA195BCBFBBB5C
392C137187C941BF6270626C6A3717591670ECDE58AE2C251934196F9996ED6A
162297D2005A9C480859D5FF216D3086969EBDB298421A620B1F1678D26C511A
12D60E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYBTIP10
%!PS-AdobeFont-1.1: XYBTIP10 001.104
%%CreationDate: 1997 Jul 20 21:19:18
%%RevisionDate: 1997 Sep 14 19:58:47
%
% XYBTIP10: lower arrow tips for Xy-pic at 10 point "technical style".
%
% Original Metafont design Copyright (C) 1991-1997 Kristoffer H. Rose.
% PostScript adaptation Copyright (C) 1994-1997 Ross Moore.
% Hinting and ATM compatibility Copyright (C) 1997 Y&Y, Inc.
%
% This file is part of the Xy-pic macro package.
% Xy-pic Copyright (c) 1991-1997 Kristoffer H. Rose <krisrose@brics.dk>
%
% The Xy-pic macro package is free software; you can redistribute it
% and/or modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
%
% The Xy-pic macro package is distributed in the hope that it will
% be useful, but WITHOUT ANY WARRANTY; without even the implied
% warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this macro package; if not, write to the
% Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
11 dict begin
/FontInfo 9 dict dup begin
/version (001.104) readonly def
/Notice (Copyright (C) 1996, 1997 Ross Moore and Y&Y, Inc.) readonly def
/FullName (XYBTIP10) readonly def
/FamilyName (XYBTIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -276 def
/UnderlineThickness 138 def
end readonly def
/FontName /XYBTIP10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /d0 put
dup 15 /d15 put
dup 24 /d24 put
dup 29 /d29 put
dup 30 /d30 put
dup 31 /d31 put
dup 32 /d32 put
dup 34 /d34 put
dup 35 /d35 put
dup 37 /d37 put
dup 38 /d38 put
dup 39 /d39 put
dup 40 /d40 put
dup 41 /d41 put
dup 42 /d42 put
dup 43 /d43 put
dup 44 /d44 put
dup 47 /d47 put
dup 49 /d49 put
dup 50 /d50 put
dup 51 /d51 put
dup 52 /d52 put
dup 53 /d53 put
dup 54 /d54 put
dup 55 /d55 put
dup 56 /d56 put
dup 59 /d59 put
dup 64 /d64 put
dup 79 /d79 put
dup 99 /d99 put
dup 103 /d103 put
dup 106 /d106 put
dup 107 /d107 put
dup 111 /d111 put
dup 114 /d114 put
dup 115 /d115 put
dup 116 /d116 put
dup 117 /d117 put
dup 118 /d118 put
dup 119 /d119 put
dup 120 /d120 put
dup 121 /d121 put
dup 122 /d122 put
dup 123 /d123 put
dup 124 /d124 put
readonly def
/FontBBox{-542 -542 542 542}readonly def
/UniqueID 5092839 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F409B932A74D078F654BDC704DE35B7CC455A4DC3
FED12AD5A138F12D1F36AB94792D7CBBABAB576094BB3DACD5249F299F6A44E5
D55493440B9008DAD1724D1025FF4C1B847BE604D73EB4978213D57EEAD8A8D1
5A86CA35DD6601510434BA8FFED4C13D902896B29BB9785C3082D736BA9823D5
7E64CA23FEA7F44B2124E5F67CEC97E9DE58B6FA5B980B36AE286B081C98D7BD
9879B11A89E194E2DC14674A18FDD0A8E717A0A56E3FC56D5D6D655F4A9249DB
156F3F9E90103C2B60AC987D0264913C3968879B4C420AD75F215263391DA687
FF58D5E85224C89D255EE2D1CE35F12658D97B5447970E044DECC9770B3E1D15
08A427888A7583890516C231E025873CB1971633D6A13245461D4F18E3169505
5D4C5AEFEDE1C6F5F1CE254FB5302704D8ED60058E645FF630B23D25D6C70C44
330963D29CA7058CCD18114B4EF9C9AB72AD444484D7CBCD2EE82742C558B477
0182F1B77892DF07F2189550DFD355042347E288EE60AAC93A4A8F364DCD7582
63569E845E521F361A8E0AE4CDB4A73DE296E8D0D99CBC0E2407F01C465D6201
5492CBC3309FF112E164B5182ACD1BCC7616E1577A23FA086C7191A986041E13
967F12567DA35A9F58F59C298C9D8BB023B1AC9F705CA45B31A132C3BD2BF793
71B1A4373E71606C132C05A88474875C3E3E963660814FC12497D7A39ABAD71E
6F08A07F236B72277178119C9011DBE677E6F550F9392455C07518C027D23C5C
1344CE300AAF4404A774D4A1F7768E8EEB045857C99020FB4524C1E566C2A624
3E106979581AD2E088EA6C0C556843D79510EF3730320743F0E85CC13AF29F8C
21D85748FBFD664A2114B8228A84CE677A69304D98FDA45981ECB0155EF903B0
47FC2194CEE5690237BE5A5489D000983ECF6749678F7A9707486A918AACC27C
C2E50C6CBC6C93A0FC4D75B4A1B4BFF2629F9A5FEB84B1C200EA44196E85BA66
9E56A2AFD22B61FB342A24AAADB81D811F0E4F591C19E8C642E657A7A45BCE8A
3F97289AAE7DFB9616BC09925ED3C662AC9A1931D79AEEC6E526C98D07A15023
4E74DD7FBFC037B8089E3DF729A911BEBAF7874B1FD74166E6EA00CC9FEB898A
DF0AFD2D9B505C0DF19442C641716A1411670032723830E3717E675A2AA8B7A9
5E108C07485B2FBC1F8A9E35963EDEF5D0BF79C5EDF39D4F476DB302DC2DDD3C
BF502A342A7481366A9ED01D4463389436D462B4EEF99EA70FDD5CFB827CA873
2361E6F3BDE83797CAB867CF491C533C67C8705A6A06D150622BDFFFA69D2228
F301D3671AC494A87A8322BCCC0682BD17A82D9F7415841B10667053E5C87787
58CD67A16EB424155AAD120E96D326197C83EBF10EEE9681B610F073055F0AD0
492008C54FDA0031D01B2A7D6B2293E3617E5CF778A0A4B443843C98E7E822A9
5F2071F564AF950D85F79A2A175EA87D5E1128AF87055ECAC2ECB343B4423710
96787C60E26DC9B01A9076FA002BD4F42A4980D5C933F4B8AED7CAAECF31263F
1454F9CB92B8A839CFF06267627E6DCF1287EFAC758C829F07C11D7B3C0C1964
9790829E331DF31CD623F4A810837C8496A2FCD5F0D559AFB5FB6E38BDE6A674
8E374D62A75AADE287BB43CC348C43E5A05B48FC4CB5AA1E870B02BCA8AEC6C0
1AFF5162B136A97012C4D4A7166613C2F8B4DD40762008BD4B281AE0B18B4F60
73036F4D4D73F3A53D6D1E3BA6EDC6BD75CFC75E5E74CD9EBC3A3D532153FDB3
2BFB837E42C7FEBF186EEEFE3C315ECDCA804CC9731AE5B8DB45A018F86D1644
B439FFA9EF43217855D94961281A8F671F61D2B3D630E108BBC31DFDD73DBC51
97C826A6A1798E088184A29AA3496A71F5A4DCDB3E6D4227CCAF21DC1B880C43
6DAD267D15DD574A6D01CFF2B0320669E6E55CF86EC56C76FBB25ACA6031589F
BA351A21E4E3624E9171561F161007D85235CD7782297D77D1EDA892838EBECA
91889260EE20BB55AC10118F5F491D818DA758896292544F23DC0319D440D31A
9F501E0FF68CBDE5F612FDD38C34BF839AB51C674B4AC01B5BEEA52F58DAEEEC
7415046F29F0BD73CCF77E8C30ED85F677647EB133E1C866300A212CDCD88429
0460BCDCCE4E8203D3F2B83F8F45C2ADA463D68DB616C44C624D6A4D4836F3DB
DE5E6C84EB53CB04C4D4AB073B45446F6E25B59B17EE78B381AD1FD523CBB836
D76B3ED56E5797AAE4859B6B9E4654921985C998F862517C40973306215156CA
33F149E3DFA617175BCE0356A51E5B27F91C28B59298EB5F1567983B95555805
FB53EEC014FD3FCD53B469628E403472A281D5F798F66625B6BCA568D71DBC43
1F41EB8A31ACF64C026DF00DFF921D4F99A4BBFA45E20D24683B4A961D62D280
40E25C502E18DEE2EF7E9BA39056C7DA3A8CC28C7770A0E0C37569E25EAFA68F
DD7B433CBB7E3B373BED0CE9F3708211C8CC4B3438073ACFC98A83DB283C8D91
9E564AE6572DDE55AFD5591011B42920EE781E06A15F479808B4A3F400452B75
E5F1C804BECA43E79A872AC6F1309B935D2A3C3E5E4C45DAE063730C49EDBFC1
370D8619A24AFFE0DECA06569797EE35FECFFE89D2BFF6F30D3417E76BE62213
80EF054066C5E362134CE06424407CAE17CEF2DA726288B83A486B3C3533BF0C
07D857F143E72B61EB066E08735EDD7FF82530028316DE5988F63299DD7DD918
F2E738FC1A57D7B00FFEB80A29C9FD7F9168A52C1275157B1E67B7638F9C7DFB
6DEBE2184FC328542334E74028B6628715DE6F3F3D8C12320CA79C21A41B32DF
8F19E986DEF3EAE20DB0F162923267DFC2945721A1A86531AB8FBAC4F2CEE6B3
E96C5193832B3FB855E96CFC8D7D48887BE14CE417944387629D055304A4400B
4E4BF2ECD801790892C97F0ECBC3298817068D82199B8CA0FF8E970725F69A82
7E6D361E693DBD8FA6E29FA30F6C64E8B1FDE3A9E9DF9EA01054F19A98859763
11EEBFE0C33618922009D349699E1A1F4B7168E568730B9C61C0D6D617187911
8575A47600E69675A767681790A46072472E9977829C7A6B585FBBE644E64148
54BC1F7C8D241774146AAB63F3AAC6B574CE999B6FF9A13650EB88E187636EF3
5E101CBAE0703F7B5587843E22400CEB9EA0D728BCEEC7BB4A4AA91995BC13D7
12D116E983CB206423727E38B993AB3D41A7ADAD888C5BFD9ACBE4A85FB5B57D
026E53C7C79ABDD061FE7954C55211C45C8C4D23300FA188F647449524515339
5C73F72734DBB7486F6722B60E9872AFE0CF107593FD3571C44020424BB7B8F7
002AD5C05379661CE6368A02747D22F1ED52D20ECA07A2A99398E95AE7769C3A
64002667956673245934E0266A8D3FA95F8EA3F3837FC5AFD73A2CD0AA869EB9
9A95C58A97AEF1AC331892B730F391353B447C82DFE195BC877C14EE0A12A96E
B63AF354A01D7646ECAED2970669AE044EEFBA245B302065C1A214E8C5D7AF73
09284AA03E9AD32FC31D50929451B0E6627BB14B964588C4490C688ED1D21090
0EC620BA150964677972A3E473F6FEB654167B5BA4F8FD88BD7D162382746CF2
FFA9D530A84FFF473ABAB1944E6BFFE79048B83B6C5AAD575D5DCBB4DFD97972
3009C370A1FCE792CAC10F5DA4E1EB0A3E26E550D78CCA66A4083FD11D4C9BD4
AAADF20BEA408CB48C1A127F54323BD06FFFE83DA6CA3241EFF032210441FFE1
BE5C9C284C9E976EB4134AB4D9140A09A13B0BE8B9EC1304F229E2D3BCAAE3A6
7FE297A89C7B32796E1606A3CF78F1AC37080F8DE48D43D1B62BE73CF41BF5F7
077D468D0360AE2CEF498A11DFE8C0D07E8565CF383F21C8E482A724C7175502
10BAE547AFA7EFE6375A9F601235062A5CF0D5324536E7361208CAAD41216D5B
880BDAC20EAC41BE59AE34F9757E4FF1278E06D80555ED5A9603C624A8816D93
9A0556F19EA30795EB172755D7322250D2D170402FCFAEEF20188CEF990BF384
61F8DDB65DC371159F6247B0120844026551947F1611A929AB5657D16C22CC93
8846EB5FC715C5EE943DF497328E2A44B5C014CCFA863CB7823D353142DFA32B
FDA54F2B50C305A3CF17E8053A75930218264A60CA497E885D2B97EC5A55DC79
30B718C1D081EEDF45FD247C42BD4E78FC574E18A11476F980EC13C378A990A4
5B5D8EE0236AB3786B445180242F69974DF0727D9F1CC92BAD6481341A892837
B27C3C8D88E8F38DA54E6D6318166AC0553B069374BD7A7E039F2C0C114E1A6E
5734D74C0EB2BA84B5C2850F453D8074578587702B0F312876A7D4E1D6FE094C
02399C56AA646F7163FF4FD386F667C21366B5F468DCD08721C254D5FD791303
F7ADA262FD1F4B24C7F90077402B4CB39A085074847E6E58E02B7E2768D1C228
BCE8E6EE46667C7DD95E7C67A2D4D521150AA3618361F07FD4A010252DCC237D
9F53D321279DDE6FE2A8FCCAD504FF1B63A34D1A3CCE2BC0851DFAABDA46FBB4
DF34236495F970A8D920A1D21C3FD038D5A9885F32FCC758B4A899FE12AA270C
26AA6DAF12998CEEB17018EE98D859F5B304900DC6BA395EC479828BC628B3A6
E247E2C26500516017E6AD11FB1A735719CE4A29C8B4BE6AE1D2AE3EFA335130
3808598E344F782C26321974A686408029D01E66D502134654134A49BE74C818
F2C54E7947950F09D9411DB5BCDDCA3EA87C5A71FC3D927EEB2BAB78F1D3D00D
F1151AE42C8F64C7F1BE967F6DCBEC1AF0EDC97F39D05A347F3193090778B6C4
B974F5ED8CC4F2DA1A48F35A6CA8EE0DB2DE44E427BF736167A5D55209BC1CE6
C90D3302691CF7FE111C693FA2859828D2464C357B948F42ED2664848A0EB61A
D42943FE3E937FBC1281ED7773FC564542FA72F3645E2F98073568A6C6D34030
83F1E6677524566503B15B7E49BAA436FA8B871DB8EE150B3737B9E32DA117B3
C3ADD8AD2B503C93154283269AC1FE5AF8EC0FD0D6CA9261EB47162B9D3F12A1
497A8F508AEA443D33462639A8C31BD57645B54BD6EA6C1C093FFEEE7BD00527
15BCA5DED02B8DC04DE4F3E6007018B0A97444AA3BBDBB868FA525A8F09C3DC1
AD08487BE695A3963C37D5049D798228F2371B8D5C47FC29AA87948D4E199BC2
5DEB65745C40AF8438735DE0249D5728CAF3D98DF50F52A5029B438058C7BA70
09A4E0F82A93D43E336706549DDA680556A31A45523108BB81F63F12D3C2CF14
62C90FF5936B851D7CECE73EB2C67E36C8BD27D054AA7DEF42EFD740BE289E3F
653C47D14304E09C984BA617C4E4DB41C9F385CB66A4AEA39133B2EA20BD9EF4
67F4776A24E6E6A273445DC6DB416A484C5126C00E855DAB188E5B40CC6E4A7B
D36C41849EDF708D9D0C7AEAD2D8315B80EF2F760DB976BD4CFC4993B3817431
724E4B0B64238C8DC1A378FE2377CF5B798B3257F57D79D283451C9589E49BC9
27B8494E888B0114147CE6993F01B89187C0242D53532F4676B812883CD2C132
31D21AD5EF85DCFB2CF27E1F46C20E996B8F63EA24B57EFF4753B9BF63BAD113
A4C4FBD0C276C47ACF0B10CF830F9177332D0217A3B7DFFC3CAB65F96ADAF949
5B6778D98F27388E12930842C066A7039819E04D341607F37EE07B8DF4E36938
7C1444A1825D80F4CD826546BCE2CEC5275C54F8A696B3F60CEC073E4626B9DE
48D5E2152AEB43B85A9BDC5C65D37B466950728B7CA6F935F475C6E52187AC9A
B323E2A374ABA9FB1284AB1A894A0BE650333B10EC9F09577C091C85F75B3853
E825DDE60C80E4524D6CCA0E214764576845832B2EA6F1B708E53DA0425B6CFE
9A9BCAF3DC0C6B4CB02E47666005D425DF6FB67834773E2EAD1C5B55C2A6025B
ED674BFD849C79DE930854342C08A61BA8AC0F3F0F88FBF82CD17D3BA57A63F3
FCA27CCB3CE4FD291D595AAC279F44FEE674E7D07B214C62CDD7D5EDEA53C296
90C17787E030D218AC65A7B96048B0AE372EC71C679EB77DA70C6C0F1C0D8517
9EA583567176DF894AD68CA7A2D7AF8FD044644159B01876DFE4666C91F4C77C
DC6C32A1D0873CB6D8488DA0FF64C5D8BD620425E2738D5B7533D5BDFF5D42ED
A83618D643D84C5E8A006FD91DDA311A4DBBA3719CF807014C99AE133E5FA77F
7E2AB6BF864293678AF7EB5724CEA8A7F53C92A94201AE17174598A30BFB2523
4BFC5EB7406642346761A83A65F10DDF0E5E42436094E1B466F7834D91483C89
1CA4B23B9275FECE32E415061DD9C7CF18BC2C801469ED16729C67598DA07876
0F25694BA9A4E062DACED5032FA1AED5C14FE8A6C66C57B63F60048CD49A5DDA
9C3D163E9E0B164F198B5F9D1232A63F0F5B97F294601A4DDC6275EEE7985228
C6BB92A7CDA6DC037C90DC7165B48C094E1166B509BB057504A17A323C03C408
AC495778D76133D701500EF51C78FF9F955ABAC88D5E7DC19C4DA5733A89FA0A
23C753B4AD8F986FD1AAFD22CB2937F87408B657FFA404C02A076551214C1991
11E8B1D70D45DF765390C29DFF7309658031914BB157CDFAC6DEA402066D9E0C
B6AB1D020AAB42783A9F1890874CC5BB4C95C3D348E5741BA897AEF1921D15DE
D47CF595D043BEB743A26A577680DDFCD9D0ABCE7826ADC2ED47445B84BBD6BA
EAF2DF441E53174F37C00972DAF3D3DAE91C16AA63A21E64BEF53CEB80711B63
E3E2FA21314F1970592DC5260579C7FD23DF8E7E0EEA9E7C67AD1A2F507CDA7B
2E6A8FA4656AFB75C77B4DB2C55E208A9EF5766B42BF00579CDB3729C6386381
873EB28A62AB00768EE46BF0D7C86CFD12E44D95C876190C31290B54187EF430
B77A9362A94E72878CC1B361CA5CD351D5D4C3651286A51EAEE0A4C129F4A3B5
38BCBB529EBB9B8BE8CB6049094C4DC9D96355DB93CAF3134E9C85D3814C090B
5927D54A0C35FB47E6BC21DDD59E83E402B61375DE24E3A950F0ED03C5CB999C
5DC8C30F49A363CDF0B89DC27D2E62009F10A3CD1840839F16A44E893C26379B
69822E1D87FC35CE2E388C3601A5879DBB7FD16521BA3513540A126A1A24A0BB
E07A5929AE202BA1E1F1A7CD226AD222A1DB2E12D477C4176508A9B1B94EFBC6
55ADFFF98B70194152A4DD10AAB3B60A19ABBE7B50CC2670CC6200241AD576CA
86ECB48E43A5EAF7B14CF15B29C2FDA91E00ACF2278AC4C4219D9F75960E9608
843BE2ECC52451D4F1CEACF9F14EDBAB4EFC44EB1A42BC5949CE767DD4C32408
F6827237677DBC45914305F5286903D2AC3819B499420CB664366F595E84A48C
D43653B1F0A2CD82C9CA718204ACAE3A3493497EBB97572DD24522D221F77AB0
B8C91A1D4570A6A744B5E99BD5464B6393D8733618F05E39C50A418320945E51
A5D6F1D8AC39F60ADF6079EEB88DB7C6273ED2D7F9C63B7007FAEBA3004D3407
863F6AF7EC4F832E6C6E14CE00571B7AC1C8EB39CF09DDE20FFD860995705173
A3B5E20C4B1B3EBA120EECC8B4F4F0396505F10BC7E19253D9C72265148AD836
B658127303FBD6BC7EF5B1F1F9C0DE5A396673A691D00E344F1D12B879F4A356
5BA92A0AEAFE898BB613DD8BDD4C6A7C767D4BC671D111E2F5527D6BAB3EAFEB
9DB551E45D5C358FA9511DA91A432611539E761CE653652E1017B151E68F6FAF
A9B9062BCE59F37CB759E8D962B805B29FCA580AB51C178E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYATIP10
%!PS-AdobeFont-1.1: XYATIP10 001.104
%%CreationDate: 1997 Jul 20 21:19:17
%%RevisionDate: 1997 Sep 14 19:58:47
%
% XYATIP10: upper arrow tips for Xy-pic at 10 point "technical style".
%
% Original Metafont design Copyright (C) 1991-1997 Kristoffer H. Rose.
% PostScript adaptation Copyright (C) 1994-1997 Ross Moore.
% Hinting and ATM compatibility Copyright (C) 1997 Y&Y, Inc.
%
% This file is part of the Xy-pic macro package.
% Xy-pic Copyright (c) 1991-1997 Kristoffer H. Rose <krisrose@brics.dk>
%
% The Xy-pic macro package is free software; you can redistribute it
% and/or modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
%
% The Xy-pic macro package is distributed in the hope that it will
% be useful, but WITHOUT ANY WARRANTY; without even the implied
% warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this macro package; if not, write to the
% Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
11 dict begin
/FontInfo 9 dict dup begin
/version (001.104) readonly def
/Notice (Copyright (C) 1996, 1997 Ross Moore and Y&Y, Inc.) readonly def
/FullName (XYATIP10) readonly def
/FamilyName (XYATIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -276 def
/UnderlineThickness 138 def
end readonly def
/FontName /XYATIP10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /d0 put
dup 15 /d15 put
dup 24 /d24 put
dup 29 /d29 put
dup 30 /d30 put
dup 31 /d31 put
dup 32 /d32 put
dup 34 /d34 put
dup 35 /d35 put
dup 37 /d37 put
dup 38 /d38 put
dup 39 /d39 put
dup 40 /d40 put
dup 41 /d41 put
dup 42 /d42 put
dup 43 /d43 put
dup 44 /d44 put
dup 47 /d47 put
dup 49 /d49 put
dup 50 /d50 put
dup 51 /d51 put
dup 52 /d52 put
dup 53 /d53 put
dup 54 /d54 put
dup 55 /d55 put
dup 56 /d56 put
dup 59 /d59 put
dup 64 /d64 put
dup 79 /d79 put
dup 99 /d99 put
dup 103 /d103 put
dup 106 /d106 put
dup 107 /d107 put
dup 111 /d111 put
dup 114 /d114 put
dup 115 /d115 put
dup 116 /d116 put
dup 117 /d117 put
dup 118 /d118 put
dup 119 /d119 put
dup 120 /d120 put
dup 121 /d121 put
dup 122 /d122 put
dup 123 /d123 put
dup 124 /d124 put
readonly def
/FontBBox{-542 -542 542 542}readonly def
/UniqueID 5092838 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F409B932A74D078F654BDC704DE35B7CC455A4DC3
FED12AD5A138F12D1F36AB94792D7CBBABAB576094BB3DACD5249F299F6A44E5
D55493440B9008DAD1724D1025FF4C1B847BE604D73EB4978213D57EEAD8A8D1
5A86CA35DD6601510434BA8FFED4C13D902896B29BB9785C3082D736BA9823D5
7E64CA23FEA7F44B2124E5F67CEC97E9DE58B6FA5B980B36AE286B081C98D7BD
9879B11A89E194E2DC14674A18FDD0A8E717A0A56E3FC56D5D6D655F4A9249DB
156E71D55EC88A3532CAF855B82F85C3FE0C25A537A2341021AA624B24285243
57E0798D7E161B1C6A1E32284BA3B1236B5DA8B4FE1D35D1AC64134E2B952218
C5836BAEF2006F9DB675F519EDE9E4E20A825B8EF4636BDF1EF1BB5190CA66B0
ED8EA86545CD3632AA51A0C38C7F92B5E2538B6AC6EF9F0BD8E9C8BBE5EDB6B5
0736FC8D8A23288D93BBF0F7B3805B44B1B50985086DDF1A3CB7DEA6DBDC7ECA
CCD106F227EDEAF63D6C4CA37A6C3B32A2F582D2B33B366DD1C792DF5DCA71EA
92BEFEE11AB37472A18AAB07603E1B5658C76374281BF234D7D745458CCADABA
52685316908C9754A1FEC267FE4CF913253A16A8AC5D43E907F8DB74802C834D
861B250DC3AC668CCAA5ECD8E58D2AF9499A5B822304FA2BEBA54D325363ED21
814D5132E07D93D23D68F7366459D13762BD680FF9F4CD0F8361837F4FF9CE08
477704DF03F1C879247FA5A3FFBAFD383F35D1033E400FA06EB43DE3BE149728
E98DC609E89DC430440ACA19DF6660529E603C1F436D50169264DD4C1D4E9E19
03D2E50231A92908806BFD4F547BBA0A8D93361B5568103AF57EF0A6A1119DBB
29DFD0B7BE5F0772B5C55AD2CD941B3D78EC20097554DD1621413F14BEBCD5F3
A8712327DE62637EEE530F4A3265BF1B91EEDB728C135D9C006788E9F38482BC
154330E139D5586E6E3810CDFDF63F871E67155A055E3FF93D0D808CF2FDC2A5
2B22A9333C29729421C21383ED8F8BD453179783D609574C6ACCF5732F6D48CA
A7C379675821C619E8386EE223B7D48A4047418D7D403C2893CBAC25440F451C
C70134B79C8C24606A0E334497A298F4DB184C21EB1F2CCA6C0B5DE62CC61C37
1734FA179399F1A0BB08C3E1CBAA4D082EB505767ED9ADBAB8C313392728B107
CE70CD36959A194F2733616CD6E9BC17EACFCC646F21C7B73915F2BEA2B98047
05CB6995C01E4FD70DBB961BA6C69F804EF2AF1F2EEE88887B5447CD38F0ACC4
D347FD9D79E51B30DB134AD3BB48F4010406B43D91E82F8183EA2222140B4968
6F535F629B2B44A9A5DF5B4E342C99B18F4ABBA832C8821A58BC6E2C0C6FB4C7
850FE3C57768B67FF3EA478AF879EBCABF4CE6E12E0575371A6A7AE94189B84A
13B24117FE13B5C9FCCFACE2588F298A105BC3269008C4274F696DBE4FD5C319
22885035E5B1FB05BAECB4F74CDDC3127259F4C983D9BAC88ED555B5D095D3A8
5FAAAAE7B3ED49EBCF4AA1B0901223D1DB93430E89EBDD645AE4176911E5CB3B
276FAEF8482EAF0D1095B90720D9E50BEFA98E7376829B80BABB57932ECE600E
8218B72FC6E6DF18495063F3E98D7668E3DD64BFCE5E299ED40DC9052105628D
31B625E77FC93C38DF56AFBE96BC608A29EA41C87F9AE63D01FA7320A46F0ED8
B963D1D46AB673719DEB426146BF3DB2CEBFA8F18CE9B75281840FDC2911DB9F
A2C6C361571E2218A36F3334622814D42AD0C02224860A6AA9CF833B4ED1C5FB
2AA500C4AF00AED23784AC1F62ED75A02BFC19DC51A5B7DBC963D98564D8B3DF
96631EAEBAF1DAD0EC8064664A08FFA244C8C1BEAB6FA1AE6642351271F99220
84D9C2FA778A63CF329FE726E4A5AF222C4BDF268AD617A9C634DA5879E816C3
22E33F1CB0030E67E92810F9442D11F1663D919D6D7F2CBF0E1892D0BD49BEC8
1541F651E51F26A485EA2EF0ABD9F46C7724CE9D29018D75C2B752BF6ACB66FD
F6B51C9E6937A22D2A90767B2853193076987AEA6B1909460C90A966A4F69CC6
5CBBE2E5C2D7D36258B6C3081F126719D572A5A08BFA0CACE9F450CD59845856
6BA26CC4172DA9098CAEC8B91E39DCA2F885F8DC5312F2178C97FDEE0B720473
787050C0232A49CE1C2B1616D01147A7B17DAF0FAB5ADE28D6C5800480317582
46C8537D024EE7728EBB416DCE2FD6930FD3991501BDD96C082EEFEDFA67BE06
BC7BBCBCE0B68747D2D9047ED6B5E1C0EF5A6B8BEE4FDF508F9281E57D529FDC
BC2374D6749A05E43B9535F303CC2E447B3F39CA21C45D0F326C134FB83D9B1A
7C0024706A3D52924A948263F8C8669EB8FD1BD5EA223FF55D086FD72C69F1F4
4342F27AB86A8176482DC0A05F58BAA0FA95DB0C1202BBB4F7C13203CB1DA323
466B145E4B2C120BF75649E08B581493128D7C9037CC934FA89C1E248B9B6F34
3C976208D4C6D948649770AC603008A7DC21D242D7370BC64D511CA9AE17B277
BE9F100ED8B16D3D02C32BD9337E66BC4D84D257EF2B31276212BF65F1986819
E5DE1B59738AE7E036E5E758961E03DE8B53A21D4870AEDCC5BB30962A7804E1
E84A7F16342956A4D5638E0614B34B7A476CB3F75F83227B0F16B2B597B32347
50F4FCE3CA06ECB38D26DAC87B11E0416DAA5FF418D64B7862FBDFDA9D8BD950
36CDDBBF19E426B085BB3FC931DF5CB67DF4B6B176D8DDEFDAFC8E1CB52B5504
EC595C0B82B4119BB6B612531F98B04B800D08D75AE5B904CD55DF3416B62B27
A9F245AF71E727D6ADD405836A5125DB6A22CA70E5C8C741B664F239042F0FDE
2667AD4B49A4551457B3EE7DDFE9C374F14CF574A999580AC7EF0A609D20919C
4CA58902E28F53894465A1DD2577223B1E7D2F13EB168EF4867FCD43FBA085DE
AECFC3F025B04EE13DAA5CAFCFF9EF95F7E9225A37148A857B23373384316E16
70D14E79F01B738B7D204F36ABA949505E641DC99E4A4310F30CF982F0DCCCAF
25A5DEB628DB09B98F9F40F285204FDE9B7A067CAF38F30DE1E56FE4F7E83BE0
8A118EE4E3BFA02A6081386FF0FB0FD60354EB36EF32AA55D6CDEAB403BFC8D9
6396D511E792D62B09DC38AE66639FEC3AFA52A1412B0E8CCA771A9275C01584
DDEEF1255D83F7705C1CE35716CB498C2BBD9DF08B6B952BE3838836D5DEDB49
7F24B419E701E09F42DC74AD149E944B00CE9741E8E1C1E22D72D3AC2B280939
0FAFCBE7CFDDF46DE4381A4E298913455103C0EC821292180A126396850B75D6
797B2FA7CFEEABDCE0F6493D0B4ACABA1A839E8987288CB80474CF9CF61C4496
3E1F07BD5D649D5D7667590E0E320CA45D9E8EBC88B55BC3CA659D64721C9C48
EEF26BDF0567AC63580A15A0D7593F6E78C285BEA2DB4A8EBCAD77637E686C0E
E5D4EB46498BF967839B8EF848DF8C881193C872C1F64BCA84FD041046F27EE0
840C35DF6BE2D4E4192DC4800C5F77E791538FC6CD5A159B04B4617EA84E8DB1
7DFD2C9529186A2A9A964CDF6FDC31E662C71F14382AD1473C462449D5878B63
74ABCF87217866E2E1FFEF46165C7EA5719D17F296494AFF5085390127EEA3DA
7A33DED1061C6365E015A9A01B0DF8EC478485C25EB53D2696F857E913E64772
5B713A7B1B364C867EA0FF21B7D8E2F9A77F89DC5A98B208392400EFFD5C1DBB
4013EE5039608D2302E4C95B01842440D9DC2E11A42F94C7EDC8E70540A70ECC
10360D4B5B888EA5A6AC2F1DD0FBA972077612BE81660B122533C1555B3B1F5F
34B48468FD56ACA9645F0C6CC02244FDBAC0FD1BDBE055FAB8A79FBA55461427
EF5FA6FCBAE2AF64C1DF0FC099059000FC0269A700358F030E50362BD7716092
7CDF1B06A7DB5A016486FEBF7A70F7EE8D4D86AFCFE7BB856F4CBBB49015E685
6132249CA08703378D1A2EEC00B970DCBEDEA68D74D0B938F8F23744125D65F6
A0E7580CDFF8ECE005F1E2683516646D6BDFC95CBC5F7796EDACF9EECDCCACE4
0C7F0DA31763CF73456BE0807BD624B4E6B8A8E50DA594F785FDEFA87538420F
B81C4A2EEE055BF645A7A323F7B37E081E8B7D33FAB888822B740F7C1809A319
39ADF76DA3600305CC3D6EA3CEF1D154FDB7CC343923EFAB3636820F61CFA3F8
EEDC52840767F876938876499486CFFBBF464D761B132E7326B67640C27822A2
1B6CD89D917047C49013AF8827F8F02DC4C74DDA4C490C7E67427058B526C8D9
41E3C63ABBE0ABCE687F0E0C70D4BB41BA9C93E4708A465F5C546EEEDA01CDE5
0E735F8B18A27A9E1E25FFEFC2F473C2D6BAAB8AC8EBFEC0AF3874313D30651B
590498E3D2E90739FAA9FB788F54BE5DF67FCAEFF2597BBE250F4A8F68C0234A
D0CC6D031BD0DBF6452E7DCA98F550761B15ED6AF91FF2B3DC0F05D626C36C28
F8B4B90503E45A4C70BC818D02A1C832FA9A96D72C390B352E984841B23B1218
2AD42CB3F9D1C2225E14486F83290A6758E716EE5579D2CAD068B415CF44E8A2
CA6C7374E93449414B51927AE7934BF36F121CFDCC34558E9907BB24AC6D6751
C6450A6EF9FB4890E1D17688FC00DFDEC1FDE7AC472A3449FE935BFCEA166EDC
B0954DFF1F2B7C73BB2DA0B527E980FF4CC7FFE1B3C39CC314521AE45BA545CA
6F26E65330CC4C59217EB4E531CD23E25F2909EE3E7F934E2FCE7DB504C7549C
BB1FDB9CED992ED60246D2A2F3D28635671C22C05C8106E2CB6E7359ECA6E9C3
37EE324D92F102733CB3A8186B40B4677168C6909773A04F7601AB6F159D8E65
2E788EE856B2AE289EBA02322574DFF919F648FA3A2F0C57BCA050C6FA66AB9B
12383CC28EE165FD0172A0FDB7EBD0046406E76EBB1D1D95AAF2550101A141F7
A1F4AB1858C4F1E70179E6E76EE6B275B1F38BD6737331387C7431CBE7DC0975
F1AF5FA080744D148C2E426E29314316A4AFEB0380C867B329A179731A1460EC
5AB4F9EA6EE86FF4F830C81F52B0333D164A15827CF7205C00A39A744B2128A3
522B94139DE442B2D27D5B6B04D4043E78976BE5AE21F033664C6ADD6B2D00AB
E50EAF781E66386A79F06E8A3327040C63CD7EC664EB643A8C4A2686B4F798A1
2131B75B1F184B84F8C735B0D6C0196027982709AE81616161D37F1155A93CBA
F6F09A77B832CB1324DB8FCF983B5B57A704174B8B90146E7D32BF44CB46E2AE
F3F389EFC449F756BD503274A11C1F952A81C3504DF3724725A2EC83FE5BC5C9
5B59C9D4889B4FA1B293E6AA9F836703EFD17065326BC9B4743E4F089C6C7DB3
02E9DAD5FCC02C065ADF2426DFF3B85D56DC6CC11F7B2B80561F13F94CFDFC38
8AB0B056A85E57A55E2E74D422C793F54D24E0D068452FEA6E532DF381B7983F
D4F61034A135F8892EFE6DC594D4488822B490D40126D728859758EA7FAA5500
AB5DFCDB80510129AF434125A45F53466A1FE6016A44CAFA23E61950D6FF76E1
4168D440853CD448C2F320F371B8FB1DFF4DC0D759422C9B9B63B666FB793A31
827CFEAC6442122F86759ECD33244CACEA5DFDE1E35F6276004A240E3037C430
9279936B23BCE3FEDF441702497F15718986F34AE0A86D3692269AB746061568
0EFD0BCF29BF94E55358EF4C6FDD13F24BB022F444A3AFA46217EF6E2F53BF9C
26F03374A02F312C42811EB9609415B3E8AB76AED12B51877C799F2E697BCCBF
5E72262A0486E92B0B97DD57ABF6DA61DA34CF71EFD8C71AED7B618FF59F5792
9777C898C3AB6E443050F672ED14CD0B0334D2133F106652F8115DE342521A89
4C72D57F69917147CB4EE394FCA8953FA8F78B5FEB3EBE516BCD950349E29ED7
4DE6DF36555F0157F604B08665C1224879E56E5AF69E44D9A37BA15CB22079F7
4115DCF9A3E5A40C3C77B67F4B3BC4EE8A4A64ABBF54E0F9FD68524AF41BABED
2442611288BEC2E5D17A58CD0F8F1E26D7C5A7F40DF2970D5DDDB12002AE556F
04E17206F5CF8F397A445A24062470A46836F9F8D4A3F8DE47803DA97CBC25A2
E5DAA62F9B2E544AA3784EBD44E19FA09EF4342E18CFB42905E35035DEFE96E9
596DF4D75045155319E82101B36DE0C8CBC865AF30DE9D7DC6535CE30B4B1103
06E3F303A2872C876BDDFF8988AE6F861B301E148D9D00E342E30C6E764ED929
F56EEE480AA06CC7AC7674DC9D1528958B42A50378ABE0D73F6A1E7F3A77F27E
341C963951D57894F85B3186FAD8B6B19790B1FF67815C4EA0068F94C1F6E598
569DEA09896BAEB24487C620271709FFD661E8FE6D2E2E6864DD55836E1CB52B
85051185B9AA1AE9DA6077EA5F9366BC8340709A66050FE86A43F5C943FC8AE9
CAF45E720BB9C56EE5BC15E4BF67BD3BC98E62CBCFF8A9EA795246B99BF78383
ABB2387074E61E8C929D2463A6B8CF79C56EA7B8CC7AE98D47D454328D713A99
84EF5FA7A98404D85489CFA47CBD362181C6BDDC19762E3E6719D0FE1D2BBD2D
571FA7935BC64EE559CCB6B6101849766807CAA70E4F4C09C41DFD2ADECEA9C8
FED83FD7717621FD5E49D8A95CDECF255FC6B026F0342C75AE8986E54FB51FAF
D236A0F8C4E54B089C3787C4765AE7F0030169138C263A440C7B2FEC93467818
B464887840183A2B200214A015E1472F13E17224C40233F5FD0DF2C49E7A513E
BF101B620A4CB542AFCE3DA74EC7BD2F8D0F0996156A70D8352058DFD4BCE8B2
54141B83AD31CAE468F529235DFC8D6B20F8AE7D6C3BD3D26CC94DFB42ABFD28
4ABC8332B064729DB459D0D9C57F43AF480D2D654CDB4FFE47C357C2690BAF3F
64EA09FD5FF5F11C01079F0811D7CDD10A87DB03C7FCE51FCEDF045E150FBD21
BA384FFA89EB2F4C13A82BBB4EE4148825C2CE02C876E6B1964C312C91D156EF
216CE6C66213BA5324E380825F67F4B1E730C89DBDE948DACFCB79986029A784
2C37BC7AA88BCE617A7D026EADA81503B6FC9837D062A361DDB241AB67AD8AFB
7A5F91AED32FBE5CFCDD62E1D1CBC92FD09AB4BBA337CEFB0ED3E6CA4DD1F756
9709706F16226F53BEF44E0A48CC9C723E164EC085268F4D66E3C06B9967B0BD
BFF72A5312E645EA3E5A7B51DAD80F90D7A1465D6A79E608F7608818653EA9B9
8287D4704667C6A4E452DA3AEFEB1A8478E6DA4DDC4BFC94B8AD898BC4F6F523
CC36CAF7BF15B98645AC725117B5C289032B15121531D52029C81038BE00E5D5
D6D45DA10929F31D1AFB73618A0ED8D0298F05F5D83D0D1A22E99D324BE77B2F
4D2B19D628FF4BED90F33825CF9A9F5EEC3B37A934B420BE890259FF68097F9C
05B9AF056139C7EC073C583580B8AFFF4FC861E5B764C2A78F886AD154FD0C29
CF582D5199154BD72C23EC9A096993EEBDD283849AEAB27C055AB3974462E418
808C864862A624ECE95AD870CF5FCB85D1A151CB13FD629F33524CB5058150B1
AD4818AD8602D76B868A12515B569651E2C12174AB72A9C7C4F3CE69E1511773
7E41DB086DDC543FCE71F3F90B14AAEF31F07D5EB0E6DD035B6ED42D3A9EF98C
9904183C7D8CC332E1BDD5E65B09C80A1B974A57B6D6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.1: CMSY8 1.0
%%CreationDate: 1991 Aug 15 07:22:10
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 3 /asteriskmath put
dup 14 /openbullet put
dup 24 /similar put
dup 48 /prime put
dup 50 /element put
dup 91 /union put
dup 94 /logicaland put
dup 95 /logicalor put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 113 /coproduct put
dup 114 /nabla put
readonly def
/FontBBox{-30 -955 1185 779}readonly def
/UniqueID 5000818 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D5FC1B2109839E5B52DFBB2A7C1B5D8E7E8AA0
5B10EA43D6A8ED61AF5B23D49920D8F79DAB6A59062134D84AC0100187A6CD1F
80F5DDD9D222ACB1C23326A7656A635C4A241CCD32CBFDF8363206B8AA36E107
1477F5496111E055C7491002AFF272E46ECC46422F0380D093284870022523FB
DA1716CC4F2E2CCAD5F173FCBE6EDDB874AD255CD5E5C0F86214393FCB5F5C20
9C3C2BB5886E36FC3CCC21483C3AC193485A46E9D22BD7201894E4D45ADD9BF1
CC5CF6A5010B5654AC0BE0DA903DB563B13840BA3015F72E51E3BC80156388BA
F83C7D393392BCBC227771CDCB976E9330253243205FFB3CA5D356218DA3226D
F1A87B8617BE385EEAA2D478CD2AEFD997EF6A65BD61F1FE8A3B540866474819
A36E7BCA910A2D81D2697A7DBF5F46EB6E4730EA7A449B0A958741A1ACF81C26
8382D241EC0279F8AFF11622C7BC887559077A80C9FD2858FBECBF32FDFC583F
CEC2ADDE732296FC1492C85352628EFC230B6D5F8D9C500BC81EF4C3003A8D87
017AEF740F778B9F6403E19297CBDEB11822DD76E771E9B5A33F7AF0C9CE5D68
9F503979BEECD0203BA6CCA8ABFF01E0EECC4EC1F07AFC586C8BF4762B3B5B9F
BCC3D93ED664A7B95CFBA21EC802CE802295CA04C50BA6F19B80F62E0259796B
A91023910BA5A08BAE432812FD770E58AF9FFBE29AF7398AB3D48B4FACBDFBB3
F25FE39EEA978E3210DED603FF5BF479BD0DE38808302826E48226C6D8D520A5
BBFD8728CF33F7C167316D4E6E93F990414A3D69BC56206F75F7319AF90B17EA
DDF1003CE09666A81DDC251667FF2B7EC875CAF72E90F765A01D3D2552E7DFE5
1909E611145EBD1306E695DDB58EB16CE89E49AF41CBC743E98DD9B6D2B70DC0
A9C66DF0A9E7797EB9C1A92B2B7B3D47542F8B47CAEA411778FCC4942819E2C8
3C53CE905C1DD1222C0127506AA05D730C633E923997775EC5B058429C9E120A
74227272576AF88167DA79B00D8317937468D856C0F1320BE45AC9FB6644F9F5
7554AC788AB346D46FBD253A1EB88E7AF3C63A7A2D0C2C67B5A76D4A355DA726
8DE311841B3A271235D4F4AD53F9CF445D739BE4B5409D8016BFF411C302D44A
7BEC40111A42E01C475AEEC11437B289FDBB9B145DE25824F54F725A65907577
498B2BA8260B87B32BCA87CF57887F128F03D78AB415C7386278568E1EFFE06F
974F30771A2DE59F198E6A4C36CFC5DC8804548948F902B6D98DED9AC9855D28
8997EFBF0C91E6598FF4E423C4C8451E78CBDDE915A3545166E2BE8BE34EA49B
5592081BE0E0D9299E13012AC2974ED40472C2EB9F52D84F51833F787E59BD71
94DCE11D11E9704DD9B56C78151CBF6C87BDBDDB6E3289D321EA62428F2CF17E
1000278F30571AB3DD864CF6D07FD4E7EA961E7E40F41794A19FCDE1F3EF2CFE
F9E80B76BA24BBAEE1032C34ED86D1A1DBAA45A4F23C492818BB28B7E38B690A
0477CB73388B6B0CB5AB11E7D34E5E042E8060F45BC80B4DAB7021E3FDD2D956
E8A33AD1DC965840E8D9F23C6F084874754D913B713985481F48B9A996ECED29
7E6B489C8726A401479863F022AEC94B048263BF212062598CA8335095E59093
048F0147C8EBA98F57B5FF92B4FD65FA151FC97D886EFEC523399F1BD8E80D4A
290AC178BF3F6B16F57580C3C1ECC7D85D30E040CAEEACA6D32941789E3AB2E8
48913D30C268F28865D88590654434D23EBDEDEF16091E575F71FCCC1AC27810
42F56F8B706DCF8241271B0C2E613E963435D6DA3AC26D81F36CB5D30B3CA070
DBA96537664861C51104EA32259BEC6E887C4CD967BF2AB97E925E2A4A6A2CDE
82725B818A53884676805C1F12851557154ABBABFB67DB9A50C56D64AFB531A3
1118F1512793F045B1068E2790EF791790961938641D7935ECD7B85BFFC0B63F
32F6F25950B1E120E7829E237B909C33CE2C3AC6BD11B8FCD9D0CE838A51B5B4
024F71A05ED46225EAA6A1445BC775FD0F63A7C7258F0B067A1DD170238403FF
F5EFD389E35EC7B285FD92F0540893FD0A5D2C0372AA233502BEED754BF06B12
7DCF95FDC745AD9C535A7BC4F399E0CCF0E45B3A2F5696A48E98D9324F924C60
63AFD2542B80500A554C46A793460FF438718AF040BAF02602C22A35DE4F774E
92818F3CC4C1C1CCC9A42E52B8AA7D70303887E79057A7B815A5EEB8F2FB133E
5BD721C97D77EBCC6CA317E9DD857F3D5D0F9F7BBC513BB5C6E0F41F9125056D
3F13D9EA02F18D5290B473E6D9A79705FB2CC66C4223B40E4469A94A1C53AF18
66A30934EF3BE3E60EFE15ECB8DEB04D14799BE1AA5FF01D3FE711DC15F0562F
3752E5EC3E55E1B7286F2E8759AECB162179BA5DCAB123FB676B96AF063BE9B4
91491D1C404583F767884E68AFA25EB3683D9B649D3B1998C05B2C588607571B
C4DA85880FCFA9C6455EC2E832FBF6F4F5A42562B8CD677875AC1EBBE366F1DC
36A35F7FC9ED766F04AC5626A6785DCDA65E9BCFC456FF49D091A3267CA035F6
B9156D35557C80AFFCE230C9C2252593C5065973658E8BC59113418FC0033C8B
65B638F5D95AB85D981C4560376B785C578F1C720C44095C1DD9B51AEC369ECE
92A6D625183C05BEB8212B28B0F7FC594E9F33B60BF74136AAA179A87CDC6F20
2749F6AC2CF800FC791F3755E7E1F7DD57D5BB875B99AAB520B2A391D517D070
3D6541F7572857D30D144B79E94687729854910F1F86139BC19F90ACDC4B4205
A22427CFEF24DD174394B4A507E8DBE09DCC65EA2F405A14B25A59939477E6F4
25D8AEAE2F83234AFD52934C05EB5CA74BC5BDA8CE6DEF64BBE2EB851E1B00CE
E512D0C21220BA7B1DE0D9D0F50EFEB549B0C698CA65FA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.1: CMCSC10 1.0
%%CreationDate: 1991 Aug 18 17:46:49
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMCSC10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{14 -250 1077 750}readonly def
/UniqueID 5000772 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A30EB76029337
900ECFB1390CA5C0C3A04528044F266BA17BE487C79B94FAC6D6484684C5BFEA
87BCCC77D40AD11552035E95E3007126418ED49B68468B38A14E88E68A267B98
076F1C9769A5AFBC285E5B158EAC9F926F1D6C0B8F1D57D9C31D25AE27123518
9D2CD92E5689E0213089BD268DA5E47525CB8EABAA4B78A15AEA34705889AB3A
FFB8953B5B3482E52BFA0940630ADF8C0AC2177D907324299EE980E850F203CD
B627962F43D5A678C44243CDE97853BDC6AB45FD5C09AD274DAF89929F583CC9
CCC24BDFC68B92111055ABA5F26D2DC67C70906F71C2957701D65AE746A60C30
40E6CB24B97FCDAD0487AE38A201FBF0E41BABD2181981A71940F1E707F91E5D
C8CA50CB16D8702D188E56D014D92F76CE0B52ABDB9110E32438D2BBF3E6A40B
7B005F10BB437812CAC6ED2996F7606DC962C4FDE207FF322782C343DF44CEC5
FF06A55C630C20E9AE1B0D1C5673753C43BA0767D65D1B451CC6380D8BB3C4DC
81E8FD8AA79BE993218686F29D3CD925566DD587F541A0DA1B1CC3BCEA2E6C7D
5E1016F6917A871F1BBAD96AF9E867735017119A381FCF33EB2D3E1E7093FD90
CDB0CED4818CFD9E201A03430CEC713620BE0D3254158931FB657C6AD4B2482A
0E7D070D7497892E9E942DF58E88CAF0C8221BF36BF7C435BF2C683A4A2EF4CB
E85820A8AD3486155A40143011BA9D76297F46DEF69ECA4596D6E4CAABF84091
22A96A4BC78A8DD072FEB759A68A44BE1164638B6D952147EE3C628F9A022060
1D1941E73310943FA782532ABCCC88593FD63E7E2CECF6665C04DB48D641ABD3
AE1BB468638681E96394B9E7BED1D13E534B897DB90EA6EC706BAAE06BE2FEFF
1DFA5258113E9B4CD2D36655973864574E0E8D6291E48A8C62203F679B7ED838
6F7CBD523C2943ECA994CACE672DFF5EA91282864CFA726ABF7D71E5BF40C162
F22591886E6D4C692FEA31E964E4869D190363BA14FB220E437BE73C21AFC531
1D782A356D043822F47DD9EB980115B07CA4C444CCDDC94217F21711BFAFC235
01A33F059068EF26566BB86F4E7F05577720D8AC02188AF40654B415A0BD5DC7
202279FA8F2424968A980061D6F12669E94B6C49D93AFD14001FEFEAC01E83B1
E65F30CAF1007F9119D5377B39D90A7B2DCB6C23A358EEA0770BC4A50DC816B3
439962BA7AC3F4259BE9B892BB58D3CFFC3046AD76828F64348D901ECFD2EFB8
1D4F7F0887081298B213A2FE2F0F8111BD8D93FED0E954ADF9F4A8450B850A03
C8ED3496975B72428EE6EA756B429FDC6C40A2FAE918D0D97F86900F1B9829FD
8D5B9700ED95C2A046EF11B775008FA79F2C91E292EA1BEAC0980CF897930928
F3A64E35D0A1254B3275051D58EEA437EA77AF35926080D0432F036DA3493EF3
EAE19D32D6A2252B9214EC20509A7961708608AD7EBFA337642DD4044AC68A14
6027058B7A83938DDFDAD4E88565ECBF7BC932DF24BEA26B5DE7ECF7830135EA
738DC5124E42A8F0029C052A3E1713AD26B99C0DB288BA4FD6D1BE516B2E9200
DB3322DFCBA047DE702B8A154A97B44E2AF65DAFA1A5052A95C7E8079DDA7FBF
625A54E628D31226BE6660F4BE97C1B678DD6290CF4E24C901F4D6C9AC2F2095
54EE26863A9F92ABFC79BD0B5ECDAE2A61B6B7345482C20DBFA5258270211437
007CCE2228A84419C0C869E31BD687BF02139302A8AE6AD2E61DED96FAFE4606
D9A4A5D3A2E0208BA395ACB289C730197BF512893797945EB21F03066CD422F1
389A50223B69EF57976A6019EDA174E34FB152D8A2E904DFD655F5D0C658F33A
2C5E413DB38382B8ADFA713FCC4E2F4B39E293C6CFF145FB0F4C3E8454127998
A9874BE20E9DEA7B351E8A8FC00E652417560BB70572746EA2F794953116B73A
B145D30FAE419DA676FC4C8E0C6C9171E28F73C5625F782F9B781C5FC3C4C120
AEBF15D549A656784820E2DA83CF323D9EFCC3125A4ADADC2E22438D57B4EC5C
95356D36C4EB823276851FE4CB4B3F53B88AF813FACE30D59AB7D11CBCE36F74
807B1B017DF7EF42AC5C7F4C33ADD425A73CFA4CC50DB5F68D121C700962955C
279CF6CEC8DA9E011982881F48F998FB9332AF3790857E1EBFEE570790B67DD7
A28DD77C0473319365A42D51BF21B28C7556FBB8ACE26FB240A3344BD8ED30C0
58E80C3041ECF3A744DE1F66F1E71F02613943CF0A947CED2A2073EA4C510E15
488862C47FEEABC42F4DC6FD2F872AE9F4C30E74F2211200344E4EFA258C2C40
33DA726C90F8EBB08FEF41A7000A0F71B3F0026E40DDBBF771CB4873EEF05411
53E822D5FEC540A682ABC1DAA82EB4FF054860FF5E4700E435AEE3B35A9A6F0C
B6AE47B4215A01355226FAE17E998CCBE2B9C914507C4A6B4E2A5B4091CEDE41
3CF996735950ADA65423E6AD12F8B08D0CF8DDDA0D6808BD72F2943638D565FD
84646D9C2DA1AE8F840460528C167B966E7985E227C362DA96ABE6485F4EA418
05AD015336B76950BF3273E9E4E13DCD5235E144EC49A995070CF0D4C0ACF43F
1AA06BB5A66CD8A912B20162662F0849088AD902AE281A01871FC89B5D885DFE
69D2E01B1B72C71AAA22F8720455918703E7B2E4D5A90D7EE8E30C26DF7AA05F
90B3F6215AF5017B852066103065FFAA7B488D89B68D4EC709ABCA889C66FEC8
5C969E7394EAE538E980AD91AB4201BCAED9C335E335B2B2ED54F67F502D5A45
E75DBA13B1CD5DE14289258FA8D5FE8B1CA83C292B55A1E5A8C9588FF5E109DE
BD918C17570973FCB8F1847743CA7C8EBF226ABFAE8378272CC4DB36DD52004A
3B4BC679F9CE63583984753EADA474E904C028AE06F63FEE37985D0CFA2C5F3A
EA91C70488D609BF5E46B8038DFC64AE59A10C356E7DF5D84CD7AFD949EE0F29
D22FB5B8F5592A03AE32FF2CA2250535FA44F4EED2DA247776BE463F7C9790D4
936DD57BB3E2866993E40E10AF21EF244048034B58DB587F26989B99BF352AB4
2B50F812A203842C93EDF87D4D51CC1D37AD7856B6AC80DF161807F3A67E1C27
2F53742118D8F7A25F7C57A76DAFAF97B483E3ADEC1D33F05D00831D47F1D2C5
4165C72791D011EE13414EAF9E843952011C02E7CCDCD3A2DBAB23CE9B578950
E723E1548C3C0762434AECE004BCD9BC12A55AE73DCD92CF00A9171AD425F2AF
528762B9F3F115A81338D47B02B727B434217621850BC6E287FA287F894EDC5B
6AA24D7C6B41BF0A31EDDBDD69E01C15B3E99E3B99691D5F4E052D66AFB39B87
F382FF319DBAFE51EBADACEDE2A73031D613FA5BF0851E890A22E77D3D7037A0
D76D56C4031E41E8D15ED77F9DF9451A0A38CD97EFF88A81E82608FA6E6D0128
48F392BA301692ADEA5630268579A2A74FF3C0C91B2C11CBD6E7BA8065640951
DBF87425ACF2D57A86B46816C179EE4D9F072BA8D55436A7C057D2289508283E
B87CD032CD3A3A900ADE91A614502BFF59057501EEA9267BFBC00A42688A9860
2FEB99AC25FFE6C8031B29C63C6A0664244D9697051094DF02C2342D5CDF0C46
F09699BD917027423F06F26F227F010A0220E7A96E42989C6423B16CED0D47F7
4F4EDE3C8A2137FB621A37B6F6D1AC45FEA81A94F286229E8EB03EE5FF2F4FC3
2C99652CA580ADDFC09F4161D11964B70CFFA377A0678E2207606CC2C963D9E5
4409D830CECEFAEA4A63FA9734267376EB3940D6084C1575E4F5106E02C1705F
5DAEAF05AFE51FCA21DB4C7B94303255C3AFA0D37685075C3BEC103E7737AA3A
F69818C747C589EC347260DD224A2C837C3D95EE435EFE4C1837BD81470DC5AF
671E5ACDCFBC2A2CBE74B68A6B73C4D95A6B7904DBCA29EB7D26F8D504233B38
E7C206D0B4663853AC2C091D1B1B396C295A6E310538C9B5FCBFFC99684C8F5F
0A7ACE87894D82461C6267879785D5C92AB69C092CF9C289AFBD0A737D483F25
82E602683B2F7C9F24548F5262055BE7E9A2910449B8914BFD8B2C39C470C69C
C59EAD7E1E2AB12083EA0BB16D871484C1B92045AF7E431F3408A37A759B2D7D
3721C610332BC84BDD4A15B6A92836246D91634E2E2691F0027F035053F0EB5B
CBF42F1EBBA830D46152EAC163F6B488E1C7D8814FC5F978DE4A252B4718B136
3E06C3DC7C2FE27A7782CCEC36CC4FB27F9536A38574A494F370ADE877CF4675
9954159E7748641E506E77CB17D7978FF8557BC3D04432CD73F7E555503556F7
010CE17B190D1F696FF0E870E7FC37028A7D0E38545946F723C73D0EAE7063EB
66BFF47B72DFC50B91AE8C0F97EE02C7DDEC06943644071B120D931FA200B8A1
B5D7499DA13117A2CFEC02796E4C809E66BC7D4271C755D97037F5C8B1DD73B4
472E92818441D1406457CAD229749F056365AB55DC53AAE730CB66B25B4306DB
6C3EAB0CCC525E0DB0F96CD546E0F5A283BD8DC8FFCC52E36935F9D7BDF8B7CC
1A5B8CF517FB351274BFB5CEF7C989644A2FA43A31221D71BCED8A277D8F2B53
8F19AA282729FF21CFFA109C2F9E8D6A7B785BE2746579AC730EEC4F2A7F17A5
69FC73A300DA3C0AEB1E080E023135F6AC4F45363B0F992E9137916FD796AD65
CE7574BEE6D17656B07AD5E843B98E81354295DBB39C199A5E6B017431415B2C
3DB4E25FE0EE056AB44D463FA8C549A2935AE34CF709E4221C0D690982BEB2A5
3CF913B0D36D73AEFB86E81643295CD9A1AB5E79744676FAEE4EA07A36934F61
37C955AD517922CEB2FDC6A3912DC4ED6626773A6166E1DDAF5D84393DD87C89
37BAE911939FD0B4B41209496A0EC92AD20F505567679C583E84C3964920895C
89570A04E5751FF78168C39787AFC84DDD761C602D4741E072EDCEF0D4D0A499
DBB135C62CA3F7FA374D3F9FEDBDAAAB6F823AD211D1165F7E2BD9E3251B9A4B
4915E3CD93490EE5D306D16C254F254243E57AE3F7727883A3127519AFBB487D
E64784AB80628B13924FD12FE7E52B8F7AE3AC480CAB8DF081D6C0E7F8EE19DA
FE183F0D132833BEF80DCAB94CA83FC401896FFBE3ED044E1E6375525CB56BAE
D7DBFC3078D28648AC2F11D3A5DA2BEBDFE7AA3040A8B83923E2AA27169DDA7A
CC4D5C0033EB891414D89A7296DFB937D5B58BC81C6339BF7422F46B819CF4C8
F862CD72CDF64880DF6DE0FE39229FEA494C68C13ECB2ED3598502E0E6AB3BA7
0551FFF37A0AD9F89F2A239D3E0EE3754D213BAEBB4F136273120B6B978CA3DD
89C0CDF6E77E26CA1D5341B09486694E24D924EF4CDFAD88851DFC9BFAA851BA
A32D13889F186BEEAD05410CC2439BE5719F966D9C8C4E659C0A8349EABAE1D7
E93D1E72499B8D95CBBB773AF3229C9DF5FF97A83BCA294029B943F177203970
BBF881977E007B0490D5C42F126DA7BE24B71B79564DB1795330647EE4BAF627
6209C82D067E49D0059A9E3CEA51A1F756AFB4EC1FFF0B0D352E7DFE8B586211
56245D2C3EEE925CAF2593A40213F75540D995308FB663B5D58E9C1DD73857AE
A3E7C5A8A4AE47546B90BE1F70BE8682CF00539F95E16F721D12E83A04FBC4B5
1A3DE5268A3E86628563FEC505F10425956CD3487BF9026E511185C7FCA126CA
765C8ED27386950A0A37B5215CB5C2262404A1BC84C0A81EA385CAD6C504D9E9
EC570895AD9EEC1B9B3935F39D8F9465B9E7DC6DD8409079D1A24677C24DEC82
EB1E289AF3783FA3B9B6A7B70B99E3A669D6F16C4910E6016D369C9DAA99AA13
6F9BCE2C1DC282508F47F7A774127AE926898DDE2DC6A8025903E82A8A5C0EE0
84123D829B696135F84977F4C5FC522B8353E53FC64608ED15C9D1EE1A29C4EA
CD42667A0D6AE49B4578F31E8BEE8E1159024D988560A755B7BDF1E8B4E61F0D
E6B2FC4166905402E27EAE240D7F87626FE000F1D9DD7E201E5C907303221674
824CEC011B73435DF71EE492BDBDAE4770CD50A40972B7EDCDE2A81353DD3A04
E29886AD5F4658D4C8FC75C2E97B1E1C14C72428E3EB5587BF2B67E933CE50EA
E036716876BBA54167A80831E1CCE6C636136746F1931720FDD2334EB0866BCA
06C62110C673862A9229408E41F20527632DB3A684AD3F56FFDEEAA090B1DD7E
0D614B553E41BB1FB9BD92C49CA6B6AA1CD78E4A5AAD429603E83D6F0AE5438D
53947C905BB47A8A7135770F76DB60D206429F30E8EDAB65CA07745C961D8E40
6CE5A0DC6F25DC43A8BE015BBE51308B2B799FADFEF32AFEDD1399E87B8D796A
60A07B99DC8F45611DD03E05DB430E86C49D6EF5ABC09E5D4B9F8DE95B9CE90C
B1353B4A780846EBDE7C65646D7DD3770BBE7FF4666B4B3123A8F0D46F9283FF
2C17E2EF83C1D50685A70A1231DC4EE27A09B811F7BF05DE4C6FEF9B47757257
66FFD15F7893639768EA6EE11652BA1FB8EF957AC33830DE806B70BCF76B6CF0
7B7FE2F6A7380BD1C1E1FB68055A17A72555F245D2EC02A36DEBD6D0D1B25830
91D2DD37B8544B1092DB555E9E51AFB7D59AEA6F565990C86C74EE49517CC33E
7ECF20CDAA18196E3D8AF5DB8FD0AD60BC42F674A7EB33E8F21D0E22FB1DEDFE
FBB3902A0DA1EB69274EE2A2EB4F1B41991AE4CD812A9D2B605D53FCA0194ED3
50FD594041104C05A9E13EE7B93F6F015E85FBF48A5958F1324CED7B5B76703C
BE3E26C79D1F0AE886BBD44CC60D33E29169AAF8666306C9450156A55180D647
448A349A53B6FC9FCEE0EDE2D6D2B9F0AFEAD4C41D428B8A90031CF6291D1178
247CE53F70B66904E08243EB3287C633D0FA669E0D49E3A2F857727AB59A9E5F
EEFF742A665B1ACFE2A772A820B38741CF99BA616A392681F178F398B308A7C8
06F9B0C064259B989D6DB2945235299642CA09160ED7669C611237BB4A86F81D
53F4D8994129A1ECFD562A2887C7EE29C0C009ED359DC923F023F720644ECE67
F0470A42A728CA3D3EBF2AF8E43485A79C29F6FF581CFE63B9A65CDE97375A7E
79FCE37BD1383748399ECA7B31B8A91D05F65305EBAE5A58AD81A241417040A6
73AA638D519FE8AB734F49EB87C536F2262DDEC823176508F671795E5405F443
C07C084BC2269A5080D327B8DA45F776F37136C4B05487784F8A01CB9753AE84
B5DCD7B4E10C3D5F8A01CAE7C52CA2707863344EB5F954F4686DE4B8769D421A
8F9EA0FE6F5F8DA012F6C5C3F656094C618F7E4B1D6017EE5AC07441356520B4
687127E783DAF9466E9BFC66FE089FC69FF318FE7AC9BD74CB5DDE985E9246B0
08169C19FD858B364357607D0F771269AB97CEA183F7BACAD23034722A6C83BF
113D80A360B72F2AAF7646B4B332EF1A12CD268D7C91BB2C6EB4C9C6ED434636
C24C046F57597470A3F4CC345B57BC72C79B300C6F9EE821A9FF4984D59815DD
DAD28C4320438259A1ED88E29B07CAA185EDDA3B7D785A89DFBCAD35533535AA
6CE7661E7B5313A3F0B5ADEEB46B849E6E683F7C7FE32AB35A7E240ADF82E988
E8FC911070E4E92CECBFBF5332D1D30A3CD64813CE8672C865701368DF260C60
A7C3B1EF346984371535D27B058E41613AD161C37840C9A914CB536CB95DECFE
68CA6186B5A8ECFB408F2207C6258255D2A7ED649A816151C0E1F243996C471A
2897A41ADD6E3FE181F37B18A0E5764D89C04C31946247E27E55181FCB1B1C0F
1881D4FD1C44A24669582E6B7C3FEB85DBDD37DEFA7A11EBE7648CD3C3B40AAD
5B7BD89C8FDABA8FDDDA6B5261AA59F542114CE7B50523E3D201C5DB953C9C6F
5A3AE14527E5BFB19A00002A798DFC29A98A2894641BA769118ED70F3B1B8F1D
F1094B4A1028E4E0E7DECFA69127DCE41E2B7CF3DB427D5D70752B1125C87C23
84BF66CB6C8C896AEB1D536B0B1BA8562C571B18A8734FF59AF9A021BF5970C7
D030E960508B7D1C578D512472B0332233C384B749BA2BEE6AA38989BAB872ED
914949F8D21646FC18F164B8158CF6CDD4595F73FD05252D89F409CA360C586B
16672CEBD691A4BA1D9BB213792697720BAD61585C2878FF4A9BED51DD50FF94
B7B14E3E352559CB3A15303A68A1862F94B26B129787BB18763BB983AD60BAEC
1D0C80226F92342948364CA04ECC006DBFAF253827BDA3C8D18C6DCFFAF04833
AD0659CB8C60E8C1B9D076114E051AAB4D76D8B283B393F60E04604720B3C45C
7221BA71D4CD5E0563E46C7835BD6FA5BE5D7972174E2051A95C36D29A48078C
D8F5B98F83BE1AC37FEBC7A5E84B5315DD6EB7F10AE1854218EC6148CFE699EB
C8C58794E2D245E82084590EF39A5CA17161B7478BF4F79C4E19BE3FE2E8FEFD
69074A4A5003F4C874731DFDA7D77A52DE391E0C6A0BC5173CBCD664624CB4D1
A0D70E53C87B4F81DC4904C10C9057FC35FD072E7BC16B35DAF034013BB66294
6F127A340B6AB6AC2A0DED50BB2264DAB3FEDCCE392D216E5AE8CFCBBF5943E0
AFF3D29A0091FB0DCC1C7261A5ABDB5DDF03CEC2A88299CA1082E82D1E58E3D3
1702498D5BD1AB5B77160C98AE53CC38CF2EACA2ED1FAA70DD0DDF282639D284
1C243F76CB1F94E173B7092DC985AF7E72019CB2C9A2C3955F948F320FA24B8F
2C67BEADEE45164AED7E36307F6DF3A61836A5D414FF73D70D90A10E0BA1D27B
0F2A38488811DF06F167E92E350294A3D604CEC40D3699B68A765AF9602D310C
1720ACDBD22DF91B3D0D0A654F7F5D1B3138BDFB720B115107523C8A24340A8F
14B759CADF5D0F49DCDEE3A785E81FC3718773AF5761812762466421E9E2E89A
C0F57E59C2BEAA4EA4D78F7297980E801C1DDB9375668D4D1750BBB02C060E49
F76A69D6AF476268268FFF3498229C9EF7474ADBFCCD2443459CFA26E8894503
333671388076D9A8E17E41216BAFD24B2D8A8AD00BBBEE1099E289B08FBDBC6C
384E28EADABEF303E2FF9D904B791AE63D3F18169C50BB77B7E07AA39E6370AE
F830E76DFD9E8EC67AE55E4534E7C6B2F44F96C8DC1A0D60F67CB8FD8C800728
D41333CA38DE2F9E356E2A33722F1AC0C0655597C65F169D1208D6014D609155
5570C3D2F4991CA91FB8AC1245BC28D1D6888E56EA37AEC4D641C5FA67032C0B
581F6673FA270814D233F607DCE687D9D6A413BD6C357D1CF178178547B713B2
B4123D8BF086AA189C698EA6EB8894B312BCB199056A68112B3B070CB1425CDD
A8495127A176FF1A4A958479FB402FD1517298A917B18F8D59EDA5A6648CD591
0BCA4DA3556A132E3B8C48C52D11C9D716145DFA94AE97584F58CE55B442E5AD
F916EC5E2DED04397807C07A60DFB46F56CE8753D3E1D492E748DB4CB2CAEB6C
DDD8F90722476486132DEB9203E96E7D796789B66C545DE6C2BE51EF26DABCB3
DAA68D19C22C2A160EB56EACA2F4A40B54313CC6C2773D120F3891E0122D23C2
0A0BF8A6313DA7FBC8BD8D6F0A3A065A9AD05ACA5B3984017BAA93CAB1C993EA
EC3D3558FA2E6ABDB38E457DF15259EAD605E5D6658547837D317AB3F9280E6D
BB0C166EDF7EA57F0254D33C4AE6171E1460A9B875B40A22E71228414F5C2676
31A079E7B93AE613FA6017216E3EF0FDFEBDE09B50DEE85A23180C3499F7423C
10ED9BE9E97AA4778CF1857858A89E9EE68C2B901D86249CD74575416CDC0419
9219C67FA2DC4406079DC8E79A9BC4679CDFD779D64767CD26087E6E8B9E7F33
C44F0B99396D40348DAD2E72EF85256CAAD519627AC7CEFA68916943DBBEB4DF
A85522DDE433F1A4ED6F2F9322108203BD13ABDE7ABBFC8DD0B320D6A3832AF9
613D6B5F880E54683590B50290D7911CC50F418441F98A5C28A9CCB57BC449E4
49B7B4DBF5B3C826D7F5565325E027A40F1FFB4E60E1030B152305CF7447C264
EF2F5E9460E62425C83A8DD51B4F42EFA7A23DF3EDE8458857FCEE578839A638
AB323F0BBFBD3B6A75DBD481A75A69CF45BD0740D897971965116EFF7E281F59
EA0CE7137230305B4DE5656F1658D18586B07E134DE0C304A715C6D067CEA5CC
D8B50B8A13E282325C7B8AD10E9A20521784B5289D7BC2966C263F1DF894A685
0B468EDDD77CF9C1D400901D0E1BE3B1EB1772136AAD820B633916E0A34D2744
A77310BA85E6DAF0F56E98E43407B0B117F681505FFFB495484BE834C4485303
761A268E227E3034C483B1352A8C75DE09453183ED0E130847556D0514A615C8
81A2468230F14A1396CE86E010986838B2C522EFCFEE50B5AD152D67D10DB596
3AEA35E89A5EA258A66BF8B8E4370D9666DC32027E31C9F45449CDE4CE111B22
7E5CAF791641E56D4B88F8A15411B28D9A317DEC1A3B31F04123DCAD9428410B
78F5EFD2DBE32478D6BFCB6C2905E74FCCF43EEE2069A15752A4F2775249E2D3
FAAA496FA5496CDA8DA14A3CA16508A43A44A884F120B504AAC5C40C68C97729
F0C70B99F78BE2023792C6A84A71E466069E83B87936E51105BE252F0E057B8E
540866C61FA260F9BEECD96E1F3B63ACAD79C9C86CDB43750BDF61F86CF4F1A8
339FFAF11A5211641B1A8389C6C1D10FA8F59133E4F86D71890B95E8BDD17721
03B7BE5AE0DFDF725A06D2ACCE95EC1C3BF17A60979C23B8CCF425CE824E84E5
EFACDE0DD147691B392A251F4E9DCC12E3902D96E68E9B3B5684D091C606A7FE
4BD7877A09BD2A5203367C977974B1370CA323FE532AE52E79DFA5282AF267E9
AB35EBB0A47932B2402000FEFF358BF97C51A19EB0226598A7CAA7FEA0F87B04
DD278FCDFB7BD19DAF9BF6F94CDE0E950968B395D20D4DE16589BBDEF69C1CEF
1760761224DF69F1E1B77AF1B38562A4ECD1A73F87A37A229B59C0E75FAFC11E
FBB7BD98184BED79DC981796B956FB11D8EEA861107004FCB2E56A1CE81C72D9
C15C34697716F50380F9B14B7F4C4F08B05D17A9C1316EA51E367D30BB6DFEDF
B75F772FA6ECECEDE701D8CD208393449AED2127C606D0822D0F13B60D36BD46
F2AA8C5208704C4F074CDA32E402A65A7128087749267A55ED73CE1A576FDA99
220D9544903F0BE2C3BCECCD714951AC8CC7AEC98DC605DC8EB9CEFA12C2D8A0
B4E7B3D1662023FA5CE49545AC36643BB9FBD651809D4CB7047FE091FE26D384
DE9387457FABCA26412A7436E5BEB98A0C7025DFFA2CCB844BCA45191280F793
D5CAC2E9B4DFEB5B4FC790E796B88D24102D3829849F06F675C84D0F6827D2B0
CB908909A113EE67C3FBB15672EF00357499268881802A1517AC1E9B7F92B245
C3CF9B36C2935EFD1CEC1D8F7E1FD0AD3126F5C7B32BC06428F225FF5CA6AC10
704B830970A782D3F36E12A3FABC1222DC169F940415160C00A6FFC130DF4136
5D1224912D826BA0D92386BD2F4EC0DEB27B43FB7C455EE77B9A54301885CC4E
61AA1299196EE4C113F0349F75885612EE0B92CA5C1C12B7FAC1988CCE81B732
16E420E3BD1388135765F5CFFC069B5C8815D20217867BAA29E5677A869257AC
A066D04901DE392F46CF72C1FC667FE9E4324B0DA64735759279751DA8AB6F0C
842F6C4A85999A86F42B6CA9B5B1554810380312CD683763A53FFDA75BF784DA
090F0E8B84E0E2A71E4C5E8F2ADCD5923C0C863D938CA26EF633A2FFD4594100
71094C68DD6686288264CF1465958CAA664B77EA134BFC00D7E9CE26C0D6780F
9EA28FDE84631F1F6684AC74C5AE60FDB6FAB0B7F1E411D2E9E329AAF62B6BBC
683D02284B38A5C30B4A6D11CA956D41C2C67270EFE0F3D47AC2BE7E338D69AC
FC143882D93F013D8157739F363332C40C1748047A501FF498120C4A910CD988
48986EA31E386D30ACB1BF51E3A01E0123CCBEB1FD5DF6B7B894EC37568C8625
887767F85A74B261FEA0F591C992FE5BF8F47E90557EA255A30AFD06E4235E67
9018CD982185B1084F655E89C48A50F0A71C15D1D965FF7D356CD32F38DFDBF5
B8D05A6CF25CEE71E5A055BABF3EA4B794240C41BE0C95074FA0626B86A39AA1
E29D65AD5C6E8680A12F9FF43C59C00B720A2E69C8521495D202887F9E76F696
6983126F94FCA35CF1941CBE93B655AE92304658A99288B332070CCA8B230048
1D2E4AA24DCD53D3EDA2C942BF012EBB0CA83977976A79AC3862BFCF0EB7CAC0
A95DA5C2F42BA74E8BC1BCA10392F1CFA6BDCF9A5D397BC9CF4FE14B616A91FF
4361670B91A9ECE26A155049E9218D7CCCB51A13D0BE96301C4DB8C4F9FD0F07
ED78CBD806B282EC8A74067FB563434F6663063D36FF5B1FB9277FB0F737A6EA
74F3DB376567D3C7A26DEBE2F27130C8A99682D6BEF958DDE49FF421D8B1AFC5
2C2E780C2F4F373D11926D3791AC2F54BF343A57F7105E72E9D5B6E140F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSS12
%!PS-AdobeFont-1.1: CMSS12 1.0
%%CreationDate: 1991 Aug 20 17:33:47
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 41 /parenright put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 66 /B put
dup 70 /F put
dup 75 /K put
dup 76 /L put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-62 -251 978 758}readonly def
/UniqueID 5000804 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B17498276F99362748F6E97327D
7CDA3F5773E01FAD12B7339D4A0993D40A82FA42AAB119589F1D7D60A8AC7A96
BF8C5A08AFE6D427A6FDDEA2FEF0B8ABC37C6DB62C8B4074CD6C385419CC66E5
A4B4C5F902900090EBBDF7AB524205CD9DD9D8B9CB522B8EA97203F0E8FAF683
09750B6C8286AB341F9C240CC02CF7F3E153C3498F16159862CD74C0B6341D3D
57184AB9036EBA94B432D0CAC32240DD569E639B4ACF0BEF07EA19DDF0606551
C8EC84A7A67F3C3F58D3335D7273B51CC2602B63B900D24A6D5A8E766D49EEB0
693796781F0781FF13C5592AA9E071E39034E0742E804ADF14422A734917F0FA
8973A1B9269EA354F8AC75B7284AF48B69529167E55922A20C3106EB6C559E97
7CC1A491C3B41AF834804590554742E742A09A5228F71DAAB9BA2BC3F00FD5C3
B4821FEEDC8B65732409A9C4663FD4C4BC7C864D71F6A6D354ADF71675042DA1
31DC2859AE00363B3EF589B4DAB98D3515FE8176041A332A5647DA8FB9718975
9D0103074531756594D5DD1AF3A9A20F1BE203E28D24DEDA7801AD1CDF96906E
E7049115872C82DD177C3BD765F72E7C15A90CAC968198A38EBA25054D99E7DC
A349E6502C98F894994EF7A0AEED79D1F12EA1B18BF8BC3B5806141C82B201EA
0275585110EA202D7A253F1D6DB449FF2B25F7B8385B1427453717DB07ACC21A
9F5D5DF4AB9D3497C382B1B9761FD0693533650CF014F5D56201767E4CD18A44
A4D912E1A90EF1BEBA702F806652672ACE37D40B4705A4725AC38A8B7D706E84
6D22D811AFF8C8F465D585778EDF77B600F65E332849ECE66FB0EE108B30103C
BDEDE7AEAD0E3A72472B218310D9228AE0BD49120DF3345B692102C2A72AF398
970A9ED49D592F9C7996F16F979A028F2DCBE9284044776924BCA2C128540A74
C5884A4F9B458B26D6DD84B445944A5360F9C5BA4C2BB51F9A1E686B09855CCD
ADCDE16967E30E5B417EFF3AAAB6A0627F97CE8EAD24B2994594385CA11D3EC4
CE97A23B36B7AD17C044469243A17409F9FCC9998516C305E438CA2D73FCE102
0A5FDFC1A3E3E1A30B0F252732A69431F90BBC11B17BCE770C8A43B1BD263661
4330496D503DEFA391E24749F2FA362D2D1093789D679553C237543DB78FFC84
5EFA5374C9631BF2BC58433602C5F2E56BF0132B5364685503CE510CA64B53CF
7C1F423F8B7C5FC282C9CA512B82F2274F93F727BDB912F42E048CFA6FEA6240
74BC00750EA934203094FC99F2C153D00AB5187629E26247F23B0D75523431EA
3A9C37A22401A08D2BE549914CA6256AA4EC377F213DCBD4D1587AE864C3E9F3
62C23F215C091162DCDCAD18952126228ED74B46643A6E1B303A7061219BBD30
F108F9FC591C269A489D95DC3C73428E06C7FDC9F48826265EFA90032BFEFE0D
01127ED815E95A5FC8E39F5371BFFE939ACC5D68D8BAED18CAE7B51FF1CC3780
298B336686F4D17EE23BFDA6510A875D4C12F59FB8316D13FF108E5108D59339
E3830CA7376FF42FD5D2DBA3E9AF2BCF91A585F74BADBFC9B1435C646C36458E
43550BA2788CF625E5FC65C497D2F7270E6341F7EE84FA2AF9B7D2E4F363C6AC
714932206261048E6D2F69DD8CDB7DD8341F12556486556CFDA5086BE21325E1
5714E268BE15347663B01B9ED794E302CCEC669881D0EE871E685C83F400C32A
0BE0791EB745447A500D10945FEC166441D72777A2D9E76428098077FA9AA84F
FD6398AFF143518A491283FBD568C52AA693FEF9700E69E9A4C8C9DB818D738C
891BEA6E9BEC66783CF0E6477D607B7B9ED85F142869834DCB504D6D07FE973E
04EA60164F345157D18636E14CACC936D76DCA6CFD514B5CEC1BC017E88F16B1
414023B1E85B743BB7AEBDED09B279D481AF95F4168483F4AFED0D355594DD7F
D7AEAA30FF56B20DD9A6A38BB94042949620FEECEDF9D424827B66A787CD3473
C99167E01B2A246596FCE30E018AAC74EFDE7605FC9664C99106F0D0DB63C04B
4E13944EB154AC18F0D46D61B358A0499AD7BB4E5337A0262CBDB3694058E234
0889953760101AEBC4B67979896628216A78E7A65D32634D15CE4D54A1827CF2
A786C5C1FD85E6D28A46D2964AC4615C9083025C8EE7C0F17D8080AA6AFD5923
5463AE6E07D041B5FC225276DB3AD334A551D68560DC3BEF53F2120D607AF5A8
1B31ACF396FD471C72F3AF3B86223D214061FCD38171A83471DB792DBF8F7E1B
1EF9C25A76C27994ABC5EA56F4B7F967D58E348136F2C278BF983E3EED8DA69D
0A392FBB1C0D463C8E5B24EA7F879DDEE6F043312C2DACB2BD30F03B7AE7A684
98C365ADE312F0A99C0E95F3F9A820AA1A195C68F85EC2876B76BF0099081CA5
EE32D201953978847157730E343585205F73FC81140E38EF27A5BA3FFE1449A9
E8A12932149823589A0426ECC576F0951A9ACB3E202221F5079FC94ECF703312
D4CA5729B31D932607F5A8E98777ED99E5DBC816C3BED9973A97F69606AAE748
90F391B04E5CA30CC786CFA988F30BF2C2EAEE92218E532F044FF78AF80F4DEE
40035ED5AB1F73C687565D8D83FC772A743B7F16AF90BF45D776A594527B0CF5
FE68BCBF8FFE298DF5DB74FB8F0ABE7F56360858B269B52F2ADDA87AD56B21AA
648AA60A80EE67DC7066257DAA987F93E9DF413B682B92E2823862337268FF5B
AA66393887786B985998859E76B284521557EF26D712A85F7A5F6CD3C3B2F7A4
9CA54777670FA059AB2E83C15451EB9D852A2612BD4E9583D00B3D65C5EB6F05
53B51C8309D69367A0895B7557EB84FE2F5571C778A7CD880D2A2FD12D5FBED3
5D6B19629381E8735F685D3AD9B9C2B04DD0A8095FBD5A652FE23A81BE49FE98
9833B51270EDA55C2E89F5B4B670589CD1AF7D60B6C7FB56B3DD6C92C42020A7
938B2BDC73721226D9D14B9399BB06242743600430545A693FAC4F70E0DD0C5B
ECF31AD657CA1ADAF94E0B6440E253FA8B3385EF777AF7DAAB90FD875F04684B
377D376D2FDF2A388B37937869B24C61E99FE7A56A7318836F4C14EE35763D32
0334CEED2B9AC41534FE9A827DFC657A1CAC02F9B42E7EF1900D3B0254724725
0FF3CB20697322108FD518348C215ED5A9F1A43C21DBBC6A4F05DAD269932F8A
78784702D1ACFBD2FF7362C2B6BE03408653A797DC9772E2561D0E593352E754
A687D0900F5A7FDD3D1B10419F32AD2E17C1530EE5F236D06791E1468F8A440F
FD58A7E78A46CCA6FB8E3526E0DF9F9FE530784FB363E047CC2C8AD1CCA4AA52
CCB4C0844CA62B3C90C7F4AA14D043CD0AE4A7086FD0CE56C27994AC935320F9
00AA901FE99CFA01FCB7C7B28BAB6DA7B0542789BD24510894D808BBE4216382
1A566C486BA5DDB5E4BB5B14C0611F0CF4EE1FC0EB7EDA298C8E6E8A8229EDC5
7130E68B7F484E1DDEC7B45B389BF7523B39DBDD2DEDBD84970B87A8A85397D1
CA3BA4B6311659C7E9C37EFF4E69C7DB0749017745A67A055E8F3670E1DB7BF3
B557CB906BFC0AB4567578B0DB25D71E9AC25D13891B054F5732B8A705499770
7E3EFEC8C913D9D085860ABFF897682CB8456308DB8FFE3162413B8353E5EB28
21CC2F00E165109971932BBFFF8321FABB292EEC4A7B16E91589057F6CE86DEA
F6152281660ABBC6C615788A94EECD300951DC937FDAD919BD783BEEED1D2078
08706E2D9919143D5B11D0319CB4A6669A8067E36750477D036F23C7F68A5682
2BE0F043243B12BB7BFB4089545BC712606A6609AB6DCE61610175AA0A6BB521
9E1C5E3722521C8BB5D5E49C8ABDEB1474312BE93B0916CA1FFEE7345AA6808E
25798AEE413A02A2FD3A6E3F96627FB8C146F1CECBD4C2C261568DC54D215FBF
3B663C20DAA8A457BF19FA654194E6F8E5646522A1A7F8EFDC31DB31E6A89927
71945CE9DADE6CAB1642BCAD58232EE1C3A5566B470DFD9BC34EB1AC80AD3CB2
7994F87040A1D58AD8ED4D328877620195484D63162305D068E50EB4D7832C40
FE616E20B69118DBC8476728613564FAC461E3E56DE598F9E23B60EE33FC93BF
070A3EB55EB5465083A5FF6F1947CA01665A53AFE6153AC1E549977ED305CBAF
2A52D98EAB7B3AA505400D8FD8C5BA0027DFAA3C06645FBEABC605BEB30DA38E
F263211192E2BE71AB9593CF4357E516B344392500A6A2F90D754C4C4FEFDDC9
6A87CE1B8BBDF27852B2EBC6952B3BA888E1AEF77BC4548358BED0A9D492F924
D3038785463D337778B59CE8DDF313B0A6147418BE7D026D58A16E554ADCAD17
13A0F7D5822CD2CF53482D62B816797C869E7DE2C3CFB3F76EE892F30E80009C
F691C9BD38F10E88067946D624279612BF710C6078E000EBEBD4E55188C52F28
FB36DD59BB3D4FACDFCBCB5F3076D28AA14A340582156FF869979509A7F87394
22FE56C067E01A070B0D039FFDB620DB298C43A3333907BB7E633187DF2B90B7
20747044E420F711E51A6CF714327DBFE66F58E095446CCE28F180068B58D5D6
1DC8AFB9625FD8F78E0F3C3B4F0B3A86EE434385B443E49EC93CF2BA0B9A814C
A497745E2E77449CFEE1ADDB423B095747D8CC16B395ACB4229657DD2E26AC40
A1150063104A549BE93091735EFB9B0181C70B239DC96B0B2654ABB24B19C2B4
907AB9BB59366FDC9948614EE3570E306906FF5D36F7E13B2A7A8192CBC3405F
F77F55BBE570F6E49113757ADFE6EC8A96CB3C9F6A05D48629BD177F481F4FCB
998988FE84C209CE33EF6B303CB6695C2EEC5772BE3237D7F5427DEB3056B4C6
5E0177AC0C0AAE7F133328AC020D93DC067B3F601C9F342669BDEC943076C4CC
1CC7729B07E8876D823C546B4B4380819D543D7C1C3C5066B9B3DDBF2C4677E7
B9683967E0B1833565D20E2F3189D45F39C9D7DF6E7BD74018B19F849564C0BA
BB18DF0AE019A766F146FB0EBC490CA2C01CA29C92AA6886F331CBB10B1170C8
38B00CC9DA12BE705A54A29FD415CC10906EE00B28B1EA6C92FCBA4C4363ABBC
71D1888E1A01682AF674DB8467CC4B2F99112DA2101A4769739F48EE82C86A1D
E45319AEBEC4B2ABBA707703F3E6153A886FEBC94A1CB513C66F5658DAE4C74E
2BA62093666D75DB82956EA1883A096D14C359547F19812E35B064A34C177E6F
1BD32D16D9E1731B67265611BAAEC7D980C4F1BB176BDF39DE3CC363CDB57759
9053B0542F39D6C91354D1C0E5FFFA5AF6DC0EE69686D53E36966B3DE5EE5775
50CFB614A1CDB8E60730042B9E9797B9DE29188DD81BB94F2DA2F443EBAE16C4
93256D8B5A7FAF9D6322BE8E02BB33844A8AF68A228714B128D8CA64543BBBE4
C1351CD859F5D77A876E9E4C68D997FC5E0BFAAB3EC5EA9F2583D4652B7F63EA
03FCCBD335B46C2EFC8975136592BAA9EDA3EBAC5ECB39889F0352642C184632
A56CAE65142FA8C84607DAA0CA8A97465823B42FE7DF22C8092C6ACFD05E72C5
BED4D6DD7C7536B3425CDD8AB0FBC2180A5D883F858F7904CA924D9C4D39A6BC
FBFEEDADED631A435DAB08A22F140E440F7FD63F3F4ED0BD295262B9E0F21741
A8FCCEF654CB41F969D36754A19AE1616157805825DDA87007F56551565AF91A
E8688B2E4CDFCF7F015E327B82A8E9A899C75819EC710FA257A770472E61A621
FEBAD5193878CA1F0A5EC6294D5AE3F65A56175D7FD7D82A5A97D3722E3E2D8A
C70D5CF19D65C102CCE84C6DBEB1AB9F1A5B6187917EC236BE6A2533FC81646C
4702306A1E556A33B696964DBAE3F5B29F1CD57D6773C5E1CA9CE8BE83651D6A
4127CF40FF34E23DBB776F08F021C35A1BC3DFBFDE721B0F5CFC286800CCDDA4
B0264C4F6F30D041DECAD450C85C164E410E66FBB60FECD6E77D590660FCD446
6662E17DF8C8D8A6DCDC546AA276923C2044B3C9A1E9401556E84E9D05268E33
AFE8C5149C923C118B227A5C274A2F1DF9CB9FE2E8AC644B7A43BC2C76C39CFA
5B2BF06C4309C09DD34F7E31BEC61DCB7D23CECD75474F42B191D194CB44B6FF
9A2D7B6FD1B3CF18259089BF2433F5503F2DA5B2D77B422DD4FDBD13F787B804
F8834587D4A8647F7D1CFAA3D99AACEC5585FBADEACC704FDF8F764EF3E8F0BA
12E1E2D33A0DBAB79263552E6480C1EA4D84F982CE73205428FAA0F53E56B34D
9BDF38683D4F22E3C8A0EBF5198FE784C4EC97281AADE44942BE9BA773752B3A
D9F4403183796BF5BC02479ED11820D345198ABBB9151C484522E6E5C58D1B52
24AA2A2DD7C0E196D626435FF5A2D162F9F369E6F670B4D2C111932D9029B8CD
937A9761866E8F7054F2DEE2CC9A2613F5FC401272CFD6B4BD992E484E6C942E
DF592140F90DFFBFED239E78E5B181887C7D75CA4FFE0701E2AC6343A9A68FA2
E8AA6AE61B9D72F8BA38266B02B99F1D79AB27ABD5A3FA8DCCD1431A1540BE91
F66FFFF18A086BB53D49DDEC71733561EC44A38529C900A018DBFC10A3B21377
0834C565CFEF9E2B19CFDCADF273FB5E327A67C9C2E71E3D34F53F01C98B9252
13BF5CF3105FF629CB8A2D564545638B9203283F6D70E4CD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4EA3A676F820
89827E7A66934F11BA1A6716C3D750E5AE189E0C21CDF940B9AB45EFF4FFFF84
A7436F5A14304924790925E1461E76D3C4AF6C1C716B20E11F84253BF3C51FC4
46BDD368D85E5C749C7D0E3AFA556B6A975220DCE895B898DF184990276F2B78
28ECD9809FC357F574C9164567A3E5496F115002BEAFB6FDA36918DB28DF7D11
117136E26925FA4DDF96E67A8AF86BDE09160FFFE3CB490662FC4B3D9962FCBE
FD574E40415EF6662C19136157A36DE33CCE4CBB8144D1409F3D00713D90EFC5
0DE65779C0C0A3138045FF833660DFAFBFEAD8DAB2905D099464675284237419
CB15660FD434CC404455A27D263D5775055A302B28EEC46784490A52CB2050C3
08792FB23DCEA61B21E0148753C83CC7CCA0819773F5C4C5932B82A83AA32C7B
0DD7166D10CED16D1EEA7EA3F1B4FC1781A2A6A3C31185E52E4DC102406D921D
FE2E1265A0950715EE5923428268674E97B04868DF17793E3FBF5678AD8535DD
5911B1ED1874F75BE279E9725CBFC6F81B35DB09B9E4B03DEC68DAE1950A1697
87F029D819DE6CE4E17B523DC7F244901E645F856D582D31A626554D5D7B520D
F7E22B61116CAE217BA59D40E1BF681FCB7FA34A033DCB998909EAFCDB06A0ED
400F34B8D5CC6D79025DFFA1673801859C0BE69F3114BF2DCD7D14F472E0D658
8F76B2EBCD68625AFA15B5CACAE5BF73DBCA951D6DA886C7E9B5C506D6BBD42C
FB6EE776313F7EC9632433D390252A59D8A6E816BAA845B47ABF962F44953115
4C1E91DDA448B773A4347E2C64E6AB8EDAB092930D6AB7A47C229118D93C4170
B6C0260FA0DF1709BAB185188D1D6B01246422A3B10C4B82C9256B88A7E3546A
2599D86358A238867E1C073E43659629E2C33F5CA047A8C0D10C65AF71D62CE4
AD5827573248C6220C5192132A650F95BE8EF0E737743AD789C9C1F6B6EEC8CA
2348DF6BAFC91CA515F6346BED7BD95770ED2F934118639D587FCCCFFC4D4891
0A00356B83C927530D29B9E4BD85A443E5C0A75CEDB4E46A3C4F4FE4499A9C56
1BB75A5120F91703C080BD5466879EFF9F08EA9E4B718D3345AB7BDA758EE957
4BB62E7C74EA8D952B9D6890E142CFCDDF564A976B423B1D23DDE2FE0BE53911
984A8F463CFC2E8BBDF5AEE11368345DFC68CE93F0099DC9AAF5D22370AFC356
7A2AB2FE563FBE19D18A34FEE4DB16E1D0847E44CF75A2E5551A905743150075
6EAFA102E9F6A6E8D48FFD85DCD460510E35B3E16DEA4BEFE93FDAABDF677045
AA9213DA4F6269EC80883D5C797461B17653700064844134FB63C76FEEDCDA95
4DD9CA5B183FE27C5FCC54E5980CAB5DF3A7C50A10489162DAF0B61A41105C80
594295CB32364CDA9EB4E9BCEF943429274DD4B79DA9BEDEA792853269C79EFA
363359BD66D7EBBE6FF1ADDCCD3579D117DEACB810BE54A1E3D878B6B769CCC6
4849CC9EFF385FBC19B9E9F676BECF950F1FCD20E29543A30EC26B099CE0A2BF
C5D270E532CF2C775A1848FCFB923F1BAD4F16ECACB022D11595936F0272D5B5
BF3DEEA219EED8A641F6D6C9068D8259F8490F362435550C14A19CFBA8933BC2
F5CEB54168F061EA44EBF719D638B6F8D6FA573ED3697485E7DC848D26CBCDF2
CBFD84208C8399262B8D7D60D8E14CB390A7B2624B8D5628445171E702E8BBCF
272B361B475EC88B570FE09B13688FF80AE7B4BE5E7AC73ED9BA732C65B2FEAE
D8AFB5468DA8CAE427F4A708C9CCF15E86B096C5C8CF02A8334F2C4B6297FEA9
889F58AA8CFFBB39A216C54BD7DD5B74B1ED1709092E946B8215B8B421438558
F12309BDFE967C94FB9FCC35CA4D3854F230D022C22A6612FF6641F2DE3DF0B1
DC2292FB6F9FD437EB714DA848E70C130B47F47E76D92D4DA418CAF34DD47826
AC12B73BA6EA714F992183A5AE6339D65B43005674CD9A26B5BB091576B129F7
D4F11DB766317152396C3C694E0759A7D2532183FF3A6CBFD3B932A5E0669178
679B7359BF3608EC50FC63535D2825C301E408E6C137F20D6F75E7172A3ACFB4
81CB6428B2F8022907D6388387EA94B6141DD7C967DB4D6B159E1DF2CDCB3DC5
73E3D1DD39FC4A42AE1FBC61A7A3A785868C7D264BAA39715683FDABFD61359B
CA269AFAEFB1DE88B6C0F9CD4FF5291120B86625C419A80B58E8E592B22FDE4E
AF4F70943C7D145FFE96F5499D450009B4228081927812759B4666877FC9C60D
236F1ADDA6A44649D8470C6626D59CB57CE9C269CCFE4ADB028BF518FEF238A6
0DB56D5447355BDD63E9F84A2534EE8C41D7428C52C435426BB413E2304A2523
6777ECA1E13C406F9FFFBC070B500FA2195725949FFF7AFCCF6D6F6B507D39BF
C95DA69CE4E68612534C81F140AE04F72F4AE74CC8065BAF5AFB0A2E9DADB158
16D1B3878FBF56F31A2D616D87AA1BE3855BB3C6F1F5949556BCCE8EDF484C6D
B34E7B1642EAEF348D57E3E833EDF88B8EEF8AD043178D7734A8B50F57491810
FE7F2EB2E5DEBBC772D5D25EED37C1A6531D5388C2341C5D63B1F66198A6167D
997D14935E34C46F105442E491522DBCCDD4A391BBCDF055EEFCF6D8B07A81A3
B4855303DF7DA29A4E0E531E74F4DBB500850A3D408EC48B77006F522C32104B
F1F2126E227256CBE0451D09F3BE13A52467318C02183CB2CFC6B236C90D12D9
6860E43247DB1E9BA659301CA3F2FD94B2C9C7D5C1D2205617B0D43BD895B52C
D5A5B1CEDEF0F662BD83B54F468AC72097DB550EACE3737A59218C60A67470D3
423C244BB013DEADCC4AA727070FCF8C203F865B52E96DB8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 78 /N put
dup 82 /R put
dup 83 /S put
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 116 /t put
dup 123 /endash put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
/UniqueID 5000769 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7A71316B2E148D
E2A1732B3627109EA446CB320EBBE2E78281CDF0890E2E72B6711335857F1E23
337C75E729701E93D5BEC0630CDC7F4E957233EC09F917E5CA703C7E93841598
0E73843FC6619DE017C8473A6D1B2BE5142DEBA285B98FA1CC5E64D2ADB981E6
472971848451A245DDF6AA3B8225E9AC8E4630B0FF32D679EC27ACAD85C6394E
A6F71023B660EE883D8B676837E9EBA4E42BA8F365433A900F1DC3A9F0E88A26
3756DBBF0E4662F14597333748DED185B2D7DC944FD74702780A1DD8C42A825C
74945B992FD50196CE42ADF046E455F65D656EA816EED0B0661CD2D1B88DF0A4
7FA9EE57FB22A0A2673CFD22F6C50CE4160FE0ABF777704BE3D73C86D2CC2CEC
62B2272B9D0F0E5B65C96DC562E06C62DB2ACAE19CE831DCE9D31CD7DB9F3F82
0E85967A4873417EF968398B3C19314A4F735D0C3D8C65A8B02559FFBE660B3C
22F69274B50775D765EB3181AABBE932FC7215B9EE8F7C699DB6FFCF75D527C1
1BB37E04ED7A495A4CE572E62211C77B07F82A270A3EEAFA78165E0E0FAC4A4B
F5076143FDEE6013C5D97EE49AD68A4C71E9AD2FA5551922B119F3A5DB2602C8
0500D14F73AE688CE72C57620992FC642F3FBA76CFF6604F4298F7A3388FB712
81E90F624CC76E9C8690B707E83F4D4AA18DF1E335D47BEFE23CB42A312EAA1F
46A3F85B5ED61C66B79F13C88939E4D0048BFDF1714286D342CA4519BF60F585
DD26A1B88159ECEEC75BCFCF29ABAA0FC4E6DE863C263BE8C604148A3518631E
C3EC017807B79816662111F9266F213EEDE88E0E8EC56BF3B726F605C27180BF
325E93E865520D5616BCA0B3A8EF3E26A8DF61E983C6562635F9E27FFC18E043
B0B387446125355CB5BB47EFA30F6EB5B084A0D32328476EB3DEBFB51300CAF4
991667C910745A998B47DC7EB3D46EA745A138A7B2DA64C5DDF6222DE96DBE91
D971CE4F327C41756ECA9B29B92FC3BF995AC27630838914B58EE643E9F12237
71F6C96CA2B32A375A31B8EABF2D0010CE7420EA9046B7E3CDB0F39B21F98BE1
5C58339D4BC9703F690415BD9D53F9D99C8F003D07780973CEB4371816096FA7
C87109D372454EFEC353E518ABCAB3A3653446A8413D776448403A48AECEA4A2
C63975B107C2734918B79873F1265DAC3D338403E6EE6E04872B31D8F5675AF1
46EAB0AE4897660B9DB9EAA73A91638138C4CE1C7A483BD8F674D75130C2F376
D4CB65B6AD79C9516997E45D0080C584D5406CA06A9DE250C60FC65F460DA08E
555196254F952FD06C1DCE88499C3559B7AEAEA0A17D04B139A939DA7F9CC230
13D5F54768A19800E966206AF91CAF665D296314EBA21CA6489DCEABB7E5562B
4840C2D9714B058963FE8C28D20861386AFDE5C535AFE5327EC9FA405ABFF65C
1E1862927F56A354158B06E1F00F262109AE389B0D2FF813E6A926CD879ACBDC
7F8DCF187ADC2F4C3DAC96CC4F3736B5F30A919F47F9254EEB81A1D7F8F1190B
DDF35A50E150A06B7EABC21CC611C05B730D84CDB4FFBC7D736F943B7C3919BE
42BCCEC633263C2E02AC386B66A13E105824555832343310ECA695152EE8D50F
D707132E61020506C30D4B938EECD64790DEE80C51056CCAF686516A7DB96BA3
767521C8EF995013774660CA7FA605E76FE035E679DC2D3D4846F765ED45B8DD
6F16BA314C8370A80DBAB53BC85DC6881A65E0AC6460332BA85551183AFA94D5
87CEF8DB6F4E4B5A826EA46F96D596FFB120BBC2E9289D174BAF93CA3A3D80C1
D51EC1D6B553EAE97A5B428DD3C532697632FC46D614A610E648B3A557670F92
516F8E03EEAC109E33935E3E7A692CA6D13DDC1D5A8858F27C646F075F1BD66E
777FF6149E4776803BE9E87B8ABF2F87E091495B4E4F7DB20165342D2D43A708
1975C90413DE4B19CE2FEF5C4F872EDC78C764570643B9ED2F722A4C13868D67
0594354B908DD94EAF00B1910B5C0E36E78613B360F14B5E3F27C22485B5E549
8206FF7C01C0B6D1FDB6AEC39B2146DC864267DDD2F968EA156545C314E0EA44
6502AC032B88D8BAB1940F268865E47579D63623263B68DC98F83B0D6EA86FCA
18F4890F867457147C5A63431024A357D1063D077CF47825978B6640445408BD
DD045432EC03F8270CAEEBAA52812BAE0AAC0E871C96667BA32F7F2D4000D99D
672C7C0751FCADA5D8D1CFA71FD328
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.1: CMR8 1.0
%%CreationDate: 1991 Aug 20 16:39:40
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 5 /Pi put
dup 20 /caron put
dup 22 /macron put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 94 /circumflex put
readonly def
/FontBBox{-36 -250 1070 750}readonly def
/UniqueID 5000791 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA1772CE422BB1D7283AD675B65
48A7EA0069A883EC1DAA3E1F9ECE7586D6CF0A128CD557C7E5D7AA3EA97EBAD3
9619D1BFCF4A6D64768741EDEA0A5B0EFBBF347CDCBE2E03D756967A16B613DB
0FC45FA2A3312E0C46A5FD0466AB097C58FFEEC40601B8395E52775D0AFCD7DB
8AB317333110531E5C44A4CB4B5ACD571A1A60960B15E450948A5EEA14DD330F
EA209265DB8E1A1FC80DCD3860323FD26C113B041A88C88A21655878680A4466
FA10403D24BB97152A49B842C180E4D258C9D48F21D057782D90623116830BA3
9902B3C5F2F2DD01433B0D7099C07DBDE268D0FFED5169BCD03D48B2F058AD62
D8678C626DC7A3F352152C99BA963EF95F8AD11DB8B0D351210A17E4C2C55AD8
9EB64172935D3C20A398F3EEEEC31551966A7438EF3FEE422C6D4E05337620D5
ACC7B52BED984BFAAD36EF9D20748B05D07BE4414A63975125D272FAD83F76E6
10FFF8363014BE526D580873C5A42B70FA911EC7B86905F13AFE55EB0273F582
83158793B8CC296B8DE1DCCF1250FD57CB0E035C7EDA3B0092ED940D37A05493
2EC54E09B984FCA4AB7D2EA182BCF1263AA244B07EC0EA901C077A059F709F30
4384CB5FA748F2054FAD9A7A43D4EA427918BD414F766531136B60C3477C6632
BEFE3897B58C19276A301926C2AEF2756B367319772C9B201C49B4D935A8267B
041D6F1783B6AEA4DAC4F5B3507D7032AA640AAB12E343A4E9BDCF419C04A721
3888B25AF4E293AACED9A6BDC78E61DA1C424C6503CC1885F762B92C3CFF5A06
F928D8B0CDE87BD9C7DEC03FCEE09DF8032682025C7F4B57426597EC2C7C15FB
A2C85516C18F3CA0765904922EEE6B6F81C846AE58E6B16B99EC1DE52D702EE9
50B5BC0D7733246A799C3F1FCF7833D9D0AE2CFD7838E5A4EBAB0DB7B1B84BEF
EE43506EC5F10EA6752BD880687BDAA6AE46F79691A39617A17DCB187A4D9488
58B33C6DF626480CE7D172689206EB6ABB6A48B83A95005A5BAA1B4BA65385F7
E8870F3F45A499CBE0547BBDC001E8A24ACDBB245909E1DB9756DB78CA548614
46DE37ABD3B2063EA396ABB7CFF505754C895B50C665669DC3DFD218397CEFC8
A28FFD572DCCAF4E98E652AF7C090D4763E25AE3ACF0C48D3C9AE005D502C41B
E42C0AC7C2AF2C3FA9909849362A3F118DCBE1B8F0E88F866005A663B8DD8C18
9A9D259C2CE00263A8626BCD734AF63F91AA0C3C765790B4CEAA084AD69AE740
ADE48A7C0E4337F298C7020DC74A34333E1716E90F3A8F25C57B5B7F0DBC115E
A7FBED6B69B9D30CD6C4B6D9D3CD06E5B8AB0652839FE95FB2DFA222171BFA8A
07FD4692AF4132E05FB023AC9CDD996FEBB7B8BD0D34362D4F705A9A71B90320
697E5FFB1A9B38E9E36507D4E687587E269B6452926EF7AA226A1DD404BEA637
FC78358A43D6DDD228203D264284990183E35CF409ED08A82F50D9A2DC9B9276
03666BBE4C5159771ED456670390769A7E4845D4ADC7D30022A0CD6945A25631
814C90130EE4C410189522978CDB2E6EA75A967B769A5B9B87A783B447F23AD3
7C8AA477CBE749FC0A6737822983FE93F0B432D4B3DB9979AB048FDC6706F4C8
47E139CAD4D43B759C43D67118C54849B2FF34D4C4A6A145652F126726C22B41
EB10744B54E642020DDC749EE4A8DFAC15ACFF4E20B98B49E7A36CBB80183DB6
0A6D003176CEEF94D80941952F31CE1A0484E58986EDA9556D65DC659BBCB526
94DE2046ED99ACC2670B02C8F18667617FB5D67CEA8BA9BDED025C37E2D7ABB4
5B04A447D52EC30014B05D8670A8E6E3AA443C071C1F5541BB6081202EB02234
7D4052E4A632B2F98808C76C01ECCD915A2FD0139FF054CEB5BCA7101C4BE5C0
6F97D2399E80489FD4BAC0C5CB70E95F73A379118715478C5DFAF5A58CCD0A19
A24CB8933779B29FBB929483938AF80DC03167F6239A906EAF8CE47B33D5C2FE
BC2EB31BD5FBD5DE68F68D39D58D5B2D7934589EA774A4D6BFB2783210C74672
7FF2B23737BC58F8C88D2119C8F0E10793668EAE5C3CDA47E8FB27EBC152A90D
B76F459D868C32FB4D98DC7924217D365E337F7597F00BFF7E7564C028FCEA5F
7EBA997DBD6701D743985356FC4A7008A630B0553B578FEF2A9E4501D7CFE3BD
883658FE572D13B7AE768A3A460AB06860D37A8BC3D8049908C05E1ED28BEC1D
44459905ADFE2AE8834BE655F2F9E1E58CA5CD7224EDCDC93883E0E1D584CC8B
404BF0F9BB3B7A941870A52586F9CCBB08050B6C30EC2B0D72C6CACABBBD3391
733EA49F55CEC15F66535E84BE6EC4070BE8113E0C017CAD3EBA460FDB061544
1451D31CADC6241EBE93212D33C16C532E21F8DA1B21ACCAF7607690669C3817
EF3B9D19EAF04456031B705EDD711EBED52674520BBA06DECB2E0CB6D8E3ABE6
9F62D4D8476BE73EA3586356996EF6769178F41B13E84D991433F03BC41C6024
9E2BB39F098B7EFF7DA1B6BFEC612A129A68FAD1B2E8A35D949AAAE4F5A17D7C
D8FE34441D54BD5DC8DC514A09DB35B1CBDCF4FDDAA00269305676E179B11FDB
3D8DFF7DC0A5D65CCEB26D5011DA69EB3413A697335BBFC7AFD5B46EF43986A1
5705D0D2A5CC7D1E57D2440D35DCA87A54B5E3D5102C009C1528EA28E1F3E7D9
0EE1D8B205D847819FD7BD6E2FE83FDF183EA12FEE63054ED8095250907FCB47
15935D50419F3881DFA901B87119CA1F9C91458DD4C1805593EB4E97846C4D3A
9778E6EA041C6BE8E12C08F5A53F03912D849A8BB4BE24B03CF0161F13C4453B
99829BEF3E5CA228970ADFFAB2D21E4689EA00B640CAD4E2F31677AB56DD3BF9
7164714AF1AAAA47A8FB5AD78F099918C15EB305DC7DAA93181D6092D35F5566
E176EF8D4997D34950027276EC173AE6502D6C84D258BCC600D71A89E20525D1
035D8EB88190996E0AF1A03A263ABF0F1665F08085BFE4B4F040D454C8D184DA
F89FF25887D306D45FE2DA8D064996EF169679F384653F504FFA85C04849A72C
B47E5E233C0C39B86C68F04745C710154ACBE817E862B6827B1A525C5F6FA5CE
8298B09E60943BB85D3EE95DEB2B07F34AFD7418442E3A9F775B4032A1414F8F
94568FCFCCD6C87BFE6F9E6D5E8644B4F72CD5A31387BD02D4D51658C1A651CA
7256BE5CFD5F654459DC991AFCAA6265C43C4BA38F8EC273914D522834AE12AC
0E3AA91FA94772349FA1872B1B7FD0CE600012A5428AC5119E7BDC5331AF4245
2759AD832244F31A059000CA85480237F1897D9BE7DE5673F1A9C4CA0C494CC2
E48A7E7A1F5F6D920111505BDC69C0751F317ABF330D61D712036083182ABBCD
526B69E29AF88FADA41BA2CEF454A0C54B29F07901A5D46B72E144B240BAA60A
C60681969F6BDAF1570174070F216A863D66209027F1168CB66AE0E479ABC5D7
418498520B221915969907BCD085052EDAB36D48588CF529F346F4F598F6C50E
2A230D9F3078807A6162C268D1031DC7DB4739D54691966B1E3515533DE4CF9D
A003B15425DC451869C6246F64063571F5B1F1257317923EBC76152B87C8463A
D2C0E6DB2AA7E1F385F7D7D1A08D0DAD70AC05449F4F924B9D74EDA24844CE04
8375255ABCD67DBEDDD67FD15B44F6B3F7CCE7B036275950FEFE8DEC7EEF0FE3
819A0B50424250803606285A569C41EDD5B7EB29A7C48D9AB0C08AF935F11AC2
C7163EA36AA351FC01817F69821F57381AECC2A8499655FF63F31D81A85B6B8E
895EC6A892BD2DC5C2C6D6AB2A8092DECB3086F27FE3276DC1860083B7D682B2
D1D258439BD9C1097DFD6187CD776FBEECA2A0F674226883944FE3C4F1B6CB10
B723E43081673FB803015D176DAC66581D93BA88449E498824AF4234E6217477
BDE32AAE1E680D605DA20B3F1C188B07977A12690803BE2F1C0E5EF06260100B
A165E394BD6203CBACBF7BC4E158CE9058EFE395941DF5D1A506DE9BC2259E6C
863AB5E27A624CBA36462239F7AE08D8A36AFC447959F019AE3BB569149AFC7C
690620906A61771D1D5C275886453A736D672B2EC82928908B03A7875318C617
A7AC7F03BD05C62035759585FF297D3E48EC0D6C3B08058086682D4743BFD2E4
80061155DF649BFC2DF2EE646267EDF28CDD03E0504B6D48BE5192980DAE15F6
38F8FA76419E59327E7E3BBEE3EC5787E740056D863F51E767728D8F1D346DA8
8E758529FC94F90AFF68B69AE00EDB2A46DB96BA3842ED3BC9434B3077C83B71
55621F920378153A228229DB62DE8094C7BFBB368E220B72BF7514A1830F5679
2E3940838C42C5587C8C2084FBB072A06FD09A349F6AA4EE42D120BA18F05592
BA19B7F722784724A2B70B4CAC35735437E1F82DB060C236B512C1874F8034B2
C653ACD3CBC67FA412B1D7C1E14F5115215749EFD1EA970CB2C1556D8AE7F151
6BC99F22D0D2A905AD68AEE1AF9444CD2C8367D668E04C460AD6BAF0BA83CFC4
CEE1D2EF71DF6EF5213CB6AC5E081B1A1B0CEC0B2271947D6A517B2B19DA0201
4FE429163F83714D0380A42E75DFBD93D1C0ADE0CB8C64EA36E6872F349B8113
53E622ACB47C65F9C3651F00FE789C835455BE25A86821A6EDB4D6EC4E8D7B61
FFF93B4F2269825AD0D6D4D32157988D43350D9C730AAB4D1B4A4377FA11869D
66659464EAB1A691D7A5C24B02F0B2A787B37F563AE43A4182C9CB61E43EF4E4
860AE1B617B92B1317BFD1E6F532A71D800485BCA7496A1D617242BF36706780
A249D0A9F5951C7DC6F6FA0B648DAE5F4EF4711D6DC0D4D7B0D97F060FC1C7D9
6BCB23730A263D6C31C895695120B11492DA8DC2FED8DEBE215644977E07053D
1130E02351B98C977F9A485CEDD8C60DB614C2D9B420BED34C2905051B9CB20E
731FA814FDBF516F14602D2DAD1A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.1: CMMI8 1.100
%%CreationDate: 1996 Jul 23 07:53:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 21 /lambda put
dup 25 /pi put
dup 27 /sigma put
dup 37 /rho1 put
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 113 /q put
readonly def
/FontBBox{-24 -250 1110 750}readonly def
/UniqueID 5087383 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DDF753642CD526A96ACEDA4120
788F22B1D09F149794E66DD1AC2C2B3BC6FEC59D626F427CD5AE9C54C7F78F62
C36F49B3C2E5E62AFB56DCEE87445A12A942C14AE618D1FE1B11A9CF9FAA1F32
617B598CE5058715EF3051E228F72F651040AD99A741F247C68007E68C84E9D1
D0BF99AA5D777D88A7D3CED2EA67F4AE61E8BC0495E7DA382E82DDB2B009DD63
532C74E3BE5EC555A014BCBB6AB31B8286D7712E0E926F8696830672B8214E9B
5D0740C16ADF0AFD47C4938F373575C6CA91E46D88DE24E682DEC44B57EA8AF8
4E57D45646073250D82C4B50CBBB0B369932618301F3D4186277103B53B3C9E6
DB42D6B30115F67B9D078220D5752644930643BDF9FACF684EBE13E39B65055E
B1BD054C324962025EC79E1D155936FE32D9F2224353F2A46C3558EF216F6BB2
A304BAF752BEEC36C4440B556AEFECF454BA7CBBA7537BCB10EBC21047333A89
8936419D857CD9F59EBA20B0A3D9BA4A0D3395336B4CDA4BA6451B6E4D1370FA
D9BDABB7F271BC1C6C48D9DF1E5A6FAE788F5609DE3C48D47A67097C547D9817
AD3A7CCE2B771843D69F860DA4059A71494281C0AD8D4BAB3F67BB6739723C04
AE05F9E35B2B2CB9C7874C114F57A185C8563C0DCCA93F8096384D71A2994748
A3C7C8B8AF54961A8838AD279441D9A5EB6C1FE26C98BD025F353124DA68A827
AE2AF8D25CA48031C242AA433EEEBB8ABA4B96821786C38BACB5F58C3D5DA011
85B385124C328656E2B13AB98D17831106911D5C5BF7D7FD432763164546B5EB
3570BCAAE80BC668FA0510F6E3BFCB75E4480DE86AEA1A174807A01F91893892
F9321A0BFC18E50AE47D92FF46A3D21E4981C81DE37B8306485CF54D198F4896
09F86990F4F6384959C45695552A4AC396F40F8F3009D7AADC7B7ACCBA858142
E467602DA40FA9A713EE047D680ECD21EC90EB952B0DF385036A21AAE9F9753A
AD6784BBC881C207A454615537123EE1A7BB4B37FD3ABE0BE320F7924F293BDF
46D60E640ABD94B756FF9E670B198B7321A07D71591ABF0E646823D559D07EF5
8E7DA1DB7E2C996794B832425C1316B4B084AE474CFECA2B0DD589B2BB3E73A7
5DFFF4D892E009A0E708463D8B55FC7A28AD7943F5732B9DD5D5F667BDD8EB0E
5234BBBDD805A688C1238961A1874C6B3D14B683B7E218D7EE683D48B3AD3AA2
6FD5E179B30891BBDE4BDE74B89FA17F99E6E6555945DE35E09950E6CE862CB6
BA88BA282AD09FD4FBAA47AFBEF579A05EE24E7B14721680D1E1250C6B8EE3FF
FE04DD8659C255C379882D9161104B50E396131D5BB23B97D6FC1F842402AF81
B7CD406152BAE46CB11A69DDD9FBA4517F9EC14B64591002DE2EF743178191AC
B67C585E359F97CC1E61BAB50F3FE562D9034EC6E3021F7C4AF4CC1AC1555512
68E092CABF35661E99430A18AAE94EC01B1F0ED3F14BAA7A34A54A9AD0530A87
804E7E613B97019AE490A17FBF521798899D5CAA0DBE669B430FDA5CACFE83F8
11CACB8ECD0B8298F3A267E0EE70E89A7B042F32040BC6356CF07563211CF215
F02E336F0DD0D9350617D8E8C3934587ECF54EEF1BA6E062F04F93E6B1F0634D
E8887E83788EF6FBF914CDA1BFC14324BA831B154B6CB9F27BD693BB8A0B70FA
9268581EB91446A892AEE2B3810CA868B2169AD1ED188022E7FEB494F401E69B
1E1168315CEEB702898EA2972D4AD9B53F68FBFDDDC3E35042B47B41FFF455D2
D297BC93FAD98D2555833092E17A58577E856CE5E0B45818FC27D44E312AB378
45F3D77F2F262BD71CF041C2A65C5293215CE94DEF6F5FBE30B5BDAEA136E9BF
EFA57373CA19C54927868C06CD887FB038324E2B2E4EE4693E534357100C1536
669DD02C1BFE4D3631C49DE9ABEAEE323E4970D33228C91C1D7200947A5151AB
5F4DDD86CEE030CC9C002D4CA54C0402F4A474DA4F1F6B4558DFBDC1488F2140
4CB6EB27DAD846EEC543AD648D8CF4CA45A2B26C078AD1EFDE5652811F0B0649
D2201D2595D09860DBF7D55F75ECA498BE6BEC675220CAFADA9BF2005F424412
9295B036E902A598BF08E47C3627A79B84307280739A5226F68E2D65D44842C1
895EA51D0564A81DA91AB6515A5A47682B1E9877B495D32D7BA8AF64AD5E9058
75D4651030CB19C747E1E83B61D059F123C79714CBA9E3EBEBAFE92A020AB772
8489AB20619DBA54C4E20E906D8D530FEADCCD1A47766F8C25F29DBB9184621F
C2E8974D17C77D321D7CA98E1303FBDE16A0BA33F7897B856F54E71648F9EEFB
BFBAEF154F090200D3C7B3C5CE0ABEA12007DE4BEA8B9145F708ECEA63EF8593
E26E42637A2B95FF62016BE7DF4B54C9D36192521066C281258296347339E0B1
646DB66DE30068B86871F3CA538B8A1D2B3A78F35848FBF25E63FF52000D8DE5
70A3484949371E63AB70CD8F35AC974500A9AD8BAE0E3F57B4B32B55AC91A5EF
E766D7B2CB90686ED9AEBF31DDB24804486B0C881E39DF777BEFE890344D97F5
9579CDF99FCCB5D7B14D77A39DD0BCB4275DAB01C9C5DFD296A8E59D5FEE40CF
2EC2AA0B4D8407E5FD94256FEABBA96C562F87E0F278D8C382F5B68CBA28502E
BBD4C7D771A492B31478B99355C530DFBA45CFB9AB92027A261C8F909CAA176F
B3082B0DFE20603C52135BC32D0B8B3DAFC09B77A6A32378F3C2347948183A4E
70669D53D08834E104C6DF848D4B2A83934168E673CFAE4B9AC45A6FB3488894
4290885DC365A2305029854EEAF5E3BE6CA303CDD2115BC4CA7A5BB89E1BAE3E
978B5D38656FCC2E837F536B40B70F5CE81155C4DE08F037310ED5423A39ACB5
DF46ED67D9D2F015A2F7D6C6A125DAFD6F761202E9BD03613B04AA333ACFD36F
5FEE3210378DB2857D4A07DE21BEC848C0FFBE150CD246FB510231E4850A97DA
2DBB1754A7D7C4535B2BBE0863A2B40EACD51546219A83E6C30C75653D60BF8E
C2BEC65DAC18C435B6CA653D335AAC2922B8C02D34AE7DE3B04DBB17EE6486DF
B4D63210F8E530CF531269E6E3A231FD399E54F84D6EA6E9F2236B90D233E48E
361EC0169DC579BEB8AAE9DE76D8AAE3444E8B88E91FA3AA5D18F7DE2FC486CD
82887D51580384CCC1D0886B6A9B35469D805A3C903ABB4EAB522DB31015E8D4
625EAD3C4A7E80E77429E44018D4B63119ADA7F02D56124B5FA98DF6FA65BDC6
E9466A410945F3BE2F4205D7D775913D29CCAB2E425241D8C4D76B4803EDF25F
283E45F7E3F9E2E105F82376D542C10521A87005DC2A63F48A5AB4420FD6668D
EA30465E98432868FF848D87E6EEB1341DD087BE3FD8189E75A91B258D3E1E07
DCACBBEF20953B113B3740C600A049207E46D5D9DBB01DE0D62D9D7497A61466
8631000DDCFCD08FB0689204BACF52BF743A849D2F30EE6733900264B4D4D9AB
B209498D7E859A808C196CC4363548808453BF1054B5E19006D20A01CFE812B7
C90FEEC123352DB8FC9E0EE8FB35098E386546FBA3558FA05D9ECA2826D20EAD
1038FD3A76464B4651E9035D728B93C61D6689EAC62102D7C54447F4AD16BC26
6EB268FEB2398E893DBF7BD4339C050D5626BA6B7B55DA773CA5A2B47063DCF4
1D0AD9DC8A76E709EF1CBD7586740BD57DC7F5D2486A2348375A3EF8A4F80272
539A832CD36C7D8693D03D0A61CE4A8ACC2921005E1CD62C42FD463D347BFC43
DA4CAD59E304A2B0292D1D7FF633AC31A4863C0AA4B55248E0A5960DBD6F7113
9BC0AE24771B34D67AD6984B8D526671694B32C0AD0E2B06AFA49DFA8894DB07
7BBB6335CFF37634598B5410DB3CC6D500BB4D95A588269D540CD8C727ABF0FC
42365B06F6249869CC0AC180FF367B3C34DA27E5F5691B878619E937755DFF1A
D05DCE0255655196191A946BB3C7CA625C98C257960A4523F46796E4A81A332A
D90FE8972F1B9BF5D5A19C0D917173F3E8F14D9851B2C89EA1CC767F128672F1
ADBA95E7DDA79EE771DC910E8450392DB645C0EA2582E020A865177B2AED614C
7A1A31F7887D0CE69377A8A5F2CB53FECC68E9921E31192F840E6AA35D6F400D
7FB471E04DE205EFD3EF5A494560ED844A5F2E99C40A94FABC87E5365A8A7B4F
D14AC9ABF36A686220993458FECEF2A33146C744CD63C27881A7B5D9772E541C
23CF293CA0C064462C829D8CF037F80F1FDAB81F3F1A05B5B1DCD0E63C347C6C
977831F5E760502A698DBE198E9A1875DE9C0B7A621C0AB55BA6775532B12A56
D65D0C982702FD260DDC366D46F0DC575DB6745A5439D52D9CB589AFB3AD1005
AAD7D1FFC0D2F87E524D1BE9F2FED5CA996D474A1109BBE3AF5F1D1422B8A17C
E84B56E3A7B8D7BA6049A489713FC092FEC2ED797FF9CE764F36A41348CCD558
F25AEFC771562C3B20D848CDD63704B44BD8EAF50EC194368EAAFEDA88F0FB54
6CDFA0A2166ADA473EEB1EC8595EBA9065EAD10C6F65ED6319DDE5B190560157
3DBA1DE2A2393C6AEF828DF6F79CF784D45A0D532927EB103E839E2B7001B4AD
FEC79F27028F38CE6C5C00F7C23E328153CA385F5D5DBF17EFF872188B92BAAF
0E7C296D8D20E7F9E540B4963CF179308EF36800E15298C74B7265F75D65A106
293F2F926EAA866CE76FEAFA3CAC86108A19FC80ABFD2F7CF74FF88130BB2477
EDC994E0A834618380D2F76CCF000D40A57F46216BAAFB5135B3B0034F287EC4
CF4ABFDF338C5975A52D4E5FB2306067AB194F8F20F2CB81CDEF2FDBDAA7A3B6
E50F84519911500082626B13BE2A2D66F81F1BD2614C865370C1AC59E3DA628A
A4CE571023D759D62E3649B3BA9618E90B8782F2D5F0D46E6CE4B4E4975E519A
BF05C4E696EF099A35A4524C3FAC8B33E3AB2F2B8A27181EBD0365AB9741B14E
975C513D451D1629740295ED55924B8974D95BE28A1434C6F78904A44FB1D811
FA30C910B2A120CFC12AC42B295A429B1082F01FF9C77AB2E1B7B623A536C9DA
0A4E7DCF34A9C701B5DB3FFE5295E817ABF2B11AD6446A82872A310F79193D1B
12D3D68B6B7499CBEA980723246F839B520F5836736E3FB74DD75842DF835F28
688189DF473EBF633A8401CAB0C3242C471380AE6ED70C8C005B22FA5D51FA39
13F5BBEA8A858A39FFA0ECFEB9DD5145A8078A953A1AE68819E9EB2D8F3A2FB0
463B92C27F7A7202BEE83764EF6D83B16964E0509ACFA795E9B9FC6FDEE4C129
9DDAB14E0DD2B2EDA4F6373FFEBE91FB15E861810AFD0DE0FD1E3CAABF68257D
7038ED2CDC6BB244E86352A1C07A9FA14531AA6B3CC59D4D229B64BBFDE3A59B
BFA06F440038075D208980469A38B297E96A872338724A641EAF79477292AD4E
3B96EC71046B39EE90EA470065DD49512CD37112ABA298BC3FFC7881318FBCE1
526E16A2E4AA78EF5FED654662B01F01E7C94290D4E037BA7223FB142D65FD0E
E9B8433D1E9CB8541A416FB547CA7D2C43A11BF6ED0A98927C48DAE1CD480255
96518F398E6ECE6BA551353459CFAF5C2F62EB1535E59F2E233A868532CB327E
FB5C71D6B7267BEE5C29FE92F5C30CF1CF0FF7EBD25DD1DE83DD577E44B2E092
F749ED41F0918AC18908CC43D0F6D5279AFB6972B162D753259242DC24AF5D7B
151D9DB9E638FB9DA73505E989E327680A564E9EDFE09832E8AFE228AFA3DEB0
3C2AFBDECD7F046BE59F029FD1299F6B4D2B2A6F390A24C77E5905AE3643D276
2CDDBD40DFC874A5587C9D81912554A6D9C09862ED13A3765C2FDC2D20878DFC
D7D95B743E654E57A2428FFE3F69B2CD09C7EA93B779B51CEAA99DD780E891A9
5F37A85F3CDB1416A9A8FD142457F3C0FF997C7B115B201FC789C0B3663C3AD1
FF1B617E5676B564BEE567DA79A62435144E2D3E00BF8379BEB3057CBEF33202
27100E77872DFEA21F0B66FB283CE074F5035ACFB53E00152BF852C1A60E5AEF
CBF427A2DB696D2E14B00A4C239902A18152764DE0C05501D43F7BB5B3727EBB
7B3525016611DBCD05709FBB86CB8B35D083F6EBE40448244371CD15ABD6F502
5599AB7C86C1F05106F2CCC0602320C98E67C68D39ED79645013374C87C184EA
A6D22269E52F5CEBAE2998FD7181B7BA2CD284D6552E043C05EC025340F28F16
151D53BD416581DA2604ED9D9E4D7726FA4F767BA6DE26D0984A94EC1B2D084E
A576C9FBF1600DFC500D91C01FEFAB5C31608F6F996674B49B5D792458941D00
8385363511A35EB11FCA6087B461E0E707EA12CBA47F465B6C92BC6FA5EDBF72
562039136BB392AA4F2D66261CFD4BCE8FFD5FA27170C427F8DDF500504E6B21
E01A94E4FB259C2291CBEDABD6BDF371215A3D6F1EF5B34BECDAF2ED1B312051
FD7EF1912B3168A2E845D280ED1756788921280A7136043A068F890E8C493927
4D8147112B68D82BA5BBC81EC7C268B0326521B13F63F8F7E20D0E6624B5C991
8021FBC4E4CF64B43977D06A86A7D71772B348D0DF8101574AFD7DF945B71CD7
481DB4593C281E33B600A408FC9E4F3CD6AA266309E18BB67112CDD2B7B2B282
B6493E17990FB0E1F1C5C362C4D0AA152D1A8F365845B447E82EEB820026E98A
D23494A4AE9E0132F924AF8EEC0FBB682FA73D6020330189D016FDFE7C550216
574DBF2D7D42D42DEA41EE3038A72A0EFC275412F4DB095952596B6D5AC03C88
7720447DBE18D2A05CBEB2E6F6C4DE61CBC2F16106C4BB718F27E1F2FAE44140
B9EFBA66069E3D7944C59B9D3815B73DD20ABE8298D1BE29D91A2C39242E2362
0B2224AA7038E24A2BE5AF81456620E012A9E472BD232510AABA0E2C53D3D95B
12238EAAAE596467E72335B336EB7A9C577FA09C354C505AD958758A8076E02E
57B4B02F7D3437E64728B93262A753FCC4329DF1B8D73EBD0AB101972E383BCB
F4A27D196C7D6355DD74BBD957C1A9E8A9DEB38C6065CE47C3D8EC374764D015
316F55B7162722D4A43E2B6C55DE9F0266BB0D8A08B7159EA8252998299EE6E3
1F99529C04932A48337F5B7C3A87F8A5A8233FD3F43C81F528634E18E3373928
8AF784E78EB2540DF33494AC0952B97A83E3E93F84A7C863BB46F23BE73F6391
5D256CD202A316EAB21DD00A4DDB9D799AE783FD661CBBE8FDFE8B69AE103419
858D306E4DC5594E57576A6BF879A3B8DD8FF7734D90FF89742C2C1738356A1D
9357B5D9D06A20F7D6F26D40036BBC8C676952CAF3BADCF1735686D9855CD3F5
2020516338EF10EA1EB6570F2AD6621E33E49AA6C64BC9C1D7CF9B63C896AAE5
79BFD340E715C287068FAAAD6174264535974206B82BB599F1E4D6BAA508B00B
D652C2179EFCC7375D57FC4ACE5A050E4596DF36423C65E983E58E4D9AE71826
484764055B5BE6A10D02731CEC6EE87A47D4AA7062ECEBBB25CE6478236762EB
307C205473F0667240E89880E689305B15E28A384F8462B61E2898E626EAFCDF
72F117617587B0AFEA267A29740CACDC8927566EDF17F79CF24F77D1149E4D8A
B6BDD89FC4F4F49C0700DB8113D96C142CA5FBB77D55D48082E9709858952EC7
9FF4E5CB43A7D7CAD3D431EDD56BF4DC628B8F6CE6AE4E0B11FB3A1B709F20FB
959C36FA1ED618260656D6D1D0F5FCB1F72A5CC41D3965DB8C4AB8232818B77E
7FDFC5231F06B0CC32FEEB8E516A14DC41CD428B47E98F7250242A26B0CC1AB8
D163C2CD3F8232FF6CE633780A5A28590F6ECEA776AF972CFF7D3D35F3604E6D
C1781CA921BCE8D0C41A55F1FBF3C9BA364266F11B0228EDCE5AD8792020B388
091BF0ECE9DF4715BCD7DD837507CFEE4BFC028DD88F276E62A58F0DCEDC48A3
34700AB3178782A27EEFD45AA10B8F9EA5B46B7D04E480CE3B0854AF359974AF
08F7E80BCEC0358BB71B9F0EDB3EBCF42214085FBADA4F3594371F15EBA0B326
34B88D453AF1CA270042CC6E8A034362CEBE7FF1CA265E16D24D025903DBD2A1
0159BD4E236F0BF30CCDC0D67371E2594E02A1106F41711CB5285F450A00627F
9716CD3BB8C7A1048F93FC232658036030E9B2DB8A796F18AFD0A3B916B190D7
23A9D0DD636B55560A5B97ADA0EE45F730D083FE4ADB1D90852D5078C32B9642
7900B96857A9C34CFC4F6A3A05FC4EB7A3512C79D5E030FB010D2AD92D0A3A92
A75AED4FEE9C2DCD2B5EFDD0AB6427DFF6000A8547CE1F8AE8184BE77D7B7795
D14B3A88CD5D748CE7D7F19F1964640DE2656F38636C05D60C33996324607178
EEE4384FD3020DBD1CB6A3C0E48247A84668D7934AE96F75F303838238C36FD8
0754C438396F29F3466E3DC29141E7C37E8E11388E35F71480841E206E75E429
27CCF3EB1C57D9FE760DA03089D450FBA53CB02AFD768221CF4FD53E69870816
F1D1F8A787F1991F9603F017A175A50CE2A3E19BEAE39A586ADB695DDC55E005
CFD209B6B17BD5CF0FE6AF464E77D6E7EE23D90E529CF47B64F3FD5AB264E0E1
8FD76E786DD68A3B9A75DE01BA6123C04C1E21E251CA8E9D4377A1CE07406193
46809E0E7D878E2D9265B6CA77C04D1CC4F269EEDEBECE85854ED712E2FDFD22
C8CD836378E8812D16B999A17A64552CCE366A9C936C2D9FAAB8E5C10F94B16F
97459F5AB9A982717923C47E40BF0569EFB7903401F25CBD170ED3FD03AF4902
271DDA7E4E2F4C7A3CDD6623697D1798ED2A5300FB2E9E4BD9A51590D168E7BA
0DCEBA11E8A21B0284EDC4D370E146CFB75EB783E6F2D4098E77100333FF6A7D
FB166EB0A9F2CC3F12220D6D3D87F7045CEA49C27434F02CBBCBE9248A951767
3D65E2C33A9EBAC8EFF7C9700F05DFAD235AE6466EB5D9F6C16354D5DA623C51
55827CBE7B4EA9FBC36F695F7B06B08EA42CDF1A4BE3C6DB40FBF16DA55F5FB7
92EDD12756753946B54D05FBC6EEBB2D8AE87A9FE9B7C6538AE0A6CA92D041BB
B09F06B8181EEAE6FBC2BD406C7B8A915E9CF514918DF0F0D05CCD8292A6F3E2
107D9FEB744468F063EA1A001708FF63090E56AB165677935B786BF6CB4DA30D
16D5B923A198FAB6A085FA4F6B075680FB0EDDE442634A9A2603136DABC2C1D6
28FCE113DA9BCCCFEB9B2C103E76F6270A0DFFCB049021BA575ED1D7A231E34C
996481D3C10EC234C27CEDE8D308B99EF100DAB27FF58961203D6501C4BE9B59
E788ECEB5F4D77CF2ECD2DF3884F9DDFCED79DFC10556E7C6C1E24C4BEE19BBA
2553001E8C04192D06F5C8BA72CEA3D2C19B510D8F5B69B68EEFF1EFE4FF04B0
7748EBB21472C97EE2FDD5CF5772E7D3B8A38DD1F49A9615BE1D0FCB3ED73514
C8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.1: CMMI12 1.100
%%CreationDate: 1996 Jul 27 08:57:55
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 21 /lambda put
dup 22 /mu put
dup 25 /pi put
dup 27 /sigma put
dup 37 /rho1 put
dup 58 /period put
dup 59 /comma put
dup 63 /star put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 80 /P put
dup 81 /Q put
dup 88 /X put
dup 89 /Y put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 112 /p put
dup 113 /q put
readonly def
/FontBBox{-30 -250 1026 750}readonly def
/UniqueID 5087386 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DCC57F7903449E07914FBE9E67
3C15C2153C061EB541F66C11E7EE77D5D77C0B11E1AC55101DA976CCACAB6993
EED1406FBB7FF30EAC9E90B90B2AF4EC7C273CA32F11A5C1426FF641B4A2FB2F
4E68635C93DB835737567FAF8471CBC05078DCD4E40E25A2F4E5AF46C234CF59
2A1CE8F39E1BA1B2A594355637E474167EAD4D97D51AF0A899B44387E1FD933A
323AFDA6BA740534A510B4705C0A15647AFBF3E53A82BF320DD96753639BE49C
2F79A1988863EF977B800C9DB5B42039C23EB86953713F730E03EA22FF7BB2C1
D97D33FD77B1BDCC2A60B12CF7805CFC90C5B914C0F30A673DF9587F93E47CEA
5932DD1930560C4F0D97547BCD805D6D854455B13A4D7382A22F562D7C55041F
0FD294BDAA1834820F894265A667E5C97D95FF152531EF97258F56374502865D
A1E7C0C5FB7C6FB7D3C43FEB3431095A59FBF6F61CEC6D6DEE09F4EB0FD70D77
2A8B0A4984C6120293F6B947944BE23259F6EB64303D627353163B6505FC8A60
00681F7A3968B6CBB49E0420A691258F5E7B07B417157803FCBE9B9FB1F80FD8
CA0BD1D8035DE36DA61150BFA1A886439DA8085F829BC607BFFE1487976A7200
1FD380DEA53B21B81883962192FEB53F7BB747426BFCEFABC1A1E8213F7D1781
37BDE927F8AEE5FDC6D4E507DECABF6A44A158CA89FF0C08B845AB92F0C4BCF3
7B79B1F662D3EEE38C7331184791CBFB5F580DE2C9F75CA4EB113EF5A1F35E62
7C166D948262831E02CF5BB04BE5BED36EB2C52BA18EF531DE09B52B7093D785
F43AFCB837DDD66EDD81132E44128EE1BE623EDD5DAA451C9BACE4A515379938
C91AFD5DA7E08065B0A0FF5186A7AB03ECCC79A923BBBD362B788F5C9DDF9329
1EE1DB51811D65D41FF7B1B746A4E5FEE105F0B7ACCF991859A34269ABBCA099
EAE8CEA00259DCC17D90D3E1489973BED751C1233E6D4DF600BAB433EC000064
4D679B9F17FFED44F44192525D19A818FE49600B28E6DE6DD5630777328F56CE
AD97662B9CCADCFDA1CF32A9E980DC7946713AA2B67ADE09E1CDE5003D5F23F7
CC75812D2FCB2475F074A0D44FB46FE4086836F54284D6DB46BA9856A16B74D2
B54D35C997EA0C66A69497113958A7DD2A69D1C3EB0FD63DCA6C50D3367E37DA
618E9C3EEAB30486971398C484A6A56131C3C3E2DB3D9254363A00BFB2F2B2FF
C89E10557D4B2DD52B580C577900DF528AC87138ED89D9C959E23690BDFF85CB
F6F362C146A2D1F489820C8219999879C1BDB510F36CFA5A1647F7F8939FD53E
8295CF9201C421DCC8259311E226886F91BBAA615BBBCC4904EC5B76A47DA0C9
6C755667EEBB7E1A3A82DCD081516E12255B0B8C51739A4DC64F3318F480491E
B93BA365B2C5315C54CE36C44A1F46907F94B95E193E0B895C709956583F3B9E
EF0BE9C9D19D400C49355611A8BFAE2F7ACEEAA3A6E016790FBF04BD750C29D3
22AEE3C73B3D45922423C06E0888C266A704E9FE3297EB05F9A30F42CD6C10CE
746AF260A08625C4A7AD38ABEC2D4E975A340E89D5B9C8F387C9E5A40D9532CA
F8CB30FE3855016682C1848B8E5FDDDAF1C2A3DD5514D26D661A0E2BB8BE5C11
1261ECCB342C9DED86AA30A07E27B88AEDC16651697C37376787E6C5CB425E03
93D18BF329645C5D541B5D071D403BFCBE6FDFB051D0FF7EB3AC9C8263F2AF3D
153DCA227FF6CFC8D61E8D696CD34A96A6D4A986A18157E88AB5F614FC607987
8CB838D678A48D3DD2D92E23E3AA7BD98B17B43DADD89CED4EA3F118B5AA0FEB
C405EF218BB6B3ABF842E8CF64CE2D45B07433F828AA0AE689DFDF4D9E7727E0
7433CC6713E2279C023786D155CDDDB2AD8E9ECEE953AB457B0B5BC56C20916B
3B33419BB31D7244755FA79094B91C7DDA0A8D57A3405D28329AF304C5A31966
002A9FFE778AF899849CA31936D3A0CC63BDA4B053D4558B602546976A7E66BE
7B4A5BF0E3D3FF35EC8292EF74505FCBB6D41FF50405DEF87EB8A05AC08AE476
AE33D4829F83563A231E41618F02A9C6B2BA4F75841E1A7490F14882956ABDCF
6B2807C1B20FB02550714AE4B874E8741D525CDB1A2DED4C93B36E14C8D81B6E
4F16227C9421B3FDDFD7E5ABE5A4969AE6B2653597EF6859815462D6BA048203
F08C72E2501F435DFEBB930DF7F6B8475670387F650516A8FACD29805ECA5400
EA2DA302F1879EB59E17FB648E7827E5469A731E5737C46EF9B2C7F4241CBD55
1FF9E5F19A659D3250B43832429863C69F49BC04FAEA645B788E446C8D20F56F
6C62D7AD9F01ADC8DF7D272EF18A4C9BFC94A971FBA8B7DBB2568594ECB9BFAC
0653B1E74A98C81F93489257BAA153F2A3F9CD7FAC5E03D4AC566645A887DFFD
7A34462224FE23F4837C492D3C74D15570345C120A64269006B3FCE7C26A0F4E
90AFD9BCB1546A5CF42F38F82AAB6FD5F1B913B0307460C865AA2B1C391699E1
D4B78999E939A70E83C739B4F2EB515F8895ECE47EEFA0BE5BD2300430E42E44
0FE2BAD7795661104E733331353FDFAE3AF85EFDBB55A68FB7A4BE3F08D65530
0EFB7AF7FCBD4001DF13D2B6EE5DE919FA258F7BF9E7FCFD19910D481E2209DE
B642AD2420FA052E04BDF14223120AD9EC67130B7AF324C2C68C1AEBBB2E41D4
49F97375154E59CC246793012CB6931E1CAFE2D4D0A075E4E42D3451F00C9BE9
5A08760C5E25A2C1AD9D8C6BACD836327CEE81BDAB00FFED612D940FDEA1830C
910BE437FA99143D847CFCC9FAF6DBEF4EA3444BA6643BCE16C7651E14984B37
AE919F2733DDAC3AD64E18A5E1590568F4808831626D5D2CF393CE1229AF42FC
A60476C592D9CA0CC7FBC62EFA4625D220D6378434D4E5973B03AC6E5233D9E6
45A811FEA63C1AF4974EE2DE1597CEB2151F9E99C5D877BE4315E3DA559CEB55
51244F61787E5FC7CEADECBB95E5DC3EB75B7C45FB14D091FB2F35E93D8D2E6B
2685A2949210DAAD7A1AE774ECE4B4E78631FA7F1FA264A60997C25100E0D9D5
5F195983A180268FE9E963230B35FA7EEA0BA6D7CEC87A49BE11CF60276C67BF
DA3D9263648B01ED4E4686F4AB8076E21000029CDD473C339F98E34205B68186
024CA17FE343B7AF6A9A66972B6568B1C4B068C339940E045E8F98CA3D789010
954E4A2E0B41BF241A938A9469A561D9A975A3011EC6ED9F8330C053483E6923
45EA61A2C00C093C7B092EC638BE57767A55E7A765CFA9BD11BF7FC83EE43718
1BE7BB5DE993D4FB92E53EFFFC331641F2C3F933D289D7C9BAEC129BD9D65328
9F66EB2CDCAD908E3C77622A78C9D5E19EC84C8DA6D106F07F86BEE8919BB001
A1C9D7D2393360B26174351D12020CDD2ED5097659F5EE9B543A088216D3B3AE
C5C841231A07667918E8E9C5C7D13B8409917C51952212E480C1036F3356E9C7
6E1603DD26904722983556CE12DA7061BA076DCAA93650F55FA6AEEDA84EB73F
EC338AF261BFC6DB5573410547F60787827065F14F70E7C3FF6A8FCF2A6F7F58
BCE14ED9667B94BD00DDE718EA66AECF353D8CDAED88B690D4BB0C79777012E5
CF9965B121F4FB7E9C396B1284C382B5C75AE8EBB9D93ED70765EED1F30BDEB8
EECFB8455826DFC5F24EC67D22B0B09A7E6E9F6761ADD2B97E7971A2C428003E
ADC77392C51987B15B511B9998C883E1F9CE862DF4008393345656EE81BB8BEE
ADECFD692AB29778408421E07D2884EDCEA9D77582F95BAFCD3CB01886F01DC2
5BA17D4AFB23AD70248B4B6E1EC060B156E50E7A3C57FE010FBB769941E976D2
2946804A54B9718A9C80110C3C91F4477A684EDA1F6394A5B7816BB1AB1CDA51
A03C4D3799516E01407E8C6C65B791C3710719A1BBE59910F4A25181EFD764E3
03C2753BA1ED00D03B5F50D99F76DDB775BA9E64EE2D7AE7082C29D1105E4544
49D36B19CF28C72F1AFED5A07AF118939BE6C374B210C5CAFE17B4B974121414
704F84578403271F3CA2E3DD8D362BDA5806D4E8D09E15D385A2E0018781D25E
738FA0F57EEF0ACB08DC2FD061DBBDA5AF8CA73C35BB09F7222F3437E058E0B2
F5C7D10328E28DD9FF52365D809C396BEA173357B32740352FB6902A7BEB8551
ECABECFB8C86CB4672AC999B3DE149EFF8AB770EFF1E160F26DD51F69202973D
BD209F467BBC96AAAFAB605B1A9723625E47BDAB250922BA23FD3995302E79E9
55BC8C050E8763D953082F17E5A8E4515B0915068F311B71F21F4521192E136A
33AEF9C5E5A070EC853A79D1CFA321170E3D60EBFB28C997AD05BE74C3A660EB
F9071313BB4B76DBD40D171905B7870B188BEE2AB8AC1AFB4078A61F2151A725
F1F4C65687F89D335FCCA12FFECE1A1C7E69CEB5FE2765BEA67C45AA2412B3B5
2F4B83F8C9F747ECFDDC8D947D2E173BDD4283B5D8FD9997DD86610C1698B0B8
BFB518861A437777C2A0E9C46274E138ABA57B462B6F355A9A1A3AB851CC7DAD
5DEA95E5CB8170774F01A3EBB88DA2EF3B0964FE3974372293EC345C869D8657
5151F899C19F7E4A4CA5A9C5ADF3B6CD07D9622A1E19D9013C403BAB45872EDF
C5097176E496533DCDC4983A439EEC5211C961657A4FE2303D0C4A9C21264DBC
496993AFBC5EE370241B418091AA5B595E32D1A3736E6CF497055B1F0AFB4501
1C575F3A727DDAD6ECF65E14159F1557CDAEB4939B43DFFDC0313DB726D48872
0708D15A4A88C1AB1E7989440040F39DA7DF25F2C778248859DB2BFAEDBBCB29
B9355B469A58164546EBA8512EDFDDD9A3FAFD206EBCFF458E4B0D8A93227E7D
B97CA833064B1D74D5BC65DBDD3CB13D4AEB6E39D893F2A7772FF1A48B6EF95E
E8707122FC65F7DFC5F99FEB9FCBC11073D61CD2E10673D3842AC6EEAFD379F2
0AAD77A13DFEB8E0C392E97C3328547ED9BA8061C49DDA904E1A1097A14CD964
428256BA180D38FA0C1F2650E1171B10E6AFE3BC5740AE07D06C8BDBD3C0945B
93F16B6844481D4348A1AD3A7ECFD80F9999ECF6C1F1479430DC336EF183ECA5
E88513BCC1CAFCD6C5FA882424AD741C05BCD9E80161B593566BCAE8BEFD3BDB
15830194E20D55B24444324F920A248103928782AC2FE4C67AD4CC421D239BA1
C05147D4E881482A108348F052501C28E2B80BAF62286A32385861190169C8E8
222AF09608F6591A46117F9FF95A6D25A81F0350EA47C06600D0B470067E88F2
AE975D8A3F492A13A150D9F7F10D48A22CC300A1E6803F5ADCDBFDEBACC53E91
13ACE26C01172F4D4BEB2B474967CBC56D589CBFEE659D14141CB2B89C2F37A2
49D0DC16275611D20EC541806C04DDDDCD064DE548FDCC2A5BC3913926DAE622
3A4A9F8F5794DC83EA12E811DC72A1C8151944919B0A1CD1D388B598E33FDF70
3F901056ECF89EC1788004B74326A1B1A8BD9D9821EE80F3F6D5ABF6CEAFF3D1
5F277EB88F42BDF191666EA1DA8B6B09E7CD763FCA96151E416AF572E9D57764
D50F730460B2F5F379D6DC33027071D5EE23BD3015AE8C2B6896CABFEBEC61B7
8E3014A407E75AB90A7397148D0256756EA97E6869AE464EDE4BB04DD5044D34
B52BA3629A67582BFFAD314CD94AC6A95A73A1436B9C37B7295955C4C0EC723E
65C3BF28F1ACC8753D26920320F86E2F1A3AA89EFD426CE925D6CA157C9EC1AF
C7320B21F160F9A4A5162A826385B38E0E9F17F98F6CC4CED239A52B6F87C259
CE19E4FC51E581D523D4351EE1D51B1F7791514D4CE7666A37D11706FFAD3C79
61FC3C8DB0F0A7FACD81F622F88EE77E8597453A5C0376D79037424FF618C2AE
9027F4707FE90D41A8784FC3D38FE45FA61293571FCED81475C1F2D8F5CD7520
E9A2B27269C1514998109974DDC77275A1ED83E8E92E91D99468C7F3104EDF9C
ED6E2497C70249FD0C9B7FCC512B33C22BB2EE7ACC78578A0C45A58F25E657AA
96F722A878B6B9059497E13BDBACE98DBA82A77BCD29017A35D1216F59D90F68
2A91A1FC35753E9D68897F63848652BD8B626C3F30430CD9932A8C30BAC372C8
90CA5312890CF4B2CBBF7D51EB0E05CC208FA56A9077A72B7619F3BCFACA4D5B
7EA6DB611B70E6D24D9C5A361CD3E820E87ACAE219E18CC8C78A545037877BB4
610DDFA7CE293E3A82630B9B4347646E9A969E1C30D13BD33F5B685C5D18C661
D5E988A95D6F8D4705A26E20DB9F4FD91CA9E2BC7BADB3600EA3E37CC73B0258
2BDBC48C5F00AD80C41E0093A5CE6BF32AEC9CD4676DB876FB26A63262F0B76E
29791F44FD948C58CD57983BF183E8ADC2318D28DEE7ACE6E63211CBAF1F1678
E5831CC77B09BFD6662311CF81541D6FEDF26E469DB04DEE2890E0A724D1909E
636210B7B7EEDC9C31D1D59515EEF2E567A3A5D8081BC8EAFFF9129EE607BE5D
23F314C2D26E5DB7C48794BB6E8F694F0002CB2021150F10D0FD745FE09AE5B5
A7452C76A624C7861DBD16C6BD033435A349FA7BB7E2259672F40F9DFC653180
B51C8E195432CAF70DC632218BCA18962A49A07535BA28FF649AA5D10D793B43
1996253A5CFA9CBE8B57F7A545B2D193162FED2BCC3F36FAF83F8B82E0D934FD
3468D3D77241AB2ED12B744EDE32DA0345848A90A4A5E46B70A1306AA65936C3
7299396A723E31BF33B3D7DC833CA18C7F840AE39BC859F2F05A189F2DA01D35
8CE3295EE7A43503420F7FBF142EF48393A1CA30AB6B58BE001D4E313096AF09
76C7DDA812BC91CEBCB2335BCEC49A57FBF8422D8EFA793E4F256594F06C55F4
CA439F6F5F068B543631144710907014AB5EEFC521EA32D57010770A79C2A05F
87AE29DC6AF58F825B370FD4093D922DCBA6A156CAEDFCD3FAB3BFE49A58771B
9B7BFA53A3D8A505FB6A61DDD4D61A7B93355EF2C58F69BAA5F2434B4CC1902B
FB6E8B36BC8DFD7D61BCE52F97DEEF9DEEB2BC677A1DFEAC1553D9AE3C01C4B8
109709C32388D3AE693C7E1B1EFCC581EE120A753733A91AA55245672A63BD1D
E1D494855613E41AF3B2568362662A4E0AE3A3A9846C098E4CB3E92F4CBFD5A0
AE323443735FF7E2F572A05E5EA0C3DEC42C6BAE7CAF0F582FA4A5F62F25B561
03B5FD64C8E8A832DC42DADCBF4F32F4E34CBA966087E57657F3D5A0CCD975D8
7823A9850CE1733889CA226A3363913E877B94F6FFCABDD8568A5369AE210B1C
8FD3ABEF4A9568951B83D1C6AED2A763D5509B62528D245D1515387368AB4F0B
5B5F4800DB2AF9B5CDCED89BC07B43B2EA2347EF0BF301606FB36F0F4B388CDA
1226485A36DC5E9B65EE23C58CF3DD9659C988726FB0B3E47D277883FD7B9B13
9894FC1BEBDCF68BDAC0C8292809C8AB9D53746A3969D1AC0B985115C556F323
40FCA286EF82351EE69DF879C2EC0EF41788A3E086671162C02B79ACDC8988FA
8FD6182D87EAC9AD1040AB367646B7B0887F49C4AD97A6713F8A630D42726E49
877287C0729A2F7510B84119B26F5B6107E0F479D2FE9F42DC0C7C17C1B921EE
A5F44AD4CDE25CFDE157DAF97BDD9AC5BEADD7A34AA63458B2657CC0B6030C88
8E74925712927036C71DC9BBFECF82F44F52277582AE1534389E8E9D390FACAB
71726BF0A4725E9A0DB0808F9C786674CADA120E0DCEB5B69AA18CCDD3B4A363
C60902B23A54293CCC4F713C5BB2B244DA7058E9689F9AC1068821057359A8AF
25EA070E3872400688A1B32DF223FE08EDCD34C708DAE42C800F91ACA4AD1016
C3B99329C1542DB0B411DB93FAFDBEA1C6DBF3BCECE49DDDAB63CDA698DF9D9D
E670158BC10458C618CCB009628E1CF019851CB42461FAB2D8E84748A845B187
F442D5A1A48DDCCCEC9527BDDA3C2CC4F5E8A17A02712289A21A09F6347530A9
C8BE1D5ECF3B7A071AB52F87F4187EBBA66D7D6FF7BF7F4561E52827BA6728A1
28FC782D61502AD73DAB617CDDFECD9BDB78A06D7982E3685BF448D652768ECB
E9209700984DB747C8F7A3438CEFC7F4C7DC81489856816BC2B503D5436FDD1E
F29840D53DBC45D683F298061DB0EC82CFA27678C5737ECA92757C89E112D11A
D5C4689D695F2B79797FD37C75A52D60BD569045E9DFC8799517D00B2A8C7883
C1091AD4D0C1B1B5F1E2EAEC63EBC31AC0E19AC4D36A24B6C601752E73FA66E5
687575BCE754A4853393686DA09A52F2AB385EDEAA8ECC6161CE5064A8D32272
DDCF1C681F62B947F3D47A82D23A72517B86717F2E3CCF92C983BC8FCC420E6B
07CDB664E97ACB6A17FE3F2C4BC6B1BF5E376240D624A3A06FB7A0108B264776
203BCC5350B45A796FC4E1758790E4807C70057E726FDAFA4A80DFE477D185F6
F6D1E58E03672344021863688E5858C804315EEBA8D45DFCE0C5743732DEC2F2
CDE624D0CFDEEA647357AFB50155A6E0F6218FFA944E0FD4E0FB7B8E92BE795D
69C4604D4C706CD55E70476139F3E5EEA41EE61209698F2F0B61041FF0C7DD59
1B984FC53274D76AF863393FBC15C71365541CF9ADC5719E36493BA0272FD676
FFAFB84FDA936566E6CE9603385568632D39A40468EE998A8B3BBE3ED69A02E0
9DFC49E326DCD027B9DE73DDC7AB273F7E71B24D22ADFFFE9C6A1B496A862ADE
026D461746553B37AD46DFE7C8670BBF03133C7508A21C273E6BD93F8E3F8480
901A43DC93F580F76D9D7416BFF69FFAFBA571D0FABF62D53061E3A89FCFA543
AED58CEF426FAA303D1D109C2F64CA749FE0D820336044AEF386C901B324D0CA
9F17ED374E526571B040DE3E9D42CBC5C991573E027219300F764E8F4430993F
8E817EE9757B0233FDC3C22345EE8773DD52E00A412CE26E8E26410461B4E1C7
3DC947EF851445039C1E2C4A71FE7C0568D5FDEE81CB49462C12FB78AA534B4B
A30CD2B809FFA127E67A2708F85AD372D08F3786EC08DD468B7DEB9BB48DF8B9
DCBD1E0F5A10997DE323AE4D8C5E2CC01CCA81D77F9E45D8135047BFE5EB6339
67355F669EB05F7CDD5B277DDAA358539D34AC1A2645DC7EEAA113B6A45546DC
0524589F1C0E30DB0762474C6503B094198C6C9431E13EDDE3E1DF2DF6E62FCE
79C14A5D64AFBAF861B2F14E589838E6410F9EB90FC2EE636F5E5D2DEC0883D0
3B062D325DCD090B5B6838CA97E26327BDA8C974918D8B73C8D95ADF978A4D1C
15B0051C6517F7C1F09BF6119FE86C5E115EA54DB0D66D97542D77FEAD940D3A
7D79B4B52622B671E3A5004267D7A19209F8A4602DBC151F723577E9014C953D
1E696C6A8EF9076590B033E3B64ED316AAFCE9408E979DD2BA5CDE17231B084F
C2DEFF7914FD98BEB99821515D78738D0EA5A853B7B2EEFA3185468C65980CFD
A98DB2D5A5BC7706968375AE25E5A3C57206920AE1C29AE706B9A099EFD36EF7
FDF98019A269BBF56C8819328C94DE3625FED575229A3A0919980D818787C7D3
4FF2C8E40CCAE8879CA9FF42794A27FA9DCCE77EDE64C18B1F509F8C68BBE0E0
9D86CFD8DE60154BEB1A7BB815EFCDE3CC496A745397547404C0ED9BA8FB537F
0F97D0D0E32B0FA0C60D57D4C28FD95B18DC366934EF1922FE00C3E21DB23032
169590A00CD4E03AE68F1F5FFE4B6277D7DEABFAC41266ACA8D12B64FF9A533A
A2630DA19F29A609A4D4D7EF2C3C3D4CF93EB82C5C5A8352C86796EF2AD16C5C
45E70941384771B501E96637190DDA5EBA7D9779BE646958D6BFB2DD772B722F
38B0A56927EABBEDF79791B86E8885B8BA3116766DF2F9EB6C134F23F108B43F
B53E619120934E83D988A277BFAD44C3365D79C865C8EE2ADDB07A549FC9A500
438C639EDF9D770D27C05151D0915159467FE3CFEA4603D9FC1621383DF42579
069E66B347039F2B04AAB080C6A6337609301416DBCA420D469E4967DAADC483
4184B87D3F643A9386E4026905826B37F22F481AC6F6AEEC91716D7BD9A26660
8793B92CF2E916EB0A755A1758A979D183A7442180AC877587BCA4E138E2AB13
FAB5D81F41498530EA6452FFEFDA98C3BE22A374DD67EA9F3372E13C5255B1D8
DDAA061726B05D732FEE2DD5BDC02562BF0723CE45CE04F1D8D6CDA983A81F3C
B045AB2C261DA7AB2DF24B832241140EFAEE61E8C48BA695F3B7C6E1D49B1C48
0F60A28FB6BCEF62744A162EBD916E785F4210D8C4B1C42C34205AAD9906619D
26BF75C73B33828F1B06A1B8C2BE04F9BD9F9C5B801FDF157BC4E08E4F55C1AF
48F537C04A89259A81FE89BB537A99A7AD48B118F4EEA837DF194BDCD28DEFA1
6DB9BDC4A9912C8E33D32714DBE51F06782D6817DFE5DBAC0D185C26A3FD7B7E
D8A6F1443A962382D03976DA541E15C60EEBA9CECC8502310BBDD3BEB3B7E9D4
E4E7E28DB064E6B6384BE2343672A1C06F21A4FB38BBD3C792C7DF5BE6213DE7
3675035ABAAE4AA671DEB98AD41A4178F1B630D352FBB9FB54CA4B631EACDD48
A8B63BAE4FA4D0C5A5DA716402FCD84E1B9BE0F4A8149A1796BEADB3E21D4DA5
9773470E3C4A4B9AE3682D34F7E159B6C04CDD3CBC19C3018AD3CCBCAE380567
65E424A72F925DA544E161FF602283B309FC385590FAF5A620F6C0760AF53E85
CB9DA9BB368BC51BC0D400EC040FC2EBB1499335A828D0DF1BD5ABBFA9993EDE
40B6C61D576658AD0B75078D407959A44EC9A01600A1CFA183B4ACC4B37090DB
3B34D467E1C90AD832ABEC0EE8B8E0595C9E29CCBFCC652174130C0D83B92013
2AF4DABD6A8609DEC34732250962E46BD9586C573E4553F2A68574BFED599E7A
3D42E16EE4D3CF116000B5C3582C23A302D3A3D29D35D8B3CB915B6474207013
E9D73525D9546B33BD298289CBE7A664B1ED96CCC9D0A712E3500D8350AB3AE2
51E2238FF562DEF22332014EA028F57475A36588CC21D514149512930AD7D1F9
C41A6F7C2238550A3D5EA086C1208C41FF59958951367ACAB5800BCC0302C81F
AA060DE598CD2ECFF538163C21D14154833FFD851FF91484C8200B2C49B790ED
EA66A1EA4AE6280E9AC6CA4823AFF22EE7944164BB45F6FFFEAD959F4740847A
D619C61AB768DF9FC169BDE3622BF4A3D16979B44E9D8F884E169FBA42084E6F
D5755124BBD70A161ED04258D02A82474F057634BB0A583D28CC37380D6FFDD1
BBDF419BF3702751D9264B234130F4FFD22D6034CA4CDDAC9A101395730C6554
9050092303EE84D8304CCD08F79A7EDB9F98F77E29839A9BAFBF10E428FCA0D2
833458391BE05C1E7432120E01FC82A6C90D31E12369A2F9CD5FA007E528ADF1
73710F67B1B18993E934D6ABB691141B4683B356D371801CD833C1EDC37FE74A
964D518CF442DE7C6F0EABC150D9FC9E4384B0B6EEC42C59F86F58E51E14452A
2DF9727CA452FCE1D9D3D7EBE60E1A6E026E53170F98719CB8EBCEABF01D55CC
F8E397B469A06EE500BA95D3D8E48DD12C04DC59B379E3AF764B8FA5FF69731A
E37C87D39CB94A99A4647B9851D9EFFECACAA855C36CEF3E96D5A92CE06779A6
49D09F2C7300AFCB764926B22A703EC31A5FDD0EC6847F8342CB104E3B07984C
E456A278BE7FCA0C04C061B2CDDDFE9F86C11296AA123F376A684FB2FA045B08
FF3AFEBA79C5093E75C38D9C17E055406BEC095729C0F24315E70BB9A834AA27
BA7EAF0D9EE7FED6EEB05AE9E354EAA5B2314E3CF66366D2C8BAEEE2553B5AD7
822CACA338DFCC28046E5A6FF0A7B068A5191E42C8D19D8D49085A8D61DE772C
6FA63C11A9AF866DD203C29EA2FC77EC0EC37E4B6059526829509BA4253E026E
545615A2B4F33F3953BD56F5202CDC5E555C2E5D298F1DD2FA1A5615E611279D
67A27D04535FD1C135A2371E4CF7B9E7A5D24D08203FC4E01DB59AC65FF5E015
E359AB46A622844FCF92047D96
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.1: CMTI12 1.0
%%CreationDate: 1991 Aug 18 21:06:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 19 /acute put
dup 25 /germandbls put
dup 34 /quotedblright put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 88 /X put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
/FontBBox{-36 -251 1103 750}readonly def
/UniqueID 5000829 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
525003F3DBE5BF07B2E83E66B7F97DDD7CE0EEB75A78BD9227BF359D002B6ADB
8AC57A33FED4EF021A7085B1E2B933DE602F0FF71467ECD501744AE338AF29A0
26F7D368AC6F25CCB882DB7B7343566192BD687E1349225982823027D3B66703
3B0DB7A7E680A682B98023D39C7FAE81A5D5B867A0A66C8AA0DBC83B1596A84F
0436AC6A7900B767BDCCE0060A4811003C79FDCC71D73F7F2D0A6675E93AD21A
56B4CD8EF75EED3DE8C0A18BEBF7B9D1BE72504872D56EDB272F1E97FC726CB6
68C85C713059DA19F6C2E0F3E12710A59B6FC4699AE883DE8C8615B7292AC25C
D5714B6CFB14EF0EF11EB13009BEBA4F345A5D3D6D9926ABC2BAD7DB1328651E
437BFB3C46DA7B62219660FC368CF3D3704DAD3AB461C28F711665BF484BF61C
052093D231CA65618EA463D63E406ECE858D180A6C0589B2FEDC321371C28E77
DE974D655DF5FF7D41ED01FE717D928A885F6FA6CFE4D2C0807F8E7F937916E0
96EDD1A3BA67802B1F4A49100E75613BA0356D9DCBBAD4DAB3C59E70A47058F5
2163D1730F0EE4D1F87C3A4AE723A23CFD7986FC4FBD399347E9F5946354E013
D860FC446AFF0B0744F5DA27CC777C96ADB388D1E835DDCBE123FB517679B9B7
EE5A3DDDCD392415AF58CE22EA55B7F47031138C6F27798B40F7E18FDD315912
BE99F33ADE0FDD538A8A3E5DE58AF68A54732AE69F188F3F7E0458D848205648
CBE820C287ADC2394520F03BBB97DB893F6A12154B1B7F8626D35CE6B70F8524
CB128DE87821A0E32F1E825F6C50AE8B4BE37FAA3183BA4D678E896CC7E61CC9
D0226FC38B9CAE0939D19149D987979B96A86EB69A105807AB426639292FF5FB
EFF0817FCFD5E514788CB90A79EE118BB13E567FD4CDE9D9FA4715E1CE72C6B3
C088436B812109987C503B99FE1539383F7A735B41794C3947EA950B8D0F4A94
C9217CFAD338E8AB6FFC00EF4792DA8A3D0F2F76DCF57456BF65F9C315021830
A06038946324D8E6A6A1FC1CE39FA3D68F830A197872727D1D8D88057180E692
645D46E91B8D955262A0ED126C451FAE197E78914B94C494ED627CAB1E8C014F
AF206F8ADC7F46B4DB05873FE41EAF1F68D7B9BCBE3434A38EBE435F6920FD5B
DF2C54A3E0351ACE5AFC003CF8A9C422BEB4D84ECFAE5583105FF299D0CEED57
CA1638E7EEBFBCD417D75D84AB90D7A63ABCE91CF897CC79E94C8650E86D4025
16010BE05866EB1C00A998E3965D318593E6A10171DCE95A06562DB172A2B5B2
58C1DD3084080D619365E2C698932DEB3D127E4C3E56A171499525F2F9BBD809
2918B8571506BFFB59ED502B9732268AF9E965E625D6C9C0809E3D5CFB202952
EB7D8743510B241CBFE455C8848DE490D5C704581BB494CA812E3A2DA5FB9DF7
D2BCA85F34D7EC30196EC654F4F72D5C3D1715F1ACF12A720490AD0D1C23CECD
043B6000C7A0391406B1726FCFEF47C08D14EE4FDAA2413ACB238B4DA787135E
D39FEC0453BB0252A31D63601494555446832343F15E145A826D9D7E5692BA48
049F6C081DDD7503A526F86510CFF76214AE8C44851C0C9B60CFE42655295BB8
C2FD72C4A5EAE996E1CBF8B17ED801B7C1E238FF64DD2E0D521AF356402FE3FE
ED78EA0A6E83509F8599272F4B2A831DBC41D2F28C03EFBE94C85B11718B8FF0
31C4B97C06689F43148B891CB02890FC326F2706C6B668F36D2A739E3F7F351E
407316DF161B282E688A9BE54FEA4BF81A499EE90A1205EF7BF2331EC9AB27A3
22CBC11F5F52936741F07BBDA1F358D3DBACDA68E653763471AA7BD97BDBF2ED
29B83B1B85AED39284AD7A8A5410C64BEC5FD7CD6C8A181325C2A02B69BED120
2BFD69F2EDF967ABE001FEF78D6EF6E4B7217C663A121E8CA50404D9AAFF6F22
9CA61DD9E07BFD75A8B386ED64C581F3E2EFCD15BEA7FCC9D653C9B52990A719
8B4EEF84784AC0219FA4B7C54392DF77076862FF478D00B6CE4B6F9ABF28D092
CAA69C9E1EBF7A28531012E65435A0CA89DC4B2C27C53A36494B82B2669C4202
97CB77A5E658E0DF32D22B7217FC05E9CDD34CB7DB2EAAA1D0DF06204E6ED9C2
414EE047862B6700CA3FF017651FD7062E486933D81DCC603012EEB0FD5923B7
200E7F2444C5CFD97221418906CE25AE32DF68070704152E4AD9E78DB12D764E
BD926C68F4A8A77666EC12A92B2C264AF0877C35DC351D7D5EF3CA8F7FACBBC8
732E65EFB939147A80D9054F5087B22DB02B607705C5217E4DF48BF5C50A853F
3580FC578C716C9B79ECFE7E0248657BEC0B1A604B952B803008E06A23AF3C72
57BA2400E2444FD35C8D7E408647AC826249BD4A6E012BD1218F11FA876964CE
9C2EB8721BBAF19E6F01D3987DCC15D64C830288DD33179CE256711BA3213651
330CBAD8325276E5A294595A0C60353D70222B93B18903EDD8BC9574468E5F32
E14E7B0370F520F980F73557F3057291F5198A011D263A6BAFB1A05E7AB4D507
30E3B9DDE68952D41516A2478E742990BD5770D00707BD95744335EC6479DFE7
B19E5C56C06774CBCC0E49C63EFD9E701083FF920A519B77E792FA806C0D3248
F1C2C7651C7F9F99344BE33FEF3789A49038192A53C523789E4B1A45B535A5C0
B15A4532E4CE6CFD0FA33ED619DCD53EDD1349BB454C1002CC16D251E709F083
5AB666DE7ACE6A770549CC0ED9BF6653494E55462F94798A957FD0420D6C9751
8E6CB99E53145B2BF700BDF8E5B2ACCB74BE90DB0AC2284A20DC588F71FA230E
535CD97BE8280B5DB57F75E5C4AB88CDF89107DEB18AC5AB6D349875EAA83353
F52001654E9C7F6CF83AAD2B1E403C99D994C56E77C4BF5FB9863031CEA77F04
85B5EB23A703FEBF42D32D26B175E1602A13CBD56D61A86F9C0DD59533299F5A
45C9D686C26F8C804A5655729627AB5FF332CD8C11D496BC3D56B95558FECC49
AD0A0D5B7715C82E9DB0B5DDF6874EAF2163366BBF72D3681346654BAAF42603
63D1D6C84B053082811F08E79248C4CA14DDC6D1D61035DBE07A908D2D05D1A2
9C82838207BB4F7781B13DC5D18E7DE5312221554A380D00F1EA5032524357F8
5ADEE5C6A712DC361B9B70DCA44CD3432FACCA3454A7972A903C9BDE3E72F1D0
029A1D9A58D4B8FF975F7143B8A90DF764A65D3E3D85709E5A45C11AF58BB705
13D9D99878C47DEC37A38E9E4F152959DAF8E29DE0B0C4A2E4B0F4531A4C79CD
3EDBF60FF8D07EF89885DFC0CD03E5C82F523E8D3205F4A62E1CA258233841B7
95A4ED86A08961A8BB180EEC3295DC94B1A6231FCF50ED40C99BFC254B733955
5E89ECF368DB8579D7FE9236EB33721542AA1CCB1865E2ABD691D001249ABCA0
47E91252CDBCB45322876E939658294DFDFAFDA917E730D26D377709555F7819
278B8D1EB37826AA04D3AC6263369CFC7EA6C7B7E70DA69F76B7C8E238B52A78
29B73B030450B249682E4DC6D425160CBF9C5447FBE42C47AAB399BFA8F42AE7
9C6B9AB910EB2EAAE9C5BAB7974D5EFFEB99B5F5FCA005BCC054A2393BC8008E
91CBAA64C996F3A0F332CD19167967613BB2D4FAB8E1A4E20292B757967DC03F
EA6AB1C9D02E570EAF98670B9EF9762F1DAD5EA0B28361DE5DB9A21D28B70950
07E1EB272AA1F9CE4CB7E3F2DE38AC603EEC4A3A89426DC433582600DA99F5BE
D519FAD89E59D77D0A2A54958BDFD80522014B35D8F10039E522FA0A20D18ADA
D20B68330F9C58F7AFC415F63B6FD56711E139F114CBED7B3139FE2AC4675B4E
D203AAB3A2B1B88916C9EF58234EFCF457B68AA0353FCEA5D040E56CD6BA270C
EEFD7603881B927D9DB99A4C9307A807DF89A6AE2A3D4F8E69E72AC429533681
E6B824F1F46DAFEE9357827B6EDC4D5BF82E17DEC8E60EE3CBD7F35FA1BAB25A
BFEB61130EF44F2116298DF6959012955A8C7CDFD421D649DB51D602697D6B7C
1FDDBB71F8F7D5A11304403208F09FAEC3F09EC8AD4F3A10C3FDC76FB42EE3E8
46EFD26083DB0D05016258D62224B68E8DEE761CFCDD507301F0F450739950D9
4CD194B499C1C44CEEC2F4397907563F9C616BFE6966EFBCE67C6D9CAA09D4D3
1A0C978AF14468F2A5054381C7C58174C4C9DE61B8ED193017BFA1121375D7B2
3AC7B1E5B0FF3029C64887B06B38FDE9EE40B89E108BFE8FB32940D679CB9826
96C87F6FD10A926F4F1C154505BE0C3F5026C53FE9012923F486A62CB670AFC5
31606227133A4313C5E94B1168E041EB15812270954BA69155462C506E855819
7C37062B838022B7CF9CF84071DD7FF8F892245F911A98172975488021383CBC
E408019D574D86C56F83978ED1F41E10673DE3C7AD4F85BD963108D6C1D1C210
5693FC8476E5ABBDF010577066D9C9A0E55EFA1BCA8695F0C67AF9116A308C3A
0513A5E705B8E3A07110D165A92B29E8D7CE0EAF5AAE5EFA0E23DA1B8E0A5BDE
1BD58895DDDC7E7D51340EDE8D01F7DC57E6D1F300AC773E5AEA9E61D5F5741A
FEF770AD71AA1D117A785BB08F34B63E856C10078CBB69090DBA4B118517C202
BCF986337681B643C98730270387D2A7BB1750269105BC472C7F8069A330BACE
0C329754FE60B41003F042291703FBF6748036D0DC61EBBDC964D716F25F4F79
2241AFA8012B45DB614B26C28B0D8DC49BD5AD100C5DDA94EB212BEA8FF7436D
E647C4874E56A911846BB82E9439A9C0760BC52AC1E055D541E70EFFDF581F1B
AD6081292221A4916866DE72F8F065AC4AE01287ABCE5610A2F3533184938347
C5E44EF5C48049CC2722EDCB23762F5541BFA77F6229E467FC47D4094F254817
56AC7D43FBE1F17D6D777B56875A310372A5F9CFECA24D8199DA6A365BC79655
CC24042439C0D058BD963F5C7F2A371DFB691A879C3E7856DE1AF31DF99DB4E3
C603401480069E29EDD94C8A02DD923D49C1B2785AB64B1D29A0711BD181A2EF
8CCA84AF6F134903F451A9E0D78741D62872FB2D45071B126AE73B6197126468
07036CF123A3062696F2AAFFBCDD35F05FD41CC1D2BF98246090651512B7FC77
3468117976DD6F62166D0BE8C06B4ED6E9417E0BF4C0F3F6DA03AC614203C866
25A5D3E325746DC1F7233F058D02BDBFA8F34574FF315C323CD99F79CC8317BC
A1095660E9C4DE5895B006A71BD91F6BC2C48B7306970D50979B27BDEBB293D8
8B951956E50C3AD8E584F2B66C4DF6399A6345F3165B44AD17892A09D43C1F8D
BA0B914CAE02BEE94EF468CC6E6D7690F25EF1BB6D0A4CF6DEA8A0F25CFB3CBB
E7AE12770BF7C78D86A2921C9144DA32DDB2DDD839E29398F286180032E61955
8B927D9C0B892FB8784EF810A055D235A79F37BE4A1942300F3229178AAF7F87
085E98DB70007026F8BE242420BF2C4EE09FA2EFF19C3473851376BB7463CDDD
2F9DAC2642001D72EFC90443D61C0D216C7E48C3AB062A58C7BB9E01DE81055A
D450585DA070F658226814A239072333392E300BC2EFAB288C0691ABB566A242
7EFC639ECE552B84F85DBD5CA1BABF595F8C22510C7A0626B52919ABFBA6581A
9955B99F10E6553631FEE2C4B52526EBDC483299E5E5E62F4A94BD0BC52786A7
8247818E27DEFCCC2FBC8316AFDBC699200C82A8C7B0B6B2F658FBA610500C16
C2BBAAF0949F1DD0FEA242BC46CA6E267D461F3400A307B8A1DE4083CD20139F
84963F48BE570A85565DAD08C1B883CA3F9088173179B092CDB8D9A1886311AF
4EF08CCEE467B5F2DEA48A5F0796F51FAEA67F2541A88D478006A3470787C1C0
50006D02947797A27A4B30583F41E90335149BE4142B62F41293C3162AFCF014
F49B41C0DFD3059D1681259C604938DC1DB357EBD4E48603C38D22905D26D2F7
C16214BD72E38D8907F275DCA4799ED929F7DE95DE92DA4B36C747E1102856F2
94EF4933A605A86BB67CB3AF79FABD60535E323EBBBC5E6DD64086A057F51D13
3B7F675C4B210C068B83959389BD50FF101EFF36D66DF8E136C9F22040C4335E
F4AB1B5E2328E93DA39150D6DD4E9EB6C73B513DEF845B0614F3628F98952F77
D25F5C673D0199B95745A2A2DCC9E197AC4A937CA9416AC4AE098BA2FCDB3AEE
7B8C83A7738101B0FCA39BBA4ECE62BE2125FEA74CDD8AC412A3CA8438E1F0A5
F49BC857B34BA1F2DB0C3C16D4AE936C2ABB2C4142626AB13586142CBF779FE5
D4715F6E792E79BFBF83EBFCE42FAD300F529FC008934BB897C738039C170E9E
B39278245537023F4FA650970C3EA2A356745BA0A0812065465A166E314FA41B
7514D482CE24CD25775832AACC65D9CAC34659279D5032A59C55320C62300F65
1C1AECD003ACCFAD1FC7F9BB45F8F6E60F9FCB3BECF0892668F5CF61738758C0
53696836F42AFCA2D7E78722F84C332F6730A8094682E7A88007FCDD11363BD1
279587BB598A95DD3C66E480980A7D377E76C6AF77B8AE04BD478582158D8A46
09DE602DF46BD5B99E1DD33F2F107F46DA20CE3E9E6B6DFB2D8FFF3945EB2C01
B8CAF8DBA2A0104796AE3911595748964C1F5D579A891DFF0C1CD9E2796AC08C
A089F7C68A03BE1717B6322BB746A3C4D14A1EE19883B81C8622806E12F94B5A
E870E8182453EFB3A923638943D7A9E2A34707414C3C5ECCB9431153455F6C41
C3779586DBF4A0A2C68148710EACC93F2108BFB382E22784E95AEDB764857C31
E7EDFE66A41F2249AD1C975A2C2E0C9345BFD464BC69F077C4D38094494EC695
BF8C1AC1A0D46AE9F02E3A1DCE7C15F202831A8E6D2B87313D2408398DD42990
0439F831252DFBFBD265523860261E9B94C835FD6A3D591CF4FAEB54B09F27D0
600E4BF52091E41C6697A15B46B77BCBA26D321C893C5D3A6385811254BA398F
93510013EAA06950B9CDE9FCC6AED16C067AFDAEA0F979AB8A0EE521E13B174F
A16EC7986F885D39480CF0F5BD7574A933DCE9F796491A76C8D4459387B0BA0F
46D3A876E17CE5DF468D7F1A32C70FC0968CFE5DFFBF5AB3EEA13A25C601D858
B7D0E1B21204CEBD82A78AF4BB5E32867DCB71ABF77AA433D20D4CB3A5DEB4F8
2F7C0E09C335AC974C843DD12EC3E7CAF467B3BC9B2A71835821944FD21A54DF
9C3484A0275A7F94CA3EE6FEF9706A8A00C210D66131E4BE0951F7D549BB7013
5101CD72058AE717844D4B2D38F0FD7128DEAB5BDFCACD3A513D8C0C288733C1
8C925B9BDEC67FF898A5BE6C89080C80D355D9C107A7D4BE0749233AAE02D2F7
F05601FF3C05CEFD31FDEBC4C2269720087A3E6B778A1AA327CE22A9B9994BEB
BCC2A303057C96F1F31C88C716D34A535A518AE09CCBE3F9DBEDE495A52E9947
9197BC877B0B3E6C2E40C95203B51172C049D3BF8F9393A56CE84D002808DC20
0CD3A6FDB9CC55E3BA764A30C2C09B2BCF69FE080BBC5A3374E49B9850DD7A77
35246989E383F9AD0A8FA5FF63732C8FFB8406DEADC728A2C6D1A90EAB2AF2CD
FD91133275DF3B39B688B8694FD75A53CCED5ABAA76415C02FCC68BCC3C73CE1
4C2112BEA24634A3E769F96047FF7451A9064FD2FE2FF8A2434D5E3E7D37A184
2CBD8E661C8F2A610791788796D462A6263C9DEE0C8F24E4882CF8C9609F3CBE
440BC0BE7E002F61AACA5D35D9F73E86E10D814E34365CACA5DE41CF29866669
5D6C03633D94A1F1463D0F702658C0ADA675B6694D062885E0FA68BA2DE14CF5
2A82B60DAB283440C06AF767ED3FBE3625CD882DDA7704B13FAA18A9334BC44E
3A2A5C7AA27623384E5C5BCA90BA298EDE23831718C5E61042823A64E617BAC3
5A3F62FEA6C1D69D958952800DEFBD7EB359109AFDD13FC67B2A154DDD930E4C
387DD36FED6C43291826AB6D2F3F521FAED4BA62C15162512E5F4DF5B7FD0DDE
DD46253FFE1EC4B0281BB05F71CD0FCEDCF59C3600CA364CA09E9FCE9C89DE09
8CA06C3047390B4DA655E573271C1BA0431EB4E464E18AFE30810EE9AEBBF1AF
5E7E136B2C9B3269644C5CD828C0F86B3CB7700C8060F0986BA5693C95F38032
85F01310ED7BF334597F226C169306D5E1AC398490C8CBE1417DDC159A10DBE5
EA7138487C2A82D24084F51A2E8271F60E96B9F3228D055809D1C887E26EC84C
E860E484C2DE1ECBDC0E2641F9EAE7D90314DDBC8E078D8F0BC107F77482926F
16A7FDFAFCE132E476DDFA7509E07CCE50AE0280F5CFFA5A74B4716C48BDB289
8F34BB749F237DA8AF4351DE5B1236D19C68347E10E08BCB3539B990BF3067C8
E929EA8A2D0B8421B29932A4BB6C6D527364D4F809282C692D28BC17764EBB99
63FA370335B20A3346A97798615CEADB9698DAD564B0437C3AFF4CF1FBDEFF3D
CEAD360D559D55B3A1B89A9C5570478F2BF2BADA882AF2A2986064BF05FE6990
55ED48526936F3A5073856B74C2ABD58B4CF4874804C95FA926B035A5672C26F
7C6C61C68C734FC789E9B85B7FC91B7C08C7543259CB399EA53061407AC07E16
9109CC8C9BB12101AE5AEC204BF6F34C22176FB66DD5A9996E2ACC5ACBA08688
46953215ADB7BF6B7E60753142D167C2913EF405AE7CCB233434437E56AF56A9
F4EA7CF3C8E2AAE4D353CC26060690F9D3BDE5297EC637E92F586AD64EA80B5B
73788B69E2D47C097D9A00A581C411FF0289A8A198871065C4BB0B42BCA752CC
3726D715646A791E3D27333E1D12B6770085FFA2FB99EADC239C86DFB6764726
5A113366820B8D0DEE5CAAED67AE9281C9594EBEC5EEED3031CDFE335BF190D2
39BA41BB4B16EB732B4197628DD53092BAA0AB0A8905033420DB8765B93ACA92
9C77E7350B9098AA55B17A63279AE202D6FCFCC3996C125106AEBF7CCF9C39BB
2E94A4B33705E98E5E74EF3DD441C89F2636AF2716736DD1A725A9B001C5092F
50FD976C27442EBA41D1874EFD941E933EE2907FBD220FA305DBB40C2D8EEE84
B1A48CC043538D17672821DBD24A5746541944D891BAAAEB2BEF9DA87C86DB06
CFC6116F2D1B14198CAD3D171C8087E11DB10475C596EF310147FFB9F7665DB2
2E43F0AD860A75CA57CF1F1EA9AF45716546B7AA68FA74D0718A09D826954432
5267781021410BE32C632FFA06AC384108140F4DCA228E0FFAE6BCC3005CAE02
305D9BF628D957C3182476965030AA69652572058E8AA2E0AAF77382AF182938
15DEBBCDBE2D009ED1729BAAC22B640CE406F244207C7CD27CB787F17603AB5A
10532188BB844E4C4CA1F27A021ACFD6FBA93BBC7B74D8F770D73E25E8D21FAD
D2A7D94AD658E3B4015E18D8839A3B47567D6B4BC1C7FD913DF72DA5E596EDCA
E78816E2925AC0C8BF71EBC40B1E829C0819D4839951917EBDF810702B37D556
06BABABF4DD6617A0DF6984806C44DD841D4E184A6E3767EE26721F75300FECB
3EA14915859F3DC764EDC705E8E8F8F321F0A6FF9DD37F7DA6AEF70EA5652486
9BA8CD85FF2E97EB92AAC88F4BFCDA7189F5E7044C5E0213780A72798DE5386D
D887CAA43F768839E9F8AF510AF1A559E87212A70841EB78FE2057A38E2D36D7
0B5E168C6B8B65031FB5BE72B7FF1A33A3612AB51FF85A9FE3B5AC99CE3399F1
0FFCC422602B5C5D00D68CA9E3AF2B05993326616387AED781C7494325B8A6B8
9E1554C75323BC003D494B1170656D451467CFD9E072BFD2C45FB4FF06004687
7380F9F05D2161D6FCE62A9C7CABED4639FA1CF749287E7D37ED54ED482C1078
F4683D5A2EF97E0F464AC093D35860B12FF79A134AF9DAFD4B4795610EBBB045
FF12D9B9AC1890AD76B5D4D88E69D4FA1DAE814128BE8B4DE8815343BEECB383
973C23C879DA9EF41D654217A5B2C286827EF8B1DEF062CF1C231DFB4D366355
68D5ADD764072C807E14ECE41BC4C84FE1568AF299E1F9FE48DFBC526C426049
64F8096D2B780E66D8B2B1C2B35CE5688DAECBFDF1F591CCA17593F01B4B5953
4D3DB40B5ED36139D34BC1C05DA8A23B23C113427B1B9FEB1250536F5456BE3C
B398E69EB78B7E5A686425BD154642CCC44FA3C3BF21393BD3BD6C641AF14D94
8E1870E8CC7479433B972BC920F386B63AB4DA6975D5DED25B0CEDD73824CABD
99E7613F8F78CC322FC9584BA448C31892A3BDB79DFB9867C123F9ABF77803DC
AA70EFD4EF2A7CB822831287DFF91EC2413454C0BC71DD73EECAB5447466E008
FC609D74E4B818791F1865FAABBAE8D9D669ABA4C48C23463D69B4DC82847E3D
61FAB3EAF16284C6312B923BBE5C7F0B90FEF5416E9D314277819EC56BF97EA8
1246FBD9F4F0FF64FC96C606AB37B05675314AED306731FB65E87A2C3A37664B
E315230A18B1D6A068A05148A44160C4D68F63B1D0F188EEA2453FD6CDE72B94
C8872175B96F06FA6E826C727B4E02B207F0C9899F35529A0C6966A8A39BB6E3
7DC55984B194641A90730436BC5CE1C305E6FD3433A511EC1D4B1E9EEEA1A98A
075CD9D4BC788A52AABCC065CC83784DB51A3B97610757327C4824E63FCE5C67
142630ADE0C3C16E647828FD10C358902D723A47FEDEC2D6AB908B9768DD944E
B13B4FC63092AC9736EFC92EA8F05D03136B698FF9A924D5D3986262534C6AEE
C3DA8918F472E4148B121657580547294E61D0B24D69075CE7FB0AF37E875B5B
C1EB33609B075D510B35CE9A9478D2F15844B4790DD56D0D74906F4D076F7037
B329DBC7A5E93336A2D7C50222F51658A79372EBEFBFAE457C57A318C74835B6
D803F8B449C94BEAB3F7687F68B937B152F6D645610271612599EF40FA8812FB
3D1719F304709A90F9808A1023912C579B05CECDB4AB27B48F4913337676B7F0
7517C0F30E4109627B86163D77A2C3CF83171F96143F5A41245EDE1CCAA15A49
C097388B310F56BBB3B79D3E27E63C40A4A513D887D23ABAF69E52794634A291
0F3E82E876EBC3521FFA406034BD9A67A875BC5BBFE5CBE1A6172AA7F9B32055
5496026A88F9FB7D8275A8C3247C80A87EFC77F7DFCAD9D6CD22661FAE8ADBDF
CBCFF67F3A8D30DCC9E086C7A27206E76F9387AB29B968134912BBA601AF9AE5
5010C7E275A0AAAE0EA77FD09A70393D627356B7FC23BE84B6F041A46269C5FB
55BE9B7ADA4CC2562EF996BB3C869F55B02EACB4418FA13674D75D3A9B3BE969
7CB51C02D0D239D3A32ACD50590E2073EAEC3BD5208299A70CB849BCA357B180
CAF19FF8E5F1042AB90BB63C839DA92F8036483B8E0661DA9B4CB0B6FC201F0B
97FBC41E40644267CDA4868670B9AB3D19FDFC0FF5035BD0044BCD2B2CC1A135
984DF8A66DE0070931BC82B9264D0D382E93066031D479A2922BE783288B5524
3786DAB1539A8944775AEB834E9E8595AE73B16333FAAD7F94D9B4AD1E3555EC
1841F8A83059E133F77FE5E752BF060CD3743DB8D74B49F3BD4B9FD6CE9E9E4B
8C427A3AFB4E045A5587550A41D92524165469E1C402A3D7068CD2BE228E2854
438E6A72359138045AA6B09EC689BDE7884A3C30BE65A5F766FCE356ED1847B8
0627EE93ABE661D1A181E7F77375F690FD49D3ACCB78AF5635F47F0F27600D9A
BFEBA3F77E99F3A4EA3E3DCC901E67E724FE9A049EE7ED99AD1FCA27EEA48958
971BA2118E7011448A733FC8A1F9555727CBEBB49458121CEC85C04855D43AC4
066C9174B2586556D6256435EB4347BF3B2C43B2FC1F587D01CC2D4313E30D0F
39E6977B58FB0ABA4A26FD21FF80F8F54B1D138FFBBED602BA1B7AB9544E9A4B
016CA31076383706BC43DE4FF0390AA284263B12E3A22A28B4B9528DAF527878
B30D1C81B3BE82ACB18E8423043CD8C1E1F1A996D8A32E19EAEB91002EDAF218
F7C32CC6A8DF9B5F92E10B786647041D4810C1A41562DBAC9AD12D84F0DCF245
7CC8564916760464082B41893B7C05C5CA80BDC424174CCE1C743D0AF41ABEF7
D9ECFB15EEB3DEDCE52D4AD8B03D83843AD31A5DED672FDCD8A9EEAE14421E70
CCF04141EC6AB1A4B21896A657CFDE5130B507DC53CEE3B34C24AC7B18774BC7
BCDE644990C15BF3625B24432A1C8D57C631CD7EFE54ED2EF45AFFE8151A617C
47D7288707E156691960DAAE71049BEACD6C8DAFED95DDFCB35EE1EE6EB7705E
83D18FD37150E43E94D334EC7E973B29D3E31205B844C4F05F7FE4C87F317DC2
BA358AA05C055DF5757C07ECCE63564AF2B08442F5494E3100C8807F18135B04
79B44CE1DA28100660491EB193DC119D0CD93BFDB3F9448ADF0EDD79A80C9363
4544A55C4C366916CE3593445E9552D0C45D22866AED6E152CB7E5C104BBC51C
21B818CDA069638A3BF9C30739E476EC1AFE7B33A8D90E14A09875AB449D092C
3D28A30F911C1FFF8487882BF535613EDD43E27FD8F6E525250705A19E2DD82A
822813B0574B46C531DA7BF8BEF25802DEAD1923130E37C3B31764F18ABD9922
78754B3E96270A86C31D7E2E2EA13341DB263F93C08C91451CB4D4CFEC902743
F8C9CFC0BAF97C3100D8434EA2ABD04E7CF8F2E094B9B5973F4E31E246F6D4DE
1BF546F38210C28A1EBAC31C7F0AFEB21DAA9F4B44E5B2F0BC1DA670666B77EC
E9F54996F9753FE8716F1A6525414B8A54567F62F2279400A1B765054F1492DC
80C55A2955EDC3003B0FF0930ECB7CF23E1B01AEAF827E35F54495F38E69DB8D
13169A3EE1CB4A7FD494711BBC43CE5B50125AFCF88F83FF094575CF189F3895
873B942B489B51DEBCC473C93644358B5E4FC6FB64566A511D23A2B2B9F72217
17A9FD579855DE30C50DA4458BEA66010073410FFB2A1081807B54A07B4CAB44
B4D010861A9A3CB451ED98D738DC104510603351F766A9673C2A8954A9894B60
E377E5419F5A8A7891A506FB0E8ED14F193E9DBE48188E0CF723B8D1770C07DB
DC62C7755BE474BCEE2C7BAF6BCCF100882D851D52D49C74EE94B4C24A2DE947
F8FF7D542C6358F293ABB4724AAF1F772D67BECAD86BC5DAFC3C725469B243E1
066C8222F8C55F4F0334F77632295A35BA6F9FC47F3608361A54C7B47E9E20FC
BA6ABBAEDC347B981E5FA71E4DBE00CC1CF7470602446D3A1266D61049B21231
F01E7E5479C343DFD061B7B0BCDDC76CF7FB12D66835AF1A0CC91A112C88BD79
CEC0E177D1270A4694E61161CFC7B24921311BB5485E3A77F716076ECDF3A94D
771FBFB496EC9F2833E2888A1FF769536062BCF764871C3C9E95470BCCCE0914
D48C29E28A5DF23C6B561D71B836BC463F982F3D99CCAC0D0FEF1384040F3B6C
A989770F47153D2C871655F67394247B6B24D723F2BFF39C4B7C6910DC729F9E
FFC192F267B62CA2126C4AEFD187F638BE81F878DEDA5E0BB39A13C44D9000BF
8CA0F82E227AF0F4E0FC19D124C1DB97A4361E4F807A09030E4E144CC1589279
3FC94A2707D7E4E7D0BD7547FB66A636CABC485D5CB36BEBB6FD52881F0651B6
8977764B9EB2949DAF1452EF094D3F0AE3782C56E9F245CD0B03D2DABCE9DEF4
CC7BD43D86374484CB0AE5C5C262EECE0EFC2F4F9B892E65F81C61664F098AC6
56FB76E5DFA99E271981446E610BA2D127CBBDE325BE56E26E53D37FA3E94D6B
7B74FED67837B23B1299CC09F1ED1F7631A4E828DB559E2AA833E865668C7910
BB553297056C330ACBE6374A35FC6325B22E81B8D9C994EE1327D4F85A6975A4
F85CD51104FDC6B013E514288E2F5A0C7F9BF33DB95F2A55FEB7E9E47D1EF74A
88173CCA4EEA4E3D734DD7CB2EA6BC51D8315B49C02428656A76904759606685
31C792B395C104BB3BEEE7B2EEA76DAFB48A9A294567F3F33F9800A78A839D3E
FCFDBEAF6CBE56937DC4E85A7A9CBA7C6FDA20978A59B9DE0A1E030B636BD1B0
0AFC3BF9C35C1EF117E6263EA3CFAEDCB14DEAE53BE5A763A347BF10101A816A
38AE95A39B4A4F593442B9551A4DBE5B51F50A26445520C83B04734169AC38B2
91CBE1139DF32A73E84E053F52B585B672BE7E5034AA09020EA6957003C2CBDE
C0B10BC19C0D1AB73E361FB93F8EA8D8EFACA8AD0174651FFABEFBE05CA621A1
62EC4E1607B0C62D1A559B25C7017C6840E824A615A9AB736BDE79350F853B5D
05DDF2141D9439755BCAF6ABA1E158A13CC690A925C2EBF18590F90C02FE9984
1FA1A5E113BA6C378F3582D7006411A4B1C70102899C469BCAEA372FA721C01A
F92B4AD22AC16AF8C6F2D1AA25320CD0886B187CA22461B8C5CB3741B18F3911
E99C0593FE1916C36D338273C023AB449AE5A8D264CE81E17D26CB5F1A000973
A41A358D5640C9D241B397662024973BC21E41891B4092BC465BAA7C924655D7
89B9F1C70A7F1CD7FDF40153C3B6701FFE8C4BFDD28CF0AF8DFE023DD848536B
786FEE83EA6DF4FB60C0330FC52DD01DF946A4D3B6FCB1F0E89160A352941874
6FAEA262C705397A2FFBF526CE0AEB25ECEAA5EE91FDB983234D4D404002B727
0EA016E53313C6D267DF11CA36D6F64D9837AA8E2D35EA68104B9D3B740E6F7E
F01E26BA5A562D6DBEA850C05C3F5E37CF20209A9166713AA214DD911EDFD367
D565F1A79DE2C0E86CA52F1DADB9B3AB4A3C65E6543620EAF88226D48B3F83B3
25A69A7042CB3DC01104D8FAAFC736B760ACD3D6C736E862E8D5630CBEBAA7B5
A2FCBE252D715B23A69BDB617AA0126791204DEC9B897D2CB0F3303925DFC1BF
7F7FCD7561191ADEB79C73F221F3444F5C6A72E8D31B44EE7A22F9144BD3A69B
F14F792BFD55F8013072074E1CF8EA878DDE7E97EE354C5D30DD5C10540F1407
8E1F902A04E34E86A9AFDDD0B93686F435FF2D5CD6707BC9C4887501572832BF
8BB2DE6DFA09A163AE5151D07405EE87A366EF87C881BAE855E4C8AAE4AACA45
7F945EE07576BE7890245A09870189DB1453E8377BF523832D9689334EE728B5
A2BBD58AF08E4657DA5E92346121EB7D9B11A824C29A92C22D18E83B767160EA
FFEA7781E2CC11B94CB14D17768471A8D480E34E17D507E0453A2E2BEDA45459
0C171052C7F4AFC27579260123E30034E95B70A43B2DB100ED0EA31A4D190D99
34BA7C2ABA0C04438D6546CE7878848F8E0C2CDF1CAFBA10F6D7EE16A7638423
6C6BF1A660DB5876BACCD4EF0E0DBAA45C2CC6A59D350CD10D14A1A1705B726C
A13469D655AB033D3FE4B46180FB486DDA4D2D703E82A1DF76ACFE243728F1B4
B937969A10FA2A74E449CB4424B5F65C087D9E7C7B288AF936F81B8B2ACD2BDC
4990520FEBA2500C9DDACB59ECDA85ECC5F33CAE44E9120290511901D95E8C3D
28ABDA731F22B6BEEAC382A074860412B7BB022349DFBCA831C298B9E8666C3F
213135C708F647311C72D68D6C585D441AC7D18292D98C5CCA7F10D9677CEBF8
BCCA33825026F3553AEB6036DB1641579D8EC3198EDBBF7F47A0839DD9DF8509
832727BE72502D50075B57B33BFBE38F28C37D15486E2E023D65D287CBED4E0E
903FAE55B71DCB263D86A6924A0FD9520BDA0881B3A854B788146B2977CC53E5
25A36E983E3A280E05C51FDECEBC35F7C1FB743B30FA4F62791828CF64A37A9D
3D57A3AD2CB51D9871B482BACD4D8403443DB72787FDC8205CF78CFD3C250444
E0344AB08249B3E27DC6997A34AC05B2549A4A012137BF01BB286804AFF585AE
6D0CE13BACC35C519CB0B9F3DD17FA1478BD5BB9E08B2DE9799FB5F56F4B9CCA
D06C1450952B19679F9F4E94DB453C201D6BD60BCED8FC6C94F07F7831442214
98016B3FB5BBE146A709DD3113DCB867B02A3AC94E0A81C34DE5A296D35DF03A
AA9A3B07F4A81C84CAFB187ECEDB7408A6FA87AAC10D1F55B524D11B99AC9951
05817268D7B3696FA19667BD54D63FECD0871B21DFF150A85FC0DDD44600C621
AB68E314BC40652C03FD5A8A489278060F6EE2D5D8CAF37D493B3E2B9156E731
6CF84365B7024C03A44AC063C94FA4CCA1166E3FADE963F0DB32299C7844F5D6
2D8CE28A41E841BA3E954274DB930C214A9A30047B80AA25E936D762C635C55D
D219D697EF25B6EA9C1552DE948B1668BB045039D2527FD00E4B711BB3F32B20
46F3617E2A1794CA79271CA27AF2627A3E3DAEFACF85B5252B2BEDBDF19956A0
B1E266B81B28A2DD3679B15404DC1B19241A916F6CDD77DAAD4D3D9E47F7532E
FD1BCE79BFDF5C139668260ECBBC81A5F64C0C98250607B97749869BD083EA51
5C0086533DA3595989D78EE35F50A5F32D93D772503D2C4C8583387925786D87
19CC89F38578B197F94542C2F25F045476D0F53955D1C1B0BFD7D523395DAED5
C5E454BBF8E67F23837406800934E5AAFB6989BEC84F7EC04051D09DF0A82ED6
1B86FA4458EBA91C4BDFC2FFE983BA9F9B5061A67284CD291283C2F5A301591C
EF2D104993EF77218F7D01BB7D6B0FD20748C396F7B437770FFEDAC8172026F4
AE2B1597276D74CDD620DEFCABBBED9124B5A312D78931BD77E27FED6A1F1CD0
FC451EFBBD893349982010692F21EED0B3F00C8118D7E6AD48AB77D0ED4C1CDA
A3CECD47665E0BB2A52B0F647E5BE396F5C190DC9865BA4CCB396AB160093D00
77BF4D042714CC4211DBF67976A4F31ABD9C18395F97FF771E9722A0A434D93F
F83A66AD78BA201632D0D7FA1DED884F4ECFBFDF0EA107FBB7E1B15FE8BE270B
872C64494FD6704813D49310A34D640FC38489ABCF6F356ABDB2AA8825981EC3
F8926D93B83668CEEBFC93EF4DAD21109A9EEC61EA53176915A8E1110DEA63F4
87BCEE444F34D60541F94E759B5BDB0EE4FFF6FB78F18A6CC7615BF1F68A2BBD
1BABE85E1B9A66F140E7828586D44ACC67EA08B87DB38D3B7A57E6A6BE70FF21
2038134D32991DE82E1D34DC2F0E8832FE75A6C190557FACE4938C0788472BA6
A847E1A68E414DCA1500CA27737AD6DF61597DDFBDC8503EC4048284AA7186E5
272522FB8330A0BB32AB3335A087F92F99DDD23235F6AAF5ABE36FD9BEE6DC18
A9E17A1DBCACE21CF36DF2F8F8632FFDC153016C1D42E5DF887F7A846F7960B3
603B23BB71125536258B9FA7688AD0790B626A7BA310F333200386664480416B
7ADDD297AE13EAB2D9D74BC0975B305FEB535ACC8A8DC0CF01CF6B550CE33F9E
4A31B77332C42F197BE89220107D95A1261E2A0B065AC5F7D9DCC1654356370D
883AE4F4C8043B5AEF35FFFC6CA9F66DF7FBC684CCF0C991DDB1A4AFF8115D71
80AA30CC56C422BFC9B595A06D02529001C560CD0FD1A7863A0D42CAAFB60A15
636888D06D616F86350947B2BF894A6DDB5FF1D91F8F9B3DEC5F9C479D50DC6F
9AED30576F5C00EA88F2ACD5B0C6CFC385851943B3C79D9ED1321C8D0F5550B1
7A820AA3CB4D77DD75E15ED650F404DF916AA2A36FA3D8F6E598FB61991AA47A
068321E6AF2668632A6D6DBBC93CEE1526A4B7257AAFE506A9D2DE38F1610C69
8711C68EB74A84EEA6097DD906AF0F664102F71AB9EA5E3F87669B7802010D4D
3B5D9CF19E03A4EAC55C0305392A410D9E5F02BDD324DBAA121E2ADFCB7225EF
9CF1A13C58022272A9F4843EE2DB05D4F035ED9E58CBE54F0C79716A801A7EA0
A16B05C147EF579E58A8F286CECB182441007B336AF4E12A99F9A0AA5E12F3E9
85D29A6D86AEF580582AE0807CB22840B15D5D6301B387DDFDD43DABC93B82E3
082C95856B8B389C55166F07677518FE268581D74EC1DE232ECE85DABB6F26E3
95BD6BF0BDDF722CDCC9A82C5C3114606CB3F444BA9CC45F5DB670E975F02DAF
BE86567EF9C64557098212CC1CCD60F9530A9526EB80765BAE7BF03BAB3D3BA0
F90B2596D375B2E6E2400A55185499C1ABC132275D7634A8EB73A6E4540213B6
E9D0C83218F19919422E1A30CB06A4B4859AE50513058085913CC7BDA58E85AC
FB00C827C638AC997DA12EB256B3222E96241E739025EAC2CFB9A60DF1475159
ACC975929AB07DD43053DEA58ABFB0AC36F6126812B6A25C9FC1A03C0295A0A5
D7C9537BF70DF60982C36DD9080FC53CD84C81381631D6F2EDB9D40B6BAC5FEA
0619A6F7DE2910AE8489EDAEA13EBFA6B1ECE1920A890F44B9E1A528DE91D325
F4DD76D943CBB80FD461454C078F71BA30B2B974BFC2937DD8B6CB39ACF6A962
54B7FBB60130ED0979336E51A965FCA317ED5DDB6F877120471EEA38F2E623C6
698C611A9E47D85433CA635E03F833D1638E3E8B9220CFB0C6F633C7613CE394
9BC49E0B955990D447B7D1B770A93E8D93196B40CE57BD21E9B93697E107CB8D
76FF060A0E23C32FDB51108166467C041D2E3C90FFF636672238F9ACB54DDD03
73ED97472110C822C14FD7C1E9A044C5C3C8180F052E9CDB0D12D7C4BBCAFE75
131C7615DF04B3393234E80EDC487D7B70A47FF25410656D143980C249F89D32
9C5A87079B4F7707D5F4D7ADDC19086729DE837890C9F669E58CB1B633121BBB
D64275A3BB763AB0F79477DA55F7EC3D1A5E5E7C466842362D3077604A40E7EE
65F2EE52268FD59E413ACD35A5639F41C5DD0B6EDF755C81C5E8BEE0E930E3F3
29CF3FFA9F0B41190FC3C2187C8F23C44CDDC507140A006C5C2FE5DACC084D31
7FE713A75579EB85EFE9253BE386364F3BA6738D5F9D6AA957DFE63D86C31979
82859C6A90CC625E210039315D68926D8C0A43EC711DA0DB34D7E3A7BE95DB29
D8A98CDC84F4512B76E9665DE30B507B5A8C385D6914A01644DDF8AC91ED2C8E
20EECBC9D0DA8299A951E3C594B158A816C34CA4864F62431FD0AA30CC048CB4
2D5F6192FA61567008DE9CBFD4B947158BB56AAEF3D3C2C5C7F4BC802BB9E926
36DFBCCD80163DBE23B7CAB5A3406D17DBAC2D0FDD395A638DF61F29C1D3D695
97C79A4181AF59A5B3EFAC11FC4FC094DE972EA279B679B9808C4EB4572FA7C9
9F5936ACA7FC18306D4B1D6EB945132B6339AB20EB9060EFF6541CA54A2AAAF0
5D108D163BC5DCC4491AF2FFE9D4FCAAF049054ACF757CD2440586E6964758FB
FFEF8479BC4D9E05630134B3648F8EA3BE0D399DD6F7B71D411F4E9C21542847
CE41A468C2C7195BC0F7CC3D642E8E56438EE30B234A9EF2DE4D7A5E11BA8E84
322395BAAF956B118C3784CACE5B13D41E47A45B267F4D45D221296C7A5D2136
7C99D9CF01FA83918AB9D6AF508F20F11A9E85E3F1B8D79AF5D0813E8DA3627E
0FFA5FD2E3A95C91C7FF9B457A621398501FB4C43934214DB1B6AC7DAA3C92C3
48081D3EC052F8205C29DDFFA4D8A90CC7CCBD911C7B46F56E72A6263A96391B
355FE440C2E28FD934D14227A040BD1C1A915ABFC51136B1C1FF810983A70FA2
2769E85324ACC401A234A1990EBC2FCBFB486DA0402E1EBA1E7A2D48E3C96A1C
8D0E01A6B58DA4E4F817F3295C218AE98147F4BA3388C84A08B3B2C00821985E
43BAAE497FC16EC5A2885DB44E6E6D654101CC5436647FC06767D8EC7439BD60
11FE7AA160C167D49AA364663BD07D14DDC196FD729217F07F2E5C521D802121
BCC669B33848B654CE122CC2BEA90CE8EBE9705AFEFE7D1E2F5F3BC3D6946C54
67C68307636DF33A40D5CA9FDB1B3E1389E73A3570A27775429BCABB2B089F28
75767699F33473B189F0431234F3A29118DC9058D37F2D56C9674CB9E116BAE4
973056EFFD88B03415D9202029AED78D046E582862E94A45232340A413F75FFE
79416614FE29DF5323C3F15A08C7F6E301F3B2B19A6688672577BC8F94B4CC54
45C2AF907E34985497B2B6DA7ADABFC09E694A716C3D5EA3BF194BA83FAAB82C
EEF21580695ED4EDA7F88D47B20DAD61304695950BC82B3057380706EDEBB6A5
A6416617EBD243AD9591925CAD820C298984C903C11DCE35361F68BE1DB4741E
1AED13B110D3CE90FB4A65EBE1C1749DC407AEE500539EC61CC651112C176645
82950BB014F8647E9FCD8EFF4A1CA49A4C4107BBFF8CD593AED86F0714119172
AE9C66701959F093C9DEA9C21AC8C3D1F67AE91BA4A1DCBB10EB9F3E83F72E90
6469ADB2558EB1BC2CFF04F98EA6C9A5C9CED18A772AF661FA1A5E103A29C615
73894FC004B123BAFF48E5983BF316526EDBD0CBFE0F9500F9B4B5E7F03932B0
9268CCB39EA1E4CD90C34D674A37043F6104EA10EAAF1690EA675AA3D1B9F4AB
E389BA5E126766F3E09050F95EBD0BC0AB6B9029D5F71E0534BFE0175DAFBF52
A57491B45FCD0C3D9AFD72DB310C48DE6BC6DCBB16546392B638B343CCF4214B
38F83CCD2ED6EE0DF09CE0F42B0FB78DB6936342E08097222C93A275D9A13965
349F50ED3663AF277E9B98F5FBF443ABC31C02C38CA21B8E5131CAAA2A582788
2F510A2DD3B22482304A2D6F1EB3574E27640D7D97C3E6F64E33188294B5F52C
649D05B2FB4F53CDDDBB84883E8DB81E86BB937E40CE19C1E74B7D752B587A0B
1391F1ACE42C1C58CD0F1D92EB4A928C1494C3C06F79006285FBA5B4FDA466A6
0E99E40CCFC983FBD013B97F9A2C2A2BFE1A872EDF9DF75F4B47DE13CC2642AD
82144726EC4CA514E53C29043F2758FAC330E54EF9FC02CC157C925245E24604
FC57410DB475FC0BC69FD647A314F9D2C57287C23D8885DF1ADF0D95D0CC1D87
081D79E2DA12553654877B504196FA433CF05945043D7106BB00392C29386B33
EA8E3E0CABB542DF4AFA83EA6701F27099400F4D703B24550AE9F1DD34366C20
84781CC403A4342DADA2D1F9EFDA02FAE6385E20A75136DBD91A08413DF5D75F
B60A1F6AAC221BE7A57BE2EF983509482BE71EE91DFDC7677636D61AACB959F0
2057ABAEC51D7A81563D58CA91B4AE03856F1CBFF3F07D16BDF75ED2BD53A5AE
60A74F2F8985ED75E03612BF1F25248B005C181787F8FB570DD3A5E88E17DFD6
75415122D51D48AAB1491C84FC33C982AE164BE320B393AFB83E371E4A1E441F
50808ED1B71F0FA8F818425507B63688B0EB1F9F4375B30105E6C79EAEF39265
8E538296DB26E8A1B9F97D7CB65C4F384CA9356B7BADD569B4CFFCFEFCF29FFF
676D032EAC416C17271F8E5E203B70B89C0B2D720A8E3F57299E23616F7FBC6F
DFD0F3B781DAC5836F03209BC020CA785316B5E386E23BD111B1A09D8ADB0836
BA3D9F0C2A3E3230BC809C1CEBC32C539F2814AAB3AF914E3BBC698DD5AF2237
06EA8358926468F82C4E2D1F8C5641439DB0243E5E51D278023BB5442C860BC3
8EEE674682C55117413C2778858B623DEE03F050DADBB02B97BDB9363D74F9E3
F978CA7347B91AE31A224773A0922161CE74F60B036DDC807B8B334A5C7A68F1
51BEA30C324C3D2A8C2CCA59B049CFE08121F443925C202E397F314C5F60E6CD
E88DA22D819A9BCCD30D794EF757281BD25733C1D1323B23ACD05E0A6D73F060
F0F38682E7CAC774234E1CA52CA26DB0D95B0275E4A2CA628B2A17973457713E
B7BF5F909506287F2B08E252491B4A30162C7C5274FB9CA058C91A5E6FE86811
E4FFD7DF4A37131AD801A95AB94761DA736BA89308734D1ADFEC4CB057F9AAD1
12E3EF647A6EA342E0062C5B4128F1949543E575A872FA7A3587F4A43439C194
DE1B6878E5F64FFB468822C678AD0C3BAA01B038A2867AAC502FBBA17F8B0250
0FFB373AFC2B1F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 3 /Lambda put
dup 5 /Pi put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 19 /acute put
dup 20 /caron put
dup 22 /macron put
dup 24 /cedilla put
dup 25 /germandbls put
dup 32 /suppress put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 127 /dieresis put
readonly def
/FontBBox{-34 -251 988 750}readonly def
/UniqueID 5000794 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
377D3061A20B1EB98796B8607EECBC699445EAA866C38E00420B0477533ADB13
FC3B396C065B09769DAF0871076FB7FD0DC228CF3EE115446C7159B03F19BC6B
8FDA91BAF28AD303E26F885EE238874B11FEE84C47AF37E871AB5A85B043190E
E860B6443C43E27EA122F1E49241CA0D3B9F12495B0944DAB562A85D084312AC
8A5FB7C4DADB70C8D1D03870B38E61406C281CEEA4C2D60615E6132FAC2D7751
13837DDF2DED7689F4D0D4F5A7B638CDCB5044FDE2197CE8338DB0C1F59CF255
0208F901E11DA0656D64F725569A675DC6AB8B7A7152F8E5FDF3138148A780F1
39D73A618810FE78FEE76053F984232FFE96AADFA696EE86D021A9572DB9CA8C
572CF1882BBB9389E29A8EB7CAFE794FD0A80D430C5135D3DC99FE1A8BFB9A68
8F19DD24C3E25BB9392EADD66F2710C35636370CCFBD0FCB3729160A87D8809A
0C87EB6231517205EFBEB731CDC734F19F502DCCA2DFB12917B9820DF60D4277
B1A01C91FF8AA989B15155A1DC9C34031AF41220F074CE495C924BC50026FD37
7853AD476F84903724A648A50C5D50517726F5CB00E5F8AA1591B6A45110D5BE
7BE28E2004A4670EAB594BA6D4748D68945E988B721822BFE8AA59CC94BF1F51
7D28C6CA6573BA394E2305468DF2719534B6E29D486A82284E0AE4B192D8AB43
BF902B51C932AFDBDAC4028CA6D1129398C7DE7727BFB91382978A1377215E8D
130EB2CC6DF4072BDD56C2DF1B8D408E6F2593B809E05E3B88E72007AE04AFFB
4CDECAD5B9E2749F306E802D8C1A8FF78E8219DF58EE88B6834B2C073AE24516
25C8C61A54D5BBBDC2CF03D47368C7B31633CCD533E06F21B7A4007A049CEF12
0E72685466E32F3E5D8B5A85993BF611DD818762E645ED72303F78489CE69CDB
7A5F7E04D2F8348B03AA1FC868A29DA59062AB0EFE8DCD309A86C2EFA5EA8073
7A9F0958C5849A004428377D3E0EE9073BB779695DF776DCD600DE5DAF98DE0D
D1D071DBC4A86962EFA7B3F5194BE4E7AE5A23F40106BFC34912854CE27584C6
A8C4AA90D212FE3B726A433807800B2257455423D7E683FF505CC3D94AB74358
DB21C83B3034605B137B2A77F5F54371344167FD66A044502ABEF0A66CC9DEEC
0DBB80975C61647A3B5116E3FEFFBBD3D06AC8BF53AE4C95F160F44A2A416A48
608548A9CD9A3873AAAF8914C6D5C7474BCEDFEE87B72A62E1A54333C6049EC8
E230CDBF34384CFD9E2B2F5A0E05E39AF69AB7BDACAECA5BB9F815E270DC52E7
400FDE7289BBF33B340AEEC3D710269895E0888B7C6FBB7A540FA7E399FB0E76
15C9F3E52330A62D14B667070DF40CE48A05079E0B9510FFEF377567FD40320C
11D7AFD2EBD1E736609860FC7D4ADED1E4DEEE1550C43562461788E19B2300AD
EAD7A2298598709D19459C0FF3174D491D053E3DC1935CB306C8E9B7E8752D16
CC41543CF581E50A86C4A73A493156303A111448FF1D2F0386EA9D32A404D40B
678E6CCB97AC061C6C1D426B7D3B484A27F18515136E817299894647E8BA3CD2
B9C17168C3DC36FE2170667BA57D4169BB42E7440F03FAB64CBBC76B83E477A0
3205D5748A7877144B1675486D064B5362D31E58FE3DFEBD4B87BDA3AC98B6B1
49409092782668B7A1AE0C6343C75FAE5E6A223CAB31BC040E8AB46875BDAF57
A05C7F14464EECBFB24B22BEA59E71FD28DF887E07F4930B1305BC3AC129E822
3324360CEBCAF8324CA8210870A423F85A1FA35C89CF314CFB1DDC88015D1022
3FE5C4DBC1F356ED60B7A1AC5791E2B7DB4753D5169202C82B7406A6AE1BB05C
0FB188FD11E56E2BD453D89239DE2715CC52D438A6649CFC8E235A989C9C7C2B
E4CEC5EF14E6CAB76D65F0FC1ABCB095148DB2117875AE6D10361A0141013CF4
37F2573E81E823CB069E765A33846AB03D7E7B47CFABFF16E652C89ABE49DF7D
ABD322FDAE99B20147FBB839A17162882E3AEE0330C5A6EB876E3541AC8BC342
95F8509F27FA9CB5A75E8C3BB8CDE9E11BF9B1213F5FE55C60C89AF10ADFAA83
103B2F166FB627080A20CDADDADCD6DE07E6C63B7A8B269422BACDDA863D6E2C
09EDBBBEF220516CEE930521A16EFDBD06E474EEB6D75E33C861AC1F20C802EF
03949B4C7BB4ED3E188583E350E5DB047CA4E708D00A2D1E1ADE9159FFF01F88
5CB6112D656699CFA3E2B244F31EF8A1922F18D5609F91B4218767C8D46EC888
3C7A284C567132FD250BFCC1E6C754B3051EFBDF89A8FB9725C67C1B3D325FC9
2C9D4AA68360EBBB0B5A40B6CA50BCC9F63A225DD753D9BF795A91C09E83DC33
34AA41A9F9BECD18461CF35CAE81C56B2F17F0A2D3599C10022A7677CEE461F7
454FA291EEEADB3CEDD769E6A3B6ED23CEDA88A1F88474054AC36709E72B1D81
A2FE444DDD7EC4A22B846E160C4A3ABFA759C23353CD7109FC189A0344345E40
30939A30C1D757D9858946BB229B28B108C2C31F6CC27548D3BE6F21815B59DE
3695138C815EF121E3742CD1C8A7431F1C988DAC14FB5AA0DA9986B08200EFB4
2553F694C5615100CAAEE0B33A1E8A5FC078B435E7E971970384390403C80A51
9FB5AB6BDE34AA5D5A0539A395FD709F2F1A042F80218C3C47B67BA2D24C2DC1
7FB98868ED0BB12B94E5F370762A451DA034E09A3ABFC42A758E8134292C6583
0CE611A3B6E3A9A11EB32135DED36CCE0C57634162E50DF07E159162D2F2356F
7F1A3B68B86C1644B8BC60AF229DB16A8B07EEEB31E61D7573FDE564D88B5688
284B6651659121795CFA3CD008E6FF143A4F1CA1174B0B3755471A085FD0E318
4C7BC42802E77D8E2213D11412F4A3B6BB76BE27D7948D4398796DE0D2BDCF2E
B2D3DFC55919C743819557FC88FCF8C0C32ED5C51C3565F44FA777D89A6D0200
011B9F3EA79A124EEEDDA1ED715D5635E505B3ACD98608A0C74ED34ABA5BDC85
2209DB2649A3D838A74D0B669B00D4F7840028C7EFB44670D46BE0FFA7C59914
71CBBC8E060401852128FFC52D964A01622B26C3AEB0AC5068BF76799E80F912
90BD8635878D0C8424728F2A56301A5F7194C50985CDB4DA8172DB491CE61B62
326BBA34DA6F8A1EA9B3F7D587E0D2202B2E774F4905F8241713BA7123D309D4
57DF987F7500D53E0B3CC86CCA6BF4B1231F3623F87E5E143FC05F1EF7041FDE
80CB3EC2A981637C9AD9ED02C8C653A8FCCE09B4A39D87F17774E5E34DF10C9C
A9E2821593666180851CBFD3EDCA722D04D6BE621A332A7DDB8AB19D655E574F
CD0A4439C5C8D124E0EA8DD406414408A4C55DAB78C3ADC3F479ACFB985D5EAE
0058E5BFA33C98B3C22092AA3781CFA20883F3DF70EA2213E7F2910358236FC8
F4EC4D2DFAC46C1A89546DE1C8FDA1FC5C757ABFEB9965EE043301A4B02F571B
A1934B580B8356BB336E20BFE681676C9E5F6EDE41AD28D3B23F1B64667C5CF5
D8CF0189ED05898923FBFF9F91CFFEC8F5AF23500897B01AE5D8635724FC0A6E
4E630833653C1811E72697AFDE8DE4AC33B73D35D91C228E51B9A1C8FF82B7AB
027368DFD953FEE6F1D7A839AE415FC1203D94C9D1020E6A89A7CB5EF8A78621
645EBC900F1F7D036B4990DA3F084AC706E929268110710F1973FAF70D0BFF3A
3E0968ED6109F52B1E132ACA07504C88B386A92FD4BD983634DA8A01D593A5C1
391ADFE6FE5420A846ECE283C397690E519A282CBC8C884989E3C14767F70446
21E18458B93ADF9E6DD29F2776319C807DB41988D0BA911A004B4DBAA274BCFA
2AEBD756B7746AD90CB8774C0A2B8BB072696369DE1AC6A3A34DE509CC0919FC
94306B337D68D1AEDBA916C1EA3383ACC205DFD7A73A645AB0B20A20B3C9949E
9B1A64897D80947B28943D31D8480D6CA7E0E82928638DBE7E8D1B33C3BB6E54
0C90583A2ACF296B9898B6F651CC9EA687022A8AECF3250807FA208EF150C213
B659B941827EF80565B0B0B8FB1C72118284115B406138E8A69F50174D2A3484
D0D999AEBF8BE0F2EF7679D752D52A24B34D3079A423B3F1153DFC13AB66B306
F35FCB7B6A940C4C2DE483E32C2BACF3E00D817D97D5C5CA8ADDAA6AC1A8AFBA
717EDBB6C763EDF2707FEBBDF353BC1D862DF8242B190BF150805CCFC5916B6A
B0887B31D705A401BB5EB38790DE3EDF59F5848B2D4ADC2AE3D8B6D5E7741AE1
F26725BC8455C7E4FCBCE1201FC6DB94B220BC292A735C52DF29F98DFD1E8E91
AFDE4FE68073D343EC86433DF7013A777E7616420E712E9BD7A14DB195CDC81F
A76A9F289D62EF9419E4B4EF03B6F3074E9A8F9D9ECAF50CCEB0E6154C1225CA
4EC7F5DA76FF4F5ACB1BBF70A81274732616E5C88C16E9AD14EFA52E503B48F8
6E92AD1D691F277B499DCDD96C9C2680B02D6FA39BC39A779C2C50129F0B6491
B597C805DD3946C155B3ADCEDBE33E1FACB32FD78A6FD180B9EBBFAABBE0C07D
CBFE3B00849C5E2FB84CEC5320F61C96BD256C28FA8AA783AE48D8B5B774307D
588E84AC987922E0AB08FCAEDBB64A61DF213F39E5AB915E8EFCD58825F44566
C571740BA69C70458D83651083D836EE605555A314471C9ECE0CA393BDE799C9
2D0FDC5C4100260DEE93F3DD992F10C25C2BA1FCDEE1532CBC402F308FF08A91
BA8EF75F6C3F8FE88A3901CF23C311E79C0890E50E37A673097CA163A71E11E6
0789DE685898834B24872AFEEDFF1B2A7F18257E6A48358BDB0070C5512F730B
2015C40887B8BC5CF5EB7E7C924411917EDC98217852863B8910D4F446CB4F38
2AD4AB2FD8FABB7653EE90EA6E8E4860FAF6109523EDCDB98789A49BD9473BAB
80E06A3D20446646EA20B4FF57BC2F1FC7F3C239D6D84AFA26186CD838AD4878
7A42BA6724F1CFBD31D9A318C935AA286EEA5C735D094958CF5E22BFD275ECA6
3C79E24F9E052BAD345066DC6759379079BD14BF0870F030158E1BF9776FD257
63A006FB49AF55F7422729E7AA3C016C09E46B1FBD7F977C72A9F03B4062B238
61186F8BA7A1DB09A22701D033A87DADFEAE24F0B393E29ED828327B56F15904
0E447B09096CE23A5F09A1CAEB45F87754C6F6C3B0B6244E465E6EE152BDDD6F
063EA7925536B97B610C9C6347D15E8AE145BF74C4BA23ED1CB13EF132E5D914
045DEE0EA4228A32492CD8123C7DA745FE305F91DA92938ADA89ECDEE96C4EFD
72C12B2C486DFF25F0507941F4ED7547E8FCFD13193E59ECC23C94F03DC95A1A
8238A9942A5B9694D5736CB951F5546394D920C5C4EA5EA39A0D3FD445569EBC
47F595A2250BF83EAEBE7194821970CCE1E9B1676269F4B1C8AFE65117B5D856
FC0427D29AFE40C423C30C5B6DBDAFB5B404299DDCCCF447205DE85D05BDFE70
7EE695B73616A6C28D2AB9B1037F57E5F3BAE9344CD15FE7593A1DDED3DE950D
1369F954AF1BA6DE982AA762C6696555E072E5173DF1767221478FD777F96222
33651B111768F9BC5C9B3156993D4DD697641F31C4B3AE56500B83586F49AAA1
CE1246FA1CD37694C7AE28293128B7CF8983FB94B5A625C9CAFC9BA9AFA7EFCB
8D9DB7463F0D6FA2AE099B2567950C0D12E718B984A78CDB374E0AEBFD01F265
307F4F789EB14DDB41903DACBB948FAA009C05373397B1AF3429BFDE19EC2253
295416DE8AB6D85D4375D095240B0A97B8B94A33767913CE20A3D15E0CE6D071
62AE654069D753232832A0CC7BE027EF9355327DF52AE8CF733D135AB2F9F1AD
3DF7DC4958DB96008253F496A6A0709EEFAF20AFB63D89C5784502C8A0A109E9
F26CDE6F35630529936B421003712197135A628F4118BE23F5B73D18144F7D5D
14776FA98F3B8DF136B49680EF375CD401C5CD781BEC9A2F821C2882E731C10C
E1202F51ABE4A1C5FED5675083E8D898E7A71C7E9F61A07CBDC08F2AB89C4AF2
053834CB9BE45E71C2F2AD18FB89DE13562E0EA5BEEDB90CAB8D1F9566686B52
4A5A0D251407E65CBE99F691F95796D3C9F29132E6C0C727A461D0CA82056F85
C4DA9FD1AFF9776798D260C4F5CC6FEC9B23488B8CC2E4E1946248375252160C
828DABEAD25EA45793F228660D196B1ABF087B36D29006ADA2F07F00C3AB48E0
AD60FEEFF6695A57C0865363ADC1D4C43CE944DE1E165F0355E879AB3EC0E391
04F2F684E25D352350CD15931F07A1A51CB104D82FD52F57583EB772B692DE2F
6375E05E38FA04A55AFD083593FAF4429AC89C1D5FB9CC522EB0D60B842FB575
0BCB48D1E50DEF4DC2F82CFC1A439BF73B25B7549642516A12E6BC68B9152DF6
94C61CA833D58A2DA7E483B8C5B5B237A1B5FDF51F607A2C3FD5D03E32BEE5A3
F8963BCAABFC7F49BFBA279C32789EC30548A9CC00F8C4DF6D5FC1DDCCB9D037
97F459AFC4BE9AA1E798C3D3DAE217A9193ABBD565362ABF496079840A5184D3
65254B2BC41F360C3F9AB224E72BC0B55B52F9C1EF6AC9855B347E3A3DBEA20C
EC6500B0F1FD5DC043C22CA78A13ACC1778E9B47E0C7FE06CA35D24847BBA63A
02E7B36ABFBD335785B189655E582C57D3C6A9A9444528D2161327B1EFAD4FC8
7BFA267A28D35D16A2EAE632CEDB3EAEE6F0958665A96C69F3EC7131D35D4934
5BDE7A3DCBA3912E2CACF2861FA26EDCAEBDE16B000E56B5BB9564ED7FD50775
E511F1CA12F4FD2CEB3852AC6EBD4DC3103CEF3F1644C0A4FF7754D245B7F240
09BC579065BB17D8F8D6179D1BD00A2123D8E0A1C3E30058B0FB2D335B532417
6CA648DFB02471964F1DE589E5D19EBAA4D2C9CC5F9403814D98B4F02D4DB961
EA947FDFA63FFFB35AD77A5A942DB2A8F0299794D66EA4DB828FE3BC3CD6B866
75A7288E186F9FDB80D2268AE5D5D978E891D662E40AD6E104F1BA32E205CCFA
121842DDEAC290620DE10F07CDA9B3990FB6E7D17C598F8ECB4FFD9BC9D06EB4
75F643D59EC2C631470BCBD063906FA68A47CB6E7D8B4E2F295D5727468101B2
F04D5E6E03E9108D52413C5193E2F4DA72B2D83B9713846AA214108B68D117D5
EA040943E8D086924A3F5BFE840ADEEA2400F03C0CD71B47EEB75E6AAF6291BB
D78F4B5446845EFA82A52771835A4820153C89EA6B4364F09C166C259BA7704C
54E950A52FB2669AA55D7B458AB80D28B4F7A52283ECE2CA9C2C7A40128E6AF5
02286FE3522EDA458FFEC90F4CCF35D41BC6BB74ACB990449B77D18499619C1A
E21B55F4DD010B400B024A6CCB9E081129B11DBCA966D4154A09E217D6282C4D
24922C4B8C8EA886FAD2E1964E603DEEA96D2F9E33493015B6557FC9A2E23E91
A5ED381B21DD259F1696CE1A2C0311D47B38CA839C31F4C92EA52AF43D078D71
BA80682F2A8CFF8994A69B6AAFEEBD99D57B5B15EE8AF754C1F99E24E31DB9D5
4724D4BAC5D4F58CEDFE2EF80CB97629C9B86A59D6316DF39453E08E06673D0E
4DA668A1D471D1594AA64380F064084275E819FB34479E069A2D4D66EED5605A
C1EE6DCF167B8B5C89ED05822EDBD2E4FAA781EADDC76AA2292593B535F18F31
9B293B7054C2BD6116E4D9BD5A3627425B052095A1A2538011F0C4656561E2BF
8A26FED6E4631667780A7FF114A16457C7516DF6794766D83D9BD82D2EA815AF
C13612F39E23C43CB2CE7949697911B939D4559E867DB43FFBEBB5E83E773B69
F6AB20E34E1F22A81B809D1F6718C4CD06233A682DCBD7776BB40EFEBDB657DE
470874906D53EF2C7160579E541BF946751AB4DFB7A838ACD10AE650217A2B4C
C7DF723EFFDF3B1A7511E5ACF9AC6E2910D62BA65EBF6F6A044A93013A27B84E
56727BD3A7873303CD54931A4B0AA2F63B6A9840D15F45D1D989069DE1467125
D4511DB97B0DCB10F099D4DEBC850EBFE65B8409B4B2105E6D1144EBA724DEEA
0C6C12E111A558687DF248ABEC29AE17F959AE56FEF527D4972CFDF867FBCEE6
6FBA08C99726E850EBFDA66B741D0E33A33BE8D6EF82AD9DB43A641C6EAEA73E
6BC9447B2F750B01D360C7259FACED7EB551399553595FD4B350E8394C3016D4
8E4C13C8C681B3A99DC799B1A2B4BE708CA24253E1B685DC07020B218D4ECDCD
866ED1D202877E4162096895234F948DCBD6C1308368C706CF90C5EBD2ED9F47
367632CC58CCA72F599E8E665E83C919FEFA95036AD41EAD005A522653241964
7ABB04A57FEB18591E2120801EAE192544F84AA5905B6478B535E4F33B9EBD08
D4A74A6FF0BA471A4005BE06D9B6BCFF938CB5EF37551DC8F4DAC7BFBCDD1A3B
29A8103473082FCD4C73089877296A15280F4D6DCCF2F230690FA1E3C0E93AFB
5F2B9CF911A9BABD0D9419819E70E15207140F5BAAE6AF63CAB2FEBAE58D877A
A0EB960193823143DA78B101045C4AFD666E310ECABCBB44677122F98890926F
DA096AD7B184F9AC3DCF51DBD61DED17BDD4BE495E5FE72DDDAF4F5EEF06EF9E
58664D8193C3561682BA30992B7D8381E995846C983977736224F3B70BB0257B
89E1F8DC0B079FF7B27BB37DB5823A27A963237C02F0C413135C60D06DDADF61
3B233E6F5E6A8BD57C1B1FFE2035A98EBCDDA338A27B7663B83055E7CD378765
8F324B70DD5857E76FCE8B846F3B0D72C20150B72CC4B9354BE9CDF9C900ED46
4DEDBD626D4C802136CC5543EA68DD03EEF24FA82D67A8507E2ADCA6407B14D2
EE2B034DDBD0ECD2A7CAFB233B0A4B5AAB04B07E567D7DE1678B9DF0E54B37B4
8C6DA57A3BE825F54C7FCA57F35DD9C52AFEEE3F988509313EA3F16578A68365
5A90B183C82EA417E28B8799B83F1DEC22E12E0F2D72AAEE3D30686999312CC0
D0DE30D4E8F36AB2F2EF357BB6ADFBF71A756E4E3040B3F556C427E32FE1A9D4
5F3C3B3A7807F73ECB398EFE9ED12CA5232C088998C522103F1D177FF42D14E0
34F7B5C644AEAD7A5B4B91D9B0E252ADC9E644CD9CBB4044A6494DD44B92F945
784BA3B56617BA9E8AFE27FB70637D836068E565438C016520FF77D8375ABBE4
AD1D31EE47C78E31990573B04540A0913E8D1CD6A1818B412C678442873C7429
109C0DD188B581609DF99E35A9E91256FA8F3D2DD65A3455DA3B0338509E5BF8
7E6C8E6C1DF065993FEAADAFD5FBF4F4119ABB772C290EFA830DE7773BDF8623
CA7D2A0E83F40DDA95AED3672E46CAF8F0638EFB130B2D38FA7EE48A09A8DFAC
56DACD58AAD2202E6D09743F226673CBD362051CD525726305E303809DA0562B
0B433EF94591679787AADA74E61F20BCC38757EEF6FA31EBB0BEA915705A5CAA
C4A90FF6F8BBD5FE5DB1554DF93092A5DE6F41FAE34F001A9A72F83ACF26C4FD
51D71C60C238684A7853C9BBDA817E88C5E4650434F038B329D92CEC4415933C
4FD3F357065BD69C8C4C07574FE5C00A8677F1AFC66BC9451328CA30016968CF
1087D992851DAF8926B09709B41FEE61D3AD3A4AC21E749EEDC237E0052D92A4
6ACFE79E0B3E67AA9F4F362D9D94629476C39BC0BDC1B35E0F57AF5C51EA4078
B7A2445F9F34D2339A279749035ED849EF5B22F2436F5CE05CFC4BA614A4EF83
7A47F28A83154917BEB80E6DDFEE03A2FB9C05D621AF44CA960A9D323A999AE0
817C161AAEAEF53468BEFF9B4D43C0B0CE983838B4336A3E3BB051498CA18A4D
9AB8B5851F1A2703C06A1EE9E98114FF75D5797BB0BCEBD597DEC0E77F4657E7
922FD86B6664A2DCFF2DCB2DE0E8EF0DF9BD217E8890002B735E132F110D6F1C
93D95DC6E7F02790E573A5BB99CDD4B2184301860833791E05579A3889AEDA92
AE015518C1533D45D8912173EC72EA4A417D1FE5C8BFB802E0C1E15D5A306AF9
4AE90B50C1FD3B41978A310006456B13FD43FC63DE800C38264F623CBA59C851
72D8D62E5E96508D97446F94FA509ECDA322645498FFA78E7879C789242DEACE
50DDF5A190CF34F2D346AF8233D23BCD185186F9C58CBB833266AC1083176B2A
4A738DC3FEA1EAA3393970AE074D46F323C017232865EB2DCBE8E43EE15E13E4
060A27F51B69A21E66CE09CD5D16F0451DE2BA82B63A04C2D994EFDF220D625D
3953CEFC511B2C0A9CE2EC5F40E78698BB05B5965F91FFD5309FA1A1CB9205FD
19D3C1065FD001F80390B18943B2872BB6D72D16E0D931B47CD67A5A2DC2ADC5
CC769413BCE23EFC78C821BF808E0DBE96AE97EFB9422DB9D595F5DBEB9DFF44
54796F9789A207A6E48C9B76F946D038D96EED999717CF4D428A581050CCB530
92BB86F4CFBF4D57DA01009411A51ACE7E6813661160EDE456148A25C0FA524F
EB9EB5CB883D17402EC164F625E792B10E95F7F18EDFC9F4F8C74E5ED0326A50
008459C3949FF989EFF920A31AF8D2FBB07CA0FA7F8D6EF06AB424D73C11449F
B19895FA29958A0294CDD4D0262AD0B3F16D6E381E2DA0165E9511EAEE88BD0A
B4FDA0B292BD31FD1BB34FC9DF68B1831EC8EE5914180CADDCA49FD348630261
6D7A5811BA4DCBA71FF0998C941BD222915A0884E964FAFDE6FE038389BD46B6
74194380EF28B11385A2926A5A1ED85FF2882826A40E14E5C48FAC5A4008E1CD
240F8E8A680D347BB9E46A055BB0C9D4BE2E3AD154D75C0D9CD0C69562B521F3
4A1EBCD0F24E103A9DC2C1DEF2C55B699511C4A4C7AD9685EE839A9F85B3ED59
2219BBD6F4922ABD6C97FD05E17064A9B383B65190D037597E6D4A40B4735A7B
8CD0B816FC175800072566FEE479B77D05081DE4B02F713DA24ABE25FCD1F071
383E5C81ADF19E9D866E47BC78A10A50723C09074D8050BF130DDEA42C1E3DB2
CEE62ADC7336B0DEB0B4E65BE4E1A20A3CB8C4FF3F61528FB234DA4C242A34A6
F01F9EBB104CF47A1391F5D4FBCD96C4F6CA1AA4D2E7CCC03CE676DC1CBA2738
86F75293260D55D09D327FF3399F4658AB94A49631CE808D99129D4A6220BC1A
EB046BD5E3D0890AD4C0887DD03C898E89AF4BADD79457250F2E0BCEC26D0EA8
A2554E79CCDB4E5FE729E6C7116DF772E7D74B038040C8C8FE987D3BA7575B1C
E191554240B7D1A84F9FF7854C44D183C6A9F608182856A6E28DD39F454639DC
17B8657718AB4D0B7BA95D1B4FF6F9C5DB683BC62C07345F9D3A2A7C76A1E6E6
549BCF1E150FD2A1A77B1E60C014DB82C7A0038968AFD922B05FCBAF85105DC7
3C81A8BF74A0FC9019B94FEDD89F70359EDDD30D93A9ED85AD045E189BA62E33
727DB5C2FBA40575BA9AB69FE2522FEBB36BB7FCABA9CF324AE9B22A867493F9
D0FA3CDD652ED664B07FB982CC136B1ADFB17FB38F275BFD9EFAAC778BB980D1
5DF1F7C93E4042C67587781A8BB6219FC65C4C92DCBCD13C85A15F1981B47B03
3AB240A9BAC4527ED541D4E4D62B0A2988635D23FFE4079E083BEE665E74FACF
ED17A7E9132CF54473CA6B0DB15BA19F4F8F9D07EB0A9A31E4F625EBC2A67ECF
6190D0B4D0FE51E70C2DEF8C287F8D7E93BFE5D7528F42243C4D3E93F7AD5B4E
F5B45E8B89DD271250F1B3DA7BC166FA96ABC6632A72D048A580E58660DCB11C
C453BD7C53ADE18B3381CB5896624E7F13B3C4FB0BB3E8CE9274AF44874F7946
C9047242B1D1BEA302DA978BEFC526899CBD211703E277A5DBA6FE1CD2C251CF
FF73D5039BB9CAA51095DCA3EDD514C6F48D67629287CE2494FD0232B26EA064
ABA24A3E903758FCCBD27F84D42C94103AC89C561CB52FED05389D2CC6BD42E6
4425584E906B9BA4AE30A8A14B6C6C1D5462BFB51D8F3C80C76229574B2FE33B
44B86547F816ECE70B4124DEA40C1DFBDE793FA768EA2BE07C998ABC6007C60F
DAA2A7D0F105C9AC73E1378AB430CF3E4CE2D2BB1D289803251F16EC9F1EC57F
85C9E85F29A42F994B98AB24D743AD38ADBA9E0E2CCE57ACE65224123248E0B1
2A0D2267AFF461FBCF5EE19CEDA434342EA36E4F9BC711282848A61D3144BD5B
A29068154C5F0661E2E282DE704CE21FF97A008F023558B6659F09F5DE2586BA
72DF3CD7756001F6C101BCAFFBAD0C41FF6468BB6629BA4EDF1B969917D2FC1A
A2E1CF46988DBD7DCA17907C25102313055071B04FEB885227FD64FBEFD1011B
175FFCE1E2D65A9C590CBF42027114E160A3DA108F187AA7A6074A28EC380378
5DBD0742CC244CE20BBA5C63426E8DF4905F67C3E11548D4DB79B17E3CBE0609
2A0241AA27A815107422F2193A6BDC4975A5B4AB3127D2D3034A069392BC8F29
6B26B787B32B6E10A3F1104879F4E385C2620B6B381FEE9CD7E099091A61679C
268C2CF350FE27E6F4BA2C1FC2D2EA37A1AD36ED0FFA59F061818701F445F313
E2E33771A52DEE579127FC03A6AC04E7D6091F4194C5B98F4820A0C589800F2D
F7562F1B2E4FEB9AD6F0D9E4C530D72D5FD09051B54AE677386C3E8CBB174EAB
1FCF183E97DF6E191E2051746BD0230F358E3CFFE5099BB9ECC5EC8E22AE3A31
69D0B31A867A758B93DE68DDDDA129B337C2DD54F5906298985423D0AF7E4602
94013CF873EB24316A80ADE39904E328A139741B8D838E61771A57C14860A59E
DA0253D399BDDDD8BDE5BA85D32569C001AA2C4D83E55BDE83CA37CF8FB56C33
02DB8FE81B87725F17A48D04362271DE1C75C6357D6C61005067E926CB1D2762
0296FEFF7B76B5E2667DAD81C5225CB520D77C044049AB89B71C63D80FDCD463
255F2B2A35BCA9146761642FF13C139B986B66DDC9A7846A7C3D3EC2F0729880
95F6D70B51E2FA7B55DD7D7214A1BEFBFCC159567117121955B947E0E3FCAB14
BA3A0F16F1A6CA5E3A4ABC6565731482DAACE92525645631A13B25A33590CD06
740068EA0FCDBDD4F1C0796D19FBA358C7273D7B2AE26E6108E3620BA065369B
75DF6B9353EAD64B668CF8C1A7AF8CA8E20F1A1C382CC184CBD242A07EC58543
20056374558DC48A654AF24A3FDC397A496E3F21F1624A6903BDD68032C69E2E
C48B39136ADEAB05D347C260A0650BD45A0B2A97552CB639CDA2B1D08C970893
BB407A8658B7F6611DEBAB9F829E2F9D5C7E167960DA8C3DF484F2556A0E1EB6
FED41071A1D2CD75055D918D4800E03533CA33E021D04D134CF0215156B0DD69
D8F22A686033A40155B072A7708664C6147F3332E6CC80035D9D8889C8D37967
7F714A2B38E2795EE5174AD52DA94BC47CE8D74C8D37214CEA78BBC4A3DCD24A
8C2881FF5DECDEC2B9C0464569AC0175ACDFC8CEF084501CC655E8F995192303
32C149CA5231A733D3491076DE45D72CEFC323BEB9384C6B81352C2C93DC422D
9D3288D883D4B755CBFC2940E54115514C6918BC799B0CD5112B61ADC3B8CAC7
1240E6AC8720ABEFE11461468264B5DF54259445E226339AD7ACCD343D62E409
1D854D497BFDEF386C1F9AEAA9A37771E1751F924B1B447399ED68118300DD56
B05CAA1AF1F27F0CBFCE6E8CA74F07F5D8BD2B6C87B7EAB78CAA52C9EE6C7FD1
0AF1713C9041ADF34C32553B16DC85C9C81FEF04E76F52EF890545ED48BCC728
DFBEA60D666435353123D3FBD73E5022001FF07659FD28DFDEF14D2D01FCFE73
B644C268A35BD0F63775CC2D4929AB6A1C593105034257870ECC4EEEE598F00F
1FA38C75C87FFCA79070A6CDA6F235AE1BD13BBB0C9183EE3DF6A241013BC982
02B54D94FFF1800666743273FE74DBE2E16CA389FB502C2947C8DA77B0BA78E9
01FEB8F71DC81900DABD992D58404FBEA1B23E09C9C49BFB0072CD35504B236E
943AF82254B8F6EE4015DE053210A4DBCFA45909EFE0111909FC7FA6FC7955C7
47E34549ACAED5924790002BF4D3E280C040F3F2CEA108BA8F8B3096AD72E89F
CB3E32224659B40681E96D103B5DC893857AECB56A185DBB6276205FA763D8EF
BB877411ADD81CD15B445A4C5A17A7C7C24CE1E86C56C5C0B50DFC5CD58FBE42
23C1A863DD2E6F0A0EBBFC16EBA832926FA0184A62EC283F5B1A66F07B12E0EC
1285A0DDF100082F2D5C8D7F57FB22706A15DC7B3C03BC67E27AB20BA76B701C
D72599BA25BD9098ED8B668E3826011FACC615DCF0C05D0BBDC6C9BB80BD410A
288DA310C2A4C3096EAD3CED38B7A6AB5574F7009DAF46802C27C8D5A4F4DE90
57BCA34E3B857E6FA193F6D25CB9EFE0D5B8BF59CA26097BA99AE73E91B17AD2
39DE8330DC28B73CBEA1992AEE14781DF0E0F3B93D79DFA0491FDEFF61E0D9A4
EF0AC8E52846A293C5EB93E3F318A071CDECF599CBCCADE280138D1437706A1B
B332B8EA29D7B0B1B1A4E271DAF3D6D1A3670A5BEABDDA39303FAE4DE0786611
4E78CEB837F0C0B940A07DF87B358459758DDDAE74454881EA2F3F589EA7CB6A
E42F666D68687162CBF46BD56629B4DBAEF2D1D5E5789DF566EE509208F58A51
94E84C4DEBF72219E4E90368AD5F9680EEA6639BBF80DCADB9EA63C178FEEC0E
5C60211A6AA3217F4BA1B3D6E1F01101E751CF44BB7FF41006A8304F98218B0D
FEEECC2B9362663A75B41782361479B6F832F2CE3EB28946C7E5B2D0F3F5025F
7800C1255DEA62F70DC5C05166A5FA6B960CB5DF1A71161E5F1F7019F643A6ED
453096097D76DC93BCE5214A6652E254527536CE93A4BB66F46291E6D65B6ACB
CCC163340EF0F18D1103B431724E9EDBFB4F8F2EDC5A23607523F228864B8518
5CF5ED7F8BD474085C6C4CC53E52628B5001E2975C8ED24FFD1D74ED8CC9F63A
9B96FAC7DA3A2DEF6DFE53FDFAB0EB363E84C1773CD3471FB17D3125616D252A
595BA83C091F32BE1E44731F95A9C64EE13DBBC327AEAE82CC41618C521AE2BC
393D761DB8E6CC696DADBC3FCCD250CD17DF855A6BCF4ABA094A6022B6A84FD4
226DA9313306A2B262C2A8B964AEF57F0CD151DDF08395F6F490CAEC786AF3F4
FAD0C08395E67EB60CA10C94CDF5435220C62A6E2183FF4518408C36671EA05A
A7258A5D9D7FAD935AB46484AAC4069A39A88051A69EEDCCCFD5729E2D480D3E
F4D1D9BD48D2AEA2FAC9AB56BF470661AE03A728C4122DE3D990EC563D22B9C3
48FFD530A39EEAB2FA7929C5103BA82E32169B43E9F22D7666655018B1123C15
74E6E704235EB69BC08743C289AE36C812D0220E61DE0C08876C1A15C2D9385B
811EE0CF60A00CDCA9B87E3665ED63AF9D9DAF9351A47131948B65F1A27B38D1
4B9EC8009D23CAB459D844E28DB0663EC8BCD2C25865F61A966A68809884B636
74EF4223838AA7D9CA27729FD88BE0CBD7BA113A339FDB1534BB13B53A581C59
090071FE68B76009F0D291843285629DBC98065ED5512A1224994F2B7FF77F64
62431BD5D3410DD06090ED49A7B54682842B8512F3FC9E72A6A11B33BF325CA1
3F3F59639B58CEA2AC13AF5303BF6B6590E5EFE0EE5763A4C0E25C207DC0F5FD
90582B392A45E3808C91170A8BCC39576A3F81B57976C661CCDC4A9A65232708
14E3873F166877E3C44ADA785DC54AA11C892D8080A1D70FC0BB570993BBDDCF
4C4CE4CF4292C8E7EAF10DBDA4AE71D1F146AFBB778037DBFF3C5C0E5B16C118
0EAA142F26E21624D39387E64B2DF225F5AD389A61D5A4FB08220F0154BC47EC
A1497CF396547984E7E0B257B9E24FB21FE67176A868DF259CD3522AFE983C26
E5004ED442170E12C81AE0E31F9952914AC2BD7FB75EDA5C9F452FFFD68AE168
F2A54E9AB9320435FA468509509217B54A334EC3E1F55845E825D12C6594AF03
45037C0A390F4BA8FC2575E37AB8F34AD1E2D0CCDB83F87118ED6DDFD9AFF664
BC66C4591C8F9B0B0F749B7A6BB234B5993A435150AABFDA3B8E1100338706FA
5CAABD71CAE1E28FA5959FE4103A66552BC3C25915112AD2ADAD1AC0C61BDCCE
AC2FF164A75455FF94590BC9B8E0A0E2059899745B4797D0BBD2CE673710DD0A
FFFEEAC8A3CA0D987195BAE22A362CC494D34332C2845B6A85B409AAC708AC1A
AA797D0DAECEB9A602C14EFBB086609944ED83CA90019DF3B3822AEA194312AB
78EB01616D76F846BAB9CCF9D237B8A6AF469D5F9BCC5BD9E86C761A1FBD58BD
1DBC44202DA97C5E6BCA74E4BB4C0DDD4E7741D5C8A48EDC3220B9CCE30E077F
DD1D58D39E3F01FF27F77A1D95FD4E459A4A09C6514CD0E726832C21ECD3DB9B
5A0DD5F3326C16A80E34491EC652186834DD277C431A658C7AE40F88957C0712
237DBB382C3276FD672A3E91BA32BC6FACE17E2D74B213E9A5911911486FD561
7452D93851E17949A04F8F496D03CD48BB8DBA953F5F58FC912A327A3C54C515
4213D4F40DFA1057C2273017639B80E59FF7AF32A34A99900489C4D7C006B573
229481616C09F718E273CA6BBA6810A5EC0E5DA9ADFC20BF56440F857EA186E8
5F9E5D88BCB97269E905154D78CCFAE43FE255F31D8059B6EDBB224B9E8F29DB
E98F2A91F516CDE9C43D7C29A255FF53BF1DA5ADAF97B99F5A57679F50AAE5FA
0A059936A9B3E347722485A7135829C1974FF6012D1FEDFC9A2DF15EE4D50063
C76C114A88137B82A6C3A698D25916386D5130E87AE5E3DD61617FB27DA85264
87D228941EBB95A758A39A432D00ADD0754F2A5DBE97CEEA7CF74CCF6907AABA
92145601C4DDA66A2D51D354324D03AF19BE61D543536BBBFA6131F1A5108D07
250A79D78234729605ECC4FD5615A35237939E2991D3319A1788D75E27717DF9
1D2403DC5E604F8994756AAC82CEC5605A40A4025703D60CFDBF4DE9401A6B43
F6C65F8BCDAD9D0F48D955491667E2DCF3C150BDC783AB6D0FFF0694174AED26
AE0DF34D0029175D602D25312818A824CDEBC15FD7873F503358B179D9A76B06
21B94198836373F169CBCC725DEEB4A6EADDA32BF811BCE8356151BFEA5C3A32
6FC98C9B3AF249A8DBAD546C629F3F0EEE147017441D3072B7716025DFB9D5A0
1D7E589ED24622B0A76614ED813BFA4146F27B290A0143F52B784FA43154AB89
6D7EAC54246B8630155CAD25C33B1A0D693FA926213D14D51331B76827B8BE90
F46C7F2586E8C4D4320FD86488B74B1EE4D16D5A0E8B15E8F995D69149C8BC76
798F6D4BC933EF3D7B1A5F5B55D423C6D05DBB5BEDA772B9E03EA634FB6DD124
1F6257454CCD6D36CA0A0471AD90C66B4204D929487110F3E0F81579004F60DC
16D3F2E9FFE451EE59823A4D975A1007315108BB986A9EE72EA1E454C4CF5C4E
4C94AF43999D6260C95E1E5E509DB9855885B704ECEB608B6410EED2E84569E3
2EAA5C59F436B3803682B56EA34FA45E1E8009574643E94FD25DDF1DFC911D43
5CC0E4F5A01B6517E7B7C1C09CB2A95FF1B0628A4DCED6D77B8644386D1BBAF0
E7E6FA47584E50B0CC28C089FE7C67485643F9BF6625B70EF4C671079733AD1F
DB656934E40CB68A4C1052D0C57FE2EA366F89CF5546FD9D1DDF26D9610E3279
828D17FB862095C8DB175F98C8EB08B1D6E3F220F175596106041A26CDA11C4B
A1C51F819206DE443C0EC1BDFBC60F6B9465D067750C0409A576D7395A995FC2
1888BEE373E9E431B964D79C4F95D3AD4CF48B6B7175D913C4CCEBD8B96C0E0D
971E4D026B4544405C9CA386F86F7A2C2F6D4CB992D8ABBBE0F113891A70C49E
AE4D8619B1E7E19EF766A60552DBB8FE2A230338D45B97FC33F11D6710FB99D3
9256A29B23BEE86A33F415FCCB2BC1E9E735488A6C9475A8C2F5A5AEE5675D92
30571734E875C5FE43BD6436D88A5908AF290412FFCD6CAB1BF0099A8E52DF68
89D27009E973BED5806E9C8480E0E4129995EADED615B4D7AC8A0D9FCC4967F4
82823602F7566833D03DBB3B68407C8646F7FAB909D2B68EA6A8DDCD82881EBA
E0D66C6036E0771096C622F88950CD3A3E04A3AB1B96C1FBDF5B4863381F87CE
D7C19B359D4D73C536C4A3C98E57582DCFA11BAEC79D95736CA64725C1F2CC05
ECE4F1BAABC19D0096202B522335259135A5CF47BE534E5780393B19C30645CF
89D7490E018F28D473C021A5ADD48D51965B54535A7731EAD22A74B1D6B0AEF9
C361B3007E73A8D26D04110CAD614C44A6813B7A937C2981C97A5ACE4A59111D
BE0C3F9CA4CCB765787C56D2C36430A79F7DD3E0A0BDDCD1D4CDE47BF22FB264
2BB0AD5F506B7C49DE811671EB25F629A2146ADE476C35E7B4D715D8ED398286
C304536CBF6E540895CD3D06C5E7CE12E46AC4E5D35044A479BA6373B31A8E88
B88459213C253E7AD93F0769714130F81E2385E2E0989B9E50353F083CBA6C1D
7CC7002E2FF67CAA3D556DB5B1032081DA387836273939C43B6856AD92ABBA60
7440CF20949068EAEF040EE0404E11DBF3DDF5492A09D0646A26E06F492C032A
EA7554A9CD2C79A64A3499D985CECF3D1464142F0F3431C9F2AF624C0523C04E
001F75EFF320D649A8872F74E360918B5FED5BD4FED7A9C1EACA27F79D48A966
8458C6209FA36EEA4F426658DF52639BD75FA1E0ED14290D47F01EA5A055EEBB
A0EE9FC0C82C603732EECBBC08397904282B6E48EC8EF135A6ABC0491D4BEC57
617D372B2689D44C91653795AF2FEF0E96E6A430C20F2F4E9D3D71EAD18FD8D8
4D2B85D70C6A281BCC3BB95D9B1D22CBBB2A8BD71E1244240B170D41897EF69F
1BC31BDEB06C47866D2303AF7B017C8B22A376DC03743FA913373D1DB762DB39
F9ECE04A411D5DED8B56A295148EF6972659FCCB29805DC67D3BA6856EC0264B
AB8B05F607A30664B510A2C8991457AB70C20F07B3E8BEAACAA1D8B7A413AF65
1DE14F4FBB1747EEE014029B4E5F47BE38F0E277CBD9F2FDA1FB7D44995E4D07
D31F32CE31BC6A3A9DE6707D4561EF3F44456DD03307DB1F8F667A066D64C30B
A96581A0F2D06EA830455C3E368BE2FCA1046EB242D2D478C85D85C5DB303398
39A1FC51E67D3057BA81FA2FE4FE74098B4A3BDCF7238EFB6FC2ADA463D69CBE
90972E836FE52E5501526CBBD153D4D58EE82DADCF389E6239366EB23169F878
1E3BDFBE83EDC734702E02E2DE884D683220D0D81460DF6B0ED197B0125A1E88
A8A7F7E913C71188B48F3CB13F098B1D39CAA11BECBF81BE7E23C227450389FD
D834194933AFAA9182CA2A0B57727D6228893D728294E1E7CBDC9ABCA8E07D8E
D23169EB5B792D4F9AF4763F7670942A37A68120976794E74F3F8B73D430F152
A73C13CDED537E7921046DE0C54F151489E87C2D6B9D4AA4E99A15D8071F2A00
0D5171D5E47AF2274EFAD411DC918B5AD679D0F1D1EB10D167EF31DA91059FAA
E8251D528034BA5D00B6F437BCF8736FE0FF29B075E9716BDB70E0CB7D3D91F9
DE2CFC1F8A1959B6AD5C727F345B54A54A2932537667756D4F00DEDC9D321C36
D07358A9143DDF9A132BA7D5C3C66940EBB179D99528B5A09731ECAD5ECC647A
13299B99861FA11BB326D054D61809F8F98F8199E523B1E52CD1D66A881B9812
6C90761FAF000990A4CA26CDB19B23B27159BAC4877E3F54FB8909C84C326357
A476F4F4A9237B6BA49096007B70194C01938E96FCFC9287851CEAFAC6B1029E
042C79FBF50F2685BAC76EC935D4C5E4B0F677CBF4C70D4919E1CEAC21195548
D6D75F342A3779346122465F25786426710CB0CC4C3F540DE727D7D5CC79AC4D
F463B2B866686DC09E672DA81B2522DFD8D2C7D2769A9A4B724D46C3BB84702A
5AF4B55CB7DC1A20E9B29070DD558F699C76E7BB47E0CE802E8BF9D4B760FB43
7B4F2D190616CAAA032EACF7B9B231FFF88814BF812248C9CC46AD5F02460ABA
FEAC1C216229AA15E66E3105E878D2BCC028ED40CAEDA1F4F7E84C804677398D
09AC794E06375033BE9267EFC1D05EEDF0477008C5C1FCF920CC1C836B20C0F5
9539C0046CC0C0796DF48CFBA4D8D969031674EBDEE14834956B633217B97C18
B93C9A7B703C2220F874E0C928C3B4259C8FF4C41FC687E3DE5453C2A8BF9FD8
2F5116E94552F959A726BE38294868CE1714218B7A81D5ADBECB53259D835355
F946D86736FF9A27FCE7C8AB70627EA1AE449266F3EF533A33C00171A80EAD41
56EB2312C290B825DCB82BE3E2400F49C6F7C6AB36BA6AE74A97F477DBEFF72A
0FD0D9F2BB7A205C3F6D03D228BC13D300169730283975FC740CCF49F20975B8
D1B6C166AB2940C35A30198281198A2C9D0CF098EF391286C5EA6917C0D6EBCC
65200639884B1E58151932D288E1415E988698860A906EF64DFB140FA2838B58
BD9818A9512A91E0BA915DD9CA4ACC5DC7D960EA6D0670669C2EC144C8F3EEE4
45829BAE516F1D52175CA0B5C75D5B1418B8BAB53C0F7A0C5DE7686025F809D1
879E258CEC5A59A265D410ADE9862BD7E1B38528D8843D935EB1348C0645D4AF
3A215CB0012EB3B4C2FC0F298CAABFC39A8E937343EB6C9622677DF076DAB799
73C37437A230E49A41754958B27D6D53972F774B7A95D671B752A6FFAE1A015F
3427D062DD5A8484729EDB6476214BFD80A6EC050C781D7EEBD9FDE7239223ED
F5973A224BBD11FC629646602113FE92D93654823377D89B122F2D92A7B835C0
20BA9B93E6558CBF030CE1F967C819034A0F3CA403FAA6CB9E64224B78B24EC6
797E5BD93A1B2A5B96FD22D4E3D488AB6FA13DC9F3752D6CACB7D8C47668F975
020F5B562CABE1F85D55A6D40940D23D5A6AAB20590E34CF195B78BFFE3C3D01
C211DBD5E1BBEC99FC3FF3634C58965B96F4AC3AC8C6EDD45E31ED4CC74A6CF9
505F201D05D35745752639F74CF6D4A6375BCB4357D1656831FE9474778E4139
790EC3AE8935DA74E25D73B2E3A8E4B2D39CAE01F878383102EDAF21726D0F3A
2E02319BADEFE486B247A632AA41489504508595103C0F2B25D4C5C822404B0B
983A247CD668B46C0A685E1F4A3C713815AB961EBD33D9986B9A97AC0C7C89E7
B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSL10
%!PS-AdobeFont-1.1: CMSL10 1.0
%%CreationDate: 1991 Aug 20 16:40:20
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
end readonly def
/FontName /CMSL10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 65 /A put
dup 67 /C put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
/FontBBox{-62 -250 1123 750}readonly def
/UniqueID 5000798 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9429B9D40924DC059325D9D4CC0344F3F997A99E6CC0676735EBCD685AAC9142
08DAFEC78BB41AFC2F1C219910BDF41D6279284EF600B69776CA15BC8A34347C
30783C52AFA60FBE3E353E2AE354CF87B558776A22C776C7A0B5AB5CE1F941EF
C2D9CAC37294BF407A671F10E4743BF842143F4F7DFEE643BA3BBD8BB9E3F24A
BCCF7F0ADF8BA500620C81033EAE8C4EF2C1DEF13AC575F1B3BBB66F093D3B78
5412B82B67FFA087AF57182B2230F9F2137180CA58A7D9B2C822FF04BE6CD01D
43B2CA7058C7B953F6D9B5D6E91ECBAA5CDE1159B0E59C83DBAD96D6C8C8BAB1
374EF652D10C0F3EE7104472C98DD3572AAF2D45A70BF7061447E21EE3C3BF23
DF39C2D1B35B42CD5297BEBE6BC94F7C9DC6E61EC67E4F677256FED9064BD3E4
B51A71B1D27CA4E5AA9E1D8080E6DAB5310711EEF87C40859FA935B19524AE83
63B163FA8397BDFF443227FEDF7DB27DC35D89FB1C5E435DA0619A5C88AFC73B
89A2DF5E767C5B536BC7167A840A0C32BD57A14DE69A7D0D819AC36FF32F908A
5070F32983BB007437E3500799DF5E0AD3710A4C0000F0098D5BE99F2EB9C1C2
C444FD9552D0DCA098A94B3BF176F511CEE13DB7EFFAED7C47B5ADCF8D4700F5
7B6DF50EE617C00966B9A2828882804DB7477F4A8CF5345B7F3568B4F72BCE73
2E2AA5BC4B4C70E21F3AD9AFC3B8605A00D67EF9ED1F4D13DDAA920D45B43CE0
0941BF17CF05D2B777C11D4D844AB20C0693D1DDF00B27D9E1AA2D98A4A06CC6
D342AD8F644F4787B66CA7D861E7CE13FCDA85C1B0C9F94009768EA89838EBA2
7818F40BEB71E34A089F01ACF9ACC468D0FEC28838E89918992B538F40242348
E306F52C90C6D4C0EC3D78284F4D545CBEF20595F75DC006630DB1F76948E386
3706B12B0FA425976A103E232050894E20734B0341BA84C1231130930BDF6352
28B77FC94AA613F0F4BBC94637E72F03AD8E183B5D71C53B60BADB13DF0A5B86
D8BA6A36A3D3E6DA0EF229693ED01CE24C45BF2CB717D5EB44A5E0C91FD1686B
E61D3D37A7FB3A202986BB8C1D5B6136E8470C3C40A4BF6590D2A02B1F97BC1D
DC904073F98CCFE9DA86196A4EF8980BEB470D47164218489073DF7C9FE91415
C5D57C726158FF927B17AE6506AF2292A03CA52787525B650C6D433DC9B6AA6A
DA76188288B96D1FCC162B8C54B8480697518EC8FD4841BE712EBABDC0BE6454
A1920CD113678907E6CDC9C1C0D96D061C778CAB3994349F2A84BD6B3F8BE426
ED2EB7C6383FC74DED21CA20F40B1EAC1A0B552D89C92F160A19FC31E5FD563F
FD43A75D14D1F44C6B411FA047723E99E961AB42FC04F85844B83C6E74343973
00ACD719F6148738F315FBC676B0B666056FE294236D870A2B05F1FFC1A4D751
80202C29717D0922BBC7B5A6DBF12819519064AB35C88228AAAB78828C065ED1
0AF82959CCF0148DEBD1A5FFC37B30225860A7E4A9185541BEB785F0B9D2069F
A5B55BDEC513E1F7C692C9A76D839CF6184D27D1BEFF88E7C9D0A7C60DEFB6C5
D4D192A9D66EB41FFB7B58A50DD6E08F9689420999EE0B96D76A47C36BD967CA
0295092B2CD202EDAA254F148D8EB373E8B01B1893F8DC3A078259F51C48FACF
9C7D2170C8069FDCC6F080944A977FA4BF832553DB6CB09F8C74A24A196CE703
C1BFC72FD02E4010212B27B4A524D8C065111F091FE338E2E1E9713DD57CF805
E38F406948EA13E67F4A8B76CC79BC82BE79240F31B695643CBC589E814D8CD3
BB30D6424C654DF90CA1099A1B64C8B92133696F6981A721A1E0E6581F8C04A8
892E93642A4B0ABA5F943E3A119DD7D95447E8E9CB734E1CC1FB228F1B335FBB
F8CD826B8C3B7981E4469F68D2A54EAF1A099CDC223BA256BB04589F3254E468
DDA8C96112577668A80EE21246BFE7E05EDB72E89B98C3584D43FB12043866EC
ABF7A95E6842A35D8FE31CABBADB0C4396F2B8E9644D0C076465051C2CDC096E
8E9833CEC1B7F552D3C880CFD8D8F09DF0DAAF21CAEC458337E92B66F918DD36
7CF69FBEF1F95F78821450E42460B006CFCAA4BEC4B41F9398319E9192D5303A
92ED4D88B78D54BDB3A4B0258A8166376BF07D49158733D3E071660A9CD4F510
082073184266712B9D15A325949D1379759505D118FD0BFEE4796C1AA22BCC13
A7F46C0A1352AA756A530E44CA24421BD7BFFA03526714D62C6241057784B2F4
88AC1B94CEDB97C0F531CBC22B07772AE938271E7C4D9A7CE0840C35BDC7FDF7
9F50FC87FC40D11BF42770047B4449C8A80A48551D69386CC7FC214FD7735A55
F82CF9D0C02F3D13DF4844BCE2AF1CAB0BA07648E6E1657C42AD4B7FDD1F385B
9FE3EAC2FE5E13B21E2C450A7B7B885B202A20B85309D7F4375F08544BE02947
B6E46893B39C063A9CBE26A9F1A989B1D80D2CC16289AD7168EB24CA2CCE8B74
C10889D1D41642AFB2FCCD2F189ADC934ADF40CE45234A8ABC8CCA42B127A16B
6061A1FEACFFCE5E32312693734C830424FA4CA9EA785AD8FF2660410B1A6029
3812025BFB7029FEB8A472E23B08716C87263C41F2D28E9B0CC9646003840AA9
07A32C64FF8E957C6D3BEF293CA46A1F464695C012D9A365BA4752713ACB6740
BFF1D758DEBFB7BB86FD9E840B89DE57BFE4CAB2AF4B81F236B202928130F655
632C929CBF129A40439DC8DF07CEA111E7FA2A44EDE53AE8A1EBBFB8F6A2D0EE
5222123E71F1581B6F414379C4273C5DE64869550F721A52906FD1B6A0450480
94B019C4734B354C907FC7915124F08A128AFD03BD1E54E5BC114DCB6610FB31
D288EA4283971F35A5537CD4FA78EFDDBAD3523C0740A13079BD77F99D4F66E3
0800E12399841B32655EC99C02666F9CA1FA5897EB1DCA619A69177EE43C3A6C
D47F4185E232BC891B28743AF07748DD64C6EEDBF49BD54EDA932A817CC685C9
056CFE7970252D7BDEE6F8C46DF3DDE01AB62405CDC107B24B40B2515DEFADE1
E0B2AB3CE63A1883B2731ABE46D38AA2020520D6C4AF048B818FFF35B394B05D
1BA0DD95641A056D1D175B2C39F2E910A0738A68E8ADD8D403815943B984B5DE
14FCCE4925003C3FBF30B100E2BD0E0FD80AFBD365F0B6B1BF4E1AF63E2FA168
2773359A4D4B5A84216B9FF18C655F132D3FAFC75120DF80B9527F6EA50EAB93
5AE704B89AB8AA1257C88B3780E8490AA1D0DFF8DE4041569B01040236817779
3DA94AD9A07DBEDD27B40FD552EA526316C102159BCDF8B15E51571E5C344B4A
785957F47BD82F0B89F70A9712F54B7E1875A77454DC31B3F6E98C6F86596AA2
36B95A04B3EE5F2ECCA60C0CE38CCE4FE96BECC05B1FFBE7595BCAED6891BD71
8C7C9D544DFA90E8818A0B56CC964BB05F22604D50B12C3E8DDEE51FB928CC0E
4CF8B0B299E38E1D5485AFD4EC6D03531CDA1AB815CBAD2AAB91AD71290065A9
BC4D6C9FA097A7F31DD78D99AA3412008E6A787849B1749AECB9EC9F3FB75347
83DA0CA5D5ABE1FECC52DD5F9588FB754E6A149BB46DFF6E8A55A273FF77F05A
156A028556F44D137054D189D3FBD3C694816379C66B2FF82D8FFFCEDA05E72C
9137C166799078FE50F2152E7D87F9B76A3B985E212D1891267664309F1378D0
BBA90B716D4D26D1E68FB5238FE4929D81B0F791DC89A9ADA343D5FFE4AED067
CD8ABA18AA4515F62EE46D46DFA4A89650571FAEE1FE51870FB1682E3F8D8821
78B5BDA7714635A842A2B27176C7245672998305E8B675D77DE21127B7BE8495
40D952F026E6DE7C5ECB0A710B5852473C71FC5C7C1BCD0E17487871D617A16D
6E9DA1B9CD9994128AA43C72E21B2726DF79B20999ADEE4F385AEE443F9AF405
FE3B7E5D6BE7E5CAABC24D5CE4F66354F1696DAA0C7D588C3F4D274BD257D362
A96F52E3FCDD84CF975DC47002F1D8B45D2729BE20693FE67D1E7DE86C529B3C
0D2B2CC95DDD354CAF8AABAC3D61D70BF66CD616B14342A0105E02FF8E2DDF33
7B1EFC9FD6FE1435A4F5D30D2C82F8889F00E4B4F7057BB2DD3201B1FDB2A08D
919C2780AE1F4C31968A42B06CA3893B6DFCFFA432886DCFEDD232C1DF4DD6C5
2CF1B1180AF184E6781A2E8157BD12492F3144CAFAF7A8CEC27ADB4CBE08CCD3
45ADCC5C422EDF683F4489B55A091D384E864FB68D5855445885F38B1EFF408B
4E9EFD28E53A2B5DCC64FA0CDAEA2EE4BC16D055479ACCB4308DDD4C76BB17E6
90BDD873A0D0623923612A4049D55731CD8EFD7E2EF372D305004A3FE141C903
86D2FF50C36402B94EFFC3329757F55AB95B52649B0384C3259FF7FF6FF30416
DEF4533A3B310AF27F4AA2C5BEA4C87D4CDB070F3E1DD1B0120C9D07EDDDA1CE
80C6D1A6A9161E3658557FCA88B059488AF7D0417A9B2CAD4AFF349192B67899
3FA92571CBF962F545FF2A8676901464FFCC52113582BE55FC48AA519D4A0B4C
651CC128B44299359295D505D03B2284773BA83CFE9F581DC3D722A10E350051
25FB984EAB371472B0526BCD4BCE3730801802C0D746BAD53D499AD47AFD76EF
D42238C3A06C23C3F977D570E3D7260D629B7E9AE4403E91D993D11E38E74746
E58F27A8FE44CAEC371D86992C655DDC44C1EE61547FEC9748257949FAFB8CA5
BF262B5120F70D4AA7C0A4EF7A7939FBFDD339F50F09E0C2DAE640B9A9F9FCF3
C5959749EA679559ED4407750F16DCBF88AD1206105A974DFCB165710E7EA965
34855239D8116EBF4BE04C308F971454669351C16CE4FEFA601FFEE40A0D3BC3
2CAFD8A15D8C678427C4D6940F2A42385BAA425F80FE529D1A9986FBB722BA1D
336469AE6777136D86F02429949115E594CCE164BD5C12C7CC3B6B14561C54E8
FE9FAEDB933D7A1B3DFCFA52E21AB973685BAF2A67EDF40DED4C4BC4AC60054E
DE813B0AF231DEA24CE0A49D1A134DA7CD38DDD756D50C19DFF5D5D1E4DC7149
8A8D6411426409059351C93DED42C3A828BB3BBE1213BF772915E43E3ABD28FB
7E3224950D23BDFCAAF2C0B8770291B8BAF126B914785D886F292E9B7F8ED8DF
9A96B74D9BD9AE469B8896F400789C2D6860D1D8503B6C41F7428CF47F48C755
D2C02C54C186F9DFFD33D508524979CA3D3B928758C1E73109122761480E349E
CA59491239F584A750A2D708D23C56C88D72B02B1100F98DF827DBF544DCFA78
04E3D2B1BAFB9490BD21B9F31FF20F2AA4E287EC3019A156FC4B900BF97788B7
F2B3707C23A181D315E6F8057DCB46B863EC716992EEA20BE5B78EF1D5D0FFDD
AA03B4E2BB0D919DAB1157A3C40E3D32850A634F45C7DC603F762EDD6632462D
1C545E49447ACC17DF89440BC0A768A20D49F3E21F24AA8FFC5606078789F407
09E99FBE746A5AEF5437F3D9E1C0457F44BD95891C3C8DD17587118476661524
3F90CFB297E2232A7B79E8D5883328F37FA9E958FC15E0C3DBBADFBE90F6BC00
E4AC120F0E22C2AAE95FB941DFDCD33D4712A6CC6F689AFD3F5DC039ED748067
A00444AC6A913C4E17B6EFAA6BD84D885572804437FE671BAF09661B2E92A5F2
7420A9941764DA01064F2EE36D0153EFD583632C020D6995B9B0ADD10398111B
ABBBD7CB973773D64E27C3B385B0F7440AFB7C382F1A84FDB3EC2DC887A80516
61EFEACDA3898AC2B7A39B751DA361DDF7FF2FEEECFDCA01F6EDE91F26956371
54F66B4A1E0DADC7BB1EF3DE2C047917BC36714E7B1C46BE3F39B4EBA28F4263
8BCD42728886448829D2935C19ED4A73AE80A55FDD030A1B41BB91A39D55160B
CBC440753BA380B2579183277CF965DC7A56D278510EC14351AAAC775AAAAAA6
A56B652C4DC9CE480D98C5B8D06A894EB78D6D1A342C59094FE95B61973842DD
4FC87B7EB807359B6231C69E8D0212BC49E842543E662EA19773A7B528E69461
417C0C439C9C2963A32ADB59FF43EA646D8686A9A697126084B1348E906AD691
35A83EA5A333C778B5C6B8B5D791E5CC0C055D6E5E1FC04E13880A2B7C992FD4
A3009483EAE63C762CCF0CB9C34A691CB66171FE36B3BA415820A0C3A48ED7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (18-18.dvi)
@start /Fa 133[44 44 44 44 44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 9[44 9[44 4[44
7[44 5[44 6[44 1[44 1[44 44 44 3[44 44 40[{}38 83.022
/CMTT10 rf /Fb 134[51 4[38 38 38 1[54 49 54 1[27 2[27
54 49 30 43 54 43 1[49 12[70 16[70 1[73 65[{}19 99.6264
/CMSL12 rf /Fc 133[51 51 51 51 51 51 51 51 51 51 51 51
51 51 51 2[51 51 51 51 51 51 51 51 51 12[51 51 6[51 8[51
2[51 5[51 1[51 51 51 51 51 51 51 51 51 51 51 51 51 44[{}43
99.6264 /CMTT12 rf /Fd 196[83 59[{}1 83.022 /LASY10 rf
/Fe 196[100 59[{}1 99.6264 /LASY10 rf /Ff 205[22 50[{}1
41.511 /CMSS8 rf /Fg 134[61 15[43 43 34[56 56 4[61 63[{}6
90.9091 /CMEX10 rf /Fh 167[144 76[47 47 6[42 42 2[{}5
99.6264 /CMEX10 rf /Fi 163[232 13[72 78[{}2 99.6264 /MSBM10
rf /Fj 139[33 35 5[72 28[58 9[52 28[35 24[22 16[{}7 90.9091
/CMSS10 rf /Fk 203[71 45[61 6[{}2 90.9091 /MSAM10 rf
/Fl 189[77 13[77 52[{}2 99.6264 /MSAM10 rf /Fm 135[24
3[19 20 5[42 3[13 54[26 50[{}6 49.8132 /CMSS8 rf /Fn
199[32 56[{}1 49.8132 /stmary6 rf /Fo 139[41 13[32 102[{}2
90.9091 /CMBX10 rf /Fp 161[45 32[71 3[45 1[45 45 45 2[45
45 3[30 3[35 35 17[45 1[45 14[68 3[76 1[{}15 90.9091
/CMR10 rf /Fq 141[76 68 17[61 61 60[91 17[45 45 13[71{}8
90.9091 /CMSY10 rf /Fr 153[45 2[39 39 48 26[58 67 75
65 69 68 5[25 21[47 15[53 21[{}13 90.9091 /CMMI10 rf
/Fs 139[32 13[25 102[{}2 66.4176 /CMBX8 rf /Ft 161[30
43[30 30 7[24 24 17[30 1[30 20[{}7 49.8132 /CMR6 rf /Fu
134[40 1[55 38 45 28 34 35 1[42 42 47 1[21 38 1[25 2[25
38 42 38 38 42 50[25 46[{}20 83.022 /CMTI10 rf /Fv 179[58
8[44 67[{}2 66.4176 /rsfs10 rf /Fw 190[50 5[20 59[{}2
58.1154 /CMMI7 rf /Fx 139[29 116[{}1 58.1154 /CMBX7 rf
/Fy 139[27 13[21 102[{}2 49.8132 /CMBX6 rf /Fz 128[42
6[42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42
42 42 1[42 11[42 42 42 42 42 42 42 42 42 42 42 42 42
42 42 1[42 42 42 1[42 2[42 1[42 40 39 1[36 9[23 46[38
39 40{}49 83.022 /XYDASH10 rf /FA 176[77 63[77 15[{}2
99.6264 /stmary10 rf /FB 160[80 80 90[60 3[{}3 119.552
/CMSY10 rf /FC 179[87 5[89 56 1[66 90 80 65[{}6 99.6264
/rsfs10 rf /FD 160[42 42 45[18 47[48{}4 49.8132 /CMSY6
rf /FE 185[39 45 50 44 46 46 5[19 59[{}7 49.8132 /CMMI6
rf /FF 131[0 0 0 0 0 0 0 0 0 0 0 2[0 3[0 0 2[0 3[0 19[0
14[0 4[0 2[0 0 0 0 0 0 0 0 1[0 2[0 0 0 0 0 0 0 0 1[0
0 1[0 0 0 0 4[0 8[0 14[0{}45 83.022 /XYBTIP10 rf /FG
131[0 0 0 0 0 0 0 0 0 0 0 2[0 3[0 0 2[0 3[0 19[0 14[0
4[0 2[0 0 0 0 0 0 0 0 1[0 2[0 0 0 0 0 0 0 0 1[0 0 1[0
0 0 0 4[0 8[0 14[0{}45 83.022 /XYATIP10 rf /FH 135[33
1[33 1[25 27 24 3[36 56 17 2[17 3[31 3[34 46[35 50[{}12
66.4176 /CMSS8 rf /FI 141[59 53 7[27 27 8[47 47 2[47
40[47 1[19 23[55 9[35 10[35 2[55{}13 66.4176 /CMSY8 rf
/FJ 134[61 61 83 61 61 59 46 60 1[56 63 61 74 51 63 1[30
61 64 53 56 62 59 58 61 8[81 3[78 61 80 1[74 84 1[99
68 2[40 2[71 74 83 78 9[55 55 55 55 55 55 55 55 55 55
1[32 38 45[{}48 99.6264 /CMCSC10 rf /FK 134[45 45 66
45 50 35 37 33 2[49 50 77 23 47 1[23 50 49 1[43 50 43
50 47 13[54 2[62 3[53 67 4[55 3[65 12[49 49 49 49 49
49 2[33 3[38 24[23 16[{}36 99.6264 /CMSS12 rf /FL 240[65
15[{}1 83.022 /stmary10 rf /FM 139[37 7[27 5[29 44 18[72
8[36 23[48 49[{}7 83.022 /CMBX10 rf /FN 158[44 31[62
27[43 9[47 5[48 21[{}5 83.022 /CMMI10 rf /FO 190[49 7[33
33 33 33 33 33 33 33 33 33 48[{}11 58.1154 /CMR7 rf /FP
132[56 6[44 7[31 5[34 51 17[62 84 3[88 8[74 69[{}9 99.6264
/CMBX12 rf /FQ 161[35 20 1[20 29[55 3[35 35 35 35 35
35 35 35 35 35 6[27 27 17[35 1[35 14[53 3[59 44{}21 66.4176
/CMR8 rf /FR 142[32 36 1[43 62 1[37 29 24 41 34 34 33
36 31 30 37 21[60 4[45 52 58 50 53 53 5[20 21[36 9[40
1[41 3[41 9[45 11[{}28 66.4176 /CMMI8 rf /FS 142[43 49
3[29 51 40 33 56 47 48 45 51 42 41 51 41 6[57 81 6[77
63 4[83 4[63 72 81 70 74 73 1[49 3[27 27 20[50 9[55 1[55
2[59 57 9[62 11[{}35 99.6264 /CMMI12 rf /FT 141[83 75
2[50 3[28 39 39 50 50 5[61 66 66 2[66 27[77 8[0 3[66
8[100 7[100 8[77 2[77 77 1[77 2[50 50 10[50 77 28 77{}27
99.6264 /CMSY10 rf /FU 132[50 40 47 45 65 45 52 32 40
41 45 50 50 55 80 25 45 30 30 50 45 30 45 50 45 45 50
3[30 50 30 60 1[72 97 1[72 70 55 71 1[66 1[72 87 61 1[51
38 72 1[64 66 74 70 69 72 1[50 4[30 50 50 50 1[50 50
50 50 50 50 50 30 35 30 1[50 40 40 30 75 3[50 8[52 5[50
5[57 55 60 11[{}76 99.6264 /CMTI12 rf /FV 148[42 11[55
55 60[83 17[42 42 83 9[42 3[{}8 83.022 /CMSY10 rf /FW
139[49 38 50 14[49 48 51 31[68 18[27 46[{}8 83.022 /CMCSC10
rf /FX 128[49 2[98 49 43 51 51 70 51 54 38 38 38 51 54
49 54 81 27 51 30 27 54 49 30 43 54 43 54 49 2[49 27
49 27 60 73 1[100 73 73 70 54 72 1[66 76 73 89 61 76
50 35 73 77 64 66 75 70 69 73 1[46 1[76 2[27 49 49 49
49 49 49 49 49 49 49 49 27 33 27 76 49 38 38 27 4[49
1[27 6[49 43 1[49 1[49 49 4[81 54 54 57 5[73 1[68 1[81
61{}94 99.6264 /CMR12 rf /FY 134[62 62 85 1[65 46 46
46 1[65 59 65 98 33 62 1[33 65 59 36 52 65 52 1[59 8[88
120 1[88 85 65 86 2[91 88 107 73 2[42 88 92 76 80 89
85 83 88 1[55 4[33 59 59 59 59 59 59 59 59 59 59 1[33
39 45[{}54 119.552 /CMR12 rf /FZ 132[42 37 44 44 60 44
46 32 33 33 44 46 42 46 69 23 44 25 23 46 42 25 37 46
37 46 42 2[42 23 42 23 51 62 62 85 62 62 60 46 61 1[57
65 62 76 52 65 43 30 62 65 54 57 63 60 59 62 1[39 1[65
1[23 23 42 42 42 42 42 42 42 42 42 42 1[23 28 23 1[42
32 32 23 4[42 8[42 37 1[42 2[42 42 4[46 46 48 11[{}86
83.022 /CMR10 rf /F0 134[44 4[32 33 33 1[46 42 46 1[23
2[23 46 42 25 37 46 37 1[42 12[60 16[60 1[62 20[23 44[{}20
83.022 /CMSL10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 536 1
TeXDict begin 536 0 bop 0 TeXcolorgray 0 120 a F0(Theory)27
b(and)g(Applications)g(of)h(Categories,)e FZ(V)-7 b(ol.)36
b(18,)27 b(No.)37 b(18,)27 b(2007,)e(pp.)38 b(536{601.)p
Black 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 271
494 a FY(ON)g(THE)g(AXIOMA)-10 b(TISA)g(TION)39 b(OF)g(BOOLEAN)g(CA)-10
b(TEGORIES)993 623 y(WITH)39 b(AND)g(WITHOUT)f(MEDIAL)1340
859 y FX(LUTZ)32 b(STRASSBUR)m(GER)p 0 TeXcolorgray 0
TeXcolorgray 307 1158 a FW(Abstra)n(ct.)83 b FZ(The)22
b(term)h(\\Bo)r(olean)e(category")f(should)i(b)r(e)h(used)g(for)f
(describing)g(an)g(ob)5 b(ject)23 b(that)307 1258 y(is)d(to)f
(categories)e(what)j(a)f(Bo)r(olean)f(algebra)g(is)i(to)f(p)r(osets.)34
b(More)19 b(sp)r(eci\014cally)-7 b(,)20 b(a)g(Bo)r(olean)e(category)307
1357 y(should)27 b(pro)n(vide)f(the)h(abstract)f(algebraic)f(structure)
i(underlying)f(the)i(pro)r(ofs)e(in)h(Bo)r(olean)f(Logic,)307
1457 y(in)35 b(the)h(same)f(sense)f(as)h(a)f(Cartesian)g(closed)h
(category)e(captures)h(the)i(pro)r(ofs)e(in)i(in)n(tuitionistic)307
1557 y(logic)28 b(and)g(a)h FV(\003)p FZ(-autonomous)d(category)h
(captures)h(the)h(pro)r(ofs)f(in)g(linear)g(logic.)40
b(Ho)n(w)n(ev)n(er,)27 b(recen)n(t)307 1656 y(w)n(ork)d(has)g(sho)n(wn)
g(that)i(there)e(is)h(no)g(canonical)f(axiomatisation)f(of)i(a)g(Bo)r
(olean)e(category)-7 b(.)35 b(In)25 b(this)307 1756 y(w)n(ork,)f(w)n(e)
h(will)g(see)f(a)h(series)f(\(with)h(increasing)f(strength\))h(of)g(p)r
(ossible)f(suc)n(h)h(axiomatisations,)e(all)307 1856
y(based)i(on)f(the)i(notion)e(of)h FV(\003)p FZ(-autonomous)e(category)
-7 b(.)34 b(W)-7 b(e)25 b(will)h(particularly)d(fo)r(cus)i(on)g(the)g
(medial)307 1955 y(map,)37 b(whic)n(h)e(has)g(its)g(origin)g(in)g(an)g
(inference)g(rule)g(in)g(KS,)h(a)e(cut-free)h(deductiv)n(e)h(system)f
(for)307 2055 y(Bo)r(olean)28 b(logic)h(in)g(the)h(calculus)f(of)g
(structures.)42 b(Finally)-7 b(,)30 b(w)n(e)f(will)g(presen)n(t)g(a)g
(category)e(of)j(pro)r(of)307 2154 y(nets)e(as)f(a)g(particularly)f(w)n
(ell-b)r(eha)n(v)n(ed)g(example)h(of)h(a)f(Bo)r(olean)g(category)-7
b(.)0 2475 y FY(1.)38 b(In)m(tro)s(duction)0 2671 y FX(The)26
b(questions)g FU(\\What)i(is)g(a)f(pr)-5 b(o)g(of)10
b(?")47 b FX(and)25 b FU(\\When)i(ar)-5 b(e)28 b(two)f(pr)-5
b(o)g(ofs)27 b(the)h(same?")46 b FX(are)25 b(fundamen)m(tal)0
2791 y(for)37 b(pro)s(of)f(theory)-8 b(.)58 b(But)37
b(for)g(the)g(most)h(prominen)m(t)g(logic,)h(Bo)s(olean)e(\(or)f
(classical\))j(prop)s(ositional)0 2912 y(logic,)33 b(w)m(e)g(still)h
(ha)m(v)m(e)f(no)g(satisfactory)g(answ)m(ers.)146 3032
y(This)41 b(is)e(not)g(only)g(em)m(barrassing)i(for)e(pro)s(of)f
(theory)h(itself,)j(but)d(also)g(for)g(computer)h(science,)0
3152 y(where)h(Bo)s(olean)e(prop)s(ositional)g(logic)g(pla)m(ys)i(a)e
(ma)5 b(jor)39 b(role)h(in)f(automated)h(reasoning)f(and)h(logic)0
3273 y(programming.)69 b(Also)42 b(the)g(design)g(and)f(v)m
(eri\014cation)i(of)e(hardw)m(are)h(is)g(based)g(on)f(Bo)s(olean)g
(logic.)0 3393 y(Ev)m(ery)34 b(area)e(in)g(whic)m(h)i(pro)s(of)d(searc)
m(h)j(is)f(emplo)m(y)m(ed)h(can)e(b)s(ene\014t)h(from)f(a)g(b)s(etter)h
(understanding)g(of)0 3514 y(the)38 b(concept)g(of)f(pro)s(of)g(in)h
(Bo)s(olean)f(logic,)i(and)e(the)h(famous)g(NP-v)m(ersus-coNP)i
(problem)e(can)g(b)s(e)0 3634 y(reduced)k(to)e(the)h(question)h
(whether)f(there)h(is)f(a)f(short)g(\(i.e.,)j(p)s(olynomial)e(size\))h
(pro)s(of)d(for)h(ev)m(ery)0 3754 y(Bo)s(olean)32 b(tautology)h
([CR79].)146 3875 y(Usually)43 b(pro)s(ofs)e(are)g(studied)i(as)e(syn)m
(tactic)i(ob)5 b(jects)43 b(within)f(some)g(deductiv)m(e)h(system)h
(\(e.g.,)0 3995 y(tableaux,)30 b(sequen)m(t)h(calculus,)h(resolution,)e
(.)16 b(.)g(.)g(\).)43 b(This)30 b(pap)s(er)f(tak)m(es)h(the)g(p)s(oin)
m(t)f(of)f(view)i(that)f(these)0 4115 y(syn)m(tactic)37
b(ob)5 b(jects)37 b(\(also)f(kno)m(wn)h(as)e(pro)s(of)g(trees\))i
(should)f(b)s(e)g(considered)h(as)f(concrete)h(represen-)0
4236 y(tations)g(of)f(certain)h(abstract)g(pro)s(of)f(ob)5
b(jects,)38 b(and)f(that)f(suc)m(h)i(an)f(abstract)g(pro)s(of)f(ob)5
b(ject)37 b(can)g(b)s(e)0 4356 y(represen)m(ted)29 b(b)m(y)e(a)g
(resolution)g(pro)s(of)f(tree)h(and)f(a)h(sequen)m(t)h(calculus)g(pro)s
(of)e(tree,)i(or)f(ev)m(en)h(b)m(y)f(sev)m(eral)0 4477
y(di\013eren)m(t)34 b(sequen)m(t)h(calculus)f(pro)s(of)d(trees.)146
4597 y(F)-8 b(rom)26 b(this)g(p)s(oin)m(t)h(of)e(view)j(the)e(motiv)-5
b(ation)26 b(for)f(this)i(w)m(ork)g(is)f(to)g(pro)m(vide)h(an)f
(abstract)h(algebraic)p 0 TeXcolorgray 0 4709 600 4 v
149 4801 a FZ(Receiv)n(ed)h(b)n(y)f(the)h(editors)f(2006-06-12)c(and,)k
(in)h(revised)f(form,)g(2007-10-05.)149 4900 y(T)-7 b(ransmitted)28
b(b)n(y)f(R.)h(Blute.)g(Published)f(on)h(2007-10-18.)k(Reference)27
b(corrected)g(2007-12-13.)149 5000 y(2000)f(Mathematics)h(Sub)5
b(ject)29 b(Classi\014cation:)35 b(03B05,)26 b(03G05,)g(03F03,)g
(18D15,)g(18D35.)149 5100 y(Key)d(w)n(ords)f(and)h(phrases:)34
b(Bo)r(olean)22 b(category)-7 b(,)22 b(*-autonomous)f(category)-7
b(,)22 b(pro)r(of)h(theory)-7 b(,)24 b(classical)d(logic,)j(pro)r(of)0
5199 y(nets.)173 5296 y(c)149 5299 y FV(\015)k FZ(Lutz)g
(Stra\031burger,)d(2007.)35 b(P)n(ermission)26 b(to)i(cop)n(y)e(for)h
(priv)-5 b(ate)28 b(use)f(gran)n(ted.)p 0 TeXcolorgray
0 TeXcolorgray 1817 5511 a FX(536)p 0 TeXcolorgray eop
end
%%Page: 537 2
TeXDict begin 537 1 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(537)p 0 TeXcolorgray
0 320 a(theory)29 b(of)e(pro)s(ofs.)42 b(Already)29 b(Lam)m(b)s(ek)g
([Lam68,)e(Lam69])h(observ)m(ed)i(that)e(suc)m(h)h(an)f(algebraic)h
(treat-)0 440 y(men)m(t)i(can)g(b)s(e)f(pro)m(vided)i(b)m(y)f(category)
f(theory)-8 b(.)44 b(F)-8 b(or)29 b(this,)j(it)e(is)g(necessary)j(to)d
(accept)h(the)g(follo)m(wing)0 560 y(p)s(ostulates)i(ab)s(out)g(pro)s
(ofs:)p 0 TeXcolorgray 145 764 a FT(\017)p 0 TeXcolorgray
49 w FX(for)j(ev)m(ery)i(pro)s(of)e FS(f)47 b FX(of)36
b(conclusion)i FS(B)j FX(from)c(h)m(yp)s(othesis)h FS(A)f
FX(\(denoted)g(b)m(y)h FS(f)21 b FX(:)35 b FS(A)f FT(!)g
FS(B)5 b FX(\))37 b(and)244 884 y(ev)m(ery)c(pro)s(of)e
FS(g)k FX(of)c(conclusion)h FS(C)39 b FX(from)31 b(h)m(yp)s(othesis)j
FS(B)i FX(\(denoted)d(b)m(y)f FS(g)15 b FX(:)33 b FS(B)f
FT(!)c FS(C)7 b FX(\))31 b(there)h(is)g(a)244 1005 y(uniquely)h
(de\014ned)f(comp)s(osite)g(pro)s(of)d FS(g)22 b FT(\016)c
FS(f)42 b FX(of)30 b(conclusion)i FS(C)38 b FX(from)30
b(h)m(yp)s(othesis)j FS(A)e FX(\(denoted)244 1125 y(b)m(y)i
FS(g)26 b FT(\016)c FS(f)g FX(:)33 b FS(A)28 b FT(!)f
FS(C)7 b FX(\),)p 0 TeXcolorgray 145 1328 a FT(\017)p
0 TeXcolorgray 49 w FX(this)33 b(comp)s(osition)g(of)f(pro)s(ofs)h(is)g
(asso)s(ciativ)m(e,)p 0 TeXcolorgray 145 1532 a FT(\017)p
0 TeXcolorgray 49 w FX(for)j(eac)m(h)h(form)m(ula)f FS(A)h
FX(there)g(is)g(an)f(iden)m(tit)m(y)i(pro)s(of)e(1)2257
1547 y FR(A)2325 1532 y FX(:)e FS(A)h FT(!)e FS(A)k FX(suc)m(h)h(that)e
(for)f FS(f)22 b FX(:)35 b FS(A)f FT(!)g FS(B)244 1652
y FX(w)m(e)f(ha)m(v)m(e)h FS(f)f FT(\016)22 b FX(1)814
1667 y FR(A)899 1652 y FX(=)27 b FS(f)39 b FX(=)27 b(1)1241
1667 y FR(B)1324 1652 y FT(\016)22 b FS(f)11 b FX(.)0
1856 y(Under)38 b(these)h(assumptions)g(the)f(pro)s(ofs)f(are)h(the)g
(arro)m(ws)g(in)g(a)f(category)h(whose)g(ob)5 b(jects)39
b(are)f(the)0 1976 y(form)m(ulae)f(of)f(the)g(logic.)55
b(What)36 b(remains)i(is)f(to)f(pro)m(vide)h(the)g(righ)m(t)f(axioms)i
(for)d(the)i(\\category)f(of)0 2096 y(pro)s(ofs".)146
2217 y(It)46 b(seems)i(that)e(\014nding)h(these)g(axioms)g(is)f
(particularly)h(di\016cult)g(for)e(the)i(case)g(of)e(Bo)s(olean)0
2337 y(logic.)e(F)-8 b(or)30 b(in)m(tuitionistic)j(logic,)e(Pra)m(witz)
h([Pra71])f(prop)s(osed)h(the)f(notion)g(of)g FU(pr)-5
b(o)g(of)32 b(normalization)0 2457 y FX(for)j(iden)m(tifying)j(pro)s
(ofs.)52 b(It)36 b(w)m(as)h(so)s(on)f(disco)m(v)m(ered)i(that)e(this)g
(notion)g(of)f(iden)m(tit)m(y)j(coincides)f(with)0 2578
y(the)i(notion)g(of)f(iden)m(tit)m(y)j(that)d(results)i(from)f(the)g
(axioms)g(of)g(a)f(Cartesian)i(closed)g(category)f(\(see,)0
2698 y(e.g.,)c([LS86]\).)47 b(In)34 b(fact,)g(one)g(can)g(sa)m(y)h
(that)f(the)g(pro)s(ofs)f(of)h(in)m(tuitionistic)h(logic)f(are)g(the)g
(arro)m(ws)h(in)0 2819 y(the)28 b(free)g(\(bi-\)Cartesian)h(closed)g
(category)f(generated)h(b)m(y)f(the)g(set)h(of)e(prop)s(ositional)h(v)
-5 b(ariables.)43 b(An)0 2939 y(alternativ)m(e)24 b(w)m(a)m(y)h(of)e
(represen)m(ting)i(the)f(arro)m(ws)g(in)f(that)g(category)h(is)g(via)f
(terms)h(in)g(the)g(simply-t)m(yp)s(ed)0 3059 y FS(\025)p
FX(-calculus:)47 b(arro)m(w)34 b(comp)s(osition)g(is)g(normalization)g
(of)f(terms.)48 b(This)35 b(observ)-5 b(ation)35 b(is)f(w)m(ell-kno)m
(wn)0 3180 y(as)f(the)g(Curry-Ho)m(w)m(ard-corresp)s(ondence)i([Ho)m
(w80].)146 3300 y(In)28 b(the)h(case)f(of)g(linear)g(logic,)h(the)f
(relation)g(to)f FT(\003)p FX(-autonomous)h(categories)g([Bar79])f(w)m
(as)i(noticed)0 3421 y(immediately)35 b(after)d(its)i(disco)m(v)m(ery)h
([Laf88,)d(See89].)45 b(In)33 b(the)h(sequen)m(t)h(calculus)f(linear)f
(logic)g(pro)s(ofs)0 3541 y(are)24 b(iden)m(ti\014ed)h(when)g(they)f
(can)g(b)s(e)g(transformed)g(in)m(to)f(eac)m(h)i(other)f(via)f
(\\trivial")h(rule)g(p)s(erm)m(utations)0 3661 y([Laf95].)40
b(F)-8 b(or)25 b(m)m(ultiplicativ)m(e)j(linear)d(logic)h(this)g
(coincides)h(with)f(the)g(pro)s(of)e(iden)m(ti\014cations)j(induced)0
3782 y(b)m(y)39 b(the)g(axioms)g(of)f(a)g FT(\003)p FX(-autonomous)h
(category)f([Blu93,)h(SL04].)60 b(Therefore,)42 b(w)m(e)d(can)g(safely)
g(sa)m(y)0 3902 y(that)c(a)g(pro)s(of)g(in)g(m)m(ultiplicativ)m(e)j
(linear)e(logic)f(is)h(an)f(arro)m(w)h(in)f(the)h(free)g
FT(\003)p FX(-autonomous)f(category)0 4022 y(generated)e(b)m(y)h(the)f
(prop)s(ositional)f(v)-5 b(ariables)34 b([BCST96,)f(LS06,)f(Hug05a].)
146 4143 y(But)42 b(for)e(classical)j(logic)e(no)h(suc)m(h)g(w)m
(ell-accepted)i(category)e(of)e(pro)s(ofs)h(exists.)72
b(W)-8 b(e)41 b(can)h(dis-)0 4263 y(tinguish)d(t)m(w)m(o)f(main)h
(reasons.)60 b(First,)40 b(if)d(w)m(e)i(start)f(from)g(a)g(Cartesian)g
(closed)i(category)e(and)g(add)0 4384 y(an)f(in)m(v)m(olutiv)m(e)i
(negation)954 4347 y FQ(1)993 4384 y FX(,)f(w)m(e)g(get)f(the)g
(collapse)h(in)m(to)f(a)f(Bo)s(olean)g(algebra,)i(i.e.,)h(an)m(y)e(t)m
(w)m(o)g(pro)s(ofs)0 4504 y FS(f)5 b(;)17 b(g)e FX(:)36
b FS(A)42 b FT(!)f FS(B)46 b FX(are)41 b(iden)m(ti\014ed.)71
b(F)-8 b(or)40 b(ev)m(ery)j(form)m(ula)e(there)g(w)m(ould)h(b)s(e)f(at)
g(most)g(one)h(pro)s(of)e(\(see,)0 4624 y(e.g.,)h([LS86,)g(p.67])e(or)f
(the)i(app)s(endix)g(of)f([Gir91])f(for)h(details\).)63
b(Alternativ)m(ely)-8 b(,)43 b(starting)c(from)g(a)0
4745 y FT(\003)p FX(-autonomous)33 b(category)h(and)f(adding)h(natural)
f(transformations)g FS(A)c FT(!)g FS(A)23 b FT(^)g FS(A)33
b FX(and)h FS(A)29 b FT(!)f FP(t)p FX(,)33 b(i.e.,)0
4865 y(the)g(pro)s(ofs)f(for)g(w)m(eak)m(ening)j(and)e(con)m(traction,)
g(yields)h(the)f(same)h(collapse.)2852 4829 y FQ(2)p
0 TeXcolorgray 0 4977 600 4 v 112 5048 a FO(1)149 5079
y FZ(i.e.,)28 b(a)f(natural)g(isomorphism)g(b)r(et)n(w)n(een)g
FN(A)h FZ(and)g(the)g(double-negation)e(of)h FN(A)h FZ(\(in)g(this)g
(pap)r(er)g(denoted)f(b)n(y)3630 5046 y(\026)3630 5058
y(\026)3608 5079 y FN(A)p FZ(\))112 5148 y FO(2)149 5178
y FZ(Since)33 b(w)n(e)f(are)f(dealing)h(with)h(Bo)r(olean)e(logic,)i(w)
n(e)f(will)g(use)g(the)h(sym)n(b)r(ols)f FV(^)g FZ(and)h
FM(t)f FZ(for)g(the)h(tensor)e(op)r(eration)0 5278 y(\(usually)c
FL(\017)p FZ(\))h(and)f(the)h(unit)h(\(usually)e FM(1)g
FZ(or)g FM(I)p FZ(\))h(in)g(a)f FV(\003)p FZ(-autonomous)f(category)-7
b(.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 538 3
TeXDict begin 538 2 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(538)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 146 314 a FX(The)34 b(second)h(reason)e(is)h(that)e(cut)
i(elimination)g(in)f(the)h(sequen)m(t)h(calculus)f(for)f(classical)h
(logic)f(is)0 434 y(not)26 b(con\015uen)m(t.)43 b(Since)28
b(cut)e(elimination)h(is)g(the)g(usual)g(w)m(a)m(y)h(of)e(comp)s(osing)
g(pro)s(ofs,)i(this)f(means)g(that)0 555 y(there)k(is)g(no)f(canonical)
h(w)m(a)m(y)g(of)f(comp)s(osing)g(t)m(w)m(o)h(pro)s(ofs,)g(let)f(alone)
h(asso)s(ciativit)m(y)h(of)d(comp)s(osition.)146 675
y(Consequen)m(tly)-8 b(,)41 b(for)36 b(a)m(v)m(oiding)h(these)h(t)m(w)m
(o)f(problems,)i(w)m(e)f(ha)m(v)m(e)g(to)e(accept)h(that)g(\(i\))f
(Cartesian)0 796 y(closed)26 b(categories)f(do)f(not)g(pro)m(vide)i(an)
e(abstract)h(algebraic)f(axiomatisation)h(for)f(pro)s(ofs)g(in)g
(classical)0 916 y(logic,)38 b(and)f(that)f(\(ii\))h(the)g(sequen)m(t)j
(calculus)e(is)f(not)g(the)g(righ)m(t)g(framew)m(ork)h(for)e(in)m(v)m
(estigating)j(the)0 1036 y(iden)m(tit)m(y)34 b(of)e(pro)s(ofs)h(in)f
(classical)j(logic.)146 1157 y(There)j(ha)m(v)m(e)g(already)f(b)s(een)g
(sev)m(eral)i(accoun)m(ts)e(for)f(a)h(pro)s(of)e(theory)i(for)f
(classical)i(logic)f(based)0 1277 y(on)49 b(the)g(axioms)g(of)g
(Cartesian)g(closed)h(categories.)93 b(The)50 b(\014rst)f(w)m(ere)h
(probably)g(P)m(arigot's)f FS(\025\026)p FX(-)0 1398
y(calculus)e([P)m(ar92])e(and)h(Girard's)f(LC)g([Gir91].)81
b(The)47 b(w)m(ork)f(on)f(p)s(olarized)h(pro)s(of)e(nets)i(b)m(y)h
(Lau-)0 1518 y(ren)m(t)e([Lau99,)g(Lau03])f(sho)m(ws)i(that)e(there)i
(is)f(in)g(fact)f(not)h(m)m(uc)m(h)h(di\013erence)g(b)s(et)m(w)m(een)h
(the)e(t)m(w)m(o.)0 1638 y(Later,)c(the)f(category-theoretic)h
(axiomatisations)f(underlying)h(this)g(pro)s(of)e(theory)h(has)g(b)s
(een)g(in-)0 1759 y(v)m(estigated)30 b(and)f(the)g(close)h
(relationship)g(to)e(con)m(tin)m(uations)i([Thi97,)f(SR98])f(has)h(b)s
(een)h(established,)0 1879 y(culminating)g(in)g(Selinger's)h
FU(c)-5 b(ontr)g(ol)32 b(c)-5 b(ate)g(gories)36 b FX([Sel01].)43
b(Ho)m(w)m(ev)m(er,)33 b(b)m(y)d(stic)m(king)h(to)e(the)h(axioms)g(of)0
1999 y(Cartesian)k(closed)f(categories,)h(one)f(has)g(to)f(sacri\014ce)
i(the)f(p)s(erfect)g(symmetry)i(of)d(Bo)s(olean)g(logic.)146
2120 y(In)38 b(this)g(pap)s(er,)h(w)m(e)g(will)f(go)f(the)h(opp)s
(osite)g(w)m(a)m(y)-8 b(.)59 b(In)38 b(the)g(attempt)g(of)f(going)g
(from)g(a)g(Bo)s(olean)0 2240 y(algebra)e(to)f(a)g(Bo)s(olean)h
(category)g(w)m(e)h(insist)f(on)g(k)m(eeping)h(the)g(symmetry)h(b)s(et)
m(w)m(een)f FT(^)f FX(and)g FT(_)p FX(.)50 b(By)0 2361
y(doing)27 b(this)h(w)m(e)g(ha)m(v)m(e)h(to)e(lea)m(v)m(e)i(the)e
(realm)h(of)f(Cartesian)h(closed)g(categories.)43 b(That)27
b(this)h(is)g(v)m(ery)h(w)m(ell)0 2481 y(p)s(ossible)i(has)f(recen)m
(tly)h(b)s(een)f(sho)m(wn)h(b)m(y)g(sev)m(eral)g(authors)f([DP04,)f
(FP04c,)g(LS05a].)42 b(Ho)m(w)m(ev)m(er,)33 b(the)0 2601
y(fact)c(that)g(all)f(three)i(prop)s(osals)g(considerably)g(di\013er)g
(from)f(eac)m(h)g(other)h(suggests)g(that)f(there)g(migh)m(t)0
2722 y(b)s(e)k(no)f(canonical)h(w)m(a)m(y)h(of)e(giving)h(a)g
(categorical)f(axiomatisation)h(for)f(pro)s(ofs)h(in)f(classical)i
(logic.)146 2842 y(W)-8 b(e)46 b(will)g(pro)m(vide)g(a)f(series)i(of)e
(p)s(ossible)h(suc)m(h)h(axiomatisations)f(with)g(increasing)g
(strength.)0 2963 y(They)30 b(will)f(all)f(build)h(on)f(the)h
(structure)g(of)f(a)g FT(\003)p FX(-autonomous)g(category)g(in)h(whic)m
(h)g(ev)m(ery)i(ob)5 b(ject)29 b(has)0 3083 y(a)38 b(monoid)h(\(and)g
(a)f(comonoid\))h(structure.)63 b(In)39 b(this)h(resp)s(ect)g(it)e
(will)i(closely)g(follo)m(w)f(the)g(w)m(ork)g(of)0 3203
y([FP04c])33 b(and)f([LS05a],)h(but)f(will)i(di\013er)f(from)f([DP04].)
146 3324 y(The)h(approac)m(h)g(that)f(w)m(e)h(tak)m(e)g(here)g(is)f
(mainly)h(motiv)-5 b(ated)33 b(b)m(y)g(the)f(in)m(v)m(estigation)i(in)f
(the)f(com-)0 3444 y(plexit)m(y)37 b(of)e(pro)s(ofs.)50
b(Ev)m(en)m(tually)-8 b(,)38 b(a)d(go)s(o)s(d)f(theory)i(of)e(pro)s(of)
g(iden)m(ti\014cation)j(should)f(nev)m(er)h(iden)m(tify)0
3564 y(t)m(w)m(o)c(pro)s(ofs)f(if)h(one)g(is)g(exp)s(onen)m(tially)h
(bigger)f(than)g(the)g(other.)146 3685 y(The)28 b(main)e(pro)s
(of-theoretic)g(inspiration)i(for)d(this)i(w)m(ork)h(comes)f(from)g
(the)f(system)j FK(SKS)e FX([BT01],)0 3805 y(whic)m(h)45
b(is)f(a)g(deductiv)m(e)i(system)g(for)d(Bo)s(olean)g(logic)h(within)h
(the)f(formalism)g(of)f(the)h(calculus)h(of)0 3926 y(structures)e
([Gug07,)e(GS01,)f(BT01].)71 b(A)41 b(remark)-5 b(able)42
b(feature)g(of)f(the)h(cut-free)f(v)m(ersion)i(of)e FK(SKS)q
FX(,)0 4046 y(whic)m(h)25 b(is)g(called)g FK(KS)p FX(,)h(is)e(that)g
(it)g(can)g(\(cut-free\))h(p)s(olynomially)g(sim)m(ulate)g(not)f(only)g
(sequen)m(t)i(calculus)0 4166 y(and)e(tableaux)h(systems)i(but)d(also)g
(resolution)h(and)f(F)-8 b(rege-Hilb)s(ert)24 b(systems)j([Gug04a,)c
(BG07].)40 b(This)0 4287 y(means)31 b(that)f(if)f(a)h(tautology)g(has)g
(a)f(p)s(olynomial)i(size)g(pro)s(of)e(in)h(an)m(y)h(of)e(these)i
(systems,)i(then)e(it)f(has)0 4407 y(a)d(cut-free)g(p)s(olynomial)h
(size)g(pro)s(of)f(in)g FK(KS)q FX(.)41 b(This)28 b(abilit)m(y)h(of)d
FK(KS)i FX(is)f(a)g(consequence)k(of)26 b(t)m(w)m(o)i(features:)p
0 TeXcolorgray 119 4587 a(1.)p 0 TeXcolorgray 49 w FU(De)-5
b(ep)38 b(infer)-5 b(enc)g(e)7 b FX(:)51 b(Instead)39
b(of)d(decomp)s(osing)i(the)g(form)m(ulae)f(along)g(their)g(ro)s(ot)f
(connectiv)m(es)244 4707 y(in)m(to)25 b(subform)m(ulae)h(during)f(the)g
(construction)h(of)e(a)g(pro)s(of,)i(in)f FK(KS)g FX(inference)h(rules)
f(are)g(applied)244 4827 y(deep)33 b(inside)h(form)m(ulae)f(in)g(the)g
(same)h(w)m(a)m(y)f(as)g(w)m(e)h(kno)m(w)g(it)e(from)g(term)i
(rewriting.)p 0 TeXcolorgray 119 5023 a(2.)p 0 TeXcolorgray
49 w(The)f(t)m(w)m(o)h(inference)g(rules)f FU(switch)40
b FX(and)33 b FU(me)-5 b(dial)p FX(,)31 b(whic)m(h)j(lo)s(ok)f(as)f
(follo)m(ws:)790 5206 y FS(F)14 b FT(f)p FX(\()p FS(A)22
b FT(_)h FS(B)5 b FX(\))22 b FT(^)g FS(C)7 b FT(g)725
5283 y FK(s)p 790 5260 703 4 v 790 5359 a FS(F)14 b FT(f)p
FS(A)22 b FT(_)h FX(\()p FS(B)k FT(^)c FS(C)7 b FX(\))p
FT(g)1716 5283 y FX(and)2173 5206 y FS(F)14 b FT(f)p
FX(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(_)f FX(\()p
FS(C)29 b FT(^)23 b FS(D)s FX(\))p FT(g)2068 5283 y FK(m)p
2173 5260 974 4 v 2173 5359 a FS(F)14 b FT(f)p FX(\()p
FS(A)22 b FT(_)g FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k
FT(_)c FS(D)s FX(\))p FT(g)3271 5283 y FS(;)357 b FX(\(1\))p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 539 4
TeXDict begin 539 3 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(539)p 0 TeXcolorgray
244 320 a(where)32 b FS(F)14 b FT(f)49 b(g)30 b FX(stands)j(for)d(an)h
(arbitrary)g(\(p)s(ositiv)m(e\))i(form)m(ula)e(con)m(text)h(and)f
FS(A)p FX(,)h FS(B)5 b FX(,)32 b FS(C)7 b FX(,)31 b(and)g
FS(D)244 440 y FX(are)h(form)m(ula)h(v)-5 b(ariables.)0
643 y FJ(Fr)n(om)47 b(deep)e(inference)h(to)g(algebra.)34
b FX(Deep)41 b(inference)h(allo)m(ws)g(us)f(to)g(establish)h(the)f
(rela-)0 764 y(tionship)g(b)s(et)m(w)m(een)h(pro)s(of)d(theory)h(and)g
(algebra)g(in)g(a)g(m)m(uc)m(h)i(cleaner)e(w)m(a)m(y)i(than)e(this)g
(is)h(p)s(ossible)0 884 y(with)g(shallo)m(w)g(inference)h(formalisms)f
(lik)m(e)g(the)f(sequen)m(t)j(calculus.)67 b(The)41 b(reason)g(is)g
(that)e(from)h(a)0 1005 y(deriv)-5 b(ation)30 b(in)h(a)e(deep)i
(inference)h(formalism)f(one)f(can)g(directly)i(\\read)e(o\013)f(the)i
(morphisms".)44 b(T)-8 b(ak)m(e)0 1125 y(for)32 b(example)i(the)f
(follo)m(wing)g(deriv)-5 b(ation)33 b(in)g(system)h FK(KS)q
FX(:)1513 1337 y(\()p FS(A)1624 1300 y FI(0)1669 1337
y FT(^)23 b FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29
b FT(^)22 b FS(D)s FX(\))1451 1413 y FK(r)p 1513 1391
821 4 v 1524 1489 a FX(\()p FS(A)h FT(^)f FS(B)5 b FX(\))22
b FT(_)h FX(\()p FS(C)29 b FT(^)22 b FS(D)s FX(\))1420
1566 y FK(m)p 1524 1543 797 4 v 1524 1641 a FX(\()p FS(A)h
FT(_)f FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k FT(_)22
b FS(D)s FX(\))3655 1490 y(\(2\))0 1858 y(where)32 b
FS(A)p FX(,)f FS(A)484 1822 y FI(0)507 1858 y FX(,)g
FS(B)5 b FX(,)31 b FS(C)7 b FX(,)31 b(and)f FS(D)j FX(are)e(arbitrary)f
(form)m(ulae,)i(and)e FK(r)i FX(is)f(an)m(y)g(inference)h(rule)f
(taking)g FS(A)3640 1822 y FI(0)3693 1858 y FX(to)0 1979
y FS(A)p FX(.)44 b(In)32 b(category-theoretic)i(language)e(this)i(w)m
(ould)f(b)s(e)g(written)g(as)g(a)f(comp)s(osition)i(of)e(maps:)146
2247 y(\()p FS(A)257 2211 y FI(0)302 2247 y FT(^)23 b
FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(C)30 b FT(^)22
b FS(D)s FX(\))1011 2181 y FQ(\()p FH(r)q FI(^)p FR(B)s
FQ(\))p FI(_)p FQ(\()p FR(C)5 b FI(^)p FR(D)r FQ(\))1478
2222 y FG(/)p FF(/)p 991 2224 488 4 v 1503 2247 a FX(\()p
FS(A)22 b FT(^)h FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29
b FT(^)22 b FS(D)s FX(\))2415 2176 y FH(m)2471 2187 y
FE(A;B)r(;C;D)2813 2222 y FG(/)p FF(/)p 2325 2224 V 2838
2247 a FX(\()p FS(A)g FT(_)g FS(C)7 b FX(\))22 b FT(^)h
FX(\()p FS(B)k FT(_)c FS(D)s FX(\))0 2479 y(where)36
b FK(m)361 2494 y FR(A;B)s(;C)q(;D)655 2479 y FX(:)e(\()p
FS(A)24 b FT(^)g FS(B)5 b FX(\))23 b FT(_)h FX(\()p FS(C)31
b FT(^)23 b FS(D)s FX(\))31 b FT(!)g FX(\()p FS(A)23
b FT(_)h FS(C)7 b FX(\))24 b FT(^)g FX(\()p FS(B)k FT(_)c
FS(D)s FX(\))34 b(is)h(called)h(the)f FU(me)-5 b(dial)35
b(map)p FX(,)g(and)0 2600 y FK(r)12 b FX(:)34 b FS(A)179
2564 y FI(0)230 2600 y FT(!)27 b FS(A)33 b FX(is)g(the)g(map)g(corresp)
s(onding)g(to)g(the)g(rule)g FK(r)q FX(.)44 b(System)34
b FK(KS)f FX(also)f(allo)m(ws)i(the)f(deriv)-5 b(ation)1519
2811 y(\()p FS(A)1630 2775 y FI(0)1675 2811 y FT(^)23
b FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))1414 2888 y FK(m)p 1519 2866 821 4 v 1519
2964 a FX(\()p FS(A)1630 2928 y FI(0)1675 2964 y FT(_)g
FS(C)7 b FX(\))22 b FT(^)g FX(\()p FS(B)27 b FT(_)c FS(D)s
FX(\))1456 3041 y FK(r)p 1519 3018 V 1530 3116 a FX(\()p
FS(A)f FT(_)h FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k
FT(_)22 b FS(D)s FX(\))3655 2965 y(\(3\))0 3329 y(F)-8
b(rom)34 b(the)g(pro)s(of-theoretic)g(p)s(oin)m(t)g(of)g(view)h(it)f
(mak)m(es)i(p)s(erfect)f(sense)g(to)f(iden)m(tify)i(the)e(t)m(w)m(o)h
(deriv)-5 b(a-)0 3450 y(tions)33 b(in)f(\(2\))g(and)h(\(3\))f(b)s
(ecause)i(they)f(do)f(\\essen)m(tially")j(the)e(same.)44
b(This)34 b(is)f(what)f(Guglielmi)h(calls)0 3570 y FU(bur)-5
b(e)g(aucr)g(acy)36 b(of)f(typ)-5 b(e)36 b(B)43 b FX([Gug04c].)i(In)34
b(the)g(language)f(of)g(category)h(theory)-8 b(,)34 b(the)g(iden)m
(ti\014cation)g(of)0 3690 y(\(2\))e(and)h(\(3\))f(is)h(sa)m(ying)h
(that)e(the)h(diagram)850 3956 y(\()p FS(A)961 3920 y
FI(0)1006 3956 y FT(^)23 b FS(B)5 b FX(\))22 b FT(_)h
FX(\()p FS(C)29 b FT(^)22 b FS(D)s FX(\))1725 3878 y
FH(m)1781 3897 y FE(A)1827 3883 y FD(0)1850 3897 y FE(;B)r(;C;D)2085
3931 y FG(/)p FF(/)p 1695 3933 391 4 v 2110 3956 a FX(\()p
FS(A)2221 3920 y FI(0)2267 3956 y FT(_)g FS(C)7 b FX(\))22
b FT(^)h FX(\()p FS(B)k FT(_)22 b FS(D)s FX(\))2545 4130
y FQ(\()p FH(r)q FI(_)p FR(C)5 b FQ(\))p FI(^)p FQ(\()p
FR(B)s FI(_)p FR(D)r FQ(\))2520 4221 y FG(\017)p FF(\017)p
2518 4221 4 215 v 862 4320 a FX(\()p FS(A)22 b FT(^)g
FS(B)5 b FX(\))23 b FT(_)f FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))1260 4221 y FG(\017)p FF(\017)788 4130
y FQ(\()p FH(r)q FI(^)p FR(B)s FQ(\))p FI(_)p FQ(\()p
FR(C)5 b FI(^)p FR(D)r FQ(\))p 1258 4221 V 2122 4320
a FX(\()p FS(A)22 b FT(_)g FS(C)7 b FX(\))22 b FT(^)h
FX(\()p FS(B)k FT(_)c FS(D)s FX(\))2097 4295 y FG(/)p
FF(/)1736 4350 y FH(m)1792 4361 y FE(A;B)r(;C;D)p 1683
4297 414 4 v 3655 4134 a FX(\(4\))0 4573 y(has)33 b(to)f(comm)m(ute,)i
(whic)m(h)g(exactly)g(means)g(that)e(the)h(medial)h(map)e(has)h(to)g(b)
s(e)f(natural.)146 4693 y(F)-8 b(or)47 b(deep)h(inference,)k(Guglielmi)
c(also)f(in)m(tro)s(duces)i(the)f(notion)f(of)f FU(bur)-5
b(e)g(aucr)g(acy)49 b(of)f(typ)-5 b(e)49 b(A)0 4813 y
FX([Gug04b],)32 b(whic)m(h)i(is)f(the)g(formal)f(distinction)i(b)s(et)m
(w)m(een)h(the)e(deriv)-5 b(ations)1279 5030 y FS(A)1352
4994 y FI(0)1398 5030 y FT(^)22 b FS(B)1565 4994 y FI(0)1179
5107 y FK(r)1212 5122 y FQ(2)p 1279 5085 310 4 v 1291
5183 a FS(A)1364 5147 y FI(0)1409 5183 y FT(^)h FS(B)1190
5260 y FK(r)1223 5275 y FQ(1)p 1291 5237 287 4 v 1302
5335 a FS(A)g FT(^)f FS(B)1811 5184 y FX(and)2264 5030
y FS(A)2337 4994 y FI(0)2383 5030 y FT(^)g FS(B)2550
4994 y FI(0)2164 5107 y FK(r)2197 5122 y FQ(1)p 2264
5085 310 4 v 2276 5183 a FS(A)g FT(^)g FS(B)2538 5147
y FI(0)2175 5260 y FK(r)2208 5275 y FQ(2)p 2276 5237
287 4 v 2287 5335 a FS(A)h FT(^)f FS(B)3655 5184 y FX(\(5\))p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 540 5
TeXDict begin 540 4 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(540)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 318 a FX(where)j(rule)f FK(r)502 333
y FQ(1)570 318 y FX(tak)m(es)g FS(A)888 282 y FI(0)940
318 y FX(to)f FS(A)p FX(,)i(and)f(rule)g FK(r)1595 333
y FQ(2)1663 318 y FX(tak)m(es)g FS(B)1987 282 y FI(0)2039
318 y FX(to)f FS(B)5 b FX(.)42 b(Pro)s(of-theoretically)-8
b(,)30 b(the)f(t)m(w)m(o)g(deriv)-5 b(a-)0 438 y(tions)39
b(in)g(\(5\))f(are)g(\\essen)m(tially")j(the)d(same,)j(so)e(it)f(mak)m
(es)i(sense)h(to)d(iden)m(tify)i(them.)61 b(T)-8 b(ranslating)0
559 y(this)33 b(in)m(to)g(category)g(theory)g(means)h(to)e(sa)m(y)i
(that)e(the)h(op)s(eration)f FT(^)h FX(is)g(a)f(bifunctor.)146
679 y(Ho)m(w)m(ev)m(er,)53 b(it)47 b(is)g(not)f(alw)m(a)m(ys)j(the)e
(case)g(that)g(the)g(demands)h(of)e(algebra)h(and)f(pro)s(of)g(theory)0
799 y(coincide)26 b(so)g(nicely)-8 b(.)42 b(Sometimes)27
b(they)f(con)m(tradict)g(eac)m(h)f(other,)i(whic)m(h)g(causes)f
(\\creativ)m(e)h(tensions")0 920 y([LS06].)49 b(One)35
b(example)h(is)f(the)g(treatmen)m(t)g(of)f(units.)51
b(Pro)s(of-theoretically)34 b(it)h(migh)m(t)g(b)s(e)g(desirable)0
1040 y(to)c(distinguish)i(b)s(et)m(w)m(een)g(the)f(follo)m(wing)g(t)m
(w)m(o)g(pro)s(ofs)f(in)g(the)h(sequen)m(t)h(calculus)g(\(here)f
FP(t)f FX(stands)h(for)0 1161 y(\\truth")g(and)h FP(f)43
b FX(for)32 b(\\falsum"\):)733 1455 y FK(axiom)p FX(\()p
FK(true)p FX(\))p 1238 1432 133 4 v 1238 1530 a FT(`)c
FP(t)752 1607 y FK(w)m(eak)m(ening)p 1194 1584 221 4
v 571 w FX(and)1194 1682 y FT(`)g FP(t)p FS(;)17 b FP(f)2250
1607 y FK(axiom)p FX(\()p FK(identit)m(y)q FX(\))p 2897
1584 V 2897 1682 a FT(`)27 b FP(t)p FS(;)17 b FP(f)3655
1531 y FX(\(6\))0 1901 y(This)36 b(distinction)g(is)f(made,)g(for)f
(example,)j(b)m(y)e(the)g(pro)s(of)f(nets)h(presen)m(ted)i(in)e
([LS05b].)49 b(F)-8 b(rom)35 b(the)0 2021 y(algebraic)41
b(p)s(oin)m(t)f(of)g(view,)k(this)e(causes)g(certain)f(di\016culties:)
61 b(In)41 b([LS05a])f(the)h(concept)h(of)e(w)m(eak)0
2142 y(units)27 b(has)g(b)s(een)g(in)m(tro)s(duced)h(in)f(order)g(to)f
(giv)m(e)h(a)f(clean)i(algebraic)e(treatmen)m(t)i(to)e(the)h
(distinction)h(in)0 2262 y(\(6\).)42 b(Ho)m(w)m(ev)m(er,)32
b(in)e(this)g(pap)s(er)f(w)m(e)i(will)f(depart)f(from)g(this)h(and)g
(use)g(prop)s(er)f(units)i(instead.)43 b(This)30 b(is)0
2383 y(from)k(the)h(algebraic)g(p)s(oin)m(t)f(of)g(view)i(more)f
(reasonable)g(and)g(simpli\014es)h(the)f(theory)g(considerably)-8
b(.)0 2503 y(But)33 b(it)f(forces)i(the)f(iden)m(ti\014cation)h(of)e
(the)h(t)m(w)m(o)g(pro)s(ofs)f(in)h(\(6\).)0 2688 y FJ(Some)41
b(remarks)g(about)g(switch)f(and)h(medial.)32 b FX(The)k(inference)h
(rule)f(switc)m(h)i(in)d(\(1\),)h(or)g(the)0 2808 y FU(switch)29
b(map)j FK(s)540 2823 y FR(A;B)s(;C)760 2808 y FX(:)h(\()p
FS(A)11 b FT(_)g FS(B)5 b FX(\))11 b FT(^)g FS(C)34 b
FT(!)27 b FS(A)11 b FT(_)g FX(\()p FS(B)16 b FT(^)11
b FS(C)c FX(\))26 b(has)h(already)h(b)s(een)g(w)m(ell)g(in)m(v)m
(estigated)h(from)e(the)0 2929 y(viewp)s(oin)m(t)g(of)f(pro)s(of)f
(theory)h([Gug07],)h(as)f(w)m(ell)h(as)f(from)g(the)g(viewp)s(oin)m(t)h
(of)f(category)g(theory)-8 b(,)28 b(where)0 3049 y(it)35
b(is)g(also)f(called)i FU(we)-5 b(ak)36 b(distributivity)44
b FX([HdP93,)35 b(CS97b],)g FU(line)-5 b(ar)36 b(distributivity)p
FX(,)g(or)f FU(disso)-5 b(ciativity)0 3169 y FX([DP04].)41
b(On)28 b(the)f(other)h(hand,)g(the)g(medial)g(rule)g(or)f
FU(me)-5 b(dial)29 b(map)j FK(m)2566 3184 y FR(A;B)s(;C)q(;D)2861
3169 y FX(:)h(\()p FS(A)11 b FT(^)g FS(B)5 b FX(\))11
b FT(_)g FX(\()p FS(C)20 b FT(^)11 b FS(D)s FX(\))28
b FT(!)0 3290 y FX(\()p FS(A)k FT(_)g FS(C)7 b FX(\))31
b FT(^)i FX(\()p FS(B)j FT(_)c FS(D)s FX(\))47 b(has)g(not)f(y)m(et)i
(b)s(een)f(so)g(thoroughly)g(in)m(v)m(estigated.)88 b(Only)47
b(v)m(ery)h(recen)m(tly)0 3410 y(Lamarc)m(he)36 b([Lam07])f(started)g
(to)g(study)h(the)g(consequences)i(of)d(the)h(presence)h(of)d(the)i
(medial)g(map)0 3530 y(in)d(a)g FT(\003)p FX(-autonomous)g(category)-8
b(,)33 b(and)g(Do)-5 b(\024)-44 b(sen)33 b(and)g(P)m(etri)m(\023)-46
b(c)35 b([DP07])d(in)m(v)m(estigate)j(it)e(under)h(the)f(name)0
3651 y FU(intermutation)42 b FX(from)34 b(the)h(viewp)s(oin)m(t)h(of)e
(coherence)i(\(but)f(without)g(taking)g(the)g(switc)m(h)h(map)f(in)m
(to)0 3771 y(accoun)m(t\).)146 3892 y(Seen)i(from)e(the)h(deductiv)m(e)
i(p)s(oin)m(t)e(of)f(view,)j(the)e(t)m(w)m(o)g(rules)g(switc)m(h)i(and)
d(medial)h(ha)m(v)m(e)h(certain)0 4012 y(similarities:)p
0 TeXcolorgray 145 4215 a FT(\017)p 0 TeXcolorgray 49
w FX(switc)m(h)30 b(allo)m(ws)f(the)f(reduction)h(of)f(the)h(iden)m
(tit)m(y)g(rule)g(and)f(the)h(cut)f(rule)h(to)f(atomic)g(form,)h(and)
244 4336 y(medial)35 b(allo)m(ws)g(the)g(reduction)g(of)f(the)h(con)m
(traction)g(rule)g(\(and)f(the)h(co)s(con)m(traction)f(rule\))h(to)244
4456 y(atomic)e(form)f(\(see)i([BT01])e(for)g(details\),)p
0 TeXcolorgray 145 4660 a FT(\017)p 0 TeXcolorgray 49
w FX(switc)m(h)i(and)f(medial)g(are)g(b)s(oth)f(self-dual,)h(and)p
0 TeXcolorgray 145 4863 a FT(\017)p 0 TeXcolorgray 49
w FX(they)i(lo)s(ok)g(similar,)g(as)g(can)g(b)s(ee)g(seen)h(in)e
(\(1\).)49 b(In)35 b(fact,)g(recen)m(t)h(w)m(ork)f(sho)m(ws)h(that)e
(they)i(can)244 4983 y(b)s(oth)c(b)s(e)h(seen)h(as)f(instance)h(of)e(a)
g(single)h(more)g(general)g(inference)h(rule)g([Gug02,)d(Gug05].)0
5187 y(Ho)m(w)m(ev)m(er,)c(from)22 b(the)h(algebraic)f(p)s(oin)m(t)h
(of)f(view,)k(they)d(are)f(quite)i(di\013eren)m(t:)39
b(Switc)m(h)24 b(is)f(a)f(consequence)0 5307 y(of)42
b(more)h(primitiv)m(e)h(prop)s(erties,)i(namely)e(the)f(asso)s
(ciativit)m(y)h(of)e FT(^)h FX(and)g FT(_)g FX(and)f(the)h(de)g(Morgan)
p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 541 6
TeXDict begin 541 5 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(541)p 0 TeXcolorgray
0 324 a(dualit)m(y)26 b(b)s(et)m(w)m(een)g(the)g(t)m(w)m(o)f(op)s
(erations)1470 288 y FQ(3)1510 324 y FX(,)h(whereas)g(medial)f(has)g
(to)g(b)s(e)g(put)g(as)f(additional)h(primitiv)m(e,)0
444 y(if)32 b(w)m(e)i(w)m(an)m(t)f(it)g(in)g(the)g(category)-8
b(.)1230 408 y FQ(4)0 629 y FJ(Outline)53 b(of)h(the)e(p)-7
b(aper.)37 b FX(In)48 b(this)f(w)m(ork)h(w)m(e)g(will)g(presen)m(t)g(a)
f(series)i(of)d(axioms)i(that)f(seem)0 749 y(reasonable)32
b(\(from)f(the)g(pro)s(of-theoretic)g(as)g(w)m(ell)h(as)g(from)e(the)i
(algebraic)f(p)s(oin)m(ts)h(of)f(view\))h(to)f(ha)m(v)m(e)0
870 y(in)36 b(a)f(Bo)s(olean)h(category)-8 b(.)53 b(While)37
b(in)m(tro)s(ducing)f(axioms,)h(w)m(e)g(will)g(also)e(sho)m(w)i(their)f
(consequences.)0 990 y(Some)28 b(of)e(the)i(axioms)f(presen)m(ted)j
(here)e(coincide)g(with)g(axioms)f(giv)m(en)i(in)e(the)g(accompan)m
(ying)i(pap)s(er)0 1111 y([Lam07])j(whic)m(h)i(has)f(b)s(een)g(written)
g(at)g(the)f(same)i(time)f(as)f(this)i(pap)s(er)e(and)h(app)s(ears)g
(in)f(the)h(same)0 1231 y(issue)44 b(of)d(this)i(journal.)72
b(This)43 b(o)m(v)m(erlap)g(is)g(certainly)g(not)f(surprising.)73
b(Ho)m(w)m(ev)m(er,)47 b(there)c(are)f(t)m(w)m(o)0 1351
y(main)k(di\013erences)h(b)s(et)m(w)m(een)h(the)d(t)m(w)m(o)h(pap)s
(ers.)83 b(First,)49 b(while)d([Lam07])f(w)m(orks)i(in)e(the)h(minimal)
0 1472 y(setting)36 b(of)f(a)g FT(\003)p FX(-autonomous)g(category)g
(with)h(medial)g(\(or)f(with)h(\\linear)f(logic)g(plus)h(medial"\),)h
(w)m(e)0 1592 y(assume)27 b(from)e(the)h(b)s(eginning)g(full)g
(classical)h(prop)s(ositional)e(logic,)i(i.e.,)h(the)e(presence)i(of)d
(w)m(eak)m(ening)0 1712 y(and)36 b(con)m(traction.)53
b(Second)37 b(\(and)f(more)g(imp)s(ortan)m(tly\))g(w)m(e)h(are)f(sta)m
(ying)h(in)f(the)g(realm)g(of)f(syn)m(tax,)0 1833 y(whereas)49
b([Lam07])f(is)g(primarily)h(concerned)g(with)f(the)h(construction)g
(of)e(concrete)i(mo)s(dels)f(for)0 1953 y(classical)34
b(pro)s(ofs.)146 2074 y(It)g(is)g(in)g(fact)f(a)g(problem)h(of)f(the)h
(sub)5 b(ject)35 b(in)f(general)g(that)f(there)h(are)g(only)g(v)m(ery)h
(few)f(concrete)0 2194 y(examples)k(of)d(\(symmetric\))j(mo)s(dels)e
(of)f(classical)i(pro)s(ofs.)53 b(One)36 b(of)f(them)i(is)f(the)g
(category)g FP(Rel)f FX(of)0 2314 y(sets)k(and)e(relations)h([Hyl04],)h
(but)f(it)f(has)h(the)g(common)g(problem)g(that)g(it)f(iden)m(ti\014es)
j(disjunction)0 2435 y(and)31 b(conjunction.)44 b(F)-8
b(rom)31 b(the)h(pro)s(of-theoretic)f(p)s(oin)m(t)g(of)g(view)h(this)g
(kind)h(of)d(degenerate)j(mo)s(del)e(is)0 2555 y(not)f(v)m(ery)h(in)m
(teresting.)45 b(In)30 b(fact,)g(the)h(in)m(v)m(estigation)g(of)f
(medial)h(is)f(p)s(oin)m(tless)i(in)e(this)g(setting.)3499
2519 y FQ(5)3582 2555 y FX(Here)0 2675 y(the)35 b(w)m(ork)h(in)f
([Lam07])f(pro)m(vides)j(some)e(breakthroughs)h(to)m(w)m(ards)g(new)g
(kind)g(of)e(mo)s(dels)h(in)g(whic)m(h)0 2796 y(disjunction)f(and)f
(conjunction)g(do)f(not)h(coincide.)146 2916 y(In)46
b(the)g(end)h(of)e(this)h(pap)s(er,)j(w)m(e)e(will)f(also)g(giv)m(e)g
(a)f(concrete)i(example)g(of)e(a)h(Bo)s(olean)f(cate-)0
3037 y(gory)-8 b(,)39 b(namely)g(a)f(v)-5 b(ariation)37
b(of)h(the)g(pro)s(of)f(nets)i(of)f([LS05b].)59 b(Although)38
b(this)h(example)g(migh)m(t)g(b)s(e)0 3157 y(considered)e(\\only)d(syn)
m(tactic",)j(it)e(nonetheless)i(sho)m(ws)f(that)f(the)g(axioms)g
(presen)m(ted)i(here)f(do)e(not)0 3277 y(lead)39 b(to)g(the)g(collapse)
h(in)m(to)f(a)f(Bo)s(olean)h(algebra.)62 b(F)-8 b(urthermore,)40
b(this)g(last)f(section)h(can)f(b)s(e)g(read)0 3398 y(indep)s(enden)m
(tly)c(b)m(y)f(the)f(reader)g(in)m(terested)i(only)e(in)f(pro)s(of)g
(nets)i(and)e(not)h(in)g(category)f(theory)-8 b(.)146
3518 y(This)35 b(pap)s(er)f(is)g(another)g(attempt)f(to)h(b)s(e)f
(accessible)k(to)c(b)s(oth)g(the)h(category)g(theorist)g
FU(and)44 b FX(the)0 3639 y(pro)s(of)c(theorist.)70 b(Since)42
b(it)g(is)f(mainly)h(ab)s(out)f(algebra,)i(w)m(e)f(use)g(here)g(the)g
(language)f(of)g(category)0 3759 y(theory)-8 b(.)80 b(Nonetheless,)50
b(the)44 b(seasoned)i(pro)s(of)e(theorist)h(migh)m(t)g(\014nd)g(it)g
(easier)g(to)f(understand)i(if)0 3879 y(he)f(substitutes)i(ev)m
(erywhere)g FU(\\obje)-5 b(ct")51 b FX(b)m(y)45 b FU(\\formula")50
b FX(and)45 b FU(\\map"/\\morphism"/\\arr)-5 b(ow")47
b FX(b)m(y)0 4000 y FU(\\pr)-5 b(o)g(of)10 b(")p FX(.)76
b(Ev)m(ery)45 b(comm)m(uting)g(diagram)f(in)f(the)i(pap)s(er)e(is)h
(nothing)g(but)g(an)f(equation)i(b)s(et)m(w)m(een)0 4120
y(pro)s(ofs)29 b(written)g(in)g(a)g(deep)h(inference)h(formalism.)42
b(In)30 b(order)f(to)f(mak)m(e)i(the)g(pap)s(er)f(easier)g(accessible)0
4240 y(to)39 b(pro)s(of)f(theorists,)43 b(all)c(statemen)m(ts)i(are)e
(pro)m(v)m(ed)i(in)f(more)f(detail)h(than)f(the)h(seasoned)h(category)0
4361 y(theorist)33 b(migh)m(t)g(\014nd)g(appropriate.)p
0 TeXcolorgray 0 4473 600 4 v 112 4534 a FO(3)149 4564
y FZ(Nonetheless)38 b(it)g(has)f(b)r(een)h(in)n(v)n(estigated)f(in)h
([CS97b])f(from)g(the)h(category)e(theoretic)h(viewp)r(oin)n(t)h(under)
g(the)0 4664 y(assumption)27 b(that)h(negation)f(\(and)g(therefore)g
(the)h(de)g(Morgan)e(dualit)n(y\))h(is)h(absen)n(t.)112
4734 y FO(4)149 4764 y FZ(This)h(fact)g(raises)e(an)h(op)r(en)h
(problem:)39 b(can)28 b(w)n(e)g(\014nd)h(simple)g(primitiv)n(es)f(from)
g(whic)n(h)h(medial)g(arises)e(naturally)-7 b(,)0 4863
y(in)28 b(the)g(same)f(w)n(a)n(y)f(as)h(switc)n(h)h(arises)e(naturally)
g(from)i(asso)r(ciativit)n(y)e(and)h(dualit)n(y?)112
4933 y FO(5)149 4963 y FZ(F)-7 b(or)28 b(this)g(reason,)f(w)n(e)g(will)
h(lea)n(v)n(e)f(it)i(as)e(an)h(exercise)e(to)i(the)h(reader)d(to)i(v)n
(erify)f(that)i FM(Rel)d FZ(ful\014lls)j(all)f(the)g(axioms)0
5063 y(presen)n(ted)f(in)h(this)g(pap)r(er.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 542 7
TeXDict begin 542 6 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(542)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 328 a FY(2.)38 b(What)g(is)h(a)g(Bo)s(olean)e
(Category)f(?)0 523 y FX(Recall)23 b(the)g(analogy)f(men)m(tioned)i(in)
f(the)g(abstract:)39 b(A)22 b(Bo)s(olean)g(category)h(should)g(b)s(e)g
(for)f(categories,)0 644 y(what)33 b(a)f(Bo)s(olean)g(algebra)h(is)g
(for)f(p)s(osets.)44 b(This)34 b(leads)g(to)e(the)h(follo)m(wing)g
(de\014nition:)0 828 y FJ(2.1.)k(Definition.)29 b FU(We)35
b(say)f(a)h(c)-5 b(ate)g(gory)34 b FC(C)51 b FU(is)35
b(a)41 b FK(B0)p FX(-category)34 b FU(if)g(ther)-5 b(e)35
b(is)f(a)g(Bo)-5 b(ole)g(an)33 b(algebr)-5 b(a)34 b FC(B)0
949 y FU(and)i(a)g(mapping)f FS(F)24 b FX(:)34 b FC(C)48
b FT(!)30 b FC(B)40 b FU(fr)-5 b(om)36 b(obje)-5 b(cts)36
b(of)g FC(C)53 b FU(to)37 b(elements)e(of)h FC(B)t FU(,)h(such)f(that)h
(for)f(al)5 b(l)36 b(obje)-5 b(cts)0 1069 y FS(A)38 b
FU(and)e FS(B)43 b FU(in)37 b FC(C)17 b FU(,)38 b(we)f(have)g
FS(F)14 b FX(\()p FS(A)p FX(\))32 b FT(\024)h FS(F)14
b FX(\()p FS(B)5 b FX(\))38 b FU(in)f FC(B)42 b FU(if)37
b(and)g(only)g(if)g(ther)-5 b(e)38 b(is)f(an)g(arr)-5
b(ow)37 b FS(f)22 b FX(:)34 b FS(A)f FT(!)f FS(B)0 1190
y FU(in)j FC(C)17 b FU(.)146 1360 y FX(In)37 b(other)f(w)m(ords,)i(a)e
FK(B0)p FX(-category)g(is)g(a)g(category)h(whose)g(image)f(under)h(the)
g(forgetful)f(functor)0 1480 y(from)d(the)h(category)g(of)f(categories)
h(to)f(the)h(category)f(of)g(p)s(osets)i(is)f(a)f(Bo)s(olean)g
(algebra.)46 b(F)-8 b(rom)33 b(the)0 1601 y(pro)s(of-theoretic)38
b(p)s(oin)m(t)h(of)g(view)h(one)f(should)h(ha)m(v)m(e)g(that)f(there)g
(is)h(a)e(pro)s(of)g(from)h FS(A)g FX(to)f FS(B)44 b
FX(if)39 b(and)0 1721 y(only)k(if)f FS(A)17 b FT(\))f
FS(B)47 b FX(is)c(a)f(v)-5 b(alid)43 b(implication.)74
b(Ho)m(w)m(ev)m(er,)47 b(from)42 b(the)h(algebraic)f(p)s(oin)m(t)h(of)f
(view)h(there)0 1841 y(are)32 b(man)m(y)i(mo)s(dels,)f(including)h(the)
f(category)g FP(Rel)f FX(of)g(sets)h(and)g(relations,)g(as)g(w)m(ell)h
(as)e(the)h(mo)s(dels)0 1962 y(constructed)38 b(in)f(the)f(in)h(the)g
(accompan)m(ying)g(pap)s(er)g([Lam07],)g(whic)m(h)h(ha)m(v)m(e)f(a)f
(map)h(b)s(et)m(w)m(een)h(an)m(y)0 2082 y(t)m(w)m(o)31
b(ob)5 b(jects)31 b FS(A)f FX(and)f FS(B)5 b FX(.)43
b(Note)30 b(that)g(these)h(mo)s(dels)g(are)e(not)h(ruled)h(out)e(b)m(y)
i(De\014nition)f(2.1)g(b)s(ecause)0 2203 y(there)k(is)g(the)g(trivial)g
(one-elemen)m(t)i(Bo)s(olean)d(algebra.)46 b(In)34 b(an)m(y)h(case,)f
(w)m(e)h(can)f(mak)m(e)h(the)f(follo)m(wing)0 2323 y(\(trivial\))f
(observ)-5 b(ation.)0 2508 y FJ(2.2.)43 b(Obser)-9 b(v)g(a)i(tion.)34
b FU(In)39 b(a)h FK(B0)p FU(-c)-5 b(ate)g(gory,)41 b(we)e(c)-5
b(an)40 b(for)f(any)h(p)-5 b(air)40 b(of)g(obje)-5 b(cts)39
b FS(A)h FU(and)g FS(B)5 b FU(,)41 b(pr)-5 b(ovide)0
2628 y(obje)g(cts)34 b FS(A)23 b FT(^)f FS(B)40 b FU(and)34
b FS(A)23 b FT(_)f FS(B)40 b FU(and)1316 2603 y FX(\026)1291
2628 y FS(A)p FU(,)34 b(and)h(ther)-5 b(e)35 b(ar)-5
b(e)34 b(obje)-5 b(cts)35 b FP(t)f FU(and)g FP(f)10 b
FU(,)35 b(such)g(that)g(ther)-5 b(e)35 b(ar)-5 b(e)35
b(maps)251 2840 y FX(^)-59 b FS(\013)303 2855 y FR(A;B)s(;C)522
2840 y FX(:)33 b FS(A)23 b FT(^)f FX(\()p FS(B)27 b FT(^)c
FS(C)7 b FX(\))28 b FT(!)f FX(\()p FS(A)22 b FT(^)h FS(B)5
b FX(\))22 b FT(^)g FS(C)216 b FX(\024)-58 b FS(\013)2052
2855 y FR(A;B)s(;C)2270 2840 y FX(:)34 b FS(A)22 b FT(_)h
FX(\()p FS(B)k FT(_)22 b FS(C)7 b FX(\))28 b FT(!)f FX(\()p
FS(A)22 b FT(_)h FS(B)5 b FX(\))22 b FT(_)h FS(C)551
3024 y FX(^)-55 b FS(\033)600 3039 y FR(A;B)745 3024
y FX(:)33 b FS(A)23 b FT(^)f FS(B)33 b FT(!)27 b FS(B)h
FT(^)22 b FS(A)813 b FX(\024)-54 b FS(\033)2349 3039
y FR(A;B)2493 3024 y FX(:)34 b FS(A)22 b FT(_)g FS(B)33
b FT(!)28 b FS(B)f FT(_)22 b FS(A)708 3209 y FX(^)-58
b FS(\045)749 3224 y FR(A)817 3209 y FX(:)33 b FS(A)23
b FT(^)f FP(t)28 b FT(!)f FS(A)1123 b FX(\024)-58 b FS(\045)2497
3224 y FR(A)2565 3209 y FX(:)33 b FS(A)23 b FT(_)f FP(f)38
b FT(!)28 b FS(A)700 3379 y FX(^)695 3405 y FS(\025)752
3420 y FR(A)820 3405 y FX(:)34 b FP(t)21 b FT(^)i FS(A)28
b FT(!)f FS(A)2447 3379 y FX(\024)2443 3405 y FS(\025)2500
3420 y FR(A)2568 3405 y FX(:)34 b FP(f)e FT(_)23 b FS(A)28
b FT(!)f FS(A)699 3653 y FX(^)712 3654 y FK(\020)735
3669 y FR(A)803 3654 y FX(:)33 b FS(A)23 b FT(^)1073
3629 y FX(\026)1047 3654 y FS(A)28 b FT(!)f FP(f)2448
3653 y FX(\024)2461 3654 y FK(\020)2484 3669 y FR(A)2552
3654 y FX(:)33 b FP(t)27 b FT(!)2836 3629 y FX(\026)2811
3654 y FS(A)22 b FT(_)g FS(A)1128 3903 y FK(s)1165 3918
y FR(A;B)s(;C)1384 3903 y FX(:)33 b(\()p FS(A)22 b FT(_)h
FS(B)5 b FX(\))22 b FT(^)h FS(C)34 b FT(!)28 b FS(A)22
b FT(_)h FX(\()p FS(B)k FT(^)22 b FS(C)7 b FX(\))800
4088 y FK(m)877 4103 y FR(A;B)s(;C)q(;D)1171 4088 y FX(:)34
b(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(_)f FX(\()p
FS(C)29 b FT(^)23 b FS(D)s FX(\))k FT(!)g FX(\()p FS(A)c
FT(_)f FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k FT(_)22
b FS(D)s FX(\))668 4337 y(\001)749 4352 y FR(A)818 4337
y FX(:)33 b FS(A)28 b FT(!)f FS(A)c FT(^)f FS(A)1053
b FT(r)2499 4352 y FR(A)2567 4337 y FX(:)33 b FS(A)23
b FT(_)f FS(A)28 b FT(!)f FS(A)779 4522 y FX(\005)852
4485 y FR(A)920 4522 y FX(:)34 b FS(A)28 b FT(!)f FP(t)1273
b FT(q)2601 4485 y FR(A)2669 4522 y FX(:)33 b FP(f)39
b FT(!)27 b FS(A)3655 3681 y FX(\(7\))0 4735 y FU(for)49
b(al)5 b(l)48 b(obje)-5 b(cts)48 b FS(A)p FU(,)53 b FS(B)5
b FU(,)52 b(and)d FS(C)7 b FU(.)86 b(This)48 b(c)-5 b(an)49
b(e)-5 b(asily)48 b(b)-5 b(e)49 b(shown)f(by)h(verifying)f(that)h(al)5
b(l)49 b(of)f(them)0 4855 y(c)-5 b(orr)g(esp)g(ond)36
b(to)i(valid)f(implic)-5 b(ations)36 b(in)i(Bo)-5 b(ole)g(an)36
b(lo)-5 b(gic.)52 b(Conversely,)37 b(a)h(c)-5 b(ate)g(gory)37
b(in)g(which)g(every)0 4976 y(arr)-5 b(ow)40 b(c)-5 b(an)40
b(b)-5 b(e)40 b(given)f(as)h(a)g(c)-5 b(omp)g(osite)40
b(of)g(the)g(ones)g(given)f(ab)-5 b(ove)40 b(by)g(using)g(only)h(the)f
(op)-5 b(er)g(ations)0 5096 y(of)44 b FT(^)p FU(,)j FT(_)p
FU(,)f(and)e(the)g(usual)h(arr)-5 b(ow)43 b(c)-5 b(omp)g(osition,)45
b(is)f(a)g FK(B0)p FU(-c)-5 b(ate)g(gory.)72 b(This)44
b(is)g(a)g(c)-5 b(onse)g(quenc)g(e)42 b(of)0 5216 y(the)e(c)-5
b(ompleteness)39 b(of)h(system)g FK(SKS)h FU([BT01],)f(which)g(is)g(a)g
(de)-5 b(ep)39 b(infer)-5 b(enc)g(e)39 b(de)-5 b(ductive)40
b(system)g(for)0 5337 y(Bo)-5 b(ole)g(an)33 b(lo)-5 b(gic)35
b(inc)-5 b(orp)g(or)g(ating)33 b(the)i(maps)f(in)h(\(7\))f(as)h(infer)
-5 b(enc)g(e)34 b(rules.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 543 8
TeXDict begin 543 7 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(543)p 0 TeXcolorgray
146 314 a(Note)29 b(that)g(De\014nition)g(2.1)f(is)i(neither)f(enligh)m
(tening)i(nor)d(useful.)44 b(It)28 b(is)i(necessary)h(to)d(add)h(some)0
434 y(additional)36 b(structure)g(in)g(order)g(to)f(obtain)g(a)h
(\\nicely)h(b)s(eha)m(v)m(ed")g(theory)f(of)f(Bo)s(olean)g(categories.)
0 555 y(Ho)m(w)m(ev)m(er,)k(as)c(already)h(men)m(tioned)i(in)d(the)h
(in)m(tro)s(duction,)h(the)f(naiv)m(e)h(approac)m(h)f(of)f(adding)h
(struc-)0 675 y(ture,)g(namely)g(adding)g(the)f(structure)h(of)f(a)g
(bi-Cartesian)g(closed)i(category)e(\(also)g(called)h(Heyting)0
796 y(category\))g(with)h(an)e(in)m(v)m(olutiv)m(e)k(negation)d(leads)g
(to)g(collapse:)51 b(Ev)m(ery)37 b(Bo)s(olean)f(category)g(in)g(that)0
916 y(strong)c(sense)i(is)f(a)e(Bo)s(olean)h(algebra.)43
b(The)33 b(hom-sets)g(are)g(either)f(singletons)i(or)e(empt)m(y)-8
b(.)44 b(This)34 b(ob-)0 1036 y(serv)-5 b(ation)28 b(has)g(\014rst)g(b)
s(een)h(made)f(b)m(y)g(Andr)m(\023)-46 b(e)29 b(Jo)m(y)m(al,)g(and)f
(the)g(pro)s(of)f(can)h(b)s(e)g(found,)g(for)f(example,)k(in)0
1157 y([LS86],)h(page)f(67.)43 b(F)-8 b(or)31 b(the)h(sak)m(e)h(of)e
(completeness,)k(w)m(e)d(rep)s(eat)g(the)g(argumen)m(t)h(here:)43
b(First,)32 b(recall)0 1277 y(that)c(in)g(a)g(Cartesian)h(closed)g
(category)-8 b(,)29 b(w)m(e)g(ha)m(v)m(e,)i(among)c(other)i(prop)s
(erties,)h(\(i\))d(binary)i(pro)s(ducts,)0 1398 y(that)34
b(w)m(e)i(\(follo)m(wing)f(the)g(notation)f(of)g(this)i(pap)s(er\))e
(denote)i(b)m(y)f FT(^)p FX(,)h(\(ii\))e(a)h(terminal)g(ob)5
b(ject)35 b FP(t)f FX(with)0 1518 y(the)j(prop)s(ert)m(y)g(that)f
FP(t)25 b FT(^)g FS(A)1056 1490 y FT(\030)1057 1522 y
FX(=)1168 1518 y FS(A)36 b FX(for)g(all)g(ob)5 b(jects)38
b FS(A)p FX(,)f(and)g(\(iii\))g(a)f(natural)g(bijection)h(b)s(et)m(w)m
(een)i(the)0 1638 y(maps)f FS(f)22 b FX(:)35 b FS(A)26
b FT(^)f FS(B)42 b FT(!)35 b FS(C)45 b FX(and)37 b FS(f)1201
1602 y FI(\003)1252 1638 y FX(:)e FS(A)h FT(!)f FS(B)22
b FT(\))16 b FS(C)7 b FX(,)39 b(where)g FS(B)22 b FT(\))16
b FS(C)44 b FX(denotes)39 b(the)f(exp)s(onen)m(tial)h(of)e
FS(B)0 1759 y FX(and)j FS(C)7 b FX(.)67 b(Going)39 b(from)h
FS(f)51 b FX(to)40 b FS(f)1186 1723 y FI(\003)1265 1759
y FX(is)h(also)f(kno)m(wn)h(as)g FU(currying)p FX(.)66
b(Adding)41 b(an)f(in)m(v)m(olutiv)m(e)j(negation)0 1879
y(means)36 b(adding)e(a)h(con)m(tra)m(v)-5 b(arian)m(t)35
b(endofunctor)p 1845 1792 154 4 v 35 w(\()p FT(\000)p
FX(\))g(suc)m(h)h(that)f(there)g(is)g(a)f(natural)h(bijection)g(b)s(e-)
0 1999 y(t)m(w)m(een)d(maps)e FS(f)22 b FX(:)33 b FS(A)28
b FT(!)f FS(B)35 b FX(and)1201 1973 y(\026)1180 1999
y FS(f)22 b FX(:)1334 1974 y(\026)1310 1999 y FS(B)33
b FT(!)1570 1974 y FX(\026)1544 1999 y FS(A)q FX(.)42
b(It)30 b(also)g(means)h(that)e(there)i(is)f(an)g(initial)g(ob)5
b(ject)31 b FP(f)38 b FX(=)3707 1979 y(\026)3709 1999
y FP(t)p FX(.)0 2120 y(Hence,)c(w)m(e)g(ha)m(v)m(e)g(in)e(particular)h
(for)f(all)h(ob)5 b(jects)34 b FS(A)e FX(and)h FS(B)5
b FX(,)33 b(that)478 2311 y(Hom)5 b(\()p FS(A;)17 b(B)5
b FX(\))985 2283 y FT(\030)986 2315 y FX(=)1090 2311
y(Hom)g(\()p FP(t)21 b FT(^)i FS(A;)17 b(B)5 b FX(\))1752
2283 y FT(\030)1752 2315 y FX(=)1857 2311 y(Hom)t(\()p
FP(t)p FS(;)17 b(A)g FT(\))e FS(B)5 b FX(\))2540 2283
y FT(\030)2541 2315 y FX(=)2645 2311 y(Hom)t(\()p 2890
2231 286 4 v FS(A)17 b FT(\))f FS(B)6 b(;)17 b FP(f)10
b FX(\))97 b(.)229 b(\(8\))0 2502 y(No)m(w)33 b(observ)m(e)i(that)d
(whenev)m(er)j(w)m(e)f(ha)m(v)m(e)g(an)e(ob)5 b(ject)33
b FS(X)41 b FX(suc)m(h)34 b(that)e(the)h(t)m(w)m(o)g(pro)5
b(jections)1472 2694 y FS(\031)1527 2709 y FQ(1)1566
2694 y FS(;)17 b(\031)1665 2709 y FQ(2)1716 2694 y FX(:)33
b FS(X)d FT(^)23 b FS(X)35 b FT(!)28 b FS(X)0 2885 y
FX(are)33 b(equal,)g(then)g(for)f(all)h(ob)5 b(jects)34
b FS(Y)21 b FX(,)33 b(an)m(y)g(t)m(w)m(o)g(maps)g FS(f)5
b(;)17 b(g)e FX(:)33 b FS(Y)49 b FT(!)27 b FS(X)41 b
FX(are)32 b(equal,)i(b)s(ecause)1225 3076 y FS(f)k FX(=)28
b FS(\031)1470 3091 y FQ(1)1532 3076 y FT(\016)22 b(h)p
FS(f)5 b(;)17 b(g)t FT(i)26 b FX(=)i FS(\031)2015 3091
y FQ(2)2077 3076 y FT(\016)22 b(h)p FS(f)5 b(;)17 b(g)t
FT(i)26 b FX(=)i FS(g)101 b FX(.)975 b(\(9\))0 3268 y(No)m(w)30
b(note)f(that)g(since)h FP(f)40 b FX(is)30 b(initial,)g(there)f(is)h
(exactly)h(one)e(map)g FP(f)38 b FT(!)28 b FP(f)f FT(\))16
b FP(f)10 b FX(,)30 b(hence,)i(b)m(y)e(uncurrying)0 3388
y(there)40 b(is)g(exactly)h(one)e(map)h FP(f)d FT(^)27
b FP(f)49 b FT(!)39 b FP(f)10 b FX(.)64 b(Therefore,)42
b(for)d(ev)m(ery)i FS(Y)22 b FX(,)41 b(there)f(is)g(at)e(most)i(one)g
(map)0 3508 y FS(Y)49 b FT(!)27 b FP(f)10 b FX(.)44 b(By)35
b(\(8\))o(,)e(for)f(all)g FS(A)p FX(,)h FS(B)5 b FX(,)33
b(w)m(e)g(ha)m(v)m(e)h(Hom)5 b(\()p FS(A;)17 b(B)5 b
FX(\))32 b(is)h(either)h(singleton)f(or)f(empt)m(y)-8
b(.)146 3629 y(Recapitulating)43 b(the)g(situation,)j(w)m(e)e(ha)m(v)m
(e)g(here)f(t)m(w)m(o)g(extremes)i(of)d(Bo)s(olean)h(categories:)64
b(no)0 3749 y(structure)37 b(and)g(to)s(o)e(m)m(uc)m(h)j(structure.)55
b(Neither)37 b(of)f(them)h(is)g(v)m(ery)g(in)m(teresting,)i(neither)e
(for)f(pro)s(of)0 3870 y(theory)d(nor)f(for)g(category)h(theory)-8
b(.)44 b(But)32 b(there)h(is)g(a)g(whole)g(univ)m(erse)h(b)s(et)m(w)m
(een)h(the)e(t)m(w)m(o,)g(whic)m(h)h(w)m(e)0 3990 y(will)29
b(start)g(to)g(in)m(v)m(estigate)h(no)m(w.)43 b(On)29
b(our)g(path,)g(w)m(e)h(will)g(stic)m(k)g(to)e(\(8\))h(and)g(carefully)
h(a)m(v)m(oid)f(to)g(ha)m(v)m(e)0 4110 y(\(9\).)52 b(This)36
b(is)g(what)g(mak)m(es)h(our)e(approac)m(h)h(di\013eren)m(t)h(from)e
(con)m(trol)h(categories)g([Sel01],)h(in)e(whic)m(h)0
4231 y(the)e(equation)g FS(f)39 b FX(=)27 b FS(\031)811
4246 y FQ(1)873 4231 y FT(\016)22 b(h)p FS(f)5 b(;)17
b(g)t FT(i)31 b FX(holds,)j(but)f(the)g(righ)m(tmost)g(bijection)g(in)g
(\(8\))f(is)h(absen)m(t.)0 4548 y FY(3.)38 b FB(\003)p
FY(-Autonomous)f(categories)0 4743 y FX(Let)f(us)h(stress)g(the)g(fact)
f(that)g(in)g(a)g(plain)g FK(B0)o FX(-category)g(there)h(is)g(no)f
(relation)g(b)s(et)m(w)m(een)i(the)e(maps)0 4863 y(listed)30
b(in)g(\(7\))o(.)43 b(In)29 b(particular,)h(there)g(is)g(no)f
(functorialit)m(y)h(of)f FT(_)g FX(and)g FT(^)p FX(,)i(no)e(naturalit)m
(y)h(of)38 b(^)-59 b FS(\013)t FX(,)35 b(^)-54 b FS(\033)5
b FX(,)30 b(.)16 b(.)g(.)g(,)0 4984 y(and)35 b(no)g(de)g(Morgan)f
(dualit)m(y)-8 b(.)51 b(Adding)36 b(this)f(structure)h(means)g(exactly)
g(adding)f(the)g(structure)h(of)0 5104 y(a)c FT(\003)p
FX(-autonomous)h(category)f([Bar79].)146 5225 y(Since)37
b(w)m(e)f(are)g(w)m(orking)g(in)g(classical)h(logic,)f(w)m(e)g(will)h
(here)f(use)g(the)g(sym)m(b)s(ols)h FT(^)p FS(;)17 b
FT(_)p FS(;)g FP(t)p FS(;)g FP(f)46 b FX(for)35 b(the)0
5345 y(usual)e FA(\017)q FS(;)17 b FA(O)p FS(;)g FX(1)p
FS(;)g FT(?)p FX(.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 544 9
TeXDict begin 544 8 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(544)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 315 a FJ(3.1.)k(Definition.)24 b FU(A)30
b FK(B0)p FU(-c)-5 b(ate)g(gory)29 b FC(C)46 b FU(is)38
b FX(symmetric)28 b FT(^)p FX(-monoidal)i FU(if)f(the)g(op)-5
b(er)g(ation)29 b FT(\000)10 b(^)g(\000)29 b FX(:)e FC(C)h
FT(\002)0 435 y FC(C)45 b FT(!)28 b FC(C)52 b FU(is)35
b(a)g(bifunctor)g(and)f(the)h(maps)44 b FX(^)-59 b FS(\013)1629
450 y FR(A;B)s(;C)1837 435 y FS(;)22 b FX(^)-54 b FS(\033)1936
450 y FR(A;B)2069 435 y FS(;)26 b FX(^)-58 b FS(\045)2163
450 y FR(A)2220 435 y FS(;)2268 409 y FX(^)2264 435 y
FS(\025)2321 450 y FR(A)2413 435 y FU(in)42 b FX(\(7\))35
b FU(ar)-5 b(e)35 b(natur)-5 b(al)35 b(isomorphisms)0
555 y(that)g(ob)-5 b(ey)35 b(the)g(fol)5 b(lowing)33
b(e)-5 b(quations:)699 824 y FS(A)22 b FT(^)h FX(\()p
FS(B)k FT(^)22 b FX(\()p FS(C)30 b FT(^)22 b FS(D)s FX(\)\))1724
754 y FR(A)p FI(^)7 b FQ(^)-42 b FR(\013)1869 765 y FE(B)r(;C;D)2259
800 y FG(/)p FF(/)p 1521 801 739 4 v 2284 824 a FS(A)23
b FT(^)f FX(\(\()p FS(B)27 b FT(^)c FS(C)7 b FX(\))22
b FT(^)g FS(D)s FX(\))2715 994 y FQ(^)-42 b FR(\013)2753
1005 y FE(A;B)r FD(^)p FE(C;D)2683 1089 y FG(\017)p FF(\017)p
2681 1089 4 215 v 699 1188 a FX(\()p FS(A)22 b FT(^)h
FS(B)5 b FX(\))22 b FT(^)g FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))1097 1089 y FG(\017)p FF(\017)757 994
y FQ(^)-42 b FR(\013)795 1005 y FE(A;B)r(;C)s FD(^)p
FE(D)p 1096 1089 V 2284 1188 a FX(\()p FS(A)23 b FT(^)f
FX(\()p FS(B)27 b FT(^)c FS(C)7 b FX(\)\))22 b FT(^)g
FS(D)2228 1416 y FQ(^)-42 b FR(\013)2266 1427 y FE(A;B)r(;C)2450
1416 y FI(^)p FR(D)2053 1453 y FG(v)p FF(v)p Fz(n)2089
1437 y(n)2124 1420 y(n)2160 1404 y(n)2196 1387 y(n)2232
1371 y(n)2268 1354 y(n)2303 1338 y(n)2339 1321 y(n)2375
1305 y(n)2411 1289 y(n)2447 1272 y(n)2482 1256 y(n)1492
1552 y FX(\(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b
FT(^)f FS(C)7 b FX(\))22 b FT(^)h FS(D)1727 1453 y FG(\()p
FF(\()1257 1416 y FQ(^)-42 b FR(\013)1295 1427 y FE(A)p
FD(^)p FE(B)r(;C;D)1260 1238 y Fz(P)1296 1254 y(P)1332
1271 y(P)1367 1287 y(P)1403 1304 y(P)1439 1320 y(P)1475
1336 y(P)1511 1353 y(P)1546 1369 y(P)1582 1386 y(P)1618
1402 y(P)1654 1419 y(P)1690 1435 y(P)1137 1852 y FS(A)22
b FT(^)h FX(\()p FS(B)k FT(^)22 b FS(C)7 b FX(\))1153
2021 y FQ(^)-42 b FR(\013)1191 2032 y FE(A;B)r(;C)1400
2116 y FG(\017)p FF(\017)p 1398 2116 V 2103 1852 a FS(A)23
b FT(^)f FX(\()p FS(C)29 b FT(^)23 b FS(B)5 b FX(\))2078
1827 y FG(/)p FF(/)1754 1781 y FR(A)p FI(^)t FQ(^)-39
b FR(\033)1894 1792 y FE(B)r(;C)p 1688 1828 391 4 v 1137
2216 a FX(\()p FS(A)22 b FT(^)h FS(B)5 b FX(\))22 b FT(^)g
FS(C)1132 2385 y FQ(^)-39 b FR(\033)1168 2396 y FE(A)p
FD(^)p FE(B)r(;C)1400 2480 y FG(\017)p FF(\017)p 1398
2480 4 215 v 2103 2216 a FX(\()p FS(A)22 b FT(^)h FS(C)7
b FX(\))22 b FT(^)h FS(B)2366 2116 y FG(\017)p FF(\017)2398
2021 y FQ(^)-42 b FR(\013)2436 2032 y FE(A;C;B)p 2365
2116 V 1137 2579 a FS(C)29 b FT(^)22 b FX(\()p FS(A)h
FT(^)f FS(B)5 b FX(\))1777 2626 y FQ(^)-42 b FR(\013)1815
2637 y FE(C;A;B)2078 2555 y FG(/)p FF(/)p 1688 2556 391
4 v 2103 2579 a FX(\()p FS(C)29 b FT(^)23 b FS(A)p FX(\))f
FT(^)h FS(B)2366 2480 y FG(\017)p FF(\017)2395 2385 y
FQ(^)-39 b FR(\033)2431 2396 y FE(A;C)2548 2385 y FI(^)p
FR(B)p 2365 2480 4 215 v 1020 2875 a FS(A)23 b FT(^)f
FX(\()p FP(t)g FT(^)h FS(B)5 b FX(\))1793 2805 y FQ(^)-42
b FR(\013)1831 2816 y FE(A;)p Fy(t)p FE(;B)2241 2850
y FG(/)p FF(/)p 1539 2852 703 4 v 2266 2875 a FX(\()p
FS(A)23 b FT(^)f FP(t)p FX(\))g FT(^)g FS(B)2166 3103
y FQ(^)-42 b FR(\045)2195 3114 y FE(A)2246 3103 y FI(^)p
FR(B)1995 3140 y FG(x)p FF(x)p Fz(q)2030 3120 y(q)2065
3101 y(q)2100 3081 y(q)2135 3062 y(q)2169 3043 y(q)2204
3023 y(q)2239 3004 y(q)2274 2984 y(q)2308 2965 y(q)2343
2945 y(q)1759 3233 y FS(A)22 b FT(^)g FS(B)1785 3140
y FG(&)p FF(&)1428 3121 y FR(A)p FI(^)1531 3103 y FQ(^)1528
3121 y FR(\025)1569 3132 y FE(B)1401 2925 y Fz(M)1435
2944 y(M)1470 2964 y(M)1505 2983 y(M)1540 3003 y(M)1575
3022 y(M)1609 3042 y(M)1644 3061 y(M)1679 3080 y(M)1714
3100 y(M)1748 3119 y(M)1251 3470 y FS(A)g FT(^)g FS(B)1815
3391 y FQ(^)-39 b FR(\033)1851 3402 y FE(A;B)2241 3437
y FG(/)p FF(/)p 1539 3438 V 2266 3470 a FS(B)28 b FT(^)22
b FS(A)2137 3674 y FQ(^)-39 b FR(\033)2173 3685 y FE(B)r(;A)1980
3710 y FG(y)p FF(y)p Fz(t)2013 3689 y(t)2045 3667 y(t)2078
3646 y(t)2110 3625 y(t)2143 3604 y(t)2175 3582 y(t)2208
3561 y(t)2241 3540 y(t)2273 3518 y(t)1759 3803 y FS(A)22
b FT(^)g FS(B)1800 3710 y FG(\045)p FF(\045)1475 3670
y FQ(1)1510 3681 y FE(A)p FD(^)p FE(B)1472 3495 y Fz(J)1505
3517 y(J)1537 3538 y(J)1570 3559 y(J)1602 3581 y(J)1635
3602 y(J)1668 3623 y(J)1700 3645 y(J)1733 3666 y(J)1765
3687 y(J)0 3959 y FU(The)34 b(notion)h(of)55 b FX(symmetric)35
b FT(_)p FX(-monoidal)g FU(is)g(de\014ne)-5 b(d)33 b(in)i(a)g(similar)f
(way.)146 4130 y FX(An)43 b(imp)s(ortan)m(t)g(prop)s(ert)m(y)g(of)f
(symmetric)i(monoidal)f(categories)g(is)g(the)g(coherence)h(theorem)0
4250 y([Mac63],)37 b(whic)m(h)h(sa)m(ys)g(that)e(ev)m(ery)i(diagram)e
(con)m(taining)h(only)f(natural)g(isomorphisms)i(built)f(out)0
4370 y(of)51 b(^)-59 b FS(\013)5 b FX(,)49 b(^)-54 b
FS(\033)t FX(,)53 b(^)-57 b FS(\045)t FX(,)518 4344 y(^)514
4370 y FS(\025)t FX(,)45 b(and)c(the)i(iden)m(tit)m(y)g(1)j(via)c
FT(^)h FX(and)e FT(\016)h FX(m)m(ust)h(comm)m(ute)g(\(for)f(details,)j
(see)e([Mac71])0 4491 y(and)33 b([Kel64]\).)553 4455
y FQ(6)146 4611 y FX(As)j(a)f(consequence)j(of)d(the)h(coherence)h
(theorem,)g(w)m(e)f(can)f(omit)h(certain)f(paren)m(theses)j(to)d(ease)0
4731 y(the)e(reading.)45 b(F)-8 b(or)32 b(example,)i(w)m(e)g(will)g
(write)f FS(A)23 b FT(^)f FS(B)28 b FT(^)22 b FS(C)30
b FT(^)22 b FS(D)36 b FX(for)c(\()p FS(A)23 b FT(^)f
FS(B)5 b FX(\))23 b FT(^)f FX(\()p FS(C)30 b FT(^)22
b FS(D)s FX(\))33 b(as)g(w)m(ell)h(as)0 4852 y(for)f
FS(A)23 b FT(^)g FX(\(\()p FS(B)k FT(^)d FS(C)7 b FX(\))22
b FT(^)h FS(D)s FX(\).)46 b(This)34 b(can)g(b)s(e)f(done)h(b)s(ecause)h
(there)f(is)g(a)f(uniquely)j(de\014ned)e(\\coherence)0
4972 y(isomorphism")g(b)s(et)m(w)m(een)h(an)m(y)e(t)m(w)m(o)g(of)f
(these)i(ob)5 b(jects.)p 0 TeXcolorgray 0 5084 600 4
v 112 5146 a FO(6)149 5176 y FZ(In)25 b([Kel64],)e(Kelly)g(pro)n(vides)
g(some)g(simpli\014cations)h(to)f(MacLane's)g(conditions)h(in)g
([Mac63].)34 b(F)-7 b(or)23 b(example,)i(the)0 5284 y(equations)34
b(^)-49 b FN(\045)415 5296 y Fx(t)471 5284 y FZ(=)562
5263 y(^)559 5284 y FN(\025)607 5296 y Fx(t)650 5284
y FZ(:)28 b FM(t)18 b FV(^)h FM(t)k FV(!)g FM(t)28 b
FZ(and)35 b(^)-49 b FN(\045)1266 5296 y Fw(A)1338 5284
y FV(\016)23 b FZ(^)-47 b FN(\033)1445 5296 y Fx(t)p
Fw(;A)1572 5284 y FZ(=)1663 5263 y(^)1659 5284 y FN(\025)1707
5296 y Fw(A)1771 5284 y FZ(:)28 b FM(t)18 b FV(^)h FN(A)24
b FV(!)f FN(A)28 b FZ(follo)n(w)e(from)i(the)g(ones)f(in)g
(De\014nition)i(3.1.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 545 10
TeXDict begin 545 9 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(545)p 0 TeXcolorgray
146 314 a(Let)26 b(us)g(no)m(w)h(turn)e(our)h(atten)m(tion)g(to)f(a)h
(v)m(ery)h(imp)s(ortan)m(t)e(feature)h(of)f(Bo)s(olean)h(logic:)40
b(the)26 b(dualit)m(y)0 434 y(b)s(et)m(w)m(een)34 b FT(^)e
FX(and)g FT(_)p FX(.)44 b(W)-8 b(e)32 b(can)g(safely)h(sa)m(y)g(that)f
(it)g(is)g(reasonable)h(to)f(ask)g(for)g(this)g(dualit)m(y)h(also)f(in)
g(a)0 555 y(Bo)s(olean)26 b(category)-8 b(.)42 b(That)27
b(means,)h(w)m(e)g(are)e(asking)h(for)2106 516 y(\026)2106
530 y(\026)2080 555 y FS(A)2181 527 y FT(\030)2182 559
y FX(=)2286 555 y FS(A)g FX(and)p 2569 475 263 4 v 26
w FS(A)c FT(^)f FS(B)2860 527 y FT(\030)2861 559 y FX(=)2991
530 y(\026)2965 555 y FS(A)10 b FT(_)3147 530 y FX(\026)3124
555 y FS(B)5 b FX(.)41 b(A)m(t)27 b(the)g(same)0 675
y(time)35 b(w)m(e)h(ask)g(for)e(the)h(p)s(ossibilit)m(y)i(of)d(transp)s
(osition)h(\(or)g(currying\):)48 b(The)36 b(pro)s(ofs)e(of)h
FS(A)23 b FT(^)h FS(B)37 b FT(!)31 b FS(C)0 796 y FX(are)39
b(in)g(one-to-one)f(corresp)s(ondence)j(with)f(the)f(pro)s(ofs)f(of)h
FS(A)f FT(!)2552 770 y FX(\026)2528 796 y FS(B)32 b FT(_)27
b FS(C)7 b FX(.)62 b(This)40 b(is)f(exactly)i(what)0
916 y(mak)m(es)34 b(a)e(monoidal)h(category)g FT(\003)p
FX(-autonomous.)0 1098 y FJ(3.2.)41 b(Definition.)31
b FU(A)38 b FK(B0)p FU(-c)-5 b(ate)g(gory)37 b FC(C)55
b FU(is)45 b FT(\003)p FX(-autonomous)38 b FU(if)f(it)h(is)f(symmetric)
g FT(^)p FU(-monoidal)g(and)0 1240 y(is)29 b(e)-5 b(quipp)g(e)g(d)29
b(with)h(a)g(c)-5 b(ontr)g(avariant)29 b(functor)p 1697
1153 154 4 v 30 w FX(\()p FT(\000)p FX(\))f(:)f FC(C)45
b FT(!)27 b FC(C)18 b FU(,)30 b(such)g(that)p 2725 1133
V 2725 1153 V 30 w FX(\()p FT(\000)p FX(\))11 b(:)34
b FC(C)45 b FT(!)27 b FC(C)47 b FU(is)29 b(a)h(natur)-5
b(al)0 1360 y(isomorphism)33 b(and)h(such)h(that)g(for)g(any)g(thr)-5
b(e)g(e)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5
b FU(,)35 b FS(C)42 b FU(ther)-5 b(e)34 b(is)h(a)g(natur)-5
b(al)35 b(bije)-5 b(ction)1002 1560 y FX(Hom)1205 1575
y Fv(C)1264 1560 y FX(\()p FS(A)23 b FT(^)f FS(B)5 b(;)17
b(C)7 b FX(\))1851 1533 y FT(\030)1852 1564 y FX(=)2056
1560 y(Hom)2259 1575 y Fv(C)2319 1560 y FX(\()p FS(A;)2497
1535 y FX(\026)2474 1560 y FS(B)27 b FT(_)22 b FS(C)7
b FX(\))98 b(.)752 b(\()p FS(?)p FX(\))0 1774 y FU(wher)-5
b(e)34 b(the)h(bifunctor)g FT(\000)22 b(_)h(\000)35 b
FU(is)g(de\014ne)-5 b(d)34 b(via)g FS(A)22 b FT(_)h FS(B)33
b FX(=)p 2139 1681 263 4 v 2163 1749 a(\026)2139 1774
y FS(B)28 b FT(^)2355 1749 y FX(\026)2329 1774 y FS(A)p
FU(.)2432 1738 y FQ(7)2516 1774 y FU(We)35 b(also)g(de\014ne)f
FP(f)k FX(=)3350 1754 y(\026)3352 1774 y FP(t)p FU(.)146
1939 y FX(Clearly)-8 b(,)32 b(if)e(a)f FK(B0)p FX(-category)h
FC(C)47 b FX(is)30 b FT(\003)p FU(-autonomous)p FX(,)g(then)h(it)f(is)g
(also)g FT(_)p FX(-monoidal)g(with)40 b(\024)-58 b FS(\013)3469
1954 y FR(A;B)s(;C)3704 1939 y FX(=)p 0 2009 270 4 v
10 2090 a(^)f FS(\013)78 2094 y FQ(\026)62 2111 y FR(C)5
b(;)153 2094 y FQ(\026)137 2111 y FR(B)s(;)231 2094 y
FQ(\026)213 2111 y FR(A)270 2090 y FX(,)37 b(\024)-54
b FS(\033)384 2105 y FR(A;B)546 2090 y FX(=)p 649 2009
189 4 v 32 w(^)g FS(\033)720 2094 y FQ(\026)704 2111
y FR(B)t(;)799 2094 y FQ(\026)781 2111 y FR(A)838 2090
y FX(,)41 b(\024)-58 b FS(\045)947 2105 y FR(A)1032 2090
y FX(=)p 1136 1983 114 4 v 1140 2064 a(^)1136 2090 y
FS(\025)1211 2094 y FQ(\026)1193 2111 y FR(A)1250 2090
y FX(,)1313 2064 y(\024)1309 2090 y FS(\025)1366 2105
y FR(A)1451 2090 y FX(=)p 1555 2009 108 4 v 37 w(^)g
FS(\045)1623 2094 y FQ(\026)1605 2111 y FR(A)1662 2090
y FX(.)146 2211 y(Note)44 b(that)g(our)f(de\014nition)i(is)f(not)f(the)
h(original)g(one,)i(but)e(it)g(is)g(not)g(di\016cult)g(to)g(sho)m(w)h
(the)0 2331 y(equiv)-5 b(alence,)54 b(and)48 b(this)h(w)m(as)g(already)
f(done)h(in)f([Bar79].)89 b(F)-8 b(or)47 b(further)h(information,)k
(see)d(also)0 2451 y([BW99,)33 b(Bar91,)f(Hug05a,)g(LS06].)146
2572 y(Let)24 b(us)g(con)m(tin)m(ue)h(with)f(stating)g(some)g(w)m
(ell-kno)m(wn)i(facts)d(ab)s(out)g FT(\003)p FX(-autonomous)g
(categories)i(\(for)0 2692 y(pro)s(ofs)36 b(of)f(these)i(facts,)g(see)h
(e.g.)53 b([LS06]\).)h(Via)36 b(the)g(bijection)h(\()p
FS(?)p FX(\))e(w)m(e)i(can)g(assign)f(to)g(ev)m(ery)i(map)0
2812 y FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f FS(B)d FT(_)c
FS(C)38 b FX(a)30 b(map)h FS(g)15 b FX(:)33 b FS(A)19
b FT(^)1267 2787 y FX(\026)1244 2812 y FS(B)32 b FT(!)c
FS(C)7 b FX(,)31 b(and)g(vice)h(v)m(ersa.)45 b(W)-8 b(e)31
b(sa)m(y)h(that)f FS(f)41 b FX(and)32 b FS(g)i FX(are)d
FU(tr)-5 b(ansp)g(oses)0 2933 y FX(of)31 b(eac)m(h)h(other)g(if)f(they)
i(determine)g(eac)m(h)f(other)g(via)g(\()p FS(?)p FX(\))o(.)43
b(W)-8 b(e)32 b(will)g(use)h(the)f(term)g(\\transp)s(ose")g(in)f(a)0
3053 y(v)m(ery)36 b(general)f(sense:)50 b(giv)m(en)36
b(ob)5 b(jects)35 b FS(A)p FX(,)h FS(B)5 b FX(,)35 b
FS(C)7 b FX(,)35 b FS(D)s FX(,)g FS(E)41 b FX(suc)m(h)36
b(that)e FS(D)2664 3026 y FT(\030)2665 3057 y FX(=)2773
3053 y FS(A)24 b FT(^)g FS(B)40 b FX(and)34 b FS(E)3375
3026 y FT(\030)3375 3057 y FX(=)3507 3028 y(\026)3483
3053 y FS(B)29 b FT(_)24 b FS(C)7 b FX(,)0 3174 y(then)26
b(an)m(y)g FS(f)c FX(:)33 b FS(D)e FT(!)c FS(C)32 b FX(uniquely)c
(determines)f(a)e FS(g)15 b FX(:)33 b FS(A)28 b FT(!)f
FS(E)6 b FX(,)27 b(and)f(vice)g(v)m(ersa.)43 b(Also)26
b(in)f(that)h(general)0 3294 y(case)34 b(w)m(e)g(will)g(sa)m(y)h(that)e
FS(f)44 b FX(and)33 b FS(g)k FX(are)c(transp)s(oses)h(of)f(eac)m(h)h
(other.)46 b(F)-8 b(or)33 b(example,)3140 3268 y(^)3136
3294 y FS(\025)3193 3309 y FR(A)3261 3294 y FX(:)g FP(t)22
b FT(^)h FS(A)29 b FT(!)g FS(A)0 3414 y FX(and)46 b(\024)-58
b FS(\045)244 3429 y FR(A)312 3414 y FX(:)35 b FS(A)g
FT(!)g FS(A)25 b FT(_)h FP(f)47 b FX(are)37 b(transp)s(oses)h(of)e(eac)
m(h)i(other,)g(and)f(another)g(w)m(a)m(y)h(of)f(transp)s(osing)g(them)0
3535 y(yields)d(the)f(maps)996 3654 y(\024)1009 3655
y FK(\020)1032 3670 y FR(A)1100 3655 y FX(:)g FP(t)28
b FT(!)1385 3630 y FX(\026)1359 3655 y FS(A)22 b FT(_)h
FS(A)195 b FX(and)2150 3654 y(^)2163 3655 y FK(\020)2186
3670 y FR(A)2254 3655 y FX(:)34 b FS(A)22 b FT(^)2524
3630 y FX(\026)2498 3655 y FS(A)28 b FT(!)g FP(f)108
b FX(.)0 3821 y(If)33 b(w)m(e)g(ha)m(v)m(e)h FS(f)22
b FX(:)33 b FS(A)28 b FT(!)f FS(B)h FT(_)22 b FS(C)40
b FX(and)32 b FS(b)11 b FX(:)34 b FS(B)1505 3785 y FI(0)1556
3821 y FT(!)27 b FS(B)5 b FX(,)33 b(then)294 4074 y FS(A)22
b FT(^)h FS(B)557 4037 y FI(0)638 4012 y FR(A)p FI(^)p
FR(b)800 4037 y FG(/)p FF(/)p 605 4038 196 4 v 825 4071
a FS(A)f FT(^)h FS(B)1190 3999 y FR(f)1308 4037 y FG(/)p
FF(/)p 1113 4038 V 1333 4071 a FS(C)1532 4062 y FX(is)33
b(transp)s(ose)h(of)2269 4071 y FS(A)2446 3999 y FR(g)2562
4037 y FG(/)p FF(/)p 2367 4038 V 2610 4053 a FX(\026)2587
4077 y FS(B)27 b FT(_)c FS(C)2907 3994 y FQ(\026)2910
4012 y FR(b)p FI(_)p FR(C)3074 4037 y FG(/)p FF(/)p 2879
4038 V 3099 4001 103 4 v 3099 4081 a FS(B)3178 4052 y
FI(0)3223 4081 y FT(_)g FS(C)3607 4062 y FX(\(10\))0
4261 y(where)34 b FS(g)i FX(is)d(transp)s(ose)g(of)f
FS(f)11 b FX(.)146 4382 y(Let)34 b(us)h(no)m(w)f(transp)s(ose)h(the)g
(iden)m(tit)m(y)g(1)1672 4397 y FR(B)s FI(_)p FR(C)1846
4382 y FX(:)f FS(B)28 b FT(_)23 b FS(C)37 b FT(!)30 b
FS(B)e FT(_)23 b FS(C)7 b FX(.)48 b(This)35 b(yields)g(the)g
FU(evaluation)0 4502 y(map)h FK(eval)15 b FX(:)33 b(\()p
FS(B)23 b FT(_)18 b FS(C)7 b FX(\))17 b FT(^)906 4477
y FX(\026)884 4502 y FS(C)35 b FT(!)27 b FS(B)5 b FX(.)43
b(T)-8 b(aking)31 b(the)f FT(^)h FX(of)f(this)h(with)g(1)2416
4517 y FR(A)2484 4502 y FX(:)i FS(A)28 b FT(!)f FS(A)k
FX(and)f(transp)s(osing)h(bac)m(k)0 4623 y(determines)d(a)d(map)g
FK(s)807 4638 y FR(A;B)s(;C)1027 4623 y FX(:)33 b FS(A)8
b FT(^)g FX(\()p FS(B)13 b FT(_)8 b FS(C)f FX(\))27 b
FT(!)g FX(\()p FS(A)8 b FT(^)g FS(B)d FX(\))j FT(_)g
FS(C)32 b FX(that)25 b(is)h(natural)f(in)h(all)g(three)g(argumen)m(ts,)
0 4743 y(and)39 b(that)g(w)m(e)h(call)f(the)h FU(switch)g(map)k
FX([Gug07,)39 b(BT01])2085 4707 y FQ(8)2124 4743 y FX(.)63
b(In)39 b(a)g(similar)h(fashion)f(w)m(e)h(obtain)f(maps)p
0 TeXcolorgray 0 4855 600 4 v 112 4916 a FO(7)149 4946
y FZ(Although)31 b(w)n(e)g(liv)n(e)f(in)h(the)g(comm)n(utativ)n(e)f(w)n
(orld,)h(w)n(e)f(in)n(v)n(ert)g(the)i(order)d(of)i(the)g(argumen)n(ts)f
(when)h(taking)f(the)0 5046 y(negation.)112 5116 y FO(8)149
5146 y FZ(T)-7 b(o)21 b(category)e(theorists)h(it)h(is)g(probably)f(b)r
(etter)h(kno)n(wn)f(under)h(the)g(names)g Fu(we)l(ak)j(distributivity)
30 b FZ([HdP93,)20 b(CS97b])0 5245 y(or)k Fu(line)l(ar)k
(distributivity)p FZ(.)38 b(Ho)n(w)n(ev)n(er,)23 b(strictly)i(sp)r
(eaking,)g(it)h(is)f(not)g(a)f(form)h(of)g(distributivit)n(y)-7
b(.)36 b(An)26 b(alternativ)n(e)e(is)h(the)0 5345 y(name)i
Fu(disso)l(ciativity)38 b FZ([DP04].)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 546 11
TeXDict begin 546 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(546)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FX(\()p FS(A)10 b FT(_)g FS(B)5
b FX(\))10 b FT(^)g FS(C)36 b FT(!)27 b FS(A)10 b FT(_)g
FX(\()p FS(B)15 b FT(^)10 b FS(C)d FX(\))27 b(and)g FS(A)10
b FT(^)g FX(\()p FS(B)15 b FT(_)10 b FS(C)d FX(\))29
b FT(!)e FS(B)15 b FT(_)10 b FX(\()p FS(A)g FT(^)g FS(C)d
FX(\))27 b(and)g(\()p FS(A)10 b FT(_)g FS(B)5 b FX(\))10
b FT(^)g FS(C)36 b FT(!)27 b FX(\()p FS(A)10 b FT(^)g
FS(C)d FX(\))j FT(_)g FS(B)5 b FX(.)0 440 y(Alternativ)m(ely)40
b(these)f(maps)f(can)g(b)s(e)f(obtained)h(from)g FK(s)k
FX(b)m(y)c(comp)s(osing)g(with)44 b(^)-54 b FS(\033)42
b FX(and)h(\024)-55 b FS(\033)5 b FX(.)59 b(F)-8 b(or)36
b(this)0 560 y(reason)i(w)m(e)g(will)g(use)h(the)f(term)g(\\switc)m(h")
g(for)f(all)h(of)f(them,)i(and)f(denote)g(them)g(b)m(y)g
FK(s)3272 575 y FR(A;B)s(;C)3518 560 y FX(if)f(it)g(is)0
681 y(clear)c(from)f(con)m(text)i(whic)m(h)g(one)f(is)g(mean)m(t,)h(as)
e(for)h(example)h(in)e(the)h(t)m(w)m(o)h(diagrams)873
875 y(\()p FS(A)22 b FT(_)h FS(B)5 b FX(\))22 b FT(^)h
FX(\()p FS(C)29 b FT(_)22 b FS(D)s FX(\))1738 804 y FH(s)1765
815 y FE(A;B)r(;C)s FD(_)p FE(D)2085 850 y FG(/)p FF(/)p
1695 852 391 4 v 2110 875 a FS(A)g FT(_)h FX(\()p FS(B)k
FT(^)c FX(\()p FS(C)29 b FT(_)22 b FS(D)s FX(\)\))2533
1044 y FR(A)p FI(_)p FH(s)2660 1055 y FE(B)r(;C;D)2508
1139 y FG(\017)p FF(\017)p 2507 1139 4 215 v 873 1239
a FX(\(\()p FS(A)g FT(_)h FS(B)5 b FX(\))22 b FT(^)h
FS(C)7 b FX(\))22 b FT(_)g FS(D)1272 1139 y FG(\017)p
FF(\017)946 1036 y FH(s)973 1047 y FE(A)p FD(_)p FE(B)r(;C;D)p
1270 1139 V 2148 1239 a FS(A)g FT(_)h FX(\()p FS(B)k
FT(^)c FS(C)7 b FX(\))22 b FT(_)g FS(D)2123 1214 y FG(/)p
FF(/)1750 1284 y FH(s)1777 1295 y FE(A;B)r(;C)1961 1284
y FI(_)p FR(D)p 1695 1216 429 4 v 3607 1065 a FX(\(11\))0
1449 y(and)911 1598 y FS(A)g FT(^)h FX(\()p FS(B)k FT(_)c
FS(C)7 b FX(\))22 b FT(^)g FS(D)1715 1528 y FR(A)p FI(^)p
FH(s)1842 1539 y FE(B)r(;C;D)2085 1573 y FG(/)p FF(/)p
1657 1575 V 2110 1598 a FS(A)g FT(^)h FX(\()p FS(B)k
FT(_)c FX(\()p FS(C)29 b FT(^)22 b FS(D)s FX(\)\))2533
1760 y FH(s)2560 1771 y FE(A;B)r(;C)s FD(^)p FE(D)2508
1863 y FG(\017)p FF(\017)p 2507 1863 4 215 v 873 1962
a FX(\(\()p FS(A)g FT(^)h FS(B)5 b FX(\))22 b FT(_)h
FS(C)7 b FX(\))22 b FT(^)g FS(D)1272 1863 y FG(\017)p
FF(\017)929 1768 y FH(s)956 1779 y FE(A;B)r(;C)1140 1768
y FI(^)p FR(D)p 1270 1863 V 2110 1962 a FX(\()p FS(A)g
FT(^)h FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)22
b FS(D)s FX(\))2085 1937 y FG(/)p FF(/)1740 1992 y FH(s)1767
2003 y FE(A)p FD(^)p FE(B)r(;C;D)p 1695 1939 391 4 v
3607 1772 a FX(\(12\))0 2144 y(whic)m(h)k(comm)m(ute)g(in)f(an)m(y)h
FT(\003)p FX(-autonomous)e(category)-8 b(.)41 b(Sometimes)27
b(w)m(e)f(will)f(denote)g(the)h(map)f(de\014ned)0 2264
y(b)m(y)36 b(\(11\))d(b)m(y)475 2250 y(^)482 2264 y FK(t)517
2279 y FR(A;B)s(;C)q(;D)811 2264 y FX(:)h(\()p FS(A)23
b FT(_)g FS(B)5 b FX(\))23 b FT(^)h FX(\()p FS(C)29 b
FT(_)24 b FS(D)s FX(\))29 b FT(!)g FS(A)23 b FT(_)h FX(\()p
FS(B)k FT(^)23 b FS(C)7 b FX(\))23 b FT(_)g FS(D)s FX(,)34
b(called)g(the)h FU(tensor)g(map)3550 2228 y FQ(9)3623
2264 y FX(and)0 2385 y(the)h(one)f(of)42 b(\(12\))35
b(b)m(y)813 2371 y(\024)820 2385 y FK(t)855 2400 y FR(A;B)s(;C)q(;D)
1149 2385 y FX(:)g FS(A)24 b FT(^)g FX(\()p FS(B)29 b
FT(_)c FS(C)7 b FX(\))24 b FT(^)g FS(D)35 b FT(!)d FX(\()p
FS(A)24 b FT(^)g FS(B)5 b FX(\))24 b FT(_)h FX(\()p FS(C)31
b FT(^)24 b FS(D)s FX(\),)36 b(called)g(the)g FU(c)-5
b(otensor)0 2505 y(map)p FX(.)146 2626 y(Note)39 b(that)g(the)g(switc)m
(h)h(map)f(is)g(self-dual,)i(while)f(the)f(t)m(w)m(o)h(maps)2717
2612 y(^)2724 2626 y FK(t)j FX(and)2991 2612 y(\024)2998
2626 y FK(t)g FX(are)c(dual)g(to)f(eac)m(h)0 2746 y(other,)33
b(i.e.,)p 1144 2837 527 4 v 1144 2924 a(\()p FS(A)22
b FT(^)g FS(B)5 b FX(\))22 b FT(_)h FS(C)p 1784 2805
212 3 v 1784 2843 a FH(s)1811 2854 y FE(A;B)r(;C)2085
2889 y FG(/)p FF(/)p 1695 2891 391 4 v 2110 2837 527
4 v 2110 2924 a FS(A)f FT(^)h FX(\()p FS(B)k FT(_)c FS(C)7
b FX(\))2398 3083 y FI(\030)2398 3104 y FQ(=)2373 3188
y FG(\017)p FF(\017)p 2372 3188 4 215 v 1166 3269 a FX(\026)1144
3294 y FS(C)29 b FT(^)22 b FX(\()1392 3269 y(\026)1369
3294 y FS(B)27 b FT(_)1585 3269 y FX(\026)1559 3294 y
FS(A)p FX(\))1407 3188 y FG(\017)p FF(\017)1327 3083
y FI(\030)1327 3104 y FQ(=)p 1405 3188 V 2110 3294 a
FX(\()2170 3269 y(\026)2148 3294 y FS(C)i FT(^)2359 3269
y FX(\026)2336 3294 y FS(B)5 b FX(\))22 b FT(_)2589 3269
y FX(\026)2563 3294 y FS(A)2085 3266 y FG(/)p FF(/)1784
3320 y FH(s)1825 3326 y Ft(\026)1811 3339 y FE(C)t(;)1892
3326 y Ft(\026)1878 3339 y FE(B)r(;)1961 3326 y Ft(\026)1945
3339 y FE(A)p 1695 3268 391 4 v 3607 3099 a FX(\(13\))0
3480 y(and)p 911 3573 797 4 v 911 3660 a(\()p FS(A)g
FT(^)h FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)22
b FS(D)s FX(\))p 1790 3519 277 3 v 1785 3570 a FQ(\024)1790
3579 y FH(t)1815 3590 y FE(A;B)r(;C;D)2123 3625 y FG(/)p
FF(/)p 1733 3627 391 4 v 2148 3573 721 4 v 2148 3660
a FS(A)g FT(^)h FX(\()p FS(B)k FT(_)c FS(C)7 b FX(\))22
b FT(^)g FS(D)2533 3819 y FI(\030)2533 3840 y FQ(=)2508
3924 y FG(\017)p FF(\017)p 2507 3924 4 215 v 911 4031
a FX(\()972 4005 y(\026)949 4031 y FS(D)j FT(_)1166 4005
y FX(\026)1144 4031 y FS(C)6 b FX(\))23 b FT(^)f FX(\()1430
4005 y(\026)1407 4031 y FS(B)27 b FT(_)1623 4005 y FX(\026)1597
4031 y FS(A)p FX(\))1310 3924 y FG(\017)p FF(\017)1230
3819 y FI(\030)1230 3840 y FQ(=)p 1308 3924 V 2171 4005
a FX(\026)2148 4031 y FS(D)e FT(_)d FX(\()2402 4005 y(\026)2380
4031 y FS(C)29 b FT(^)2591 4005 y FX(\026)2568 4031 y
FS(B)5 b FX(\))22 b FT(_)2821 4005 y FX(\026)2796 4031
y FS(A)2123 4002 y FG(/)p FF(/)1783 4073 y FQ(^)1788
4082 y FH(t)1827 4088 y Ft(\026)1813 4101 y FE(D)r(;)1897
4088 y Ft(\026)1884 4101 y FE(C)s(;)1964 4088 y Ft(\026)1950
4101 y FE(B)s(;)2033 4088 y Ft(\026)2018 4101 y FE(A)p
1733 4004 391 4 v 3607 3837 a FX(\(14\))0 4242 y(where)29
b(the)g(v)m(ertical)g(maps)g(are)f(the)g(canonical)h(isomorphisms)h
(determined)g(b)m(y)f(the)f FT(\003)p FX(-autonomous)0
4363 y(structure.)50 b(Another)35 b(prop)s(ert)m(y)g(of)f(switc)m(h)i
(that)e(w)m(e)h(will)g(use)g(later)g(is)f(the)h(comm)m(utativit)m(y)i
(of)d(the)0 4483 y(follo)m(wing)f(diagrams:)766 4652
y(\()p FS(A)22 b FT(_)h FS(B)5 b FX(\))22 b FT(^)h FP(t)797
4872 y FH(s)824 4883 y FE(A;B)r(;)p Fy(t)1013 5034 y
FG(\017)p FF(\017)p 1011 5034 4 333 v 1504 4902 a FS(A)f
FT(_)h FS(B)1483 4809 y FG(\))p FF(\))1306 4718 y FQ(^)-41
b FR(\045)1336 4729 y FE(A)p FD(_)p FE(B)1206 4702 y
Fz(S)1240 4715 y(S)1274 4729 y(S)1308 4742 y(S)1342 4755
y(S)1376 4768 y(S)1410 4781 y(S)1444 4795 y(S)766 5134
y FS(A)22 b FT(_)h FX(\()p FS(B)k FT(^)c FP(t)p FX(\))1296
5052 y FR(A)p FI(_)6 b FQ(^)-41 b FR(\045)1432 5063 y
FE(B)1483 4927 y FG(5)p FF(5)1444 4942 y Fz(k)1410 4955
y(k)1376 4968 y(k)1342 4982 y(k)1308 4995 y(k)1274 5008
y(k)1240 5021 y(k)1206 5034 y(k)2520 4652 y FX(\()p FP(f)32
b FT(_)23 b FS(A)p FX(\))f FT(^)h FS(B)2792 4872 y FH(s)2819
4884 y Fy(f)6 b FE(;A;B)2767 5034 y FG(\017)p FF(\017)p
2765 5034 V 2012 4902 a FS(A)22 b FT(^)h FS(B)2271 4690
y FQ(\024)2268 4707 y FR(\025)2309 4678 y FD(\000)p Ft(1)2309
4731 y FE(A)2391 4707 y FI(^)p FR(B)2574 4702 y FG(5)p
FF(5)2535 4717 y Fz(k)2501 4730 y(k)2466 4743 y(k)2432
4756 y(k)2398 4770 y(k)2364 4783 y(k)2330 4796 y(k)2296
4809 y(k)2520 5134 y FP(f)32 b FT(_)23 b FX(\()p FS(A)f
FT(^)h FS(B)5 b FX(\))2574 5034 y FG(\))p FF(\))2302
5050 y FQ(\024)2299 5067 y FR(\025)2340 5038 y FD(\000)p
Ft(1)2340 5091 y FE(A)p FD(_)p FE(B)2296 4927 y Fz(S)2330
4941 y(S)2364 4954 y(S)2398 4967 y(S)2432 4980 y(S)2467
4993 y(S)2501 5006 y(S)2535 5020 y(S)3607 4893 y FX(\(15\))p
0 TeXcolorgray 0 5260 600 4 v 112 5321 a FO(9)149 5351
y FZ(This)28 b(map)g(describ)r(es)e(precisely)h(the)h(tensor)f(rule)g
(in)h(the)g(sequen)n(t)f(system)h(for)f(linear)g(logic.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 547 12
TeXDict begin 547 11 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(547)p 0 TeXcolorgray
0 328 a FY(4.)38 b(Some)g(remarks)f(on)i(mix)0 523 y
FX(In)j(this)f(section)i(w)m(e)f(will)g(recall)g(what)f(it)g(means)i
(for)d(a)h FT(\003)p FX(-autonomous)g(category)h(to)e(ha)m(v)m(e)j
(mix.)0 644 y(Although)j(most)f(of)g(the)h(material)g(of)e(this)i
(section)h(can)f(also)f(b)s(e)h(found)f(in)h([CS97a],)i([FP04a],)0
764 y([DP04],)29 b(and)g([Lam07],)g(w)m(e)h(giv)m(e)g(here)f(a)g
(complete)h(surv)m(ey)g(since)h(the)e(main)g(result,)h(Corollary)f
(4.3,)0 885 y(is)d(rather)f(crucial)h(for)f(the)g(follo)m(wing)h
(sections.)42 b(This)27 b(corollary)e(essen)m(tially)j(sa)m(ys)e(that)f
(the)h(mix-rule)0 1005 y(in)33 b(the)g(sequen)m(t)i(calculus)1755
1117 y FT(`)27 b FX(\000)100 b FT(`)28 b FX(\001)1578
1194 y FK(mix)p 1755 1171 419 4 v 1827 1269 a FT(`)g
FX(\000)p FS(;)17 b FX(\001)0 1437 y(is)44 b(a)e(consequence)47
b(of)42 b(the)i(fact)f(that)f(false)i(implies)h(true.)75
b(Although)43 b(this)h(is)g(not)f(a)f(v)m(ery)j(deep)0
1557 y(result,)30 b(it)e(migh)m(t)h(b)s(e)f(surprising)h(for)f
(logicians)g(that)g(a)g(prop)s(ert)m(y)h(of)f(sequen)m(ts)i(\(if)e(t)m
(w)m(o)h(sequen)m(ts)i(can)0 1677 y(b)s(e)k(pro)m(v)m(ed)i(indep)s
(enden)m(tly)-8 b(,)39 b(then)c(they)i(can)e(b)s(e)g(pro)m(v)m(ed)i
(together\))e(whic)m(h)i(do)s(es)f(not)f(in)m(v)m(olv)m(e)i(an)m(y)0
1798 y(units)c(comes)h(out)f(of)f(an)g(algebraic)h(prop)s(ert)m(y)g
(concerning)h(only)f(the)g(units.)0 1983 y FJ(4.1.)k(Theorem.)30
b FU(L)-5 b(et)36 b FC(C)52 b FU(b)-5 b(e)34 b(a)h FT(\003)p
FU(-autonomous)f(c)-5 b(ate)g(gory)35 b(and)f FS(e)11
b FX(:)34 b FP(f)k FT(!)27 b FP(t)35 b FU(b)-5 b(e)34
b(a)h(map)f(in)h FC(C)17 b FU(.)45 b(Then)1490 2240 y
FP(f)32 b FT(^)23 b FP(f)1853 2181 y FR(e)p FI(^)p Fs(f)2104
2206 y FG(/)p FF(/)p 1714 2208 391 4 v 2129 2240 a FP(t)f
FT(^)h FP(f)2256 2381 y FQ(^)2254 2399 y FR(\025)2295
2411 y Fy(f)2229 2480 y FG(\017)p FF(\017)p 2227 2480
4 215 v 1490 2574 a FP(f)33 b FT(^)22 b FP(t)1589 2480
y FG(\017)p FF(\017)1452 2396 y Fs(f)8 b FI(^)p FR(e)p
1588 2480 V 2206 2574 a FP(f)2181 2539 y FG(/)p FF(/)1920
2610 y FQ(^)-41 b FR(\045)1950 2622 y Fy(f)p 1714 2541
468 4 v 3607 2404 a FX(\(16\))0 2825 y FU(if)35 b(and)f(only)h(if)1552
3017 y FP(t)1796 2922 y FQ(\024)1793 2940 y FR(\025)1834
2910 y FD(\000)p Ft(1)1834 2960 y Fy(t)2089 2985 y FG(/)p
FF(/)p 1621 2987 V 2114 3020 a FP(f)d FT(_)23 b FP(t)2238
3175 y FR(e)p FI(_)p Fs(t)2213 3262 y FG(\017)p FF(\017)p
2211 3262 4 218 v 1475 3353 a FP(t)f FT(_)g FP(f)1574
3259 y FG(\017)p FF(\017)1437 3171 y FQ(\024)-41 b FR(\045)1467
3141 y FD(\000)p Ft(1)1467 3192 y Fy(t)p 1573 3259 V
2114 3350 a FP(t)22 b FT(_)g FP(t)2089 3319 y FG(/)p
FF(/)1838 3386 y Fs(t)p FI(_)p FR(e)p 1699 3320 391 4
v 3607 3157 a FX(\(17\))0 3542 y FU(if)35 b(and)f(only)h(if)790
3838 y FS(A)22 b FT(^)h FS(B)1219 3756 y FR(A)p FI(^)1322
3739 y FQ(\024)1319 3756 y FR(\025)1360 3727 y FD(\000)p
Ft(1)1360 3779 y FE(B)1584 3804 y FG(/)p FF(/)p 1078
3806 506 4 v 1609 3829 a FS(A)f FT(^)g FX(\()p FP(f)33
b FT(_)23 b FS(B)5 b FX(\))2227 3758 y FH(s)2254 3770
y FE(A;)p Fy(f)h FE(;B)2518 3804 y FG(/)p FF(/)p 2127
3806 391 4 v 2543 3829 a FX(\()p FS(A)22 b FT(^)g FP(f)10
b FX(\))23 b FT(_)f FS(B)2814 4003 y FQ(\()p FR(A)p FI(^)p
FR(e)p FQ(\))p FI(_)p FR(B)2790 4094 y FG(\017)p FF(\017)p
2788 4094 4 215 v 675 4193 a FX(\()p FS(A)g FT(_)g FP(f)10
b FX(\))23 b FT(^)f FS(B)922 4094 y FG(\017)p FF(\017)681
3998 y FQ(\024)-42 b FR(\045)710 3968 y FD(\000)p Ft(1)710
4021 y FE(A)793 3998 y FI(^)p FR(B)p 920 4094 4 231 v
2543 4193 a FX(\()p FS(A)22 b FT(^)h FP(t)p FX(\))e FT(_)i
FS(B)2821 4375 y FQ(^)-42 b FR(\045)2850 4386 y FE(A)2901
4375 y FI(_)p FR(B)2790 4473 y FG(\017)p FF(\017)p 2788
4473 V 675 4557 a FS(A)22 b FT(_)g FX(\()p FP(f)33 b
FT(^)23 b FS(B)5 b FX(\))922 4457 y FG(\017)p FF(\017)705
4354 y FH(s)732 4366 y FE(A;)p Fy(f)h FE(;B)p 920 4457
4 215 v 1609 4557 a FS(A)22 b FT(_)h FX(\()p FP(t)f FT(^)g
FS(B)5 b FX(\))1584 4532 y FG(/)p FF(/)1243 4607 y FR(A)p
FI(_)p FQ(\()p FR(e)p FI(^)p FR(B)s FQ(\))p 1193 4534
391 4 v 2658 4566 a FS(A)22 b FT(_)h FS(B)2633 4532 y
FG(/)p FF(/)2283 4621 y FR(A)p FI(_)2386 4603 y FQ(^)2383
4621 y FR(\025)2424 4632 y FE(B)p 2127 4534 507 4 v 3607
4188 a FX(\(18\))0 4834 y FU(for)35 b(al)5 b(l)34 b(obje)-5
b(cts)34 b FS(A)h FU(and)g FS(B)5 b FU(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 548 13
TeXDict begin 548 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(548)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FJ(Pr)n(oof.)j FX(First)i(w)m(e)i(sho)m(w)g
(that)e(\(16\))g(implies)i(\(18\).)43 b(F)-8 b(or)32
b(this,)h(c)m(hase)1688 531 y Fr(A)20 b Fq(^)g Fr(B)2037
598 y FQ(\024)2034 615 y FR(\025)2075 586 y FD(\000)p
Ft(1)2075 638 y FE(B)2179 771 y FG(#)p FF(#)2145 746
y Fz(H)2113 722 y(H)2080 698 y(H)2048 675 y(H)2016 651
y(H)1983 627 y(H)1951 604 y(H)1918 580 y(H)1886 556 y(H)1471
615 y FQ(\024)-41 b FR(\045)1501 586 y FD(\000)p Ft(1)1501
638 y FE(A)1439 771 y FG({)p FF({)1439 770 y Fz(v)1472
746 y(v)1504 723 y(v)1537 699 y(v)1569 675 y(v)1602 652
y(v)1634 628 y(v)1667 604 y(v)1699 580 y(v)1115 864 y
Fp(\()p Fr(A)21 b Fq(_)f Fo(f)10 b Fp(\))20 b Fq(^)g
Fr(B)1064 985 y FH(s)970 1126 y FG({)p FF({)970 1125
y Fz(w)1001 1102 y(w)1032 1078 y(w)1063 1054 y(w)1094
1031 y(w)1125 1007 y(w)1156 983 y(w)1187 960 y(w)1218
936 y(w)1583 953 y FQ(\024)1580 971 y FR(\025)1621 941
y FD(\000)p Ft(1)1621 994 y FE(B)1717 1126 y FG(#)p FF(#)1684
1100 y Fz(G)1653 1077 y(G)1622 1053 y(G)1591 1030 y(G)1560
1006 y(G)1529 982 y(G)1498 959 y(G)1466 935 y(G)1435
911 y(G)2047 864 y Fr(A)g Fq(^)g Fp(\()p Fo(f)31 b Fq(_)20
b Fr(B)5 b Fp(\))1925 971 y FQ(\024)-41 b FR(\045)1955
941 y FD(\000)p Ft(1)1955 994 y FE(A)1902 1126 y FG({)p
FF({)1902 1125 y Fz(w)1933 1102 y(w)1964 1078 y(w)1995
1054 y(w)2026 1031 y(w)2057 1007 y(w)2088 983 y(w)2119
960 y(w)2150 936 y(w)2523 985 y FH(s)2649 1126 y FG(#)p
FF(#)2615 1100 y Fz(G)2584 1077 y(G)2553 1053 y(G)2522
1030 y(G)2491 1006 y(G)2460 982 y(G)2429 959 y(G)2398
935 y(G)2367 911 y(G)650 1219 y Fr(A)20 b Fq(_)g Fp(\()p
Fo(f)30 b Fq(^)20 b Fr(B)5 b Fp(\))604 1349 y FR(e)518
1481 y FG(|)p FF(|)p Fz(x)547 1457 y(x)577 1433 y(x)607
1410 y(x)637 1386 y(x)667 1363 y(x)696 1339 y(x)726 1316
y(x)756 1292 y(x)1118 1308 y FQ(\024)1115 1326 y FR(\025)1156
1296 y FD(\000)p Ft(1)1156 1349 y FE(B)1251 1481 y FG(#)p
FF(#)1218 1456 y Fz(G)1187 1432 y(G)1156 1408 y(G)1125
1385 y(G)1094 1361 y(G)1063 1337 y(G)1032 1314 y(G)1001
1290 y(G)970 1266 y(G)1474 1219 y Fp(\()p Fr(A)21 b Fq(_)f
Fo(f)10 b Fp(\))20 b Fq(^)g Fp(\()p Fo(f)30 b Fq(_)20
b Fr(B)5 b Fp(\))1530 1341 y FH(s)1436 1481 y FG({)p
FF({)p Fz(w)1467 1457 y(w)1498 1433 y(w)1529 1410 y(w)1560
1386 y(w)1591 1362 y(w)1622 1339 y(w)1653 1315 y(w)1684
1291 y(w)2057 1341 y FH(s)2183 1481 y FG(#)p FF(#)2150
1456 y Fz(G)2119 1432 y(G)2088 1408 y(G)2057 1385 y(G)2026
1361 y(G)1995 1337 y(G)1964 1314 y(G)1933 1290 y(G)1901
1266 y(G)2513 1219 y Fp(\()p Fr(A)20 b Fq(^)g Fo(f)10
b Fp(\))20 b Fq(_)g Fr(B)2391 1326 y FQ(\024)-42 b FR(\045)2420
1296 y FD(\000)p Ft(1)2420 1349 y FE(A)2367 1481 y FG({)p
FF({)p Fz(w)2398 1457 y(w)2429 1433 y(w)2460 1410 y(w)2491
1386 y(w)2522 1362 y(w)2553 1339 y(w)2584 1315 y(w)2615
1291 y(w)2981 1349 y FR(e)3101 1481 y FG(")p FF(")3068
1455 y Fz(F)3038 1432 y(F)3008 1408 y(F)2979 1384 y(F)2949
1361 y(F)2919 1337 y(F)2889 1314 y(F)2859 1290 y(F)2830
1266 y(F)201 1574 y Fr(A)21 b Fq(_)e Fp(\()p Fo(t)i Fq(^)e
Fr(B)5 b Fp(\))663 1663 y FQ(\024)660 1681 y FR(\025)701
1651 y FD(\000)p Ft(1)701 1704 y FE(B)789 1836 y FG(")p
FF(")756 1810 y Fz(F)726 1787 y(F)697 1763 y(F)667 1740
y(F)637 1716 y(F)607 1692 y(F)577 1669 y(F)547 1645 y(F)518
1622 y(F)1008 1574 y Fr(A)21 b Fq(_)e Fp(\()p Fo(f)31
b Fq(^)20 b Fp(\()p Fo(f)30 b Fq(_)20 b Fr(B)5 b Fp(\)\))1063
1704 y FR(e)970 1836 y FG({)p FF({)p Fz(w)1001 1812 y(w)1032
1788 y(w)1063 1765 y(w)1094 1741 y(w)1125 1718 y(w)1156
1694 y(w)1187 1670 y(w)1218 1647 y(w)1591 1696 y FH(s)1717
1836 y FG(#)p FF(#)1684 1811 y Fz(G)1653 1787 y(G)1622
1764 y(G)1591 1740 y(G)1560 1716 y(G)1529 1693 y(G)1498
1669 y(G)1466 1645 y(G)1435 1622 y(G)1940 1574 y Fp(\(\()p
Fr(A)21 b Fq(_)f Fo(f)10 b Fp(\))21 b Fq(^)e Fo(f)10
b Fp(\))21 b Fq(_)f Fr(B)1996 1696 y FH(s)1902 1836 y
FG({)p FF({)p Fz(w)1933 1812 y(w)1964 1788 y(w)1995 1765
y(w)2026 1741 y(w)2057 1718 y(w)2088 1694 y(w)2119 1670
y(w)2150 1647 y(w)2523 1704 y FR(e)2649 1836 y FG(#)p
FF(#)2615 1811 y Fz(G)2584 1787 y(G)2553 1764 y(G)2522
1740 y(G)2491 1716 y(G)2460 1693 y(G)2429 1669 y(G)2398
1645 y(G)2367 1622 y(G)2962 1574 y Fp(\()p Fr(A)h Fq(^)f
Fo(t)p Fp(\))g Fq(_)g Fr(B)2845 1681 y FQ(\024)-41 b
FR(\045)2875 1651 y FD(\000)p Ft(1)2875 1704 y FE(A)2830
1836 y FG(|)p FF(|)p Fz(x)2859 1812 y(x)2889 1789 y(x)2919
1765 y(x)2949 1742 y(x)2979 1718 y(x)3008 1694 y(x)3038
1671 y(x)3068 1647 y(x)543 1929 y Fr(A)21 b Fq(_)f Fp(\()p
Fo(t)g Fq(^)g Fp(\()p Fo(f)30 b Fq(_)20 b Fr(B)5 b Fp(\)\))1126
2051 y FH(s)1251 2191 y FG(#)p FF(#)1218 2166 y Fz(G)1187
2142 y(G)1156 2119 y(G)1125 2095 y(G)1094 2071 y(G)1063
2048 y(G)1032 2024 y(G)1001 2001 y(G)970 1977 y(G)1510
1929 y Fr(A)20 b Fq(_)g Fp(\()p Fo(f)30 b Fq(^)20 b Fo(f)10
b Fp(\))20 b Fq(_)g Fr(B)1528 2059 y FR(e)1436 2191 y
FG({)p FF({)p Fz(w)1467 2167 y(w)1498 2144 y(w)1529 2120
y(w)1560 2096 y(w)1591 2073 y(w)1622 2049 y(w)1653 2025
y(w)1684 2002 y(w)2057 2059 y FR(e)2183 2191 y FG(#)p
FF(#)2150 2166 y Fz(G)2119 2142 y(G)2088 2119 y(G)2057
2095 y(G)2026 2071 y(G)1995 2048 y(G)1964 2024 y(G)1933
2001 y(G)1901 1977 y(G)2406 1929 y Fp(\(\()p Fr(A)h Fq(_)f
Fo(f)10 b Fp(\))21 b Fq(^)e Fo(t)p Fp(\))i Fq(_)e Fr(B)2461
2051 y FH(s)2367 2191 y FG({)p FF({)p Fz(w)2398 2167
y(w)2429 2144 y(w)2460 2120 y(w)2491 2096 y(w)2522 2073
y(w)2553 2049 y(w)2584 2025 y(w)2615 2002 y(w)1044 2284
y Fr(A)i Fq(_)e Fp(\()p Fo(t)i Fq(^)e Fo(f)10 b Fp(\))21
b Fq(_)f Fr(B)1022 2385 y FQ(^)1019 2403 y FR(\025)1060
2415 y Fy(f)955 2547 y FG({)p FF({)955 2546 y Fz(v)987
2522 y(v)1019 2499 y(v)1052 2475 y(v)1084 2451 y(v)1116
2427 y(v)1149 2404 y(v)1181 2380 y(v)1214 2356 y(v)1976
2284 y Fr(A)h Fq(_)e Fp(\()p Fo(f)31 b Fq(^)20 b Fo(t)p
Fp(\))g Fq(_)g Fr(B)2533 2401 y FQ(^)-41 b FR(\045)2563
2413 y Fy(f)2664 2547 y FG(#)p FF(#)2630 2522 y Fz(H)2598
2498 y(H)2565 2474 y(H)2533 2451 y(H)2501 2427 y(H)2468
2403 y(H)2436 2380 y(H)2403 2356 y(H)2371 2332 y(H)685
2635 y Fr(A)20 b Fq(_)g Fo(f)30 b Fq(_)20 b Fr(B)878
2547 y FG(\017)p FF(\017)693 2270 y FQ(^)690 2288 y FR(\025)731
2300 y Fy(f)6 b FD(_)p FE(B)p 876 2547 4 570 v 1095 2596
1428 4 v 1095 2613 V 1332 2716 a FQ(\024)1329 2733 y
FR(\025)1370 2744 y FE(B)1663 2879 y FG(\))p FF(\))1624
2865 y Fz(T)1585 2851 y(T)1546 2838 y(T)1507 2824 y(T)1468
2810 y(T)1429 2797 y(T)1390 2783 y(T)1351 2769 y(T)1312
2755 y(T)1273 2742 y(T)1234 2728 y(T)1195 2714 y(T)1156
2701 y(T)1117 2687 y(T)1078 2673 y(T)1039 2660 y(T)2548
2635 y Fr(A)20 b Fq(_)g Fo(f)30 b Fq(_)20 b Fr(B)2741
2547 y FG(\017)p FF(\017)2772 2278 y FQ(^)-41 b FR(\045)2802
2290 y FE(A)p FD(_)p Fy(f)p 2739 2547 4 570 v 2207 2731
a FQ(\024)g FR(\045)2237 2742 y FE(A)1955 2879 y FG(u)p
FF(u)1955 2878 y Fz(j)1994 2865 y(j)2033 2851 y(j)2072
2837 y(j)2111 2824 y(j)2150 2810 y(j)2189 2796 y(j)2228
2783 y(j)2267 2769 y(j)2306 2755 y(j)2345 2741 y(j)2384
2728 y(j)2423 2714 y(j)2462 2700 y(j)2501 2687 y(j)2540
2673 y(j)307 2961 y Fr(A)21 b Fq(_)f Fr(B)429 2874 y
FG(\017)p FF(\017)313 2257 y FQ(^)310 2274 y FR(\025)351
2285 y FE(B)p 427 2874 4 1253 v 531 2701 a FQ(\024)528
2719 y FR(\025)569 2689 y FD(\000)p Ft(1)569 2742 y FE(B)800
2659 y FG(;)p FF(;)766 2684 y Fz(v)734 2708 y(v)701 2732
y(v)669 2755 y(v)636 2779 y(v)603 2803 y(v)571 2826 y(v)538
2850 y(v)506 2874 y(v)p 575 2923 1088 4 v 575 2940 V
1688 2961 a Fr(A)g Fq(_)g Fr(B)p 1955 2923 V 1955 2940
V 1142 w(A)h Fq(_)e Fr(B)3190 2874 y FG(\017)p FF(\017)3221
2264 y FQ(^)-41 b FR(\045)3251 2275 y FE(A)p 3188 2874
4 1253 v 2974 2719 a FQ(\024)g FR(\045)3004 2689 y FD(\000)p
Ft(1)3004 2742 y FE(A)2818 2659 y FG(c)p FF(c)2818 2660
y Fz(H)2851 2684 y(H)2883 2707 y(H)2916 2731 y(H)2949
2755 y(H)2981 2779 y(H)3014 2802 y(H)3047 2826 y(H)3079
2850 y(H)3618 1738 y Fp(\(19\))0 3160 y FX(The)31 b(big)g(triangle)f
(at)g(the)h(cen)m(ter)h(is)f(an)f(application)h(of)37
b(\(16\))o(.)43 b(The)32 b(t)m(w)m(o)f(little)g(triangles)g(next)g(to)f
(it)0 3281 y(are)d(\(v)-5 b(ariations)26 b(of)7 b(\))26
b(\(15\))o(,)i(and)f(the)g(triangles)g(at)f(the)h(b)s(ottom)f(are)h
(trivial.)41 b(The)28 b(topmost)f(square)g(is)0 3401
y(functorialit)m(y)i(of)f FT(^)p FX(,)h(the)g(square)g(in)g(the)f(cen)m
(ter)i(is)f(\(11\))o(,)g(and)g(all)f(other)g(squares)i(comm)m(ute)g(b)s
(ecause)0 3521 y(of)i(naturalit)m(y)h(of)f FK(s)p FX(,)779
3495 y(^)774 3521 y FS(\025)t FX(,)42 b(^)-58 b FS(\045)5
b FX(,)1013 3495 y(\024)1009 3521 y FS(\025)t FX(,)33
b(and)41 b(\024)-57 b FS(\045)t FX(.)43 b(No)m(w)34 b(observ)m(e)g
(that)e(\(18\))g(comm)m(utes)j(if)d(and)h(only)g(if)859
3823 y FS(A)23 b FT(^)f FS(B)1288 3741 y FR(A)p FI(^)1391
3724 y FQ(\024)1388 3741 y FR(\025)1429 3711 y FD(\000)p
Ft(1)1429 3764 y FE(B)1653 3789 y FG(/)p FF(/)p 1147
3791 506 4 v 1678 3814 a FS(A)g FT(^)h FX(\()p FP(f)32
b FT(_)23 b FS(B)5 b FX(\))2246 3748 y FR(A)p FI(^)p
FQ(\()p FR(e)p FI(_)p FR(B)s FQ(\))2587 3789 y FG(/)p
FF(/)p 2197 3791 391 4 v 2612 3814 a FS(A)22 b FT(^)h
FX(\()p FP(t)e FT(_)i FS(B)5 b FX(\))2883 3975 y FH(s)2910
3986 y FE(A;)p Fy(t)p FE(;B)2858 4078 y FG(\017)p FF(\017)p
2857 4078 4 215 v 744 4178 a FX(\()p FS(A)22 b FT(_)h
FP(f)10 b FX(\))22 b FT(^)h FS(B)991 4078 y FG(\017)p
FF(\017)750 3983 y FQ(\024)-41 b FR(\045)780 3953 y FD(\000)p
Ft(1)780 4006 y FE(A)862 3983 y FI(^)p FR(B)p 989 4078
4 231 v 2612 4178 a FX(\()p FS(A)22 b FT(^)h FP(t)p FX(\))e
FT(_)i FS(B)2890 4359 y FQ(^)-42 b FR(\045)2919 4370
y FE(A)2970 4359 y FI(_)p FR(B)2858 4458 y FG(\017)p
FF(\017)p 2857 4458 V 744 4542 a FX(\()p FS(A)23 b FT(_)f
FP(t)p FX(\))g FT(^)g FS(B)991 4442 y FG(\017)p FF(\017)675
4352 y FQ(\()p FR(A)p FI(_)p FR(e)p FQ(\))p FI(^)p FR(B)p
989 4442 4 215 v 1678 4542 a FS(A)h FT(_)f FX(\()p FP(t)g
FT(^)g FS(B)5 b FX(\))1653 4517 y FG(/)p FF(/)1363 4571
y FH(s)1390 4582 y FE(A;)p Fy(t)p FE(;B)p 1262 4519 392
4 v 2727 4551 a FS(A)22 b FT(_)h FS(B)2702 4517 y FG(/)p
FF(/)2352 4605 y FR(A)p FI(_)2455 4588 y FQ(^)2452 4605
y FR(\025)2493 4616 y FE(B)p 2196 4519 506 4 v 3607 4173
a FX(\(20\))0 4824 y(comm)m(utes)37 b(\(b)s(ecause)f(of)e(naturalit)m
(y)i(of)e(switc)m(h\),)j(and)e(that)f(the)i(diagonals)e(of)42
b(\(18\))34 b(and)h(\(20\))f(are)0 4945 y(the)i(same)g(map)g
FK(mix)783 4960 y FR(A;B)927 4945 y FX(:)e FS(A)25 b
FT(^)f FS(B)38 b FT(!)33 b FS(A)24 b FT(_)h FS(B)5 b
FX(.)52 b(Note)36 b(that)g(b)m(y)g(the)g(dual)g(of)42
b(\(19\))35 b(w)m(e)i(get)e(that)h(\(17\))0 5065 y(implies)30
b(\(20\).)42 b(Therefore)29 b(w)m(e)h(also)f(get)f(that)h(\(17\))f
(implies)i(\(18\))o(.)42 b(No)m(w)30 b(w)m(e)f(sho)m(w)h(that)e(\(20\))
g(implies)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 549 14
TeXDict begin 549 13 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(549)p 0 TeXcolorgray
0 320 a(\(17\))o(.)44 b(W)-8 b(e)33 b(will)g(do)g(this)g(b)m(y)g(sho)m
(wing)h(that)1868 526 y FP(t)1334 602 y FQ(\024)-41 b
FR(\045)1364 572 y FD(\000)p Ft(1)1364 622 y Fy(t)986
785 y FG(t)p FF(t)p Fz(i)1025 772 y(i)1064 760 y(i)1103
747 y(i)1142 735 y(i)1181 722 y(i)1219 710 y(i)1258 697
y(i)1297 685 y(i)1336 672 y(i)1375 660 y(i)1414 647 y(i)1453
635 y(i)1492 622 y(i)1531 610 y(i)1570 597 y(i)1609 584
y(i)1648 572 y(i)1687 559 y(i)1726 547 y(i)1765 534 y(i)1804
522 y(i)1921 681 y FQ(^)g FR(\045)1951 651 y FD(\000)p
Ft(1)1951 702 y Fy(t)2034 681 y FQ(=)2092 664 y(^)2089
681 y FR(\025)2130 651 y FD(\000)p Ft(1)2130 702 y Fy(t)1890
768 y FG(\017)p FF(\017)p 1888 768 4 218 v 2334 584 a
FQ(\024)2331 602 y FR(\025)2372 572 y FD(\000)p Ft(1)2372
622 y Fy(t)2794 785 y FG(*)p FF(*)2755 772 y Fz(U)2716
760 y(U)2677 747 y(U)2638 735 y(U)2599 722 y(U)2560 710
y(U)2521 697 y(U)2482 685 y(U)2443 672 y(U)2404 660 y(U)2365
647 y(U)2326 635 y(U)2287 622 y(U)2248 610 y(U)2209 597
y(U)2170 585 y(U)2131 572 y(U)2092 560 y(U)2054 547 y(U)2015
535 y(U)1976 522 y(U)1937 510 y(U)762 860 y FP(t)22 b
FT(_)g FP(f)1294 1057 y Fs(t)p FI(_)p FR(e)1766 1116
y FG(*)p FF(*)1727 1103 y Fz(U)1688 1091 y(U)1649 1078
y(U)1610 1066 y(U)1571 1053 y(U)1532 1040 y(U)1493 1028
y(U)1454 1015 y(U)1415 1003 y(U)1376 990 y(U)1337 978
y(U)1298 965 y(U)1259 953 y(U)1220 940 y(U)1181 928 y(U)1142
915 y(U)1103 902 y(U)1064 890 y(U)1025 877 y(U)986 865
y(U)1791 857 y FP(t)g FT(^)g FP(t)1915 1004 y FH(mix)2020
1013 y Fy(t)p FE(;)p Fy(t)1890 1099 y FG(\017)p FF(\017)p
1888 1099 V 2819 860 a FP(f)33 b FT(_)22 b FP(t)2374
1057 y FR(e)p FI(_)p Fs(t)2014 1116 y FG(t)p FF(t)2014
1115 y Fz(i)2053 1103 y(i)2092 1090 y(i)2131 1078 y(i)2170
1065 y(i)2209 1053 y(i)2248 1040 y(i)2287 1028 y(i)2326
1015 y(i)2365 1003 y(i)2404 990 y(i)2443 978 y(i)2482
965 y(i)2521 953 y(i)2560 940 y(i)2599 927 y(i)2638 915
y(i)2677 902 y(i)2716 890 y(i)2755 877 y(i)1791 1187
y FP(t)g FT(_)g FP(t)3607 850 y FX(\(21\))0 1375 y(comm)m(utes.)45
b(F)-8 b(or)32 b(this,)h(consider)1428 1576 y FP(t)1760
1597 y FQ(^)-42 b FR(\045)1789 1568 y FD(\000)p Ft(1)1789
1618 y Fy(t)2080 1728 y FG(*)p FF(*)2040 1717 y Fz(V)2001
1705 y(V)1962 1694 y(V)1924 1683 y(V)1885 1671 y(V)1846
1660 y(V)1807 1649 y(V)1768 1637 y(V)1729 1626 y(V)1691
1614 y(V)1652 1603 y(V)1613 1592 y(V)1574 1580 y(V)1535
1569 y(V)1497 1558 y(V)2105 1796 y FP(t)22 b FT(^)g FP(t)1778
1957 y FQ(^)-41 b FR(\045)1808 1966 y Fy(t)1497 1971
y FG(t)p FF(t)p Fz(h)1535 1959 y(h)1574 1948 y(h)1613
1937 y(h)1652 1925 y(h)1691 1914 y(h)1729 1903 y(h)1768
1891 y(h)1807 1880 y(h)1846 1868 y(h)1885 1857 y(h)1924
1846 y(h)1962 1834 y(h)2001 1823 y(h)2040 1812 y(h)2235
2005 y FQ(\024)g FR(\045)2265 1975 y FD(\000)p Ft(1)2265
2026 y Fy(t)2347 2005 y FI(^)p Fs(t)2204 2148 y FG(\017)p
FF(\017)p 2202 2148 4 328 v 1428 2016 a FP(t)p 1440 1928
V 1457 1928 V 1989 2248 a FX(\()p FP(t)22 b FT(_)h FP(f)10
b FX(\))22 b FT(^)h FP(t)1740 2432 y FQ(^)-41 b FR(\045)1770
2444 y Fy(t)p FD(_)p Fy(f)1574 2425 y FG(t)p FF(t)p Fz(i)1610
2413 y(i)1646 2402 y(i)1681 2390 y(i)1717 2379 y(i)1753
2367 y(i)1788 2356 y(i)1824 2345 y(i)1860 2333 y(i)1895
2322 y(i)1931 2310 y(i)2229 2481 y FQ(\()p Fs(t)p FI(_)p
FR(e)p FQ(\))p FI(^)p Fs(t)2204 2631 y FG(\017)p FF(\017)p
2202 2631 4 334 v 1351 2499 a FP(t)21 b FT(_)i FP(f)1450
2405 y FG(\017)p FF(\017)1313 2244 y FQ(\024)-42 b FR(\045)1342
2214 y FD(\000)p Ft(1)1342 2264 y Fy(t)p 1448 2405 4
364 v 1990 2731 a FX(\()p FP(t)21 b FT(_)i FP(t)p FX(\))f
FT(^)g FP(t)1738 2914 y FQ(^)-41 b FR(\045)1768 2923
y Fy(t)p FD(_)p Fy(t)1574 2905 y FG(t)p FF(t)p Fz(i)1613
2893 y(i)1652 2880 y(i)1692 2868 y(i)1731 2855 y(i)1771
2843 y(i)1810 2831 y(i)1849 2818 y(i)1889 2806 y(i)1928
2793 y(i)2229 2950 y FH(s)2256 2959 y Fy(t)p FE(;)p Fy(t)p
FE(;)p Fy(t)2204 3108 y FG(\017)p FF(\017)p 2202 3108
4 328 v 1351 2976 a FP(t)22 b FT(_)g FP(t)1450 2888 y
FG(\017)p FF(\017)1314 2727 y Fs(t)p FI(_)p FR(e)p 1448
2888 4 364 v 1990 3208 a FP(t)f FT(_)i FX(\()p FP(t)f
FT(^)g FP(t)p FX(\))1727 3409 y Fs(t)p FI(_)1809 3391
y FQ(^)1806 3409 y FR(\025)1847 3418 y Fy(t)1574 3382
y FG(t)p FF(t)p Fz(i)1613 3370 y(i)1652 3357 y(i)1692
3345 y(i)1731 3332 y(i)1771 3320 y(i)1810 3308 y(i)1849
3295 y(i)1889 3283 y(i)1928 3270 y(i)1667 3117 y Fs(t)p
FI(_)6 b FQ(^)-41 b FR(\045)1782 3126 y Fy(t)1574 2984
y FG(j)p FF(j)p Fz(U)1613 2996 y(U)1652 3009 y(U)1692
3021 y(U)1731 3034 y(U)1771 3046 y(U)1810 3059 y(U)1849
3071 y(U)1889 3083 y(U)1928 3096 y(U)1351 3453 y FP(t)22
b FT(_)g FP(t)p 1440 3365 V 1457 3365 V 3607 2508 a FX(\(22\))0
3646 y(whic)m(h)39 b(sa)m(ys)g(that)e(the)g(left)h(triangle)f(in)h
(\(21\))e(comm)m(utes)k(b)s(ecause)e(the)g(righ)m(t)g(do)m(wn)g(path)f
(in)h(\(22\))0 3767 y(is)33 b(exactly)h(the)f(lo)m(w)m(er)h(left)e
(path)h(in)g(\(20\))o(.)44 b(Similarly)33 b(w)m(e)h(obtain)e(the)h
(comm)m(utativit)m(y)i(of)d(the)h(righ)m(t)0 3887 y(triangle)39
b(in)f(\(21\).)61 b(In)38 b(the)h(same)g(w)m(a)m(y)h(w)m(e)g(sho)m(w)f
(that)f(\(18\))g(implies)i(\(16\))o(,)g(whic)m(h)g(completes)h(the)0
4007 y(pro)s(of.)p 3738 4007 42 42 v 146 4173 a(Therefore,)47
b(in)d(a)e FT(\003)p FX(-autonomous)h(category)g(ev)m(ery)i(map)f
FS(e)11 b FX(:)37 b FP(f)56 b FT(!)45 b FP(t)e FX(ob)s(eying)h(\(16\))f
(uniquely)0 4294 y(determines)33 b(a)e(map)g FK(mix)932
4309 y FR(A;B)1076 4294 y FX(:)i FS(A)20 b FT(^)f FS(B)33
b FT(!)27 b FS(A)19 b FT(_)h FS(B)36 b FX(whic)m(h)d(is)e(natural)g(in)
g FS(A)h FX(and)f FS(B)5 b FX(.)43 b(It)31 b(can)g(b)s(e)h(sho)m(wn)0
4414 y(that)g(this)i FU(mix)g(map)k FX(go)s(es)32 b(w)m(ell)i(with)f
(the)g(t)m(wist,)h(asso)s(ciativit)m(y)-8 b(,)34 b(and)f(switc)m(h)h
(maps:)0 4597 y FJ(4.2.)42 b(Pr)n(oposition.)33 b FU(The)38
b(map)g FK(mix)1450 4612 y FR(A;B)1594 4597 y FX(:)d
FS(A)25 b FT(^)h FS(B)40 b FT(!)35 b FS(A)25 b FT(_)h
FS(B)44 b FU(obtaine)-5 b(d)38 b(fr)-5 b(om)46 b FX(\(18\))39
b FU(is)f(natur)-5 b(al)39 b(in)0 4717 y(b)-5 b(oth)35
b(ar)-5 b(guments)34 b(and)h(ob)-5 b(eys)34 b(the)h(e)-5
b(quations)1407 4980 y FS(A)22 b FT(^)h FS(B)1778 4900
y FH(mix)1884 4912 y FE(A;B)2085 4946 y FG(/)p FF(/)p
1695 4948 391 4 v 2110 4980 a FS(A)f FT(_)h FS(B)2270
5123 y FQ(\024)-39 b FR(\033)2306 5134 y FE(A;B)2241
5220 y FG(\017)p FF(\017)p 2240 5220 4 215 v 1407 5313
a FS(B)27 b FT(^)c FS(A)1539 5220 y FG(\017)p FF(\017)1359
5125 y FQ(^)-38 b FR(\033)1396 5136 y FE(A;B)p 1537 5220
V 2110 5313 a FS(B)27 b FT(_)c FS(A)2085 5279 y FG(/)p
FF(/)1778 5349 y FH(mix)1884 5360 y FE(B)r(;A)p 1695
5280 391 4 v 3463 5137 a FX(\()p FK(mix)t FX(-)5 b(^)-54
b FS(\033)t FX(\))p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 550 15
TeXDict begin 550 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(550)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FU(and)499 463 y FS(A)22 b FT(^)g
FX(\()p FS(B)28 b FT(^)22 b FS(C)7 b FX(\))1083 393 y
FR(A)p FI(^)p FH(mix)1288 404 y FE(B)r(;C)1440 439 y
FG(/)p FF(/)p 1050 441 391 4 v 1465 463 a FS(A)22 b FT(^)h
FX(\()p FS(B)k FT(_)c FS(C)7 b FX(\))2056 393 y FH(mix)2161
404 y FE(A;B)r FD(_)p FE(C)2407 439 y FG(/)p FF(/)p 2016
441 V 1753 625 a FH(s)1780 636 y FE(A;B)r(;C)1728 728
y FG(\017)p FF(\017)p 1727 728 4 215 v 2432 463 a FS(A)22
b FT(_)g FX(\()p FS(B)28 b FT(_)22 b FS(C)7 b FX(\))2727
631 y FQ(\024)-42 b FR(\013)2765 642 y FE(A;B)r(;C)2695
728 y FG(\017)p FF(\017)p 2693 728 V 499 827 a FX(\()p
FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(^)f FS(C)762
728 y FG(\017)p FF(\017)515 633 y FQ(^)-42 b FR(\013)553
644 y FE(A;B)r(;C)p 760 728 V 1465 827 a FX(\()p FS(A)22
b FT(^)h FS(B)5 b FX(\))22 b FT(_)h FS(C)1440 802 y FG(/)p
FF(/)1089 873 y FH(mix)1194 884 y FE(A)p FD(^)p FE(B)r(;C)p
1050 804 391 4 v 2432 827 a FX(\()p FS(A)f FT(_)g FS(B)5
b FX(\))22 b FT(_)h FS(C)2407 802 y FG(/)p FF(/)2049
873 y FH(mix)2154 884 y FE(A;B)2272 873 y FI(_)p FR(C)p
2016 804 V 3457 645 a FX(\()p FK(mix)s FX(-)10 b(^)-59
b FS(\013)t FX(\))0 1050 y FJ(Pr)n(oof.)33 b FX(Naturalit)m(y)38
b(of)f(mix)h(follo)m(ws)g(immediately)h(from)f(the)f(naturalit)m(y)h
(of)f(switc)m(h.)60 b(Equation)0 1170 y(\()p FK(mix)t
FX(-)5 b(^)-54 b FS(\033)t FX(\))28 b(follo)m(ws)g(immediately)i(from)e
(the)g(de\014nition)h(of)f(switc)m(h,)i(and)e(\()p FK(mix)t
FX(-)10 b(^)-59 b FS(\013)t FX(\))28 b(can)g(b)s(e)g(sho)m(wn)h(with)0
1291 y(a)j(similar)i(diagram)e(as)h(\(19\))o(.)p 3738
1291 42 42 v 0 1476 a FJ(4.3.)41 b(Cor)n(ollar)-7 b(y.)34
b FU(In)k(a)g FT(\003)p FU(-autonomous)f(c)-5 b(ate)g(gory)39
b(ther)-5 b(e)38 b(is)g(a)g(one-to-one)f(c)-5 b(orr)g(esp)g(ondenc)g(e)
36 b(b)-5 b(e-)0 1596 y(twe)g(en)35 b(the)g(maps)f FS(e)11
b FX(:)34 b FP(f)k FT(!)28 b FP(t)35 b FU(ob)-5 b(eying)43
b FX(\(16\))35 b FU(and)f(the)h(natur)-5 b(al)36 b(tr)-5
b(ansformations)34 b FK(mix)3184 1611 y FR(A;B)3329 1596
y FX(:)f FS(A)22 b FT(^)h FS(B)33 b FT(!)0 1716 y FS(A)22
b FT(_)h FS(B)40 b FU(ob)-5 b(eying)43 b FX(\()p FK(mix)t
FX(-)5 b(^)-54 b FS(\033)t FX(\))34 b FU(and)45 b FX(\()p
FK(mix)t FX(-)10 b(^)-59 b FS(\013)t FX(\))p FU(.)0 1890
y FJ(Pr)n(oof.)29 b FX(Whenev)m(er)34 b(w)m(e)f(ha)m(v)m(e)g(a)e(map)h
FK(mix)1637 1905 y FR(A;B)1781 1890 y FX(:)h FS(A)21
b FT(^)g FS(B)33 b FT(!)27 b FS(A)20 b FT(_)h FS(B)37
b FX(for)31 b(all)h FS(A)g FX(and)f FS(B)5 b FX(,)32
b(w)m(e)h(can)f(form)0 2011 y(the)h(map)929 2209 y FS(e)11
b FX(:)34 b FP(f)1257 2125 y FQ(^)-41 b FR(\045)1287
2095 y FD(\000)p Ft(1)1287 2149 y Fy(f)1505 2174 y FG(/)p
FF(/)p 1115 2175 391 4 v 1530 2209 a FP(f)33 b FT(^)22
b FP(t)1857 2127 y FH(mix)1963 2139 y Fy(f)6 b FE(;)p
Fy(t)2144 2174 y FG(/)p FF(/)p 1754 2175 V 2169 2209
a FP(f)32 b FT(_)23 b FP(t)2554 2123 y FQ(\024)2551 2140
y FR(\025)2592 2149 y Fy(t)2783 2174 y FG(/)p FF(/)p
2392 2175 V 2807 2206 a FP(t)3607 2199 y FX(\(23\))0
2373 y(One)j(can)f(no)m(w)h(easily)h(sho)m(w)f(that)g(naturalit)m(y)g
(of)e(mix,)k(as)e(w)m(ell)g(as)g(\()p FK(mix)t FX(-)5
b(^)-54 b FS(\033)t FX(\))25 b(and)g(\()p FK(mix)t FX(-)10
b(^)-59 b FS(\013)t FX(\))25 b(are)h(exactly)0 2493 y(what)33
b(is)g(needed)h(to)e(let)h(the)g(map)g FS(e)11 b FX(:)34
b FP(f)k FT(!)27 b FP(t)32 b FX(de\014ned)i(in)f(\(23\))f(ob)s(ey)h
(equation)g(\(16\).)43 b(W)-8 b(e)33 b(lea)m(v)m(e)i(the)0
2614 y(details)e(to)g(the)g(reader.)44 b(Hin)m(t:)g(Sho)m(w)33
b(that)g(b)s(oth)f(maps)h(of)39 b(\(16\))32 b(are)h(equal)g(to)1228
2904 y FP(f)g FT(^)22 b FP(f)1556 2822 y FH(mix)1661
2834 y Fy(f)6 b FE(;)p Fy(f)1843 2869 y FG(/)p FF(/)p
1453 2870 V 1868 2904 a FP(f)32 b FT(_)23 b FP(f)2192
2813 y FQ(\024)2189 2831 y FR(\025)2230 2843 y Fy(f)2262
2831 y FQ(=)6 b(\024)-41 b FR(\045)2353 2843 y Fy(f)2482
2869 y FG(/)p FF(/)p 2092 2870 V 2507 2904 a FP(f)2674
2894 y FX(.)0 3114 y(It)35 b(remains)i(to)d(sho)m(w)j(that)e(plugging)g
(the)h(map)f(of)42 b(\(23\))34 b(in)m(to)i(\(18\))e(giv)m(es)j(bac)m(k)
f(the)g(same)g(natural)0 3234 y(transformation)g FK(mix)813
3249 y FR(A;B)957 3234 y FX(:)e FS(A)25 b FT(^)g FS(B)39
b FT(!)33 b FS(A)25 b FT(_)g FS(B)41 b FX(w)m(e)d(started)e(from.)54
b(Similarly)-8 b(,)38 b(plugging)f(in)f(the)h(the)0 3354
y(mix)f(de\014ned)h(via)e(\(18\))f(in)m(to)i(\(23\))e(giv)m(es)j(bac)m
(k)f(the)g(same)g(map)f FS(e)11 b FX(:)34 b FP(f)43 b
FT(!)31 b FP(t)k FX(that)g(has)h(b)s(een)f(plugged)0
3475 y(in)m(to)e(\(18\))o(.)44 b(Again,)32 b(w)m(e)i(lea)m(v)m(e)g(the)
f(details)g(to)g(the)g(reader.)p 3738 3475 42 42 v 146
3645 a(Note)h(that)g(a)g FT(\003)p FX(-autonomous)g(category)g(can)g
(ha)m(v)m(e)i(man)m(y)f(di\013eren)m(t)g(maps)g FS(e)11
b FX(:)34 b FP(f)40 b FT(!)30 b FP(t)k FX(with)h(the)0
3765 y(prop)s(ert)m(y)d(of)f(Theorem)h(4.1,)g(eac)m(h)g(of)f(them)h
(de\014ning)g(its)g(o)m(wn)f(natural)h(mix)g(ob)s(eying)h(\()p
FK(mix)t FX(-)5 b(^)-54 b FS(\033)t FX(\))31 b(and)0
3886 y(\()p FK(mix)t FX(-)10 b(^)-59 b FS(\013)t FX(\))o(.)0
4207 y FY(5.)38 b FB(_)p FY(-Monoids)g(and)h FB(^)p FY(-comonoids)0
4402 y FX(The)h(structure)h(in)m(v)m(estigated)h(so)e(far)f(is)h
(exactly)h(the)f(same)g(as)g(for)f(pro)s(ofs)g(in)h(linear)g(logic)f
(\(with)0 4523 y(or)33 b(without)i(mix\).)47 b(F)-8 b(or)33
b(classical)i(logic,)f(w)m(e)h(need)g(to)e(pro)m(vide)i(algebraic)f
(structure)h(for)e(the)h(maps)0 4643 y FT(r)83 4658 y
FR(A)151 4643 y FX(:)g FS(A)23 b FT(_)g FS(A)30 b FT(!)f
FS(A)k FX(and)h FT(q)1001 4607 y FR(A)1069 4643 y FX(:)g
FP(f)40 b FT(!)29 b FS(A)p FX(,)34 b(as)g(w)m(ell)g(as)g(\001)1988
4658 y FR(A)2057 4643 y FX(:)f FS(A)d FT(!)f FS(A)23
b FT(^)g FS(A)34 b FX(and)g(\005)2905 4607 y FR(A)2973
4643 y FX(:)g FS(A)29 b FT(!)g FP(t)p FX(,)34 b(whic)m(h)h(are)0
4763 y(listed)f(in)e(\(7\).)44 b(This)33 b(is)g(done)g(via)g(monoids)h
(and)e(comonoids.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 551 16
TeXDict begin 551 15 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(551)p 0 TeXcolorgray
0 314 a FJ(5.1.)43 b(Definition.)34 b FU(A)40 b FK(B0)p
FU(-c)-5 b(ate)g(gory)40 b(has)48 b FX(comm)m(utativ)m(e)40
b FT(_)p FX(-monoids)h FU(if)f(it)g(is)g(symmetric)f
FT(_)p FU(-mo-)0 434 y(noidal)34 b(and)g(for)h(every)g(obje)-5
b(ct)34 b FS(A)p FU(,)h(the)g(maps)f FT(r)1810 449 y
FR(A)1902 434 y FU(and)g FT(q)2166 398 y FR(A)2258 434
y FU(ob)-5 b(ey)34 b(the)h(e)-5 b(quations)129 669 y
FS(A)23 b FT(_)f FX(\()p FS(A)g FT(_)h FS(A)p FX(\))144
896 y FQ(\024)-41 b FR(\013)183 907 y FE(A;A;A)388 1051
y FG(\017)p FF(\017)p 386 1051 4 333 v 1136 678 a FS(A)22
b FT(_)h FS(A)1111 644 y FG(/)p FF(/)787 608 y FR(A)p
FI(_r)946 619 y FE(A)p 671 646 441 4 v 1638 919 a FS(A)1613
849 y FG(&)p FF(&)1481 740 y FI(r)1540 751 y FE(A)1365
703 y Fz(L)1400 724 y(L)1436 745 y(L)1471 766 y(L)1506
786 y(L)1542 807 y(L)1577 828 y(L)129 1151 y FX(\()p
FS(A)g FT(_)f FS(A)p FX(\))g FT(_)h FS(A)787 1196 y FI(r)846
1207 y FE(A)896 1196 y FI(_)p FR(A)1111 1126 y FG(/)p
FF(/)p 671 1128 V 1136 1160 a FS(A)f FT(_)h FS(A)1481
1065 y FI(r)1540 1076 y FE(A)1613 921 y FG(8)p FF(8)1577
942 y Fz(r)1542 963 y(r)1506 984 y(r)1471 1005 y(r)1436
1026 y(r)1400 1046 y(r)1365 1067 y(r)1995 694 y FS(A)g
FT(_)f FS(A)1947 896 y FQ(\024)-39 b FR(\033)1983 907
y FE(A;A)2124 1051 y FG(\017)p FF(\017)p 2122 1051 4
333 v 2497 919 a FS(A)2472 852 y FG(&)p FF(&)2341 749
y FI(r)2400 760 y FE(A)2231 719 y Fz(M)2265 737 y(M)2299
756 y(M)2334 775 y(M)2368 794 y(M)2402 812 y(M)2436 831
y(M)1995 1144 y FS(A)23 b FT(_)f FS(A)2341 1055 y FI(r)2400
1066 y FE(A)2472 919 y FG(8)p FF(8)2436 939 y Fz(q)2402
958 y(q)2368 976 y(q)2334 995 y(q)2299 1014 y(q)2265
1033 y(q)2231 1051 y(q)2916 695 y FS(A)h FT(_)f FP(f)2803
915 y FR(A)p FI(_q)2956 891 y FE(A)3031 1052 y FG(\017)p
FF(\017)p 3029 1052 V 3404 920 a FS(A)3379 852 y FG(&)p
FF(&)3259 748 y FQ(\024)-41 b FR(\045)3289 759 y FE(A)3139
719 y Fz(M)3173 738 y(M)3207 757 y(M)3241 775 y(M)3275
794 y(M)3309 813 y(M)3343 832 y(M)2902 1145 y FS(A)22
b FT(_)h FS(A)3248 1056 y FI(r)3307 1067 y FE(A)3379
920 y FG(8)p FF(8)3343 939 y Fz(q)3309 958 y(q)3275 977
y(q)3240 996 y(q)3206 1014 y(q)3172 1033 y(q)3138 1052
y(q)3607 910 y FX(\(24\))0 1386 y FU(Dual)5 b(ly,)48
b(we)d(say)h(that)g(a)g FK(B0)o FU(-c)-5 b(ate)g(gory)46
b(has)53 b FX(co)s(comm)m(utativ)m(e)47 b FT(^)p FX(-comonoids)f
FU(if)g(it)g(is)f(symmetric)0 1506 y FT(^)p FU(-monoidal)34
b(and)g(for)h(every)f(obje)-5 b(ct)35 b FS(A)p FU(,)g(the)g(maps)f
FX(\001)2039 1521 y FR(A)2131 1506 y FU(and)g FX(\005)2393
1470 y FR(A)2485 1506 y FU(ob)-5 b(ey)35 b(the)g(e)-5
b(quations)448 1750 y FS(A)22 b FT(^)g FS(A)845 1680
y FQ(\001)904 1691 y FE(A)954 1680 y FI(^)p FR(A)1169
1716 y FG(/)p FF(/)p 729 1718 441 4 v 1194 1741 a FX(\()p
FS(A)g FT(^)h FS(A)p FX(\))f FT(^)h FS(A)1485 1971 y
FQ(^)-42 b FR(\013)1523 1942 y FD(\000)p Ft(1)1523 1995
y FE(A;A;A)1453 2123 y FG(\017)p FF(\017)p 1451 2123
4 333 v 129 1991 a FS(A)250 1812 y FQ(\001)309 1823 y
FE(A)476 1775 y FG(8)p FF(8)440 1796 y Fz(r)405 1817
y(r)369 1838 y(r)334 1858 y(r)298 1879 y(r)263 1900 y(r)228
1921 y(r)448 2232 y FS(A)22 b FT(^)g FS(A)476 2139 y
FG(&)p FF(&)250 2136 y FQ(\001)309 2147 y FE(A)228 1993
y Fz(L)263 2014 y(L)298 2034 y(L)334 2055 y(L)369 2076
y(L)405 2097 y(L)440 2118 y(L)1194 2223 y FS(A)h FT(^)f
FX(\()p FS(A)g FT(^)h FS(A)p FX(\))1169 2198 y FG(/)p
FF(/)845 2268 y FR(A)p FI(^)p FQ(\001)1004 2279 y FE(A)p
729 2199 441 4 v 2261 1766 a FS(A)g FT(^)f FS(A)2419
1971 y FQ(^)-39 b FR(\033)2457 1942 y FD(\000)p Ft(1)2455
1995 y FE(A;A)2390 2123 y FG(\017)p FF(\017)p 2388 2123
4 333 v 1943 1991 a FS(A)2064 1821 y FQ(\001)2123 1832
y FE(A)2283 1791 y FG(8)p FF(8)2246 1811 y Fz(q)2212
1829 y(q)2178 1848 y(q)2144 1867 y(q)2110 1886 y(q)2076
1904 y(q)2041 1923 y(q)2261 2216 y FS(A)23 b FT(^)f FS(A)2283
2123 y FG(&)p FF(&)2064 2127 y FQ(\001)2123 2138 y FE(A)2041
1990 y Fz(M)2076 2009 y(M)2110 2028 y(M)2144 2046 y(M)2178
2065 y(M)2212 2084 y(M)2246 2103 y(M)3121 1766 y FS(A)g
FT(^)h FS(A)3274 1986 y FR(A)p FI(^)p FQ(\005)3427 1962
y FE(A)3249 2123 y FG(\017)p FF(\017)p 3248 2123 V 2803
1991 a FS(A)2923 1821 y FQ(\001)2982 1832 y FE(A)3142
1791 y FG(8)p FF(8)3106 1811 y Fz(q)3072 1829 y(q)3037
1848 y(q)3003 1867 y(q)2969 1886 y(q)2935 1904 y(q)2901
1923 y(q)3136 2216 y FS(A)f FT(^)g FP(t)3142 2123 y FG(&)p
FF(&)2922 2144 y FQ(^)-41 b FR(\045)2952 2114 y FD(\000)p
Ft(1)2952 2167 y FE(A)2901 1990 y Fz(M)2935 2009 y(M)2969
2028 y(M)3003 2046 y(M)3037 2065 y(M)3072 2084 y(M)3106
2103 y(M)3607 1982 y FX(\(25\))146 2463 y(T)-8 b(ranslated)27
b(in)m(to)e(the)h(language)f(of)g(the)g(sequen)m(t)j(calculus)f(\(cf.)e
([FP04c]\),)i(ha)m(ving)f(the)g(structure)0 2583 y(of)32
b(a)g FT(_)p FX(-monoid,)h(i.e.,)h(the)f(equations)g(in)g(\(24\),)f
(means)p 0 TeXcolorgray 79 2766 a(\(i\))p 0 TeXcolorgray
48 w(to)h(force)f(the)h(iden)m(ti\014cation)h(of)e(the)h(t)m(w)m(o)h(p)
s(ossible)g(pro)s(ofs)e(of)g(the)h(shap)s(e)1936 2960
y(\003)28 b FT(`)f FS(A;)17 b(A;)g(A;)g FX(\000)1451
3037 y FK(contraction)p 1936 3014 596 4 v 1995 3112 a
FX(\003)27 b FT(`)h FS(A;)17 b(A;)g FX(\000)1509 3189
y FK(contraction)p 1995 3166 479 4 v 2053 3264 a FX(\003)27
b FT(`)h FS(A;)17 b FX(\000)p 0 TeXcolorgray 51 3497
a(\(ii\))p 0 TeXcolorgray 49 w(to)33 b(iden)m(tify)h(the)f(t)m(w)m(o)g
(pro)s(ofs)1144 3691 y(\003)27 b FT(`)h FS(A;)17 b(A;)g
FX(\000)746 3768 y FK(exchange)p 1144 3745 V 1144 3843
a FX(\003)27 b FT(`)h FS(A;)17 b(A;)g FX(\000)659 3920
y FK(contraction)p 1144 3897 V 827 w FX(and)1202 3995
y(\003)28 b FT(`)f FS(A;)17 b FX(\000)2943 3843 y(\003)27
b FT(`)h FS(A;)17 b(A;)g FX(\000)2458 3920 y FK(contraction)p
2943 3897 V 3001 3995 a FX(\003)28 b FT(`)f FS(A;)17
b FX(\000)p 0 TeXcolorgray 24 4228 a(\(iii\))p 0 TeXcolorgray
49 w(to)33 b(sa)m(y)g(that)f(the)h(deriv)-5 b(ation)2053
4422 y(\003)27 b FT(`)h FS(A;)17 b FX(\000)1552 4499
y FK(w)m(eak)m(ening)p 1995 4476 V 1995 4574 a FX(\003)27
b FT(`)h FS(A;)17 b(A;)g FX(\000)1509 4651 y FK(contraction)p
1995 4628 V 2053 4726 a FX(\003)27 b FT(`)h FS(A;)17
b FX(\000)230 4921 y(is)33 b(the)g(same)h(as)f(doing)f(nothing)h
(\(i.e.,)g(the)g(iden)m(tit)m(y\).)0 5104 y(The)41 b(equations)h(in)f
(\(25\))o(,)h(i.e.,)h(the)e(structure)h(of)e(an)g FT(^)p
FX(-comonoid,)j(forces)e(the)g(same)g(iden)m(ti\014ca-)0
5225 y(tion)e(on)f(the)h(left-hand)g(side)g(of)f(the)i(turnstile.)62
b(See)40 b([FP04c])e(for)g(a)h(detailed)g(discussion)i(of)d(this)0
5345 y(corresp)s(ondence.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 552 17
TeXDict begin 552 16 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(552)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FJ(5.2.)i(Remark.)23 b FX(The)j(\(co\)asso)s
(ciativit)m(y)h(of)e(the)g(maps)h(\001)2158 335 y FR(A)2241
320 y FX(and)f FT(r)2506 335 y FR(A)2588 320 y FX(allo)m(ws)h(us)g(to)f
(use)h(the)f(notation)0 440 y(\001)81 404 y FH(2)81 465
y FR(A)149 440 y FX(:)34 b FS(A)27 b FT(!)h FS(A)22 b
FT(^)h FS(A)f FT(^)g FS(A)33 b FX(and)g FT(r)1184 404
y FH(2)1184 465 y FR(A)1252 440 y FX(:)g FS(A)22 b FT(_)h
FS(A)f FT(_)h FS(A)28 b FT(!)f FS(A)p FX(.)0 625 y FJ(5.3.)37
b(Pr)n(oposition.)30 b FU(L)-5 b(et)35 b FC(C)52 b FU(b)-5
b(e)35 b(a)g(c)-5 b(ate)g(gory)34 b(with)h(c)-5 b(ommutative)35
b FT(_)p FU(-monoids,)e(and)i(let)1636 855 y FS(A)22
b FT(_)g FP(f)1584 1062 y FR(A)p FI(_)p FR(f)1750 1212
y FG(\017)p FF(\017)p 1748 1212 4 333 v 2123 1080 a FS(A)2098
1012 y FG(&)p FF(&)1979 908 y FQ(\024)-42 b FR(\045)2008
919 y FE(A)1858 879 y Fz(M)1892 898 y(M)1926 916 y(M)1960
935 y(M)1994 954 y(M)2028 973 y(M)2062 991 y(M)1621 1305
y FS(A)23 b FT(_)f FS(A)1967 1216 y FI(r)2026 1227 y
FE(A)2098 1079 y FG(8)p FF(8)2062 1099 y Fz(q)2028 1118
y(q)1994 1137 y(q)1960 1155 y(q)1925 1174 y(q)1891 1193
y(q)1857 1212 y(q)0 1519 y FU(c)-5 b(ommute)34 b(for)h(some)f
FS(f)22 b FX(:)33 b FP(f)38 b FT(!)28 b FS(A)p FU(.)45
b(Then)34 b FS(f)k FX(=)28 b FT(q)1815 1483 y FR(A)1871
1519 y FU(.)0 1693 y FJ(Pr)n(oof.)f FX(This)k(is)f(a)f(w)m(ell-kno)m
(wn)j(fact)d(from)g(algebra:)42 b(in)30 b(a)f(monoid)h(the)g(unit)g(is)
g(uniquely)h(de\014ned.)0 1813 y(W)-8 b(ritten)33 b(as)g(diagram,)f
(the)h(standard)g(pro)s(of)f(lo)s(oks)h(as)g(follo)m(ws:)1868
2035 y FP(f)1918 2169 y FQ(\024)1915 2186 y FR(\025)1956
2156 y FD(\000)p Ft(1)1956 2210 y Fy(f)2039 2186 y FQ(=)6
b(\024)-41 b FR(\045)2130 2156 y FD(\000)p Ft(1)2130
2210 y Fy(f)1890 2274 y FG(\017)p FF(\017)p 1888 2274
4 215 v 680 2329 a Fz(g)720 2318 y(g)760 2307 y(g)801
2297 y(g)841 2286 y(g)881 2276 y(g)921 2265 y(g)961 2254
y(g)1001 2244 y(g)1042 2233 y(g)1082 2222 y(g)1122 2212
y(g)1162 2201 y(g)1202 2190 y(g)1242 2180 y(g)1283 2169
y(g)1323 2158 y(g)1363 2148 y(g)1403 2137 y(g)1443 2127
y(g)1483 2116 y(g)1523 2105 y(g)1564 2095 y(g)1604 2084
y(g)1644 2073 y(g)1684 2063 y(g)1724 2052 y(g)1764 2041
y(g)1805 2031 y(g)676 2313 y(g)716 2302 y(g)756 2291
y(g)797 2281 y(g)837 2270 y(g)877 2259 y(g)917 2249 y(g)957
2238 y(g)997 2227 y(g)1038 2217 y(g)1078 2206 y(g)1118
2196 y(g)1158 2185 y(g)1198 2174 y(g)1238 2164 y(g)1279
2153 y(g)1319 2142 y(g)1359 2132 y(g)1399 2121 y(g)1439
2110 y(g)1479 2100 y(g)1519 2089 y(g)1560 2079 y(g)1600
2068 y(g)1640 2057 y(g)1680 2047 y(g)1720 2036 y(g)1760
2025 y(g)1801 2014 y(g)3064 2303 y(W)3023 2292 y(W)2983
2281 y(W)2943 2271 y(W)2903 2260 y(W)2863 2249 y(W)2823
2239 y(W)2782 2228 y(W)2742 2217 y(W)2702 2207 y(W)2662
2196 y(W)2622 2186 y(W)2582 2175 y(W)2542 2164 y(W)2501
2154 y(W)2461 2143 y(W)2421 2132 y(W)2381 2122 y(W)2341
2111 y(W)2301 2100 y(W)2260 2090 y(W)2220 2079 y(W)2180
2068 y(W)2140 2058 y(W)2100 2047 y(W)2060 2037 y(W)2019
2026 y(W)1979 2015 y(W)1939 2004 y(W)3060 2319 y(W)3019
2308 y(W)2979 2297 y(W)2939 2287 y(W)2899 2276 y(W)2859
2265 y(W)2819 2255 y(W)2778 2244 y(W)2738 2234 y(W)2698
2223 y(W)2658 2212 y(W)2618 2202 y(W)2578 2191 y(W)2538
2180 y(W)2497 2170 y(W)2457 2159 y(W)2417 2148 y(W)2377
2138 y(W)2337 2127 y(W)2297 2117 y(W)2256 2106 y(W)2216
2095 y(W)2176 2085 y(W)2136 2074 y(W)2096 2063 y(W)2056
2053 y(W)2015 2042 y(W)1975 2031 y(W)1935 2021 y(W)609
2368 y FP(f)p 638 2941 4 548 v 621 2941 V 1147 w(f)33
b FT(_)22 b FP(f)1188 2400 y FQ(\024)1185 2418 y FR(\025)1226
2430 y Fy(f)678 2334 y FG(o)p FF(o)p 678 2335 1088 4
v 2531 2400 a FQ(\024)-42 b FR(\045)2560 2412 y Fy(f)3102
2334 y FG(/)p FF(/)p 2015 2335 V 1446 2463 a Fs(f)8 b
FI(_)p FR(f)1329 2608 y FG(w)p FF(w)p Fz(o)1366 2590
y(o)1402 2572 y(o)1439 2555 y(o)1475 2537 y(o)1512 2519
y(o)1548 2501 y(o)1585 2483 y(o)1621 2465 y(o)1658 2447
y(o)1695 2430 y(o)1731 2412 y(o)2197 2476 y FI(q)2250
2452 y FE(A)2300 2476 y FI(_)p Fs(f)2451 2608 y FG(')p
FF(')2414 2590 y Fz(O)2377 2572 y(O)2341 2554 y(O)2304
2536 y(O)2268 2518 y(O)2231 2500 y(O)2194 2482 y(O)2158
2465 y(O)2121 2447 y(O)2085 2429 y(O)2048 2411 y(O)2012
2393 y(O)3127 2368 y FP(f)p 3156 2941 4 548 v 3139 2941
V 1093 2702 a(f)33 b FT(_)22 b FS(A)1440 2642 y FI(q)1493
2619 y FE(A)1543 2642 y FI(_)p FR(A)1737 2667 y FG(/)p
FF(/)p 1346 2669 391 4 v 1502 2915 a FQ(\024)1499 2933
y FR(\025)1540 2944 y FE(A)1829 2971 y FG(')p FF(')1791
2953 y Fz(O)1756 2935 y(O)1720 2918 y(O)1685 2900 y(O)1649
2883 y(O)1614 2866 y(O)1578 2848 y(O)1542 2831 y(O)1507
2814 y(O)1471 2796 y(O)1436 2779 y(O)1400 2761 y(O)1365
2744 y(O)1329 2727 y(O)1762 2701 y FS(A)g FT(_)g FS(A)1915
2851 y FI(r)1974 2862 y FE(A)1890 2942 y FG(\017)p FF(\017)p
1888 2942 4 216 v 2458 2702 a FS(A)h FT(_)f FP(f)2168
2629 y FR(A)p FI(_)p FR(f)2043 2667 y FG(o)p FF(o)p 2043
2669 391 4 v 2198 2915 a FQ(\024)-42 b FR(\045)2227 2926
y FE(A)1951 2971 y FG(w)p FF(w)p Fz(o)1987 2954 y(o)2023
2936 y(o)2058 2919 y(o)2094 2902 y(o)2129 2884 y(o)2165
2867 y(o)2200 2849 y(o)2236 2832 y(o)2271 2815 y(o)2307
2797 y(o)2343 2780 y(o)2378 2763 y(o)2414 2745 y(o)609
3035 y FP(f)1233 3072 y FR(f)1829 3001 y FG(/)p FF(/)p
678 3002 1151 4 v 1853 3035 a FS(A)1201 b FP(f)2475 3083
y FI(q)2528 3060 y FE(A)1951 3001 y FG(o)p FF(o)p 1951
3002 V 0 3287 a FX(Note)32 b(that)g(in)h(the)f(same)h(w)m(a)m(y)h(it)e
(follo)m(ws)h(that)f(the)h(counit)f(in)h(a)f(comonoid)g(is)h(uniquely)h
(de\014ned.)p 3738 3287 42 42 v 146 3457 a(Although)d(the)h(op)s
(erations)e FT(^)i FX(and)f FT(_)g FX(are)f FU(not)41
b FX(the)31 b(pro)s(duct)g(and)g(copro)s(duct)g(in)g(the)g(category-)0
3577 y(theoretic)i(sense,)i(w)m(e)f(use)f(the)g(notation:)130
3797 y FT(h)p FS(f)5 b(;)17 b(g)t FT(i)26 b FX(=)i(\()p
FS(f)33 b FT(^)22 b FS(g)t FX(\))f FT(\016)h FX(\001)956
3812 y FR(A)1025 3797 y FX(:)33 b FS(A)28 b FT(!)f FS(C)i
FT(^)23 b FS(D)100 b FX(and)e([)p FS(f)5 b(;)17 b(h)p
FX(])28 b(=)f FT(r)2358 3812 y FR(C)2440 3797 y FT(\016)22
b FX(\()p FS(f)32 b FT(_)23 b FS(h)p FX(\))11 b(:)33
b FS(A)23 b FT(_)f FS(B)33 b FT(!)27 b FS(C)235 b FX(\(26\))0
4017 y(where)34 b FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f
FS(C)39 b FX(and)33 b FS(g)15 b FX(:)33 b FS(A)28 b FT(!)f
FS(D)35 b FX(and)e FS(h)11 b FX(:)33 b FS(B)g FT(!)27
b FS(C)40 b FX(are)32 b(arbitrary)h(maps.)146 4138 y(Another)g(helpful)
h(notation)e(\(see)i([LS05a]\))e(is)h(the)g(follo)m(wing:)177
4366 y(\005)250 4330 y FR(B)250 4396 y(A)303 4384 y Fn(8)367
4366 y FX(=)j(^)-57 b FS(\045)521 4381 y FR(A)600 4366
y FT(\016)22 b FX(\()p FS(A)g FT(^)h FX(\005)967 4330
y FR(B)1028 4366 y FX(\))11 b(:)33 b FS(A)22 b FT(^)h
FS(B)32 b FT(!)c FS(A)236 b FX(\005)1937 4330 y FR(A)1937
4384 y Fn(8)1968 4396 y FR(B)2057 4366 y FX(=)2164 4340
y(^)2160 4366 y FS(\025)2217 4381 y FR(B)2300 4366 y
FT(\016)22 b FX(\(\005)2483 4330 y FR(A)2562 4366 y FT(^)h
FS(B)5 b FX(\))11 b(:)33 b FS(A)22 b FT(^)h FS(B)33 b
FT(!)27 b FS(B)177 4555 y FT(q)252 4519 y FR(B)252 4585
y(A)305 4573 y Fn(8)369 4555 y FX(=)g(\()p FS(A)22 b
FT(_)h(q)769 4519 y FR(B)829 4555 y FX(\))f FT(\016)31
b FX(\024)-58 b FS(\045)1011 4514 y FI(\000)p FQ(1)1011
4582 y FR(A)1117 4555 y FX(:)33 b FS(A)28 b FT(!)f FS(A)c
FT(_)f FS(B)201 b FT(q)1939 4519 y FR(A)1939 4573 y Fn(8)1970
4585 y FR(B)2058 4555 y FX(=)28 b(\()p FT(q)2275 4519
y FR(A)2354 4555 y FT(_)22 b FS(B)5 b FX(\))23 b FT(\016)2658
4529 y FX(\024)2653 4555 y FS(\025)2710 4514 y FI(\000)p
FQ(1)2710 4582 y FR(B)2816 4555 y FX(:)33 b FS(B)g FT(!)27
b FS(A)22 b FT(_)h FS(B)3607 4456 y FX(\(27\))0 4768
y(Note)33 b(that)456 4989 y FT(r)539 5004 y FR(A)618
4989 y FT(\016)22 b(q)765 4947 y FR(A)765 5001 y Fn(8)797
5013 y FR(A)881 4989 y FX(=)28 b(1)1034 5004 y FR(A)1118
4989 y FX(=)g FT(r)1305 5004 y FR(A)1384 4989 y FT(\016)22
b(q)1531 4947 y FR(A)1531 5013 y(A)1584 5001 y Fn(8)1815
4989 y FX(and)195 b(\005)2240 4947 y FR(A)2240 5001 y
Fn(8)2272 5013 y FR(A)2351 4989 y FT(\016)22 b FX(\001)2504
5004 y FR(A)2589 4989 y FX(=)28 b(1)2742 5004 y FR(A)2826
4989 y FX(=)g(\005)3003 4947 y FR(A)3003 5013 y(A)3056
5001 y Fn(8)3114 4989 y FT(\016)22 b FX(\001)3267 5004
y FR(A)3607 4989 y FX(\(28\))p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 553 18
TeXDict begin 553 17 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(553)p 0 TeXcolorgray
0 314 a FJ(5.4.)33 b(Definition.)26 b FU(L)-5 b(et)31
b FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f FS(B)36 b FU(b)-5
b(e)31 b(a)g(map)f(in)h(a)g FK(B0)o FU(-c)-5 b(ate)g(gory)31
b(with)g(c)-5 b(ommutative)30 b FT(_)p FU(-monoids)0
427 y(and)k(c)-5 b(o)g(c)g(ommutative)34 b FT(^)p FU(-c)-5
b(omonoids.)44 b(Consider)33 b(the)i(fol)5 b(lowing)34
b(four)h(diagr)-5 b(ams:)88 702 y Fr(A)20 b Fq(_)g Fr(A)481
634 y FR(f)7 b FI(_)p FR(f)741 672 y FG(/)p FF(/)p 350
673 391 4 v 765 702 a Fr(B)25 b Fq(_)20 b Fr(B)914 852
y FI(r)973 863 y FE(B)889 942 y FG(\017)p FF(\017)p 888
942 4 215 v 173 1029 a Fr(A)207 942 y FG(\017)p FF(\017)73
852 y FI(r)132 863 y FE(A)p 205 942 V 853 1029 a Fr(B)828
998 y FG(/)p FF(/)526 1069 y FR(f)p 266 1000 563 4 v
1467 703 a Fo(f)1212 812 y FI(q)1265 788 y FE(A)1239
943 y FG(\000)p FF(\000)p Fz(\002)1264 915 y(\002)1289
888 y(\002)1314 861 y(\002)1339 834 y(\002)1364 807 y(\002)1388
779 y(\002)1413 752 y(\002)1153 1030 y Fr(A)1467 1070
y FR(f)1728 999 y FG(/)p FF(/)p 1247 1000 482 4 v 1753
1030 a Fr(B)1738 943 y FG(\036)p FF(\036)1661 811 y FI(q)1714
787 y FE(B)1533 721 y Fz(=)1559 748 y(=)1584 776 y(=)1609
803 y(=)1634 830 y(=)1660 858 y(=)1685 885 y(=)1710 912
y(=)1954 702 y Fr(A)2267 634 y FR(f)2528 672 y FG(/)p
FF(/)p 2047 673 481 4 v 2553 702 a Fr(B)2460 916 y FQ(\005)2513
893 y FE(B)2333 947 y FG(\000)p FF(\000)p Fz(\001)2358
920 y(\001)2383 893 y(\001)2409 866 y(\001)2434 839 y(\001)2459
812 y(\001)2484 785 y(\001)2509 758 y(\001)2267 1025
y Fo(t)2243 947 y FG(\036)p FF(\036)2013 915 y FQ(\005)2066
892 y FE(A)2040 728 y Fz(=)2065 755 y(=)2090 782 y(=)2115
809 y(=)2140 836 y(=)2165 863 y(=)2190 890 y(=)2215 917
y(=)2854 702 y Fr(A)3207 634 y FR(f)3509 672 y FG(/)p
FF(/)p 2947 673 563 4 v 3534 702 a Fr(B)3596 852 y FQ(\001)3655
863 y FE(B)3571 942 y FG(\017)p FF(\017)p 3569 942 4
215 v 2769 1029 a Fr(A)h Fq(^)f Fr(A)2888 942 y FG(\017)p
FF(\017)2754 852 y FQ(\001)2813 863 y FE(A)p 2886 942
V 3447 1029 a Fr(B)k Fq(^)c Fr(B)3422 998 y FG(/)p FF(/)3162
1069 y FR(f)7 b FI(^)p FR(f)p 3032 1000 391 4 v 0 1276
a FU(We)35 b(say)g(that)p 0 TeXcolorgray 145 1480 a FT(\017)p
0 TeXcolorgray 49 w FS(f)45 b FX(preserv)m(es)36 b(the)d
FT(_)p FX(-m)m(ultiplication)j FU(if)f(the)g(left)f(squar)-5
b(e)35 b(c)-5 b(ommutes,)p 0 TeXcolorgray 145 1683 a
FT(\017)p 0 TeXcolorgray 49 w FS(f)45 b FX(preserv)m(es)36
b(the)d FT(_)p FX(-unit)i FU(if)g(the)g(left)f(triangle)h(c)-5
b(ommutes,)p 0 TeXcolorgray 145 1886 a FT(\017)p 0 TeXcolorgray
49 w FS(f)45 b FX(preserv)m(es)36 b(the)d FT(^)p FX(-counit)i
FU(if)g(the)g(right)g(triangle)f(c)-5 b(ommutes,)p 0
TeXcolorgray 145 2090 a FT(\017)p 0 TeXcolorgray 49 w
FS(f)45 b FX(preserv)m(es)36 b(the)d FT(^)p FX(-com)m(ultiplication)j
FU(if)f(the)g(right)g(squar)-5 b(e)34 b(c)-5 b(ommutes,)p
0 TeXcolorgray 145 2293 a FT(\017)p 0 TeXcolorgray 49
w FS(f)45 b FU(is)35 b(a)42 b FT(_)p FX(-monoid)33 b(morphism)j
FU(if)f(the)g(two)f(left)h(diagr)-5 b(ams)34 b(c)-5 b(ommute,)p
0 TeXcolorgray 145 2497 a FT(\017)p 0 TeXcolorgray 49
w FS(f)45 b FU(is)35 b(a)42 b FT(^)p FX(-comonoid)33
b(morphism)j FU(if)f(the)g(two)g(right)f(diagr)-5 b(ams)34
b(c)-5 b(ommute,)p 0 TeXcolorgray 145 2700 a FT(\017)p
0 TeXcolorgray 49 w FS(f)45 b FU(is)35 b(a)42 b FX(quasien)m(trop)m(y)c
FU(if)c(b)-5 b(oth)35 b(triangles)f(c)-5 b(ommute,)p
0 TeXcolorgray 145 2903 a FT(\017)p 0 TeXcolorgray 49
w FS(f)45 b FU(is)e FX(clonable)36 b FU(if)f(b)-5 b(oth)34
b(squar)-5 b(es)35 b(c)-5 b(ommute,)p 0 TeXcolorgray
145 3107 a FT(\017)p 0 TeXcolorgray 49 w FS(f)45 b FU(is)e
FX(strong)35 b FU(if)g(al)5 b(l)34 b(four)h(diagr)-5
b(ams)34 b(c)-5 b(ommute.)0 3310 y FJ(5.5.)40 b(Definition.)32
b FU(A)37 b FK(B1)p FX(-category)g FU(is)g(a)g FK(B0)p
FU(-c)-5 b(ate)g(gory)37 b(that)g(is)g FT(\003)p FU(-autonomous)g(and)f
(has)h(c)-5 b(o)g(c)g(om-)0 3431 y(mutative)35 b FT(^)p
FU(-c)-5 b(omonoids.)146 3601 y FX(Clearly)d(,)46 b(a)c
FK(B1)o FX(-category)g(also)g(has)h(comm)m(utativ)m(e)h
FT(_)p FX(-monoids)e(with)h FT(r)j FX(dual)c(to)g(\001)5
b(,)44 b(and)e FT(q)0 3721 y FX(dual)33 b(to)f(\005)t(.)0
3906 y FJ(5.6.)49 b(Remark.)36 b FX(De\014nition)44 b(5.5)f(exhibits)i
(another)f(\\creativ)m(e)h(tension")f(b)s(et)m(w)m(een)h(algebra)f(and)
0 4026 y(pro)s(of)37 b(theory)-8 b(.)59 b(F)-8 b(rom)37
b(the)h(algebraic)g(p)s(oin)m(t)g(of)f(view)i(one)f(should)h(add)e(the)
h(phrase)h(\\and)f(all)f(iso-)0 4147 y(morphisms)c(preserv)m(e)h(the)e
FT(^)p FX(-comonoid)g(structure")h(b)s(ecause)g(in)f(a)f(seman)m(tics)j
(of)d(pro)s(ofs)g(this)h(will)0 4267 y(probably)h(b)s(e)g(inevitable.)
45 b(But)32 b(here)i(w)m(e)f(do)g(not)f(assume)i(it)f(from)f(the)h(b)s
(eginning,)g(but)g(systemat-)0 4387 y(ically)g(giv)m(e)h(conditions)f
(that)f(will)h(ensure)h(it)f(in)f(the)h(end)g(\(cf.)44
b(Theorem)33 b(7.19)f(and)h(Remark)g(7.20\).)0 4508 y(F)-8
b(rom)33 b(the)g(pro)s(of-theoretic)g(view)h(p)s(oin)m(t)f(this)h(is)g
(more)f(in)m(teresting)i(b)s(ecause)f(when)h(seen)f(syn)m(tacti-)0
4628 y(cally)-8 b(,)40 b(these)f(conditions)g(are)f(more)h(primitiv)m
(e.)61 b(The)39 b(reason)g(is)f(that)g(in)g(syn)m(tax)i(the)e
(morphisms)0 4749 y(\(i.e.,)f(pro)s(ofs\))e(come)h(after)g(the)g(ob)5
b(jects)37 b(\(i.e.,)g(form)m(ulae\),)f(and)g(the)g(form)m(ulae)g(can)g
(alw)m(a)m(ys)h(b)s(e)f(de-)0 4869 y(comp)s(osed)44 b(in)m(to)f
(subform)m(ulae,)k(whereas)d(in)f(seman)m(tics)i(w)m(e)f(ha)m(v)m(e)g
(no)f(access)i(to)d(the)h(outermost)0 4989 y(connectiv)m(e.)50
b(F)-8 b(urthermore,)35 b(forcing)f(all)g(isomorphisms)i(to)e(preserv)m
(e)i(the)e FT(^)p FX(-comonoid)h(structure)0 5110 y(can)k(cause)g(iden)
m(ti\014cations)h(of)e(pro)s(ofs)g(that)h(migh)m(t)g(not)f(necessarily)
j(b)s(e)d(w)m(an)m(ted)i(b)m(y)g(ev)m(ery)g(pro)s(of)0
5230 y(theorist)33 b(\(see,)h(e.g.,)f(Prop)s(osition)g(7.14\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 554 19
TeXDict begin 554 18 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(554)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 315 a FJ(5.7.)51 b(Remark.)37 b FX(F)-8
b(or)45 b(eac)m(h)i(ob)5 b(ject)46 b FS(A)g FX(in)g(a)f
FK(B1)p FX(-category)g FC(C)17 b FX(,)49 b(the)d(iden)m(tit)m(y)i(map)e
(1)3302 330 y FR(A)3370 315 y FX(:)37 b FS(A)50 b FT(!)g
FS(A)0 435 y FX(is)39 b(strong,)g(and)g(all)f(kinds)h(of)f(maps)h
(de\014ned)g(in)g(De\014nition)f(5.4)g(are)g(closed)h(under)g(comp)s
(osition.)0 555 y(Therefore,)33 b(eac)m(h)g(kind)h(de\014nes)f(a)f
(wide)h(sub)s(category)g(\(i.e.,)g(a)f(sub)s(category)h(that)f(has)h
(all)f(ob)5 b(jects\))0 676 y(of)34 b FC(C)17 b FX(,)35
b(e.g.,)h(the)f(wide)g(sub)s(category)h(of)e(quasien)m(tropies,)j(or)e
(the)g(wide)g(sub)s(category)h(of)e FT(_)p FX(-monoid)0
796 y(morphisms.)146 959 y(In)i(a)f FK(B1)o FX(-category)g(w)m(e)h(ha)m
(v)m(e)g(t)m(w)m(o)g(canonical)g(maps)g FP(f)42 b FT(!)32
b FP(t)p FX(,)j(namely)h(\005)2873 923 y Fs(f)2945 959
y FX(and)f FT(q)3212 923 y Fs(t)3248 959 y FX(.)51 b(Because)36
b(of)0 1080 y(the)d FT(^)p FX(-comonoid)g(structure)h(on)e
FP(f)43 b FX(and)33 b(the)g FT(_)p FX(-monoid)g(structure)h(on)e
FP(t)p FX(,)g(w)m(e)i(ha)m(v)m(e)213 1326 y FP(f)e FT(_)23
b FP(t)550 1267 y FI(q)603 1243 y Fy(t)634 1267 y FI(_)p
Fs(t)827 1292 y FG(/)p FF(/)p 436 1294 391 4 v 851 1323
a FP(t)f FT(_)h FP(t)975 1475 y FI(r)1034 1484 y Fy(t)950
1566 y FG(\017)p FF(\017)p 949 1566 4 218 v 1489 1326
a FP(t)f FT(_)h FP(f)1188 1267 y Fs(t)p FI(_q)1320 1243
y Fy(t)1074 1292 y FG(o)p FF(o)p 1074 1294 391 4 v 929
1654 a FP(t)904 1598 y FG(')p FF(')600 1541 y FQ(\024)598
1559 y FR(\025)639 1568 y Fy(t)427 1351 y Fz(N)461 1368
y(N)495 1386 y(N)529 1403 y(N)562 1421 y(N)596 1438 y(N)630
1456 y(N)664 1473 y(N)698 1491 y(N)732 1508 y(N)766 1526
y(N)799 1543 y(N)833 1561 y(N)867 1579 y(N)997 1598 y
FG(w)p FF(w)1238 1541 y FQ(\024)-41 b FR(\045)1268 1550
y Fy(t)1437 1370 y Fz(p)1403 1388 y(p)1369 1405 y(p)1336
1423 y(p)1302 1440 y(p)1268 1458 y(p)1234 1475 y(p)1200
1493 y(p)1166 1510 y(p)1133 1528 y(p)1099 1545 y(p)1065
1563 y(p)1031 1580 y(p)997 1598 y(p)1811 1458 y FX(and)2090
1325 y FP(t)22 b FT(^)g FP(f)2314 1290 y FG(o)p FF(o)2427
1265 y FQ(\005)2480 1242 y Fy(f)2511 1265 y FI(^)p Fs(f)p
2314 1292 V 2729 1325 a FP(f)33 b FT(^)22 b FP(f)2829
1350 y FG(O)p FF(O)2854 1474 y FQ(\001)2913 1486 y Fy(f)p
2827 1564 4 215 v 3369 1325 a FP(f)32 b FT(^)23 b FP(t)3344
1290 y FG(/)p FF(/)3066 1265 y Fs(f)8 b FI(^)p FQ(\005)3199
1242 y Fy(f)p 2953 1292 391 4 v 2806 1658 a FP(f)2438
1545 y FQ(^)2435 1563 y FR(\025)2476 1533 y FD(\000)p
Ft(1)2476 1587 y Fy(f)2304 1350 y FG(g)p FF(g)2304 1349
y Fz(N)2337 1367 y(N)2371 1385 y(N)2405 1402 y(N)2439
1420 y(N)2473 1438 y(N)2507 1456 y(N)2541 1473 y(N)2575
1491 y(N)2609 1509 y(N)2643 1526 y(N)2677 1544 y(N)2711
1562 y(N)2745 1580 y(N)3106 1561 y FQ(^)-42 b FR(\045)3135
1531 y FD(\000)p Ft(1)3135 1585 y Fy(f)3354 1350 y FG(7)p
FF(7)3317 1369 y Fz(p)3283 1386 y(p)3249 1404 y(p)3215
1422 y(p)3181 1440 y(p)3147 1457 y(p)3113 1475 y(p)3080
1493 y(p)3046 1510 y(p)3012 1528 y(p)2978 1546 y(p)2944
1564 y(p)2910 1581 y(p)2876 1599 y(p)0 1862 y FX(\(whic)m(h)38
b(hold)f(ev)m(en)h(if)f(the)g(\(co\)monoids)g(are)g(not)f(\(co\)comm)m
(utativ)m(e.\))58 b(Since)3037 1835 y(\024)3032 1862
y FS(\025)3089 1877 y Fs(t)3125 1862 y FX(,)47 b(\024)-58
b FS(\045)3240 1877 y Fs(t)3276 1862 y FX(,)3345 1835
y(^)3341 1862 y FS(\025)3398 1877 y Fs(f)3434 1862 y
FX(,)38 b(and)46 b(^)-58 b FS(\045)3743 1877 y Fs(f)0
1982 y FX(are)25 b(isomorphisms,)k(w)m(e)e(immediately)g(can)f
(conclude)g(that)f(the)h(follo)m(wing)g(t)m(w)m(o)g(diagrams)g(comm)m
(ute)0 2103 y(\(cf.)33 b([FP04a]\):)764 2375 y FP(t)1008
2280 y FQ(\024)1005 2297 y FR(\025)1046 2268 y FD(\000)p
Ft(1)1046 2318 y Fy(t)1301 2343 y FG(/)p FF(/)p 833 2345
468 4 v 1325 2378 a FP(f)g FT(_)23 b FP(t)1450 2539 y
FI(q)1503 2515 y Fy(t)1534 2539 y FI(_)p Fs(t)1425 2620
y FG(\017)p FF(\017)p 1423 2620 4 218 v 687 2711 a FP(t)e
FT(_)i FP(f)786 2617 y FG(\017)p FF(\017)649 2529 y FQ(\024)-42
b FR(\045)678 2499 y FD(\000)p Ft(1)678 2550 y Fy(t)p
784 2617 V 1326 2708 a FP(t)22 b FT(_)g FP(t)1301 2677
y FG(/)p FF(/)1024 2757 y Fs(t)p FI(_q)1156 2733 y Fy(t)p
910 2678 391 4 v 1832 2521 a FX(and)2299 2355 y FP(f)33
b FT(^)22 b FP(f)2637 2296 y Fs(f)8 b FI(^)p FQ(\005)2770
2272 y Fy(f)2914 2321 y FG(/)p FF(/)p 2524 2323 V 2939
2355 a FP(f)32 b FT(^)23 b FP(t)3069 2504 y FQ(^)-41
b FR(\045)3099 2516 y Fy(f)3038 2595 y FG(\017)p FF(\017)p
3037 2595 4 215 v 2300 2689 a FP(t)21 b FT(^)i FP(f)2399
2595 y FG(\017)p FF(\017)2210 2516 y FQ(\005)2263 2493
y Fy(f)2294 2516 y FI(^)p Fs(f)p 2397 2595 V 3016 2689
a FP(f)2991 2654 y FG(/)p FF(/)2724 2725 y FQ(^)2721
2743 y FR(\025)2762 2755 y Fy(f)p 2523 2656 468 4 v 0
2934 a FX(By)38 b(Section)h(4,)f(this)g(giv)m(es)h(us)g(t)m(w)m(o)f
(di\013eren)m(t)h(mix)f(maps)g FS(A)26 b FT(^)g FS(B)41
b FT(!)36 b FS(A)26 b FT(_)g FS(B)5 b FX(,)39 b(and)e(motiv)-5
b(ates)39 b(the)0 3054 y(follo)m(wing)33 b(de\014nition:)0
3235 y FJ(5.8.)k(Definition.)30 b FU(A)36 b FK(B1)o FU(-c)-5
b(ate)g(gory)35 b(is)g(c)-5 b(al)5 b(le)-5 b(d)44 b FX(single-mixed)37
b FU(if)d FX(\005)2550 3199 y Fs(f)2615 3235 y FX(=)28
b FT(q)2794 3199 y Fs(t)2829 3235 y FU(.)146 3398 y FX(In)33
b(a)f(single-mixed)i FK(B1)o FX(-category)e(w)m(e)i(ha)m(v)m(e,)f(as)g
(the)f(name)h(sa)m(ys,)h(a)e(single)h(canonical)g(mix)g(map)0
3519 y FK(mix)145 3534 y FR(A;B)289 3519 y FX(:)i FS(A)27
b FT(^)f FS(B)43 b FT(!)38 b FS(A)26 b FT(_)h FS(B)43
b FX(ob)s(eying)e(\()p FK(mix)t FX(-)5 b(^)-54 b FS(\033)t
FX(\))38 b(and)h(\()p FK(mix)t FX(-)10 b(^)-59 b FS(\013)s
FX(\).)62 b(The)39 b(naturalit)m(y)h(of)e(mix,)j(i.e.,)g(the)0
3639 y(comm)m(utativit)m(y)35 b(of)1403 3817 y FS(A)22
b FT(^)h FS(B)1778 3737 y FH(mix)1884 3748 y FE(A;B)2089
3783 y FG(/)p FF(/)p 1691 3785 399 4 v 2114 3817 a FS(A)f
FT(_)h FS(B)2271 3966 y FR(f)7 b FI(_)p FR(g)2246 4056
y FG(\017)p FF(\017)p 2244 4056 4 215 v 1399 4149 a FS(C)29
b FT(^)22 b FS(D)1534 4056 y FG(\017)p FF(\017)1385 3966
y FR(f)7 b FI(^)p FR(g)p 1533 4056 V 2110 4149 a FS(C)29
b FT(_)23 b FS(D)2085 4115 y FG(/)p FF(/)1778 4186 y
FH(mix)1883 4197 y FE(C;D)p 1695 4117 391 4 v 3607 3974
a FX(\(29\))0 4352 y(for)k(all)g(maps)i FS(f)21 b FX(:)34
b FS(A)28 b FT(!)f FS(C)34 b FX(and)28 b FS(g)15 b FX(:)33
b FS(B)f FT(!)c FS(D)s FX(,)g(uniquely)i(determines)f(a)f(map)f
FS(f)c FT(_)-66 b(^)12 b FS(g)j FX(:)33 b FS(A)12 b FT(^)g
FS(B)33 b FT(!)27 b FS(C)19 b FT(_)12 b FS(D)s FX(.)0
4473 y(Then,)34 b(for)e(ev)m(ery)i FS(f)5 b(;)17 b(g)e
FX(:)33 b FS(A)28 b FT(!)f FS(B)38 b FX(w)m(e)33 b(can)g(de\014ne)1133
4668 y FS(f)g FX(+)22 b FS(g)31 b FX(=)d FT(r)1581 4687
y FR(B)1664 4668 y FT(\016)22 b FX(\()p FS(f)33 b FT(_)-66
b(^)22 b FS(g)t FX(\))f FT(\016)h FX(\001)2211 4687 y
FR(A)2279 4668 y FX(:)33 b FS(A)28 b FT(!)f FS(B)103
b FX(.)0 4863 y(It)36 b(follo)m(ws)h(from)f(\(co\)-asso)s(ciativit)m(y)
h(and)f(\(co\)-comm)m(utativit)m(y)i(of)d(\001)41 b(and)36
b FT(r)t FX(,)h(along)f(with)g(natu-)0 4984 y(ralit)m(y)h(of)f
FK(mix)t FX(,)h(that)f(the)h(op)s(eration)f(+)g(on)h(maps)g(is)g(asso)s
(ciativ)m(e)h(and)e(comm)m(utativ)m(e.)57 b(This)38 b(giv)m(es)0
5104 y(us)33 b(for)f(Hom)5 b(\()p FS(A;)17 b(B)5 b FX(\))32
b(a)g(comm)m(utativ)m(e)j(semigroup)e(structure.)146
5225 y(Note)k(that)f(in)g(general)h(the)g(semigroup)g(structure)h(on)e
(the)h(Hom-sets)g(is)g(not)f(an)g(enric)m(hmen)m(t,)0
5345 y(e.g.,)d(\()p FS(f)g FX(+)22 b FS(g)t FX(\))p FS(h)32
b FX(is)h(in)g(general)g(not)f(the)h(same)g(as)g FS(f)11
b(h)22 b FX(+)g FS(g)t(h)p FX(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 555 20
TeXDict begin 555 19 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(555)p 0 TeXcolorgray
0 315 a FJ(5.9.)40 b(Definition.)32 b FU(L)-5 b(et)38
b FC(C)54 b FU(b)-5 b(e)37 b(a)g(single-mixe)-5 b(d)35
b FK(B1)p FU(-c)-5 b(ate)g(gory.)52 b(Then)36 b FC(C)55
b FU(is)37 b(c)-5 b(al)5 b(le)-5 b(d)47 b FX(idemp)s(oten)m(t)38
b FU(if)0 435 y(for)32 b(every)g FS(A)h FU(and)e FS(B)5
b FU(,)33 b(the)f(semigr)-5 b(oup)32 b(on)g FX(Hom)t(\()p
FS(A;)17 b(B)5 b FX(\))32 b FU(is)g(idemp)-5 b(otent,)32
b(i.e.,)g(for)g(every)h FS(f)21 b FX(:)34 b FS(A)28 b
FT(!)f FS(B)0 555 y FU(we)34 b(have)h FS(f)d FX(+)22
b FS(f)39 b FX(=)27 b FS(f)11 b FU(.)146 726 y FX(In)47
b(an)g(idemp)s(oten)m(t)h FK(B1)p FX(-category)e(the)h(semigroup)h
(structure)g(on)f(Hom)t(\()p FS(A;)17 b(B)5 b FX(\))46
b(is)i(in)f(fact)f(a)0 846 y(sup-semilattice)35 b(structure,)f(giv)m
(en)f(b)m(y)h FS(f)k FT(\024)28 b FS(g)36 b FX(i\013)d
FS(f)g FX(+)22 b FS(g)31 b FX(=)c FS(g)t FX(.)146 1066
y(One)49 b(can)f(argue)g(that)g(the)g(structure)h(of)f
FK(B1)o FX(-categories)h(is)f(in)g(some)h(sense)h(the)e(minim)m(um)0
1186 y(of)e(algebraic)i(structure)g(that)f(a)f(Bo)s(olean)h(category)g
(should)h(ha)m(v)m(e:)74 b FT(\003)p FX(-autonomous)46
b(categories)0 1307 y(pro)m(vide)39 b(the)g(righ)m(t)f(structure)i(for)
d(linear)i(logic)f(pro)s(ofs,)h(and)f(the)h FT(_)p FX(-monoids)g(and)f
FT(^)p FX(-comonoids)0 1427 y(seem)46 b(to)e(b)s(e)g(exactly)i(what)e
(is)h(needed)h(to)e(\\mo)s(del)g(con)m(traction)h(and)g(w)m(eak)m
(ening")h(in)e(classical)0 1548 y(logic.)69 b(There)42
b(are)f(certainly)h(reasons)g(to)f(argue)g(against)g(that,)i(since)f
(it)f(is)g(b)m(y)h(no)f(means)h(Go)s(d-)0 1668 y(giv)m(en)k(that)e(the)
h(pro)s(ofs)f(in)h(classical)h(logic)f(ob)s(ey)g(the)g(bijection)g(\()p
FS(?)p FX(\))g(nor)f(that)g(\\con)m(traction)h(is)0 1788
y(asso)s(ciativ)m(e".)d(But)24 b(let)h(us,)i(for)c(the)i(time)g(b)s
(eing,)h(assume)g(that)e(pro)s(ofs)g(in)g(classical)i(logic)e(form)g(a)
g FK(B1)o FX(-)0 1909 y(category)-8 b(.)41 b(Then)28
b(it)d(is)i(desirable)g(that)f(there)g(is)h(some)g(more)f(structure.)42
b(This)27 b(can)f(b)s(e,)i(for)d(example,)0 2029 y(an)47
b(agreemen)m(t)h(b)s(et)m(w)m(een)g(the)g FT(^)p FX(-monoidal)e
(structure)i(\(De\014nition)f(3.1\))g(and)f(the)i FT(^)p
FX(-comonoid)0 2149 y(structure)41 b(\(De\014nition)f(5.1\),)h(or,)g(a)
e(more)h(sophisticated)i(condition)e(lik)m(e)h(the)f(comm)m(utativit)m
(y)h(of)0 2270 y(the)33 b(diagram)619 2538 y(\(\()p FS(A)22
b FT(^)h FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(A)h FT(^)f
FS(B)5 b FX(\)\))22 b FT(^)h FX(\()p FS(A)f FT(_)h FS(B)5
b FX(\))1943 2472 y FI(r)2002 2483 y FE(A)p FD(^)p FE(B)2142
2472 y FI(^)p FQ(\()p FR(A)p FI(_)p FR(B)s FQ(\))2386
2513 y FG(/)p FF(/)p 1958 2515 429 4 v 2411 2538 a FS(A)22
b FT(^)g FS(B)28 b FT(^)22 b FX(\()p FS(A)g FT(_)h FS(B)5
b FX(\))2792 2697 y FI(\030)2792 2718 y FQ(=)2767 2803
y FG(\017)p FF(\017)p 2765 2803 4 215 v 657 2902 a FX(\()p
FS(A)22 b FT(^)h FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(A)h
FT(^)f FS(B)27 b FT(^)c FX(\()p FS(A)f FT(_)h FS(B)5
b FX(\)\))1276 2803 y FG(\017)p FF(\017)774 2700 y FH(s)801
2711 y FE(A)p FD(^)p FE(B)r(;A)p FD(^)p FE(B)r(;A)p FD(_)p
FE(B)p 1274 2803 V 2411 2902 a FS(A)22 b FT(^)g FX(\()p
FS(B)28 b FT(_)22 b FS(A)p FX(\))g FT(^)h FS(B)2787 3065
y FQ(\024)2792 3074 y FH(t)2817 3085 y FE(A;B)r(;A;B)2767
3166 y FG(\017)p FF(\017)p 2765 3166 V 657 3266 a FX(\()p
FS(A)f FT(^)h FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(A)h
FT(^)f FX(\()p FS(B)27 b FT(_)c FS(A)p FX(\))f FT(^)h
FS(B)5 b FX(\))1276 3166 y FG(\017)p FF(\017)1196 3061
y FI(\030)1196 3082 y FQ(=)p 1274 3166 V 2373 3266 a
FX(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(_)f FX(\()p
FS(A)g FT(^)h FS(B)5 b FX(\))2792 3448 y FI(r)2851 3459
y FE(A)p FD(^)p FE(B)2767 3546 y FG(\017)p FF(\017)p
2765 3546 4 231 v 657 3630 a FX(\()p FS(A)22 b FT(^)h
FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(A)h FT(^)f FS(B)5
b FX(\))22 b FT(_)h FX(\()p FS(A)f FT(^)h FS(B)5 b FX(\))1276
3530 y FG(\017)p FF(\017)717 3438 y FQ(\()p FR(A)p FI(^)p
FR(B)s FQ(\))p FI(_)969 3429 y FQ(\024)974 3438 y FH(t)999
3449 y FE(A;B)r(;A;B)p 1274 3530 4 215 v 2635 3639 a
FS(A)23 b FT(^)f FS(B)2610 3605 y FG(/)p FF(/)2166 3686
y FI(r)2225 3663 y Fm(2)2225 3709 y FE(A)p FD(^)p FE(B)p
1920 3607 691 4 v 3607 3090 a FX(\(30\))0 3911 y(for)32
b(all)h(ob)5 b(jects)33 b FS(A)g FX(and)g FS(B)5 b FX(.)43
b(W)-8 b(e)33 b(no)m(w)g(start)g(to)f(add)h(the)g(axioms)g(for)f(this.)
0 4095 y FJ(5.10.)37 b(Pr)n(oposition.)30 b FU(L)-5 b(et)35
b FC(C)53 b FU(b)-5 b(e)34 b(a)h FK(B1)o FU(-c)-5 b(ate)g(gory)35
b(in)g(which)e(the)i(e)-5 b(quation)1571 4315 y FX(\005)1644
4274 y Fs(t)1707 4315 y FX(=)28 b(1)1860 4330 y Fs(t)1907
4315 y FX(:)33 b FP(t)27 b FT(!)h FP(t)1334 b FX(\()p
FK(B2a\))0 4535 y FU(holds.)44 b(Then)34 b(we)g(have)h(that)p
0 TeXcolorgray 79 4739 a FX(\(i\))p 0 TeXcolorgray 48
w(\001)311 4754 y Fs(t)375 4739 y FX(=)i(^)-58 b FS(\045)529
4698 y FI(\000)p FQ(1)529 4763 y Fs(t)634 4739 y FX(:)34
b FP(t)27 b FT(!)g FP(t)22 b FT(^)g FP(t)p 0 TeXcolorgray
51 4942 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(F)-7 b(or)34
b(al)5 b(l)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h(the)g(map)f
FX(\005)1455 4906 y FR(A)1547 4942 y FU(is)h(a)f FT(^)p
FU(-c)-5 b(omonoid)34 b(morphism.)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 556 21
TeXDict begin 556 20 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(556)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 329 a FJ(Pr)n(oof.)36 b FX(The)43 b(equation)g(\001)
1078 344 y Fs(t)1159 329 y FX(=)53 b(^)-58 b FS(\045)1329
288 y FI(\000)p FQ(1)1329 353 y Fs(t)1466 329 y FX(follo)m(ws)43
b(immediately)h(from)e(\005)2674 293 y Fs(t)2755 329
y FX(=)i(1)2924 344 y Fs(t)3002 329 y FX(and)e(the)h(de\014nition)0
449 y(of)38 b FT(^)p FX(-comonoids.)62 b(That)38 b(\005)1071
413 y FR(A)1167 449 y FX(preserv)m(es)j(the)e FT(^)p
FX(-counit)f(is)h(trivial)g(and)g(that)f(it)g(preserv)m(es)j(the)e
FT(^)p FX(-)0 570 y(com)m(ultiplication)34 b(follo)m(ws)f(from)1226
823 y FS(A)1769 764 y FQ(\005)1822 741 y FE(A)2316 789
y FG(/)p FF(/)p 1324 791 993 4 v 2341 821 a FP(t)2388
1078 y FQ(\001)2447 1087 y Fy(t)2478 1078 y FQ(=)6 b(^)-41
b FR(\045)2569 1048 y FD(\000)p Ft(1)2569 1098 y Fy(t)2363
1269 y FG(\017)p FF(\017)p 2361 1269 4 423 v 1714 1091
a FS(A)22 b FT(^)h FP(t)1703 998 y FG(')p FF(')1420 995
y FQ(^)-41 b FR(\045)1450 965 y FD(\000)p Ft(1)1450 1018
y FE(A)1324 818 y Fz(P)1358 835 y(P)1392 851 y(P)1426
867 y(P)1461 883 y(P)1495 899 y(P)1529 916 y(P)1563 932
y(P)1597 948 y(P)1631 964 y(P)1666 980 y(P)1703 1116
y FG(7)p FF(7)1383 1166 y FR(A)p FI(^)p FQ(\005)1536
1143 y FE(A)1387 1266 y Fz(n)1421 1249 y(n)1456 1233
y(n)1491 1216 y(n)1526 1200 y(n)1561 1183 y(n)1596 1167
y(n)1631 1150 y(n)1666 1134 y(n)2065 1167 y FQ(\005)2118
1144 y FE(A)2168 1167 y FI(^)p Fs(t)2250 1269 y FG(')p
FF(')2213 1250 y Fz(O)2180 1233 y(O)2146 1216 y(O)2113
1200 y(O)2079 1183 y(O)2046 1166 y(O)2012 1149 y(O)1979
1133 y(O)1945 1116 y(O)1134 1359 y FS(A)22 b FT(^)h FS(A)1262
1266 y FG(\017)p FF(\017)1128 1074 y FQ(\001)1187 1085
y FE(A)p 1261 1266 4 419 v 2264 1357 a FP(t)f FT(^)g
FP(t)2239 1325 y FG(/)p FF(/)1701 1407 y FQ(\005)1754
1384 y FE(A)1804 1407 y FI(^)p FQ(\005)1904 1384 y FE(A)p
1416 1327 824 4 v 0 1561 a FX(where)33 b(the)f(left)f(triangle)h(is)g
(the)g(de\014nition)g(of)f FT(^)p FX(-comonoids,)i(the)f(lo)m(w)m(er)g
(triangle)g(is)g(functorialit)m(y)0 1681 y(of)g FT(^)h
FX(and)g(the)g(big)f(\\triangle")h(is)g(naturalit)m(y)g(of)41
b(^)-58 b FS(\045)t FX(.)p 3738 1681 42 42 v 0 1864 a
FJ(5.11.)37 b(Lemma.)31 b FU(If)j(a)h FK(B1)o FU(-c)-5
b(ate)g(gory)35 b(is)g(single-mixe)-5 b(d)32 b(and)j(ob)-5
b(eys)43 b FX(\()p FK(B2a)p FX(\))o FU(,)34 b(then)1107
2069 y FX(1)1156 2084 y Fs(t)1214 2069 y FX(+)22 b(1)1361
2084 y Fs(t)1424 2069 y FX(=)27 b(1)1576 2084 y Fs(t)1811
2069 y FU(and)199 b FX(1)2214 2084 y Fs(f)2273 2069 y
FX(+)22 b(1)2420 2084 y Fs(f)2484 2069 y FX(=)28 b(1)2637
2084 y Fs(f)3607 2069 y FX(\(31\))0 2273 y FJ(Pr)n(oof.)i
FX(First,)i(w)m(e)i(sho)m(w)g(that)1294 2478 y(\005)1367
2437 y Fs(f)1367 2491 y Fn(8)1399 2503 y Fs(f)1464 2478
y FX(=)27 b FT(r)1650 2493 y Fs(f)1709 2478 y FT(\016)22
b FK(mix)1926 2493 y Fs(f)8 b FR(;)p Fs(f)2026 2478 y
FX(:)34 b FP(f)e FT(^)23 b FP(f)38 b FT(!)27 b FP(f)1132
b FX(\(32\))0 2683 y(This)34 b(is)f(done)g(b)m(y)g(c)m(hasing)h(the)f
(diagram)1345 2965 y FP(f)g FT(^)22 b FP(f)1666 2864
y FQ(\024)1663 2881 y FR(\025)1704 2852 y FD(\000)p Ft(1)1704
2905 y Fy(f)1787 2881 y FI(^)p Fs(f)1960 2930 y FG(/)p
FF(/)p 1570 2932 391 4 v 1985 2955 a FX(\()p FP(f)32
b FT(_)23 b FP(f)10 b FX(\))23 b FT(^)f FP(f)2225 3133
y FQ(\()p Fs(f)8 b FI(^)p FQ(\005)2385 3109 y Fy(f)2417
3133 y FQ(\))p FI(^)p Fs(f)2200 3219 y FG(\017)p FF(\017)p
2199 3219 4 215 v 1346 3329 a FP(t)21 b FT(^)i FP(f)1445
3234 y FG(\017)p FF(\017)1256 3141 y FQ(\005)1309 3118
y Fy(f)1340 3141 y FI(^)p Fs(f)p 1443 3234 4 245 v 1693
3538 a FQ(\024)1690 3555 y FR(\025)1731 3525 y FD(\000)p
Ft(1)1731 3579 y Fy(t)p FD(^)p Fy(f)2045 3583 y FG(')p
FF(')2008 3565 y Fz(P)1971 3547 y(P)1934 3530 y(P)1898
3512 y(P)1861 3494 y(P)1825 3477 y(P)1788 3459 y(P)1751
3442 y(P)1715 3424 y(P)1678 3406 y(P)1642 3389 y(P)1605
3371 y(P)1569 3353 y(P)1985 3319 y FX(\()p FP(f)33 b
FT(_)22 b FP(t)p FX(\))g FT(^)h FP(f)1960 3294 y FG(/)p
FF(/)1666 3231 y FQ(\024)1663 3248 y FR(\025)1704 3219
y FD(\000)p Ft(1)1704 3269 y Fy(t)1787 3248 y FI(^)p
Fs(f)p 1569 3296 392 4 v 2225 3480 a FH(s)2252 3492 y
Fy(f)6 b FE(;)p Fy(t)p FE(;)p Fy(f)2200 3583 y FG(\017)p
FF(\017)p 2199 3583 4 215 v 1985 3683 a FP(f)33 b FT(_)23
b FX(\()p FP(t)e FT(^)i FP(f)10 b FX(\))2225 3866 y Fs(f)e
FI(_)2308 3848 y FQ(^)2305 3866 y FR(\025)2346 3878 y
Fy(f)2200 3947 y FG(\017)p FF(\017)p 2199 3947 V 1346
4041 a FP(t)21 b FT(^)i FP(f)p 1435 3947 4 594 v 1452
3947 V 1569 3949 a FG(v)p FF(v)1692 3787 y FQ(\024)1689
3804 y FR(\025)1730 3816 y Fy(t)p FD(^)p Fy(f)2001 3750
y Fz(n)1965 3767 y(n)1929 3783 y(n)1893 3800 y(n)1857
3816 y(n)1821 3833 y(n)1785 3850 y(n)1749 3866 y(n)1713
3883 y(n)1677 3899 y(n)1641 3916 y(n)1605 3933 y(n)1569
3949 y(n)2100 4041 y FP(f)33 b FT(_)23 b FP(f)2225 4190
y FI(r)2284 4202 y Fy(f)2200 4280 y FG(\017)p FF(\017)p
2199 4280 4 215 v 1423 4375 a FP(f)1445 4280 y FG(\017)p
FF(\017)1350 4182 y FQ(^)1347 4199 y FR(\025)1388 4211
y Fy(f)p 1443 4280 V 1492 4319 a FG(v)p FF(v)1723 4136
y FQ(\024)1720 4154 y FR(\025)1761 4166 y Fy(f)2037 4078
y Fz(m)2001 4094 y(m)1965 4110 y(m)1928 4127 y(m)1892
4143 y(m)1856 4159 y(m)1819 4175 y(m)1783 4191 y(m)1747
4207 y(m)1710 4223 y(m)1674 4239 y(m)1638 4255 y(m)1601
4271 y(m)1565 4287 y(m)1529 4303 y(m)1492 4319 y(m)2178
4375 y FP(f)p 1492 4350 661 4 v 1492 4333 V 3607 3622
a FX(\(33\))0 4574 y(The)48 b(righ)m(t-do)m(wn)h(path)e(is)h
FT(r)1162 4589 y Fs(f)1231 4574 y FT(\016)32 b FK(mix)1458
4589 y Fs(f)8 b FR(;)p Fs(f)1595 4574 y FX(and)47 b(the)h(left)g(do)m
(wn)g(path)g(is)g(\005)2869 4538 y Fs(f)2869 4592 y Fn(8)2901
4604 y Fs(f)2938 4574 y FX(.)88 b(The)48 b(t)m(w)m(o)g(squares)0
4695 y(comm)m(ute)26 b(b)s(ecause)g(of)e(naturalit)m(y)h(of)1422
4668 y(\024)1418 4695 y FS(\025)t FX(,)i(the)e(upp)s(er)g(triangle)f
(holds)i(b)s(ecause)g(\(15\))o(,)g(the)f(big)g(triangle)0
4815 y(in)37 b(the)f(cen)m(ter)i(is)f(trivial,)g(and)g(that)f(the)g(lo)
m(w)m(er)i(triangle)e(comm)m(utes)i(follo)m(ws)f(from)f(\(the)h(dual)g
(of)7 b(\))0 4936 y(Prop)s(osition)33 b(5.10)f(\(i\).)43
b(No)m(w)33 b(w)m(e)h(can)f(pro)s(ceed:)997 5140 y(1)1046
5155 y Fs(f)1111 5140 y FX(=)27 b(\005)1287 5099 y Fs(f)1287
5153 y Fn(8)1319 5165 y Fs(f)1378 5140 y FT(\016)22 b
FX(\001)1531 5155 y Fs(f)1596 5140 y FX(=)28 b FT(r)1783
5155 y Fs(f)1842 5140 y FT(\016)22 b FK(mix)2058 5155
y Fs(f)8 b FR(;)p Fs(f)2170 5140 y FT(\016)22 b FX(\001)2323
5155 y Fs(f)2388 5140 y FX(=)27 b(1)2540 5155 y Fs(f)2599
5140 y FX(+)22 b(1)2746 5155 y Fs(f)0 5345 y FX(The)34
b(equation)f(1)648 5360 y Fs(t)711 5345 y FX(=)28 b(1)864
5360 y Fs(t)921 5345 y FX(+)22 b(1)1068 5360 y Fs(t)1136
5345 y FX(follo)m(ws)34 b(b)m(y)f(dualit)m(y)-8 b(.)p
3738 5345 42 42 v 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 557 22
TeXDict begin 557 21 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(557)p 0 TeXcolorgray
146 314 a(Note)37 b(that)f(Lemma)h(5.11)f(is)h(a)f(consequence)j(of)d
(ha)m(ving)h(prop)s(er)f(units.)56 b(In)37 b(the)g(case)g(of)f(w)m(eak)
0 434 y(units)d(\(see)h([LS05b,)f(LS05a]\))f(it)g(do)s(es)h(not)g
(hold.)0 619 y FJ(5.12.)k(Pr)n(oposition.)30 b FU(In)k(a)h
FK(B1)p FU(-c)-5 b(ate)g(gory)34 b(that)i(is)e(single-mixe)-5
b(d)33 b(and)h(ob)-5 b(eys)43 b FX(\()p FK(B2a)p FX(\))o
FU(,)35 b(we)g(have)1613 839 y FS(f)e FX(+)22 b(\005)1865
798 y FR(A)1977 839 y FX(=)55 b FS(f)1451 b FX(\(34\))0
1059 y FU(for)35 b(al)5 b(l)34 b(maps)g FS(f)22 b FX(:)33
b FS(A)28 b FT(!)f FP(t)p FU(.)45 b(Dual)5 b(ly,)34 b(we)h(have)1619
1279 y FS(g)25 b FX(+)d FT(q)1864 1238 y FR(B)1980 1279
y FX(=)55 b FS(g)1449 b FX(\(35\))0 1499 y FU(for)35
b(al)5 b(l)34 b(maps)g FS(g)15 b FX(:)33 b FP(f)38 b
FT(!)27 b FS(B)5 b FU(.)0 1673 y FJ(Pr)n(oof.)30 b FX(Chase)k(the)f
(diagram)1470 1841 y FS(A)1709 1771 y FQ(\001)1768 1782
y FE(A)1958 1807 y FG(/)p FF(/)p 1568 1809 391 4 v 1983
1841 a FS(A)22 b FT(^)h FS(A)2137 2002 y FR(A)p FI(^)p
FQ(\005)2290 1979 y FE(A)2112 2081 y FG(\017)p FF(\017)p
2110 2081 4 215 v 1470 2174 a FS(A)p 1497 2081 V 1513
2081 V 455 w(A)f FT(^)h FP(t)1734 2102 y FQ(^)-42 b FR(\045)1763
2113 y FE(A)1568 2140 y FG(o)p FF(o)p 1568 2141 405 4
v 2137 2322 a FR(f)7 b FI(^)p Fs(t)2112 2413 y FG(\017)p
FF(\017)p 2110 2413 4 215 v 1485 2501 a FP(t)1507 2413
y FG(\017)p FF(\017)1440 2322 y FR(f)p 1505 2413 V 2013
2501 a FP(t)21 b FT(^)i FP(t)1743 2432 y FQ(^)-41 b FR(\045)1773
2441 y Fy(t)1553 2470 y FG(o)p FF(o)p 1553 2471 435 4
v 2118 2741 4 215 v 2102 2741 V 2013 2829 a FP(t)21 b
FT(^)i FP(t)2007 2741 y FG(&)p FF(&)1697 2688 y FQ(\001)1756
2697 y Fy(t)1553 2495 y Fz(N)1588 2514 y(N)1623 2533
y(N)1658 2552 y(N)1692 2570 y(N)1727 2589 y(N)1762 2608
y(N)1797 2627 y(N)1832 2646 y(N)1866 2665 y(N)1901 2683
y(N)1936 2702 y(N)1971 2721 y(N)2137 2974 y FH(mix)2242
2983 y Fy(t)p FE(;)p Fy(t)2112 3068 y FG(\017)p FF(\017)p
2110 3068 V 1485 3156 a FP(t)p 1497 3068 4 543 v 1513
3068 V 484 w(t)e FT(_)i FP(t)1726 3195 y FI(r)1785 3204
y Fy(t)1553 3125 y FG(o)p FF(o)p 1553 3126 435 4 v 3607
2490 a FX(\(36\))0 3360 y(The)34 b(\014rst)g(square)g(is)f(the)h
(comonoid)f(equation,)h(the)g(second)g(one)g(is)f(naturalit)m(y)h(of)42
b(^)-58 b FS(\045)t FX(,)33 b(the)h(triangle)0 3480 y(comm)m(utes)g(b)s
(ecause)g(of)f(Prop)s(osition)f(5.10)g(\(i\),)h(and)g(the)g(lo)m(w)m
(er)g(quadrangle)h(is)f(\(31\))o(.)p 3738 3480 42 42
v 0 3665 a FJ(5.13.)k(Pr)n(oposition.)30 b FU(In)k(a)h
FK(B1)p FU(-c)-5 b(ate)g(gory)34 b(ob)-5 b(eying)43 b
FX(\()p FK(B2a)p FX(\))o FU(,)35 b(the)g(e)-5 b(quation)1836
3891 y FS(A)22 b FT(^)g FS(B)1494 3998 y FQ(\005)1547
3975 y FE(A)1597 3998 y FI(^)p FQ(\005)1697 3975 y FE(B)1573
4130 y FG(z)p FF(z)p Fz(u)1604 4109 y(u)1634 4088 y(u)1665
4067 y(u)1695 4045 y(u)1726 4024 y(u)1756 4003 y(u)1787
3982 y(u)1817 3961 y(u)1848 3939 y(u)1393 4219 y FP(t)g
FT(^)g FP(t)1940 4258 y FQ(^)-42 b FR(\045)1969 4267
y Fy(t)2319 4187 y FG(/)p FF(/)p 1616 4189 703 4 v 2344
4219 a FP(t)2319 4148 y FG(")p FF(")2182 4007 y FQ(\005)2235
3984 y FE(A)p FD(^)p FE(B)2038 3915 y Fz(D)2069 3941
y(D)2100 3967 y(D)2131 3993 y(D)2163 4018 y(D)2194 4044
y(D)2225 4070 y(D)2256 4096 y(D)2287 4121 y(D)3541 4072
y FX(\()p FK(B2b)p FX(\))0 4473 y FU(holds)34 b(if)h(and)f(only)h(if)p
0 TeXcolorgray 79 4676 a FX(\(i\))p 0 TeXcolorgray 48
w(\005)303 4640 y Fs(t)p FI(^)p Fs(t)446 4676 y FX(=)h(^)-58
b FS(\045)599 4691 y Fs(t)646 4676 y FX(:)34 b FP(t)21
b FT(^)i FP(t)k FT(!)g FP(t)35 b FU(and)p 0 TeXcolorgray
51 4880 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(the)g(maps)f(that)i(pr)-5
b(eserve)34 b(the)g FT(^)p FU(-c)-5 b(ounit)36 b(ar)-5
b(e)34 b(close)-5 b(d)34 b(under)h FT(^)p FU(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 558 23
TeXDict begin 558 22 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(558)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FJ(Pr)n(oof.)33 b FX(W)-8 b(e)38
b(see)i(that)d(\(i\))h(follo)m(ws)h(from)f(\()p FK(B2a)p
FX(\))f(and)h(\()p FK(B2b)p FX(\))f(b)m(y)i(plugging)f(in)g
FP(t)g FX(for)f FS(A)i FX(and)f FS(B)43 b FX(in)0 440
y(\()p FK(B2b)p FX(\))o(.)h(That)33 b(\(ii\))f(holds)i(follo)m(ws)f
(from)694 702 y FS(A)22 b FT(^)h FS(B)1824 630 y FR(f)7
b FI(^)p FR(g)2790 668 y FG(/)p FF(/)p 982 670 1809 4
v 2815 702 a FS(C)29 b FT(^)23 b FS(D)2360 1067 y FQ(\005)2413
1043 y FE(C)s FD(^)p FE(D)1933 1242 y FG(x)p FF(x)p Fz(q)1968
1222 y(q)2003 1202 y(q)2038 1182 y(q)2073 1163 y(q)2108
1143 y(q)2143 1123 y(q)2178 1103 y(q)2213 1084 y(q)2248
1064 y(q)2283 1044 y(q)2319 1024 y(q)2354 1004 y(q)2389
985 y(q)2424 965 y(q)2459 945 y(q)2494 925 y(q)2529 906
y(q)2564 886 y(q)2599 866 y(q)2634 846 y(q)2669 826 y(q)2705
807 y(q)2740 787 y(q)2775 767 y(q)2810 747 y(q)1787 922
y FP(t)f FT(^)g FP(t)1917 1096 y FQ(^)-41 b FR(\045)1947
1105 y Fy(t)1886 1212 y FG(\017)p FF(\017)p 1884 1212
4 265 v 1762 865 a FG(,)p FF(,)-550 b FQ(\005)1265 842
y FE(A)1315 865 y FI(^)p FQ(\005)1415 842 y FE(B)982
700 y Fz(X)1021 709 y(X)1059 717 y(X)1098 725 y(X)1137
733 y(X)1176 741 y(X)1215 750 y(X)1254 758 y(X)1293 766
y(X)1332 774 y(X)1371 782 y(X)1410 790 y(X)1449 799 y(X)1488
807 y(X)1527 815 y(X)1566 823 y(X)1605 831 y(X)1644 840
y(X)1682 848 y(X)1721 856 y(X)2010 865 y FG(r)p FF(r)2302
866 y FQ(\005)2355 842 y FE(C)2407 866 y FI(^)p FQ(\005)2507
842 y FE(D)2749 710 y Fz(f)2711 718 y(f)2672 726 y(f)2633
735 y(f)2594 743 y(f)2555 751 y(f)2516 759 y(f)2477 767
y(f)2438 775 y(f)2399 783 y(f)2360 792 y(f)2321 800 y(f)2282
808 y(f)2243 816 y(f)2204 824 y(f)2165 832 y(f)2126 840
y(f)2088 849 y(f)2049 857 y(f)2010 865 y(f)1864 1300
y FP(t)1839 1242 y FG(&)p FF(&)1219 1067 y FQ(\005)1272
1043 y FE(A)p FD(^)p FE(B)929 727 y Fz(M)964 747 y(M)999
767 y(M)1034 786 y(M)1069 806 y(M)1104 826 y(M)1139 846
y(M)1174 866 y(M)1209 885 y(M)1244 905 y(M)1279 925 y(M)1314
945 y(M)1349 964 y(M)1384 984 y(M)1419 1004 y(M)1453
1024 y(M)1488 1043 y(M)1523 1063 y(M)1558 1083 y(M)1593
1103 y(M)1628 1123 y(M)1663 1142 y(M)1698 1162 y(M)1733
1182 y(M)1768 1202 y(M)1803 1221 y(M)3607 967 y FX(\(37\))0
1488 y(where)42 b FS(f)22 b FX(:)36 b FS(A)43 b FT(!)f
FS(B)k FX(and)c FS(g)15 b FX(:)35 b FS(C)50 b FT(!)42
b FS(D)h FX(are)f(maps)f(that)g(preserv)m(e)j(the)e FT(^)p
FX(-counit.)69 b(Con)m(v)m(ersely)-8 b(,)47 b(it)0 1609
y(follo)m(ws)31 b(from)f(\(ii\))g(and)g(Prop)s(osition)h(5.10)f(that)g
(\005)1902 1572 y FR(A)1976 1609 y FT(^)18 b FX(\005)2133
1572 y FR(B)2224 1609 y FX(preserv)m(es)33 b(the)d FT(^)p
FX(-counit.)44 b(With)30 b(\(i\))g(this)0 1729 y(yields)k(\()p
FK(B2b)p FX(\).)p 3738 1729 42 42 v 0 1912 a FJ(5.14.)41
b(Pr)n(oposition.)32 b FU(In)38 b(a)g FK(B1)o FU(-c)-5
b(ate)g(gory)38 b(ob)-5 b(eying)47 b FX(\()p FK(B2a)p
FX(\))37 b FU(and)48 b FX(\()p FK(B2b)p FX(\))37 b FU(the)i(maps)47
b FX(^)-59 b FS(\013)3285 1927 y FR(A;B)s(;C)3493 1912
y FU(,)44 b FX(^)-54 b FS(\033)3617 1927 y FR(A;B)3750
1912 y FU(,)9 2043 y FX(^)c FS(\045)50 2058 y FR(A)107
2043 y FU(,)176 2017 y FX(^)172 2043 y FS(\025)229 2058
y FR(A)286 2043 y FU(,)35 b FX(\005)424 2007 y FR(A)481
2043 y FU(,)g FX(\005)619 2007 y FR(A)619 2073 y(B)675
2061 y Fn(8)711 2043 y FU(,)g(and)f FX(\005)1038 2007
y FR(A)1038 2061 y Fn(8)1070 2073 y FR(B)1166 2043 y
FU(al)5 b(l)34 b(pr)-5 b(eserve)34 b(the)h FT(^)p FU(-c)-5
b(ounit.)45 b(A)n(nd)34 b(dual)5 b(ly,)35 b(the)g(maps)44
b FX(\024)-59 b FS(\013)3289 2058 y FR(A;B)s(;C)3497
2043 y FU(,)40 b FX(\024)-54 b FS(\033)3617 2058 y FR(A;B)3750
2043 y FU(,)9 2164 y FX(\024)c FS(\045)50 2179 y FR(A)107
2164 y FU(,)176 2137 y FX(\024)172 2164 y FS(\025)229
2179 y FR(A)286 2164 y FU(,)35 b FT(q)426 2127 y FR(A)482
2164 y FU(,)g FT(q)622 2127 y FR(A)622 2193 y(B)678 2181
y Fn(8)714 2164 y FU(,)g(and)f FT(q)1043 2127 y FR(A)1043
2181 y Fn(8)1075 2193 y FR(B)1171 2164 y FU(al)5 b(l)34
b(pr)-5 b(eserve)34 b(the)h FT(_)p FU(-unit.)0 2336 y
FJ(Pr)n(oof.)30 b FX(W)-8 b(e)33 b(sho)m(w)g(the)g(case)h(for)j(^)-54
b FS(\033)1361 2351 y FR(A;B)1495 2336 y FX(:)673 2608
y FS(A)22 b FT(^)g FS(B)1815 2529 y FQ(^)-39 b FR(\033)1851
2540 y FE(A;B)2819 2575 y FG(/)p FF(/)p 961 2576 1859
4 v 2844 2608 a FS(B)28 b FT(^)22 b FS(A)2374 2974 y
FQ(\005)2427 2950 y FE(B)r FD(^)p FE(A)1937 3149 y FG(x)p
FF(x)p Fz(q)1973 3129 y(q)2008 3110 y(q)2044 3090 y(q)2080
3070 y(q)2116 3050 y(q)2152 3030 y(q)2188 3010 y(q)2224
2991 y(q)2259 2971 y(q)2295 2951 y(q)2331 2931 y(q)2367
2911 y(q)2403 2892 y(q)2439 2872 y(q)2474 2852 y(q)2510
2832 y(q)2546 2812 y(q)2582 2793 y(q)2618 2773 y(q)2654
2753 y(q)2690 2733 y(q)2725 2713 y(q)2761 2693 y(q)2797
2674 y(q)2833 2654 y(q)1425 2829 y FP(t)g FT(^)h FP(t)1742
2954 y FQ(^)-41 b FR(\045)1772 2963 y Fy(t)1843 3126
y FG(\037)p FF(\037)1814 3097 y Fz(>)1788 3070 y(>)1762
3043 y(>)1736 3016 y(>)1710 2989 y(>)1684 2962 y(>)1658
2935 y(>)1631 2908 y(>)1605 2881 y(>)1579 2854 y(>)1835
2754 y FQ(^)i FR(\033)1871 2763 y Fy(t)p FE(;)p Fy(t)2132
2797 y FG(/)p FF(/)p 1648 2799 484 4 v 1401 2759 a FG(*)p
FF(*)1100 2666 y FQ(\005)1153 2643 y FE(A)1203 2666 y
FI(^)p FQ(\005)1303 2643 y FE(B)961 2623 y Fz(U)997 2634
y(U)1033 2645 y(U)1070 2657 y(U)1106 2668 y(U)1143 2679
y(U)1179 2690 y(U)1215 2702 y(U)1252 2713 y(U)1288 2724
y(U)1324 2735 y(U)1361 2747 y(U)2157 2829 y FP(t)21 b
FT(^)i FP(t)1983 2954 y FQ(^)-41 b FR(\045)2013 2963
y Fy(t)1937 3126 y FG(\000)p FF(\000)p Fz(\000)1963 3099
y(\000)1989 3072 y(\000)2015 3045 y(\000)2041 3019 y(\000)2067
2992 y(\000)2094 2965 y(\000)2120 2938 y(\000)2146 2911
y(\000)2172 2884 y(\000)2379 2759 y FG(t)p FF(t)2424
2666 y FQ(\005)2477 2643 y FE(B)2530 2666 y FI(^)p FQ(\005)2630
2643 y FE(A)2780 2635 y Fz(i)2743 2646 y(i)2707 2658
y(i)2671 2669 y(i)2634 2680 y(i)2598 2691 y(i)2561 2703
y(i)2525 2714 y(i)2489 2725 y(i)2452 2736 y(i)2416 2748
y(i)2379 2759 y(i)1868 3206 y FP(t)1843 3149 y FG(&)p
FF(&)1213 2974 y FQ(\005)1266 2950 y FE(A)p FD(^)p FE(B)911
2633 y Fz(M)947 2653 y(M)982 2673 y(M)1018 2693 y(M)1054
2712 y(M)1090 2732 y(M)1126 2752 y(M)1162 2772 y(M)1198
2792 y(M)1233 2811 y(M)1269 2831 y(M)1305 2851 y(M)1341
2871 y(M)1377 2891 y(M)1413 2911 y(M)1449 2930 y(M)1484
2950 y(M)1520 2970 y(M)1556 2990 y(M)1592 3010 y(M)1628
3029 y(M)1664 3049 y(M)1700 3069 y(M)1735 3089 y(M)1771
3109 y(M)1807 3129 y(M)0 3395 y FX(The)41 b(quadrangle)f(in)g
(naturalit)m(y)g(of)k(^)-54 b FS(\033)44 b FX(and)c(the)g(comm)m
(utativit)m(y)i(of)d(triangle)g(in)h(the)g(cen)m(ter)h(is)f(a)0
3515 y(consequence)k(of)d(the)g(coherence)i(theorem)f(for)f(monoidal)g
(categories.)70 b(The)42 b(t)m(w)m(o)g(slim)g(triangles)0
3635 y(are)34 b(just)g(\()p FK(B2b)p FX(\))o(.)47 b(The)34
b(cases)h(for)43 b(^)-59 b FS(\013)1330 3650 y FR(A;B)s(;C)1538
3635 y FX(,)43 b(^)-58 b FS(\045)1649 3650 y FR(A)1706
3635 y FX(,)1771 3609 y(^)1767 3635 y FS(\025)1824 3650
y FR(A)1915 3635 y FX(are)33 b(similar.)47 b(F)-8 b(or)33
b(\005)2688 3599 y FR(A)2745 3635 y FX(,)h(it)g(follo)m(ws)g(directly)h
(from)0 3756 y(\()p FK(B2a)p FX(\))d(and)g(for)g(\005)680
3720 y FR(A)680 3785 y(B)736 3773 y Fn(8)805 3756 y FX(and)h(\005)1068
3720 y FR(A)1068 3773 y Fn(8)1100 3785 y FR(B)1193 3756
y FX(from)g(Prop)s(osition)f(5.13)g(\(ii\))h(and)g(from)f(\(27\))o(.)p
3738 3756 42 42 v 0 3939 a FJ(5.15.)37 b(Pr)n(oposition.)30
b FU(If)35 b(a)f FK(B1)p FU(-c)-5 b(ate)g(gory)34 b(ob)-5
b(eys)43 b FX(\()p FK(B2a)p FX(\))34 b FU(and)g(the)h(e)-5
b(quation)1759 4151 y FS(A)22 b FT(^)g FS(B)1333 4247
y FQ(\001)1392 4258 y FE(A)1442 4247 y FI(^)p FQ(\001)1548
4258 y FE(B)1318 4390 y FG(w)p FF(w)p Fz(n)1356 4372
y(n)1393 4354 y(n)1431 4336 y(n)1468 4318 y(n)1505 4300
y(n)1543 4283 y(n)1580 4265 y(n)1617 4247 y(n)1655 4229
y(n)1692 4211 y(n)1729 4193 y(n)877 4483 y FS(A)g FT(^)h
FS(A)f FT(^)h FS(B)k FT(^)22 b FS(B)1709 4520 y FR(A)p
FI(^)t FQ(^)-39 b FR(\033)1849 4531 y FE(A;B)1967 4520
y FI(^)p FR(B)2241 4449 y FG(/)p FF(/)p 1539 4451 703
4 v 2266 4483 a FS(A)23 b FT(^)f FS(B)27 b FT(^)c FS(A)f
FT(^)h FS(B)2462 4390 y FG(')p FF(')2197 4247 y FQ(\001)2256
4258 y FE(A)p FD(^)p FE(B)2013 4176 y Fz(P)2050 4194
y(P)2088 4212 y(P)2125 4230 y(P)2163 4247 y(P)2200 4265
y(P)2237 4283 y(P)2275 4301 y(P)2312 4319 y(P)2349 4337
y(P)2387 4355 y(P)2424 4372 y(P)3547 4337 y FX(\()p FK(B2c)p
FX(\))0 4729 y FU(then)p 0 TeXcolorgray 79 4921 a FX(\(i\))p
0 TeXcolorgray 48 w FU(also)35 b(the)f(e)-5 b(quation)42
b FX(\()p FK(B2b)p FX(\))35 b FU(holds,)p 0 TeXcolorgray
51 5121 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(for)g(every)g
FS(A)p FU(,)g(the)g(map)f FX(\001)1239 5136 y FR(A)1331
5121 y FU(is)h(a)f FT(^)p FU(-c)-5 b(omonoid)34 b(morphism,)f(and)p
0 TeXcolorgray 24 5320 a FX(\(iii\))p 0 TeXcolorgray
49 w FU(the)i(maps)f(that)i(pr)-5 b(eserve)34 b(the)g
FT(^)p FU(-c)-5 b(omultiplic)g(ation)35 b(ar)-5 b(e)34
b(close)-5 b(d)34 b(under)h FT(^)p FU(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 559 24
TeXDict begin 559 23 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(559)p 0 TeXcolorgray
0 320 a FJ(Pr)n(oof.)30 b FX(\(i\))i(F)-8 b(or)32 b(sho)m(wing)i(that)e
(\()p FK(B2b)p FX(\))g(holds,)h(consider)h(the)f(diagram)286
521 y FS(A)22 b FT(^)h FS(B)p 574 480 2743 4 v 574 497
V 2797 w(A)f FT(^)h FS(B)3504 839 y FQ(^)-42 b FR(\045)3533
809 y FD(\000)p Ft(1)3533 862 y FE(A)p FD(^)p FE(B)3472
1093 y FG(\017)p FF(\017)p 3471 1093 4 547 v 1176 853
a FS(A)22 b FT(^)g FS(A)h FT(^)f FS(B)28 b FT(^)22 b
FS(B)1832 794 y FR(A)p FI(^)p FQ(\005)1985 771 y FE(A)2035
794 y FI(^)p FR(B)s FI(^)p FQ(\005)2238 771 y FE(B)2227
819 y FG(/)p FF(/)p 1837 821 391 4 v 1303 760 a FG(*)p
FF(*)756 718 y FQ(\001)815 729 y FE(A)865 718 y FI(^)p
FQ(\001)971 729 y FE(B)574 535 y Fz(U)612 547 y(U)650
558 y(U)689 570 y(U)727 582 y(U)765 594 y(U)804 606 y(U)842
618 y(U)880 629 y(U)919 641 y(U)957 653 y(U)995 665 y(U)1034
677 y(U)1072 689 y(U)1110 700 y(U)1148 712 y(U)1187 724
y(U)1225 736 y(U)1263 748 y(U)923 1053 y FR(A)p FI(^)t
FQ(^)-39 b FR(\033)1063 1064 y FE(A;B)1180 1053 y FI(^)p
FR(B)608 1093 y FG(t)p FF(t)p Fz(i)647 1081 y(i)685 1069
y(i)724 1057 y(i)762 1045 y(i)801 1033 y(i)839 1021 y(i)878
1009 y(i)917 998 y(i)955 986 y(i)994 974 y(i)1032 962
y(i)1071 950 y(i)1109 938 y(i)1148 926 y(i)1186 914 y(i)1225
902 y(i)1263 890 y(i)2252 853 y FS(A)23 b FT(^)f FP(t)g
FT(^)g FS(B)28 b FT(^)22 b FP(t)2563 998 y FR(A)p FI(^)t
FQ(^)-39 b FR(\033)2703 1009 y Fy(t)p FE(;B)2802 998
y FI(^)p Fs(t)2538 1093 y FG(\017)p FF(\017)p 2536 1093
4 215 v 2704 760 a FG(u)p FF(u)2669 632 y FQ(^)e FR(\045)2699
602 y FD(\000)p Ft(1)2699 655 y FE(A)2782 632 y FI(^)6
b FQ(^)-41 b FR(\045)2865 602 y FD(\000)p Ft(1)2865 655
y FE(B)3277 556 y Fz(j)3239 570 y(j)3200 584 y(j)3162
597 y(j)3124 611 y(j)3086 624 y(j)3048 638 y(j)3009 651
y(j)2971 665 y(j)2933 679 y(j)2895 692 y(j)2857 706 y(j)2818
719 y(j)2780 733 y(j)2742 747 y(j)2704 760 y(j)99 1186
y FS(A)22 b FT(^)h FS(B)k FT(^)c FS(A)f FT(^)g FS(B)417
1093 y FG(\017)p FF(\017)193 836 y FQ(\001)252 847 y
FE(A)p FD(^)p FE(B)p 416 1093 4 547 v 2252 1186 a FS(A)h
FT(^)f FS(B)27 b FT(^)c FP(t)f FT(^)g FP(t)2227 1152
y FG(/)p FF(/)1264 1234 y FR(A)p FI(^)p FR(B)s FI(^)p
FQ(\005)1520 1210 y FE(A)1571 1234 y FI(^)p FQ(\005)1671
1210 y FE(B)p 761 1153 1467 4 v 3264 1186 a FS(A)g FT(^)h
FS(B)k FT(^)22 b FP(t)3239 1152 y FG(/)p FF(/)2908 1223
y FR(A)p FI(^)p FR(B)s FI(^)6 b FQ(^)-41 b FR(\045)3147
1232 y Fy(t)p 2849 1153 391 4 v 0 1418 a FX(The)43 b(triangle)g(on)f
(the)h(left)g(is)g(\()p FK(B2c)p FX(\))o(,)i(the)e(upp)s(er)g
(quadrangle)g(is)g(the)g(comonoid)g(equation,)j(the)0
1539 y(lo)m(w)m(er)40 b(quadrangle)g(is)f(naturalit)m(y)h(of)j(^)-54
b FS(\033)44 b FX(and)39 b(the)g(quadrangle)h(on)e(the)i(righ)m(t)f
(comm)m(utes)i(b)s(ecause)0 1659 y(of)e(the)i(coherence)g(in)g
(monoidal)f(categories.)66 b(The)41 b(outer)f(square)h(sa)m(ys)g(that)
49 b(^)-58 b FS(\045)3074 1674 y Fs(t)3137 1659 y FT(\016)27
b FX(\(\005)3325 1623 y FR(A)3409 1659 y FT(^)h FX(\005)3576
1623 y FR(B)3637 1659 y FX(\))39 b(is)0 1780 y FT(^)p
FX(-counit)e(for)f(\001)635 1795 y FR(A)p FI(^)p FR(B)796
1780 y FX(.)55 b(By)36 b(Prop)s(osition)h(5.3)f(\(uniqueness)j(of)d
(units\))i(it)e(m)m(ust)h(therefore)g(b)s(e)g(equal)0
1900 y(to)32 b(\005)192 1864 y FR(A)p FI(^)p FR(B)353
1900 y FX(.)43 b(\(ii\))33 b(That)g(\001)911 1915 y FR(A)1001
1900 y FX(preserv)m(es)i(the)e FT(^)p FX(-com)m(ultiplication)h(follo)m
(ws)f(from)909 2148 y FS(A)1700 2078 y FQ(\001)1759 2089
y FE(A)2503 2114 y FG(/)p FF(/)p 1007 2116 1497 4 v 2528
2148 a FS(A)22 b FT(^)h FS(A)2681 2400 y FQ(\001)2740
2411 y FE(A)p FD(^)p FE(A)2656 2592 y FG(\017)p FF(\017)p
2655 2592 4 419 v 1397 2417 a FS(A)f FT(^)g FS(A)h FT(^)f
FS(A)h FT(^)f FS(A)2062 2471 y FR(A)p FI(^)t FQ(^)-39
b FR(\033)2202 2482 y FE(A;A)2318 2471 y FI(^)p FR(A)2448
2592 y FG(*)p FF(*)2408 2580 y Fz(V)2370 2570 y(V)2333
2559 y(V)2295 2548 y(V)2257 2538 y(V)2219 2527 y(V)2182
2516 y(V)2144 2505 y(V)2106 2495 y(V)2068 2484 y(V)2031
2473 y(V)1993 2463 y(V)1955 2452 y(V)1917 2441 y(V)1917
2324 y FG(t)p FF(t)2033 2205 y FQ(\001)2092 2216 y FE(A)2142
2205 y FI(^)p FQ(\001)2248 2216 y FE(A)2463 2169 y Fz(h)2424
2180 y(h)2385 2191 y(h)2346 2202 y(h)2307 2213 y(h)2268
2224 y(h)2229 2235 y(h)2190 2246 y(h)2151 2257 y(h)2112
2268 y(h)2073 2279 y(h)2034 2290 y(h)1995 2301 y(h)1956
2312 y(h)1917 2324 y(h)817 2685 y FS(A)22 b FT(^)h FS(A)945
2592 y FG(\017)p FF(\017)811 2400 y FQ(\001)870 2411
y FE(A)p 944 2592 V 2344 2685 a FS(A)f FT(^)h FS(A)f
FT(^)h FS(A)f FT(^)h FS(A)2319 2650 y FG(/)p FF(/)1576
2721 y FQ(\001)1635 2732 y FE(A)1685 2721 y FI(^)p FQ(\001)1791
2732 y FE(A)p 1099 2652 1221 4 v 3607 2407 a FX(\(38\))0
2909 y(where)48 b(the)f(p)s(en)m(tagon)f(comm)m(utes)i(b)s(ecause)g(of)
e(the)h(coasso)s(ciativit)m(y)h(and)f(co)s(comm)m(utativit)m(y)h(of)0
3030 y(\001)81 3045 y FR(A)149 3030 y FX(:)34 b FS(A)27
b FT(!)h FS(A)22 b FT(^)h FS(A)p FX(.)43 b(F)-8 b(or)32
b(sho)m(wing)i(that)e(\001)1604 3045 y FR(A)1694 3030
y FX(preserv)m(es)j(the)e FT(^)p FX(-counit,)g(consider)h(the)f
(diagram)1188 3273 y FS(A)1746 3203 y FQ(\001)1805 3214
y FE(A)2314 3239 y FG(/)p FF(/)p 1286 3240 1029 4 v 2339
3273 a FS(A)22 b FT(^)h FS(A)2493 3597 y FQ(\005)2546
3574 y FE(A)p FD(^)p FE(A)2468 3840 y FG(\017)p FF(\017)p
2466 3840 4 543 v 1701 3600 a FP(t)f FT(^)h FP(t)1915
3512 y FG(w)p FF(w)2080 3487 y FQ(\005)2133 3464 y FE(A)2183
3487 y FI(^)p FQ(\005)2283 3464 y FE(A)2311 3316 y Fz(o)2275
3334 y(o)2239 3352 y(o)2203 3370 y(o)2167 3387 y(o)2131
3405 y(o)2095 3423 y(o)2059 3441 y(o)2023 3459 y(o)1987
3476 y(o)1951 3494 y(o)1915 3512 y(o)1701 3625 y FG(8)p
FF(8)1401 3714 y FQ(\001)1460 3723 y Fy(t)1271 3869 y
Fz(q)1307 3849 y(q)1343 3829 y(q)1379 3808 y(q)1414 3788
y(q)1450 3768 y(q)1486 3747 y(q)1522 3727 y(q)1558 3707
y(q)1593 3686 y(q)1629 3666 y(q)1665 3646 y(q)2170 3711
y FQ(^)-42 b FR(\045)2199 3720 y Fy(t)2421 3873 y FG(')p
FF(')2384 3855 y Fz(O)2348 3837 y(O)2312 3820 y(O)2276
3802 y(O)2240 3784 y(O)2204 3767 y(O)2168 3749 y(O)2132
3731 y(O)2096 3714 y(O)2060 3696 y(O)2024 3678 y(O)1988
3661 y(O)1951 3643 y(O)1915 3625 y(O)1203 3928 y FP(t)1225
3840 y FG(\017)p FF(\017)1097 3597 y FQ(\005)1150 3574
y FE(A)p 1223 3840 V 2446 3928 a FP(t)p 1271 3906 1150
4 v 1271 3890 V 0 4081 a FX(The)27 b(big)g(and)g(the)f(lo)m(w)m(er)i
(triangle)f(comm)m(ute)h(b)m(y)f(Prop)s(osition)g(5.10,)g(and)f(the)h
(left)g(triangle)g(is)g(\()p FK(B2b)p FX(\))0 4202 y(whic)m(h)34
b(has)f(b)s(een)g(sho)m(wn)h(b)s(efore.)44 b(F)-8 b(or)32
b(\(iii\))g(c)m(hase)297 4453 y FS(A)22 b FT(^)h FS(B)1822
4381 y FR(f)7 b FI(^)p FR(g)3183 4419 y FG(/)p FF(/)p
585 4421 2598 4 v 3207 4453 a FS(C)30 b FT(^)22 b FS(D)3368
4768 y FQ(\001)3427 4779 y FE(C)s FD(^)p FE(D)3343 5025
y FG(\017)p FF(\017)p 3341 5025 4 547 v 992 4785 a FS(A)g
FT(^)h FS(A)f FT(^)g FS(B)28 b FT(^)22 b FS(B)1725 4713
y FR(f)7 b FI(^)p FR(f)g FI(^)p FR(g)r FI(^)p FR(g)2093
4751 y FG(/)p FF(/)p 1653 4753 441 4 v 1154 4692 a FG(\))p
FF(\))676 4655 y FQ(\001)735 4666 y FE(A)785 4655 y FI(^)p
FQ(\001)891 4666 y FE(B)585 4478 y Fz(S)623 4492 y(S)660
4506 y(S)698 4521 y(S)736 4535 y(S)774 4549 y(S)812 4563
y(S)850 4578 y(S)888 4592 y(S)926 4606 y(S)963 4621 y(S)1001
4635 y(S)1039 4649 y(S)1077 4663 y(S)1115 4678 y(S)884
4985 y FR(A)p FI(^)t FQ(^)-39 b FR(\033)1024 4996 y FE(A;B)1142
4985 y FI(^)p FR(B)585 5025 y FG(u)p FF(u)p Fz(k)623
5010 y(k)661 4996 y(k)698 4982 y(k)736 4967 y(k)774 4953
y(k)812 4939 y(k)850 4925 y(k)888 4910 y(k)926 4896 y(k)963
4882 y(k)1001 4868 y(k)1039 4853 y(k)1077 4839 y(k)1115
4825 y(k)2118 4785 y FS(C)29 b FT(^)23 b FS(C)29 b FT(^)22
b FS(D)j FT(^)e FS(D)2515 4985 y FR(C)5 b FI(^)t FQ(^)-39
b FR(\033)2657 4996 y FE(C;D)2776 4985 y FI(^)p FR(D)3184
5025 y FG(\))p FF(\))3145 5010 y Fz(S)3106 4996 y(S)3068
4982 y(S)3029 4967 y(S)2990 4953 y(S)2952 4939 y(S)2913
4925 y(S)2875 4910 y(S)2836 4896 y(S)2797 4882 y(S)2759
4867 y(S)2720 4853 y(S)2681 4839 y(S)2643 4824 y(S)2604
4810 y(S)2604 4692 y FG(u)p FF(u)2817 4655 y FQ(\001)2876
4666 y FE(C)2928 4655 y FI(^)p FQ(\001)3034 4666 y FE(D)3145
4492 y Fz(k)3106 4506 y(k)3068 4521 y(k)3029 4535 y(k)2990
4549 y(k)2952 4564 y(k)2913 4578 y(k)2875 4592 y(k)2836
4607 y(k)2797 4621 y(k)2759 4635 y(k)2720 4649 y(k)2681
4664 y(k)2643 4678 y(k)2604 4692 y(k)110 5118 y FS(A)22
b FT(^)h FS(B)k FT(^)c FS(A)f FT(^)h FS(B)428 5025 y
FG(\017)p FF(\017)205 4768 y FQ(\001)264 4779 y FE(A)p
FD(^)p FE(B)p 427 5025 4 547 v 3016 5118 a FS(C)30 b
FT(^)22 b FS(D)j FT(^)d FS(C)30 b FT(^)22 b FS(D)2992
5084 y FG(/)p FF(/)1734 5155 y FR(f)7 b FI(^)p FR(g)r
FI(^)p FR(f)g FI(^)p FR(g)p 772 5085 2220 4 v 0 5345
a FX(where)34 b FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f
FS(B)38 b FX(and)32 b FS(g)15 b FX(:)33 b FS(C)i FT(!)27
b FS(D)35 b FX(are)e(maps)g(preserving)h(the)f FT(^)p
FX(-com)m(ultiplication.)p 3738 5345 42 42 v 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 560 25
TeXDict begin 560 24 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(560)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FJ(5.16.)42 b(Pr)n(oposition.)32
b FU(In)38 b(a)h FK(B1)o FU(-c)-5 b(ate)g(gory)39 b(ob)-5
b(eying)47 b FX(\()p FK(B2a)p FX(\))38 b FU(and)48 b
FX(\()p FK(B2c)p FX(\))39 b FU(the)f(maps)48 b FX(^)-59
b FS(\013)3284 335 y FR(A;B)s(;C)3492 320 y FU(,)45 b
FX(^)-54 b FS(\033)3617 335 y FR(A;B)3750 320 y FU(,)9
451 y FX(^)c FS(\045)50 466 y FR(A)107 451 y FU(,)179
425 y FX(^)174 451 y FS(\025)231 466 y FR(A)288 451 y
FU(,)38 b FX(\005)429 415 y FR(A)486 451 y FU(,)f FX(\005)626
415 y FR(B)626 481 y(A)679 469 y Fn(8)715 451 y FU(,)g(and)f
FX(\005)1046 415 y FR(A)1046 469 y Fn(8)1078 481 y FR(B)1176
451 y FU(al)5 b(l)36 b(pr)-5 b(eserve)36 b(the)h FT(^)p
FU(-c)-5 b(omultiplic)g(ation.)50 b(Dual)5 b(ly,)37 b(the)f(maps)46
b FX(\024)-59 b FS(\013)3542 466 y FR(A;B)s(;C)3750 451
y FU(,)5 572 y FX(\024)-54 b FS(\033)55 587 y FR(A;B)189
572 y FU(,)43 b FX(\024)-58 b FS(\045)303 587 y FR(A)361
572 y FU(,)429 545 y FX(\024)425 572 y FS(\025)482 587
y FR(A)539 572 y FU(,)35 b FT(q)679 535 y FR(A)736 572
y FU(,)g FT(q)876 535 y FR(B)876 601 y(A)929 589 y Fn(8)964
572 y FU(,)g(and)f FT(q)1293 535 y FR(A)1293 589 y Fn(8)1325
601 y FR(B)1420 572 y FU(al)5 b(l)35 b(pr)-5 b(eserve)34
b(the)h FT(_)p FU(-multiplic)-5 b(ation.)0 746 y FJ(Pr)n(oof.)30
b FX(Again,)i(w)m(e)i(sho)m(w)g(the)f(case)g(only)g(for)k(^)-54
b FS(\033)5 b FX(:)314 1024 y FS(A)22 b FT(^)h FS(B)1815
944 y FQ(^)-39 b FR(\033)1851 955 y FE(A;B)3178 990 y
FG(/)p FF(/)p 602 991 2577 4 v 3203 1024 a FS(B)28 b
FT(^)22 b FS(A)3360 1339 y FQ(\001)3419 1350 y FE(B)r
FD(^)p FE(A)3335 1596 y FG(\017)p FF(\017)p 3333 1596
4 547 v 1008 1356 a FS(A)h FT(^)f FS(A)h FT(^)f FS(B)27
b FT(^)c FS(B)1726 1276 y FQ(^)-39 b FR(\033)1762 1287
y FE(A)p FD(^)p FE(A;B)r FD(^)p FE(B)2110 1322 y FG(/)p
FF(/)p 1670 1324 441 4 v 1170 1263 a FG(\))p FF(\))692
1226 y FQ(\001)751 1237 y FE(A)801 1226 y FI(^)p FQ(\001)907
1237 y FE(B)602 1049 y Fz(S)639 1063 y(S)677 1077 y(S)715
1091 y(S)753 1106 y(S)791 1120 y(S)829 1134 y(S)867 1149
y(S)904 1163 y(S)942 1177 y(S)980 1191 y(S)1018 1206
y(S)1056 1220 y(S)1094 1234 y(S)1132 1249 y(S)901 1556
y FR(A)p FI(^)t FQ(^)g FR(\033)1041 1567 y FE(A;B)1159
1556 y FI(^)p FR(B)602 1596 y FG(u)p FF(u)602 1595 y
Fz(k)639 1581 y(k)677 1567 y(k)715 1553 y(k)753 1538
y(k)791 1524 y(k)829 1510 y(k)867 1496 y(k)904 1481 y(k)942
1467 y(k)980 1453 y(k)1018 1438 y(k)1056 1424 y(k)1094
1410 y(k)1132 1396 y(k)2135 1356 y FS(B)27 b FT(^)c FS(B)k
FT(^)c FS(A)f FT(^)g FS(A)2518 1556 y FR(B)s FI(^)t FQ(^)-39
b FR(\033)2661 1567 y FE(B)r(;A)2779 1556 y FI(^)p FR(A)3178
1596 y FG(\))p FF(\))3140 1581 y Fz(S)3102 1567 y(S)3064
1552 y(S)3026 1538 y(S)2988 1524 y(S)2950 1510 y(S)2912
1495 y(S)2875 1481 y(S)2837 1467 y(S)2799 1452 y(S)2761
1438 y(S)2723 1424 y(S)2685 1410 y(S)2647 1395 y(S)2610
1381 y(S)2610 1263 y FG(u)p FF(u)2820 1226 y FQ(\001)2879
1237 y FE(B)2932 1226 y FI(^)p FQ(\001)3038 1237 y FE(A)3140
1063 y Fz(k)3102 1078 y(k)3064 1092 y(k)3026 1106 y(k)2988
1120 y(k)2950 1135 y(k)2912 1149 y(k)2875 1163 y(k)2837
1178 y(k)2799 1192 y(k)2761 1206 y(k)2723 1220 y(k)2685
1235 y(k)2647 1249 y(k)2610 1263 y(k)127 1689 y FS(A)22
b FT(^)h FS(B)k FT(^)c FS(A)f FT(^)g FS(B)445 1596 y
FG(\017)p FF(\017)221 1339 y FQ(\001)280 1350 y FE(A)p
FD(^)p FE(B)p 444 1596 4 547 v 3016 1689 a FS(B)28 b
FT(^)22 b FS(A)h FT(^)f FS(B)27 b FT(^)c FS(A)2992 1654
y FG(/)p FF(/)1712 1725 y FQ(^)-38 b FR(\033)1749 1736
y FE(A;B)1866 1725 y FI(^)t FQ(^)f FR(\033)1953 1736
y FE(A;B)p 788 1656 2204 4 v 0 1954 a FX(The)43 b(t)m(w)m(o)g
(triangles)g(are)f(\()p FK(B2c)p FX(\),)j(the)d(upp)s(er)h(square)g(is)
g(naturalit)m(y)g(of)k(^)-54 b FS(\033)46 b FX(and)d(the)f(lo)m(w)m(er)
i(square)0 2074 y(comm)m(utes)37 b(b)s(ecause)f(of)f(coherence)i(in)e
(monoidal)h(categories.)52 b(F)-8 b(or)43 b(^)-58 b FS(\013)t
FX(,)45 b(^)-58 b FS(\045)t FX(,)36 b(and)3042 2048 y(^)3038
2074 y FS(\025)j FX(the)d(situation)f(is)0 2195 y(similar.)54
b(F)-8 b(or)34 b(\005)618 2159 y FR(A)711 2195 y FX(it)i(has)g(b)s(een)
g(sho)m(wn)h(already)g(in)f(Prop)s(osition)g(5.10,)g(and)f(for)g(\005)
3168 2159 y FR(B)3168 2224 y(A)3221 2212 y Fn(8)3257
2195 y FX(,)i(and)f(\005)3587 2159 y FR(A)3587 2212 y
Fn(8)3619 2224 y FR(B)3715 2195 y FX(it)0 2315 y(follo)m(ws)d(from)g
(Prop)s(osition)f(5.15.)p 3738 2315 42 42 v 146 2485
a(Prop)s(ositions)i(5.10{5.15)d(giv)m(e)i(rise)h(to)e(the)h(follo)m
(wing)g(de\014nition:)0 2670 y FJ(5.17.)27 b(Definition.)21
b FU(A)26 b FK(B2)o FX(-category)g FU(is)g(a)f FK(B1)p
FU(-c)-5 b(ate)g(gory)25 b(which)g(ob)-5 b(eys)25 b(e)-5
b(quations)34 b FX(\()p FK(B2a)p FX(\))25 b FU(and)35
b FX(\()p FK(B2c)p FX(\))0 2790 y FU(for)g(al)5 b(l)34
b(obje)-5 b(cts)34 b FS(A)h FU(and)g FS(B)5 b FU(.)146
2961 y FX(The)34 b(follo)m(wing)f(theorem)g(summarizes)i(the)e(prop)s
(erties)g(of)f FK(B2)p FX(-categories.)0 3145 y FJ(5.18.)45
b(Theorem.)34 b FU(In)41 b(a)g FK(B2)o FU(-c)-5 b(ate)g(gory,)43
b(the)e(maps)50 b FX(^)-59 b FS(\013)2069 3160 y FR(A;B)s(;C)2277
3145 y FU(,)48 b FX(^)-54 b FS(\033)2405 3160 y FR(A;B)2538
3145 y FU(,)52 b FX(^)-58 b FS(\045)2661 3160 y FR(A)2718
3145 y FU(,)2795 3119 y FX(^)2791 3145 y FS(\025)2848
3160 y FR(A)2905 3145 y FU(,)42 b FX(\001)3058 3160 y
FR(A)3116 3145 y FU(,)g FX(\005)3261 3109 y FR(A)3318
3145 y FU(,)h FX(\005)3464 3109 y FR(B)3464 3175 y(A)3517
3163 y Fn(8)3553 3145 y FU(,)g(and)0 3266 y FX(\005)73
3229 y FR(A)73 3283 y Fn(8)105 3295 y FR(B)166 3266 y
FU(,)j(al)5 b(l)43 b(ar)-5 b(e)44 b FT(^)p FU(-c)-5 b(omonoid)42
b(morphisms,)j(and)e(the)h FT(^)p FU(-c)-5 b(omonoid)42
b(morphisms)h(ar)-5 b(e)43 b(close)-5 b(d)43 b(under)0
3386 y FT(^)p FU(.)72 b(Dual)5 b(ly,)45 b(the)f(maps)53
b FX(\024)-59 b FS(\013)1017 3401 y FR(A;B)s(;C)1225
3386 y FU(,)51 b FX(\024)-54 b FS(\033)1356 3401 y FR(A;B)1489
3386 y FU(,)55 b FX(\024)-58 b FS(\045)1615 3401 y FR(A)1672
3386 y FU(,)1752 3360 y FX(\024)1748 3386 y FS(\025)1805
3401 y FR(A)1862 3386 y FU(,)46 b FT(r)2021 3401 y FR(A)2078
3386 y FU(,)g FT(q)2229 3350 y FR(A)2286 3386 y FU(,)f
FT(q)2436 3350 y FR(B)2436 3416 y(A)2489 3404 y Fn(8)2525
3386 y FU(,)h(and)d FT(q)2874 3350 y FR(A)2874 3404 y
Fn(8)2906 3416 y FR(B)2966 3386 y FU(,)j(al)5 b(l)43
b(ar)-5 b(e)44 b FT(_)p FU(-monoid)0 3506 y(morphisms,)33
b(and)i(the)f FT(_)p FU(-monoid)g(morphisms)g(ar)-5 b(e)34
b(close)-5 b(d)34 b(under)h FT(_)p FU(.)0 3680 y FJ(Pr)n(oof.)30
b FX(Prop)s(ositions)j(5.10,)f(5.13,)g(5.14,)g(5.15,)g(and)h(5.16.)p
3738 3680 V 0 3865 a FJ(5.19.)40 b(Pr)n(oposition.)32
b FU(L)-5 b(et)37 b FS(f)22 b FX(:)34 b FS(A)f FT(!)f
FS(C)44 b FU(and)37 b FS(g)15 b FX(:)33 b FS(A)g FT(!)f
FS(D)40 b FU(and)c FS(h)11 b FX(:)35 b FS(B)i FT(!)32
b FS(C)44 b FU(and)37 b FS(a)11 b FX(:)35 b FS(A)3328
3829 y FI(0)3383 3865 y FT(!)d FS(A)38 b FU(and)0 3986
y FS(b)11 b FX(:)34 b FS(B)192 3949 y FI(0)243 3986 y
FT(!)27 b FS(B)38 b FU(and)33 b FS(c)11 b FX(:)33 b FS(C)i
FT(!)27 b FS(C)1092 3949 y FI(0)1148 3986 y FU(and)33
b FS(d)11 b FX(:)33 b FS(D)d FT(!)e FS(D)1781 3949 y
FI(0)1837 3986 y FU(b)-5 b(e)32 b(maps)g(for)h(some)g(obje)-5
b(cts)32 b FS(A)p FU(,)h FS(B)5 b FU(,)34 b FS(C)7 b
FU(,)33 b FS(D)s FU(,)g FS(A)3561 3949 y FI(0)3584 3986
y FU(,)h FS(B)3727 3949 y FI(0)3750 3986 y FU(,)0 4106
y FS(C)77 4070 y FI(0)100 4106 y FU(,)h FS(D)249 4070
y FI(0)307 4106 y FU(in)f(a)h FK(B2)p FU(-c)-5 b(ate)g(gory.)44
b(Diagr)-5 b(ammatic)g(al)5 b(ly:)1340 4379 y FS(A)1413
4342 y FI(0)1543 4317 y FR(a)1662 4342 y FG(/)p FF(/)p
1461 4344 202 4 v 1687 4376 a FS(A)1865 4304 y FR(f)1986
4342 y FG(/)p FF(/)p 1785 4344 V 2011 4376 a FS(C)2340
4379 y(C)2417 4342 y FI(0)-121 b FG(/)p FF(/)2199 4317
y FR(c)p 2113 4344 V 1337 4716 a FS(B)1416 4680 y FI(0)1546
4654 y FR(b)1659 4679 y FG(/)p FF(/)p 1464 4681 196 4
v 1684 4713 a FS(B)1767 4474 y FR(g)1993 4401 y FG(@)p
FF(@)1964 4431 y Fz(\000)1938 4458 y(\000)1911 4485 y(\000)1885
4512 y(\000)1859 4539 y(\000)1833 4566 y(\000)1807 4593
y(\000)1780 4620 y(\000)2008 4713 y FS(D)1993 4620 y
FG(\036)p FF(\036)1762 4580 y FR(h)1780 4401 y Fz(>)1807
4428 y(>)1833 4455 y(>)1859 4482 y(>)1885 4509 y(>)1911
4536 y(>)1938 4564 y(>)1964 4591 y(>)2337 4716 y FS(D)2421
4680 y FI(0)2312 4679 y FG(/)p FF(/)2196 4654 y FR(d)p
2116 4681 V 0 4918 a FU(Then)34 b(we)h(have:)p 0 TeXcolorgray
79 5121 a FX(\(i\))p 0 TeXcolorgray 48 w(\()p FS(c)22
b FT(^)h FS(d)p FX(\))f FT(\016)g(h)p FS(f)5 b(;)17 b(g)t
FT(i)26 b FX(=)i FT(h)p FS(c)22 b FT(\016)f FS(f)5 b(;)17
b(d)22 b FT(\016)g FS(g)t FT(i)p FU(.)p 0 TeXcolorgray
51 5325 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(If)35 b
FS(a)g FU(pr)-5 b(eserves)34 b(the)h(c)-5 b(omultiplic)g(ation,)33
b(then)i FT(h)p FS(f)5 b(;)17 b(g)t FT(i)k(\016)h FS(a)28
b FX(=)f FT(h)p FS(f)33 b FT(\016)22 b FS(a;)17 b(g)25
b FT(\016)d FS(a)p FT(i)p FU(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 561 26
TeXDict begin 561 25 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(561)p 0 TeXcolorgray
0 TeXcolorgray 24 326 a(\(iii\))p 0 TeXcolorgray 49 w
FU(If)35 b FS(g)j FU(pr)-5 b(eserves)34 b(the)h(c)-5
b(ounit,)34 b(then)h FX(\005)1614 290 y FR(C)1614 344
y Fn(8)1646 356 y FR(D)1732 326 y FT(\016)22 b(h)p FS(f)5
b(;)17 b(g)t FT(i)27 b FX(=)g FS(f)11 b FU(.)230 447
y(If)35 b FS(f)45 b FU(pr)-5 b(eserves)34 b(the)h(c)-5
b(ounit,)35 b(then)g FX(\005)1623 411 y FR(D)1623 476
y(C)1678 464 y Fn(8)1736 447 y FT(\016)22 b(h)p FS(f)5
b(;)17 b(g)t FT(i)26 b FX(=)i FS(g)t FU(.)p 0 TeXcolorgray
27 650 a FX(\(iv\))p 0 TeXcolorgray 49 w FT(h)p FX(\005)342
614 y FR(D)342 680 y(C)397 668 y Fn(8)433 650 y FS(;)17
b FX(\005)550 614 y FR(C)550 668 y Fn(8)582 680 y FR(D)646
650 y FT(i)27 b FX(=)h(1)865 665 y FR(C)5 b FI(^)p FR(D)1031
650 y FU(.)0 854 y(Dual)g(ly,)35 b(we)f(also)g(have:)p
0 TeXcolorgray 79 1057 a FX(\(i\))p 0 TeXcolorgray 48
w([)p FS(f)5 b(;)17 b(h)p FX(])23 b FT(\016)f FX(\()p
FS(a)g FT(_)h FS(b)p FX(\))28 b(=)f([)p FS(f)33 b FT(\016)22
b FS(a;)17 b(h)22 b FT(\016)g FS(b)p FX(])p FU(.)p 0
TeXcolorgray 51 1260 a FX(\(ii\))p 0 TeXcolorgray 49
w FU(If)35 b FS(c)f FU(pr)-5 b(eserves)34 b(the)h(multiplic)-5
b(ation,)34 b(then)h FS(c)22 b FT(\016)g FX([)p FS(f)5
b(;)17 b(h)p FX(])28 b(=)g([)p FS(c)22 b FT(\016)g FS(f)5
b(;)17 b(c)22 b FT(\016)g FS(h)p FX(])p FU(.)p 0 TeXcolorgray
24 1464 a FX(\(iii\))p 0 TeXcolorgray 49 w FU(If)35 b
FS(h)g FU(pr)-5 b(eserves)34 b(the)g(unit,)i(then)e FX([)p
FS(f)5 b(;)17 b(h)p FX(])23 b FT(\016)f(q)1834 1428 y
FR(B)1834 1493 y(A)1887 1481 y Fn(8)1950 1464 y FX(=)28
b FS(f)11 b FU(.)230 1584 y(If)35 b FS(f)45 b FU(pr)-5
b(eserves)34 b(the)h(unit,)g(then)g FX([)p FS(f)5 b(;)17
b(h)p FX(])22 b FT(\016)g(q)1836 1548 y FR(A)1836 1602
y Fn(8)1868 1614 y FR(B)1956 1584 y FX(=)28 b FS(h)p
FU(.)p 0 TeXcolorgray 27 1788 a FX(\(iv\))p 0 TeXcolorgray
49 w([)p FT(q)332 1751 y FR(B)332 1817 y(A)385 1805 y
Fn(8)421 1788 y FS(;)17 b FT(q)540 1751 y FR(A)540 1805
y Fn(8)571 1817 y FR(B)632 1788 y FX(])28 b(=)f(1)839
1803 y FR(A)p FI(_)p FR(B)1000 1788 y FU(.)0 1991 y FJ(Pr)n(oof.)35
b FX(Straigh)m(tforw)m(ard)42 b(calculation.)71 b(Note)42
b(that)f(\(i\){\(iii\))h(hold)f(already)i(in)e(a)h FK(B1)o
FX(-category)-8 b(,)0 2111 y(only)33 b(for)f(\(iv\))h(is)g(the)g
(equation)g(\()p FK(B2c)p FX(\))g(needed.)p 3738 2111
42 42 v 146 2282 a(As)38 b(observ)m(ed)g(b)s(efore,)g(if)f(a)g
FK(B1)o FX(-category)g(is)g(single-mixed)i(then)e(Hom)5
b(\()p FS(A;)17 b(B)5 b FX(\))36 b(carries)i(a)e(semi-)0
2402 y(group)i(structure.)62 b(If)38 b(w)m(e)h(additionally)g(ha)m(v)m
(e)g(the)g(structure)h(of)d(a)h FK(B2)p FX(-category)-8
b(,)39 b(then)g(the)g(bijec-)0 2522 y(tion)33 b(\()p
FS(?)p FX(\))f(of)g(De\014nition)h(3.2)f(preserv)m(es)j(this)e
(semigroup)h(structure:)0 2707 y FJ(5.20.)40 b(Pr)n(oposition.)32
b FU(In)37 b(a)g(single-mixe)-5 b(d)35 b FK(B2)p FU(-c)-5
b(ate)g(gory)37 b(the)h(bije)-5 b(ction)44 b FX(\()p
FS(?)p FX(\))37 b FU(is)g(a)g(semigr)-5 b(oup)37 b(iso-)0
2827 y(morphism.)0 3001 y FJ(Pr)n(oof.)i FX(Let)47 b
FS(f)5 b(;)17 b(g)e FX(:)38 b FS(A)33 b FT(^)f FS(B)59
b FT(!)52 b FS(C)j FX(b)s(e)48 b(t)m(w)m(o)g(maps)g(for)f(some)h(ob)5
b(jects)49 b FS(A)p FX(,)j FS(B)5 b FX(,)51 b(and)d FS(C)7
b FX(,)51 b(and)d(let)0 3122 y FS(f)59 3086 y FI(0)82
3122 y FS(;)17 b(g)177 3086 y FI(0)210 3122 y FX(:)34
b FS(A)e FT(!)530 3097 y FX(\026)507 3122 y FS(B)d FT(_)24
b FS(C)41 b FX(b)s(e)35 b(their)h(transp)s(oses.)51 b(W)-8
b(e)35 b(ha)m(v)m(e)h(to)f(sho)m(w)g(that)g FS(f)2737
3086 y FI(0)2784 3122 y FX(+)23 b FS(g)2934 3086 y FI(0)2991
3122 y FX(is)36 b(the)f(transp)s(ose)g(of)0 3242 y FS(f)e
FX(+)22 b FS(g)t FX(.)43 b(First)32 b(note,)h(that)f(in)h(an)m(y)h
FT(\003)p FX(-autonomous)e(category)h(the)g(map)461 3520
y FS(A)22 b FT(^)h FS(A)f FT(^)h FS(B)k FT(^)c FS(B)1357
3441 y FR(A)p FI(^)t FQ(^)-39 b FR(\033)1497 3452 y FE(A;B)1615
3441 y FI(^)p FR(B)1953 3486 y FG(/)p FF(/)p 1123 3488
831 4 v 1978 3520 a FS(A)22 b FT(^)h FS(B)k FT(^)22 b
FS(A)h FT(^)f FS(B)2772 3449 y FR(f)7 b FI(^)p FR(g)3029
3486 y FG(/)p FF(/)p 2639 3488 391 4 v 3054 3520 a FS(C)29
b FT(^)23 b FS(C)0 3722 y FX(is)33 b(a)f(transp)s(ose)i(of)563
3998 y FS(A)23 b FT(^)f FS(A)956 3926 y FR(f)997 3902
y FD(0)1020 3926 y FI(^)p FR(g)1103 3902 y FD(0)1236
3964 y FG(/)p FF(/)p 845 3966 V 1260 3992 a FX(\()1322
3967 y(\026)1298 3992 y FS(B)28 b FT(_)22 b FS(C)7 b
FX(\))22 b FT(^)h FX(\()1775 3967 y(\026)1752 3992 y
FS(B)k FT(_)c FS(C)7 b FX(\))2257 3921 y FQ(^)2262 3930
y FH(t)2472 3964 y FG(/)p FF(/)p 2081 3966 V 2520 3967
a FX(\026)2496 3992 y FS(B)28 b FT(_)2710 3967 y FX(\026)2686
3992 y FS(B)g FT(_)22 b FX(\()p FS(C)29 b FT(^)23 b FS(C)7
b FX(\))0 4233 y(where)281 4219 y(^)288 4233 y FK(t)43
b FX(is)c(the)g(canonical)g(map)g(obtained)g(from)g(t)m(w)m(o)g(switc)m
(hes,)k(cf.)38 b(\(11\).)62 b(No)m(w,)40 b(b)m(y)g(de\014nition,)0
4353 y FS(f)33 b FX(+)22 b FS(g)36 b FX(is)d(the)g(map)257
4631 y FS(A)22 b FT(^)h FS(B)641 4561 y FQ(\001)700 4572
y FE(A)p FD(^)p FE(B)935 4597 y FG(/)p FF(/)p 545 4599
V 640 4833 a FQ(\001)699 4844 y FE(A)749 4833 y FI(^)p
FQ(\001)855 4844 y FE(B)1121 4870 y FG(\))p FF(\))1082
4856 y Fz(S)1043 4841 y(S)1005 4827 y(S)967 4813 y(S)928
4798 y(S)890 4784 y(S)852 4770 y(S)813 4755 y(S)775 4741
y(S)737 4727 y(S)698 4712 y(S)660 4698 y(S)622 4683 y(S)583
4669 y(S)545 4655 y(S)960 4631 y FS(A)f FT(^)h FS(B)k
FT(^)c FS(A)f FT(^)h FS(B)1755 4559 y FR(f)7 b FI(^)p
FR(g)2012 4597 y FG(/)p FF(/)p 1622 4599 V 2037 4631
a FS(C)29 b FT(^)22 b FS(C)2411 4551 y FH(mix)2517 4562
y FE(C;C)2716 4597 y FG(/)p FF(/)p 2326 4599 V 2741 4631
a FS(C)29 b FT(_)23 b FS(C)3171 4561 y FI(r)3230 4572
y FE(C)3421 4597 y FG(/)p FF(/)p 3031 4599 V 3446 4631
a FS(C)960 4963 y(A)f FT(^)h FS(A)f FT(^)h FS(B)k FT(^)c
FS(B)1303 4775 y FR(A)p FI(^)t FQ(^)-39 b FR(\033)1443
4786 y FE(A;B)1561 4775 y FI(^)p FR(B)1278 4656 y FG(O)p
FF(O)p 1277 4870 4 215 v 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 562 27
TeXDict begin 562 26 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(562)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FX(By)35 b(\(10\))e(and)h(what)g(has)g(b)s(een)g
(said)g(ab)s(o)m(v)m(e,)h(the)f(transp)s(ose)g(of)f(the)h(lo)m(w)m(er)h
(path)e(is)h(the)g(outermost)0 440 y(path)f(of)f(the)h(follo)m(wing:)
261 715 y FS(A)499 645 y FQ(\001)558 656 y FE(A)749 681
y FG(/)p FF(/)p 359 683 391 4 v 774 715 a FS(A)22 b FT(^)h
FS(A)1166 643 y FR(f)1207 620 y FD(0)1230 643 y FI(^)p
FR(g)1313 620 y FD(0)1446 681 y FG(/)p FF(/)p 1056 683
V 1471 709 a FX(\()1532 684 y(\026)1509 709 y FS(B)k
FT(_)c FS(C)7 b FX(\))22 b FT(^)g FX(\()1986 684 y(\026)1962
709 y FS(B)27 b FT(_)c FS(C)7 b FX(\))2467 639 y FQ(^)2472
648 y FH(t)2682 681 y FG(/)p FF(/)p 2292 683 V 1444 875
a FH(mix)1563 881 y Ft(\026)1549 894 y FE(B)s FD(_)p
FE(C;)1716 881 y Ft(\026)1703 894 y FE(B)r FD(_)p FE(C)1869
974 y FG(\017)p FF(\017)p 1867 974 4 215 v 2730 684 a
FX(\026)2707 709 y FS(B)27 b FT(_)2920 684 y FX(\026)2897
709 y FS(B)g FT(_)c FX(\()p FS(C)29 b FT(^)22 b FS(C)7
b FX(\))3108 867 y FQ(\026)3092 884 y FR(B)s FI(_)3212
867 y FQ(\026)3195 884 y FR(B)t FI(_)p FH(mix)3404 895
y FE(C;C)3067 974 y FG(\017)p FF(\017)p 3065 974 V 1570
1055 a FX(\026)1547 1080 y FS(B)27 b FT(_)c FS(C)29 b
FT(_)1948 1055 y FX(\026)1924 1080 y FS(B)f FT(_)22 b
FS(C)2304 969 y FQ(\026)2287 986 y FR(B)t FI(_)t FQ(^)-39
b FR(\033)2431 1005 y FE(C;)2508 992 y Ft(\026)2494 1005
y FE(B)2547 986 y FI(_)p FR(C)2720 1039 y FG(/)p FF(/)p
2216 1041 505 4 v 2768 1055 a FX(\026)2745 1080 y FS(B)27
b FT(_)2958 1055 y FX(\026)2935 1080 y FS(B)g FT(_)c
FS(C)29 b FT(_)22 b FS(C)3092 1226 y FI(r)3165 1232 y
Ft(\026)3151 1245 y FE(B)3203 1226 y FI(_r)3309 1237
y FE(C)3067 1319 y FG(\017)p FF(\017)p 3065 1319 4 215
v 2957 1401 a FX(\026)2934 1426 y FS(B)27 b FT(_)22 b
FS(C)2909 1339 y FG(*)p FF(*)2366 1293 y FI(r)2439 1299
y Ft(\026)2425 1312 y FE(B)2473 1311 y FD(_)p FE(C)2096
1105 y Fz(V)2135 1116 y(V)2174 1128 y(V)2212 1139 y(V)2251
1150 y(V)2289 1161 y(V)2328 1172 y(V)2367 1183 y(V)2405
1194 y(V)2444 1206 y(V)2483 1217 y(V)2521 1228 y(V)2560
1239 y(V)2598 1250 y(V)2637 1261 y(V)2676 1273 y(V)2714
1284 y(V)2753 1295 y(V)2792 1306 y(V)2830 1317 y(V)2869
1328 y(V)0 1633 y FX(The)29 b(innermost)h(path)e(is)h(b)m(y)h
(de\014nition)f FS(f)1585 1597 y FI(0)1622 1633 y FX(+)14
b FS(g)1763 1597 y FI(0)1785 1633 y FX(.)42 b(The)29
b(square)h(comm)m(utes)g(b)s(ecause)g(of)35 b(\()p FK(mix)s
FX(-)5 b(^)-54 b FS(\033)5 b FX(\))28 b(and)0 1754 y(\()p
FK(mix)t FX(-)10 b(^)-59 b FS(\013)t FX(\))o(,)33 b(and)g(the)g
(triangle)f(is)i(the)f(dual)f(of)39 b(\()p FK(B2c)p FX(\).)p
3738 1754 42 42 v 0 2075 a FY(6.)f(Order)g(enric)m(hmen)m(t)0
2270 y FX(In)i([FP04c],)h(F)s(\177)-51 b(uhrman)39 b(and)h(Pym)h
(equipp)s(ed)g FK(B2)o FX(-categories)f(with)g(an)g(order)g(enric)m
(hmen)m(t,)j(suc)m(h)0 2391 y(that)d(the)g(pro)s(of)f(iden)m
(ti\014cations)j(induced)g(b)m(y)e(the)h(axioms)g(are)f(exactly)h(the)f
(same)h(as)f(the)h(pro)s(of)0 2511 y(iden)m(ti\014cations)34
b(made)f(b)m(y)g(Gen)m(tzen's)h(sequen)m(t)g(calculus)g
FK(LK)e FX([Gen34],)g(mo)s(dulo)g(\\trivial)h(rule)f(p)s(er-)0
2631 y(m)m(utations")43 b(\(see)f([Laf95,)f(Rob03]\),)j(and)e(suc)m(h)h
(that)f FS(f)54 b Fl(4)44 b FS(g)h FX(if)d FS(g)j FX(is)d(obtained)g
(from)g FS(f)52 b FX(via)43 b(cut)0 2752 y(elimination)33
b(\(whic)m(h)h(is)g(not)e(con\015uen)m(t)i(in)f FK(LK)p
FX(\).)0 2936 y FJ(6.1.)54 b(Definition.)40 b FU(A)50
b FK(B2)o FU(-c)-5 b(ate)g(gory)50 b(is)f(c)-5 b(al)5
b(le)-5 b(d)48 b(an)57 b FK(LK)p FX(-category)49 b FU(if)g(for)g(every)
g FS(A)p FU(,)k FS(B)5 b FU(,)54 b(the)49 b(set)0 3057
y FX(Hom)t(\()p FS(A;)17 b(B)5 b FX(\))35 b FU(is)g(e)-5
b(quipp)g(e)g(d)34 b(with)g(a)h(p)-5 b(artial)35 b(or)-5
b(der)34 b(structur)-5 b(e)36 b Fl(4)g FU(such)e(that)p
0 TeXcolorgray 79 3260 a FX(\(i\))p 0 TeXcolorgray 48
w FU(the)40 b(arr)-5 b(ow)38 b(c)-5 b(omp)g(osition)38
b FT(\016)p FU(,)i(as)f(wel)5 b(l)39 b(as)g(the)g(bifunctors)g
FT(^)h FU(and)e FT(_)i FU(ar)-5 b(e)39 b(monotonic)f(in)h(b)-5
b(oth)230 3381 y(ar)g(guments,)p 0 TeXcolorgray 51 3584
a FX(\(ii\))p 0 TeXcolorgray 49 w FU(for)35 b(every)g(map)f
FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f FS(B)40 b FU(we)35
b(have)1509 3804 y FX(\005)1582 3763 y FR(B)1665 3804
y FT(\016)22 b FS(f)55 b Fl(4)h FX(\005)2046 3763 y FR(A)3474
3804 y FX(\()p FK(LK-)p FX(\005)t FK(\))1501 3992 y FX(\001)1582
4007 y FR(B)1665 3992 y FT(\016)22 b FS(f)55 b Fl(4)h
FX(\()p FS(f)33 b FT(^)22 b FS(f)11 b FX(\))22 b FT(\016)g
FX(\001)2452 4007 y FR(A)3466 3992 y FX(\()p FK(LK-)p
FX(\001)t FK(\))p 0 TeXcolorgray 24 4254 a FX(\(iii\))p
0 TeXcolorgray 49 w FU(and)35 b(the)g(bije)-5 b(ction)41
b FX(\()p FS(?)p FX(\))35 b FU(of)f(De\014nition)g(3.2)g(is)h(an)f(or)
-5 b(der)35 b(isomorphism)e(for)h Fl(4)p FU(.)146 4457
y FX(Although)k(in)h([FP04c,)e(FP04b])h(F)s(\177)-51
b(uhrmann)37 b(and)h(Pym)h(use)g(the)f(term)h(\\classical)g(category",)
0 4578 y(W)-8 b(e)39 b(use)g(here)g(the)f(term)h FK(LK)p
FX(-categories)f(b)s(ecause|as)i(w)m(ork)m(ed)g(out)e(in)g(detail)h(in)
f([FP04c]|they)0 4698 y(pro)m(vide)25 b(a)f(category-theoretic)h
(axiomatisation)f(of)g(sequen)m(t)i(calculus)f(pro)s(ofs)f(in)g(Gen)m
(tzen's)i(system)0 4818 y FK(LK)c FX([Gen34].)39 b(Ho)m(w)m(ev)m(er,)27
b(it)22 b(should)g(b)s(e)g(clear)h(that)e FK(LK)p FX(-categories)h(are)
g(only)g(one)g(particular)g(example)0 4939 y(of)32 b(a)g(wide)i(range)f
(of)f(p)s(ossible)i(category-theoretic)f(axiomatisations)g(of)f(pro)s
(ofs)h(in)f(classical)j(logic.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 563 28
TeXDict begin 563 27 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(563)p 0 TeXcolorgray
0 320 a FJ(6.2.)44 b(Remark.)33 b FX(Note)38 b(that)h(in)f([FP04c])h(F)
s(\177)-51 b(uhrmann)38 b(and)h(Pym)g(giv)m(e)h(a)e(di\013eren)m(t)i
(de\014nition)f(for)0 433 y FK(LK)p FX(-categories.)49
b(Since)35 b(they)h(start)e(from)g(a)g(w)m(eakly)i(distributiv)m(e)h
(category)d([CS97b])h(instead)g(of)f(a)0 545 y FT(\003)p
FX(-autonomous)f(one,)i(they)f(do)g(not)f(ha)m(v)m(e)i(immediate)g
(access)h(to)d(transp)s(osition.)47 b(F)-8 b(or)33 b(this)h(reason,)0
658 y(they)f(ha)m(v)m(e)h(to)f(giv)m(e)g(a)f(larger)h(set)g(of)f
(inequalities,)j(de\014ning)f(the)f(order)f Fl(4)p FX(:)197
838 y Fp(\001)273 852 y FR(B)354 838 y Fq(\016)21 b Fr(f)34
b Fk(4)25 b Fp(\()p Fr(f)30 b Fq(^)20 b Fr(f)10 b Fp(\))20
b Fq(\016)g Fp(\001)1037 852 y FR(A)1969 838 y Fr(f)29
b Fq(\016)21 b(r)2185 852 y FR(A)2267 838 y Fk(4)k Fq(r)2439
852 y FR(B)2520 838 y Fq(\016)20 b Fp(\()p Fr(f)30 b
Fq(_)20 b Fr(f)10 b Fp(\))205 1010 y(\005)273 977 y FR(B)354
1010 y Fq(\016)21 b Fr(f)34 b Fk(4)25 b Fp(\005)663 977
y FR(A)1976 1010 y Fr(f)30 b Fq(\016)20 b(q)2184 977
y FR(A)2267 1010 y Fk(4)25 b Fq(q)2431 977 y FR(B)168
1182 y Fr(A)c Fq(_)e Fp(\001)413 1196 y FR(B)499 1182
y Fk(4)25 b Fp(\()p Fq(r)706 1196 y FR(A)783 1182 y Fq(_)20
b Fp(\()p Fr(B)25 b Fq(^)20 b Fr(B)5 b Fp(\)\))21 b Fq(\016)1298
1169 y Fp(^)1304 1182 y Fj(t)j Fq(\016)d Fp(\001)1503
1196 y FR(A)p FI(_)p FR(B)1936 1182 y Fr(A)f Fq(^)g(r)2181
1196 y FR(B)2267 1182 y Fk(4)25 b Fp(\001)2439 1196 y
FR(A)p FI(^)p FR(B)2619 1182 y Fq(\016)2679 1169 y Fp(\024)2685
1182 y Fj(t)f Fq(\016)d Fp(\(\001)2919 1196 y FR(A)2996
1182 y Fq(^)f Fp(\()p Fr(B)25 b Fq(_)20 b Fr(B)5 b Fp(\)\))176
1361 y Fr(A)20 b Fq(_)g Fp(\005)413 1328 y FR(B)499 1361
y Fk(4)25 b Fp(\()p Fq(q)698 1328 y FR(A)776 1361 y Fq(_)20
b Fo(t)p Fp(\))g Fq(\016)1022 1337 y Fp(\024)1019 1361
y Fr(\025)1072 1323 y FI(\000)p FQ(1)1072 1387 y Fs(t)1186
1361 y Fq(\016)h Fp(\005)1320 1328 y FR(A)p FI(_)p FR(B)1944
1361 y Fr(A)f Fq(^)g(q)2181 1328 y FR(B)2267 1361 y Fk(4)25
b Fq(q)2431 1328 y FR(A)p FI(^)p FR(B)2612 1361 y Fq(\016)2681
1337 y Fp(^)2677 1361 y Fr(\025)2730 1376 y Fs(f)2788
1361 y Fq(\016)20 b Fp(\(\005)2956 1328 y FR(A)3034 1361
y Fq(^)g Fo(f)10 b Fp(\))3599 1100 y(\()p Fj(FP\))0 1560
y FX(where)35 b FS(f)21 b FX(:)34 b FS(A)29 b FT(!)g
FS(B)38 b FX(is)c(an)f(arbitrary)g(map)h(and)1807 1546
y(^)1814 1560 y FK(t)16 b FX(:)33 b(\()p FS(A)23 b FT(_)g
FS(B)5 b FX(\))23 b FT(^)g FX(\()p FS(A)f FT(_)i FS(B)5
b FX(\))29 b FT(!)f FS(A)23 b FT(_)g FS(A)g FT(_)g FX(\()p
FS(B)k FT(^)d FS(B)5 b FX(\))33 b(and)-7 1666 y(\024)0
1680 y FK(t)15 b FX(:)34 b FS(A)11 b FT(^)g FS(A)g FT(^)g
FX(\()p FS(B)16 b FT(_)11 b FS(B)5 b FX(\))28 b FT(!)f
FX(\()p FS(A)11 b FT(^)g FS(B)5 b FX(\))11 b FT(_)g FX(\()p
FS(A)g FT(^)g FS(B)5 b FX(\))27 b(are)g(the)h(tensor)f(and)h(cotensor)f
(map,)i(cf.)e(\(11\))f(and)h(\(12\).)0 1801 y(One)k(can)g(no)m(w)g
(easily)h(sho)m(w)g(that)e(b)s(oth)h(de\014nitions)h(are)f(equiv)-5
b(alen)m(t:)44 b(Clearly)32 b(the)f(inequations)h(on)0
1921 y(the)g(righ)m(t)g(in)f(\()p FK(FP)p FX(\))h(are)f(just)h(transp)s
(oses)h(of)e(the)h(ones)g(on)f(the)h(left.)44 b(The)32
b(t)m(w)m(o)g(top)f(ones)i(on)e(the)h(left)0 2041 y(are)h(just)h(\()p
FK(LK-)p FX(\005)t(\))f(and)h(\()p FK(LK-)p FX(\001)s(\),)g(and)f(the)h
(t)m(w)m(o)g(b)s(ottom)f(ones)h(follo)m(w)g(as)g(follo)m(ws.)46
b(If)34 b(w)m(e)g(transp)s(ose)0 2206 y FS(A)22 b FT(_)h
FS(B)299 2145 y FR(A)p FI(_)p FQ(\001)458 2156 y FE(B)535
2181 y FG(/)p FF(/)p 275 2183 260 4 v 546 2206 a FS(A)g
FT(_)f FX(\()p FS(B)27 b FT(^)c FS(B)5 b FX(\))32 b(w)m(e)i(get)f(the)g
(map)1198 2424 y(\026)1173 2449 y FS(A)22 b FT(^)g FX(\()p
FS(A)h FT(_)f FS(B)5 b FX(\))1777 2391 y FH(eval)1966
2424 y FG(/)p FF(/)p 1706 2426 V 1977 2449 a FS(B)2142
2388 y FQ(\001)2201 2399 y FE(B)2327 2424 y FG(/)p FF(/)p
2067 2426 V 2338 2449 a FS(B)28 b FT(^)22 b FS(B)0 2648
y FX(By)34 b(\()p FK(LK-)p FX(\001)t(\),)f(this)g(is)g(smaller)h(or)e
(equal)h(to)560 2885 y(\026)535 2911 y FS(A)22 b FT(^)g
FX(\()p FS(A)h FT(_)f FS(B)5 b FX(\))1093 2830 y FQ(\001)1168
2836 y Ft(\026)1152 2849 y FE(A)1198 2848 y FD(^)p Ft(\()p
FE(A)p FD(_)p FE(B)r Ft(\))1390 2886 y FG(/)p FF(/)p
1131 2887 V 1490 2885 a FX(\026)1464 2911 y FS(A)22 b
FT(^)h FX(\()p FS(A)f FT(_)g FS(B)5 b FX(\))23 b FT(^)2123
2885 y FX(\026)2097 2911 y FS(A)f FT(^)h FX(\()p FS(A)f
FT(_)h FS(B)5 b FX(\))2656 2852 y FH(eval)t FI(^)p FH(eval)2928
2886 y FG(/)p FF(/)p 2668 2887 V 2976 2911 a FS(B)28
b FT(^)22 b FS(B)0 3110 y FX(By)34 b(\()p FK(B2c)p FX(\))f(this)g(is)g
(the)g(same)g(map)g(as)26 3335 y(\026)0 3360 y FS(A)13
b FT(^)g FX(\()p FS(A)g FT(_)g FS(B)5 b FX(\))521 3292
y FQ(\001)595 3298 y Ft(\026)580 3311 y FE(A)630 3292
y FI(^)p FQ(\001)736 3303 y FE(A)p FD(_)p FE(B)828 3335
y FG(/)p FF(/)p 568 3337 V 109 w FX(\026)912 3360 y FS(A)12
b FT(^)1102 3335 y FX(\026)1076 3360 y FS(A)h FT(^)g
FX(\()p FS(A)g FT(_)g FS(B)5 b FX(\))13 b FT(^)g FX(\()p
FS(A)g FT(_)g FS(B)5 b FX(\))2015 3289 y FI(\030)2015
3310 y FQ(=)2102 3335 y FG(/)p FF(/)p 1984 3337 119 4
v 36 w FX(\026)2113 3360 y FS(A)12 b FT(^)h FX(\()p FS(A)g
FT(_)g FS(B)5 b FX(\))13 b FT(^)2715 3335 y FX(\026)2689
3360 y FS(A)g FT(^)g FX(\()p FS(A)g FT(_)g FS(B)5 b FX(\))3210
3302 y FH(eval)s FI(^)p FH(eval)3482 3335 y FG(/)p FF(/)p
3222 3337 260 4 v 3530 3360 a FS(B)18 b FT(^)13 b FS(B)0
3559 y FX(T)-8 b(ransp)s(osing)33 b(bac)m(k)h(yields)392
3803 y FS(A)22 b FT(_)g FS(B)696 3743 y FQ(\001)755 3754
y FE(A)p FD(_)p FE(B)926 3779 y FG(/)p FF(/)p 666 3780
V 937 3803 a FX(\()p FS(A)g FT(_)g FS(B)5 b FX(\))23
b FT(^)f FX(\()p FS(A)g FT(_)h FS(B)5 b FX(\))1775 3736
y FQ(^)1780 3745 y FH(t)1854 3779 y FG(/)p FF(/)p 1736
3780 119 4 v 1865 3803 a FS(A)22 b FT(_)h FS(A)f FT(_)h
FX(\()p FS(B)k FT(^)c FS(B)5 b FX(\))2664 3743 y FI(r)2723
3754 y FE(A)2849 3779 y FG(/)p FF(/)p 2589 3780 260 4
v 2860 3803 a FS(A)22 b FT(_)g FX(\()p FS(B)28 b FT(^)22
b FS(B)5 b FX(\))0 4002 y(This)27 b(sho)m(ws)h(the)f(third)f
(inequation)h(on)f(the)h(left)f(in)h(\()p FK(FP)p FX(\).)41
b(F)-8 b(or)26 b(the)g(last)h(one,)g(w)m(e)h(pro)s(ceed)f(similarly:)0
4168 y(T)-8 b(ransp)s(osing)33 b FS(A)23 b FT(_)f FS(B)850
4118 y FR(A)p FI(_)p FQ(\005)1003 4095 y FE(B)1082 4143
y FG(/)p FF(/)p 822 4145 V 1093 4168 a FS(A)h FT(_)f
FP(t)32 b FX(yields)1311 4381 y(\026)1285 4406 y FS(A)23
b FT(^)f FX(\()p FS(A)g FT(_)h FS(B)5 b FX(\))1890 4348
y FH(eval)2079 4381 y FG(/)p FF(/)p 1819 4383 V 2090
4406 a FS(B)2257 4356 y FQ(\005)2310 4333 y FE(B)2440
4381 y FG(/)p FF(/)p 2180 4383 V 2451 4406 a FP(t)0 4605
y FX(whic)m(h)34 b(is)f(b)m(y)i(\()p FK(LK-)p FX(\005)t(\))d(smaller)i
(or)e(equal)h(to)1432 4831 y(\026)1407 4856 y FS(A)22
b FT(^)g FX(\()p FS(A)h FT(_)f FS(B)5 b FX(\))1965 4807
y FQ(\005)2034 4771 y Ft(\026)2018 4784 y FE(A)2064 4783
y FD(^)p Ft(\()p FE(A)p FD(_)p FE(B)r Ft(\))2259 4831
y FG(/)p FF(/)p 2000 4833 V 2330 4856 a FP(t)0 5055 y
FX(whic)m(h)34 b(is)f(b)m(y)i(\()p FK(B2b)p FX(\))d(and)h(\(27\))f(the)
h(same)g(as)1212 5320 y(\026)1186 5345 y FS(A)22 b FT(^)h
FX(\()p FS(A)f FT(_)h FS(B)5 b FX(\))1745 5257 y FQ(\005)1813
5220 y Ft(\026)1798 5233 y FE(A)1798 5283 y Fn(8)1829
5295 y FE(A)p FD(_)p FE(B)1987 5320 y FG(/)p FF(/)p 1727
5322 V 2005 5345 a FS(A)23 b FT(_)f FS(B)2313 5295 y
FQ(\005)2366 5272 y FE(A)p FD(_)p FE(B)2539 5320 y FG(/)p
FF(/)p 2280 5322 V 2550 5345 a FP(t)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 564 29
TeXDict begin 564 28 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(564)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FX(If)33 b(transp)s(ose)g(bac)m(k,)h(w)m(e)f
(get)1341 512 y FS(A)22 b FT(_)h FS(B)1648 462 y FQ(\005)1701
439 y FE(A)p FD(_)p FE(B)1875 487 y FG(/)p FF(/)p 1615
489 260 4 v 1886 512 a FP(t)2013 424 y FI(q)2066 401
y FE(A)2066 450 y Fn(8)2097 462 y Fy(t)2200 487 y FG(/)p
FF(/)p 1941 489 V 2212 512 a FS(A)f FT(_)g FP(t)0 678
y FX(as)40 b(desired.)67 b(W)-8 b(e)40 b(do)g(not)f(sho)m(w)i(here)g
(the)f(other)g(direction)h(b)s(ecause)g(it)e(is)i(rather)f(tedious:)59
b(It)39 b(is)0 798 y(almost)c(literally)h(the)f(same)h(as)f(the)g(pro)s
(of)f(for)h(sho)m(wing)h(that)e(an)m(y)i(w)m(eakly)h(distributiv)m(e)g
(category)0 919 y(with)c(negation)g(is)g(a)f FT(\003)p
FX(-autonomous)g(category)h(\(see)h([CS97b,)f(BCST96]\).)146
1083 y(The)38 b(follo)m(wing)g(theorem)g(states)g(the)f(main)h(prop)s
(erties)g(of)e FK(LK)p FX(-categories.)58 b(It)37 b(has)h(\014rst)f(b)s
(een)0 1203 y(observ)m(ed)e(and)d(pro)m(v)m(ed)i(b)m(y)g(F)s(\177)-51
b(uhrmann)32 b(and)g(Pym)i(in)f([FP04a].)0 1385 y FJ(6.3.)38
b(Theorem.)30 b FU(Every)36 b FK(LK)p FU(-c)-5 b(ate)g(gory)35
b(is)g(single-mixe)-5 b(d)34 b(and)h(idemp)-5 b(otent.)46
b(F)-7 b(urthermor)i(e,)34 b(for)h(al)5 b(l)0 1505 y(maps)34
b FS(f)5 b(;)17 b(g)e FX(:)33 b FS(A)28 b FT(!)f FS(B)5
b FU(,)35 b(we)f(have)g FS(f)39 b FT(\024)28 b FS(g)38
b FU(i\013)d FS(g)c Fl(4)d FS(f)11 b FU(.)0 1676 y FJ(Pr)n(oof.)33
b FX(Because)39 b(of)45 b(\()p FK(B2a)p FX(\))37 b(and)h(\()p
FK(LK-)p FX(\005)s(\))g(w)m(e)h(ha)m(v)m(e)g(that)f FT(q)2361
1640 y Fs(t)2433 1676 y FX(=)f(1)2595 1691 y Fs(t)2656
1676 y FT(\016)26 b(q)2807 1640 y Fs(t)2879 1676 y FX(=)36
b(\005)3064 1640 y Fs(t)3126 1676 y FT(\016)26 b(q)3277
1640 y Fs(t)3349 1676 y Fl(4)37 b FX(\005)3536 1640 y
Fs(f)3573 1676 y FX(.)59 b(By)0 1797 y(dualit)m(y)-8
b(,)32 b(w)m(e)f(also)f(get)g(\005)915 1761 y Fs(f)980
1797 y Fl(4)e FT(q)1160 1761 y Fs(t)1196 1797 y FX(.)42
b(Therefore)32 b(\005)1778 1761 y Fs(f)1842 1797 y FX(=)c
FT(q)2021 1761 y Fs(t)2056 1797 y FX(,)j(i.e.,)h(the)e(category)h(is)f
(single-mixed.)45 b(Next,)0 1917 y(w)m(e)34 b(sho)m(w)f(that)g
FS(f)g FX(+)22 b FS(g)31 b Fl(4)d FS(f)43 b FX(for)32
b(all)g(maps)i FS(f)5 b(;)17 b(g)e FX(:)32 b FS(A)c FT(!)f
FS(B)5 b FX(.)44 b(F)-8 b(or)32 b(this,)h(note)g(that)731
2194 y FS(A)22 b FT(^)h FS(B)1030 2124 y FH(mix)1135
2135 y FE(A;B)1271 2169 y FG(/)p FF(/)p 1012 2171 V 1289
2194 a FS(A)f FT(_)h FS(B)130 b Fl(4)c FS(A)22 b FT(^)h
FS(B)2215 2106 y FQ(\005)2268 2083 y FE(A)2268 2133 y
Fn(8)2300 2145 y FE(B)2414 2169 y FG(/)p FF(/)p 2154
2171 V 2425 2194 a FS(B)2576 2106 y FI(q)2629 2083 y
FE(A)2629 2133 y Fn(8)2661 2145 y FE(B)2775 2169 y FG(/)p
FF(/)p 2515 2171 V 2786 2194 a FS(A)f FT(_)h FS(B)0 2394
y FX(b)s(ecause)34 b(these)g(are)e(the)h(transp)s(oses)h(of)137
2648 y FS(A)22 b FT(^)346 2623 y FX(\026)321 2648 y FS(A)492
2572 y FQ(^)498 2587 y FK(\020)521 2598 y FE(A)665 2623
y FG(/)p FF(/)p 405 2625 V 676 2648 a FP(f)819 2598 y
FQ(\005)872 2575 y Fy(f)991 2623 y FG(/)p FF(/)p 731
2625 V 1002 2648 a FP(t)1143 2572 y FQ(\024)1149 2587
y FK(\020)1172 2598 y FE(B)1317 2623 y FG(/)p FF(/)p
1057 2625 V 1328 2648 a FS(B)27 b FT(_)1541 2623 y FX(\026)1517
2648 y FS(B)131 b Fl(4)126 b FS(A)22 b FT(^)2134 2623
y FX(\026)2108 2648 y FS(A)2227 2598 y FQ(\005)2280 2575
y FE(A)p FD(^)2383 2562 y Ft(\026)2368 2575 y FE(A)2452
2623 y FG(/)p FF(/)p 2193 2625 V 2463 2648 a FP(t)2604
2572 y FQ(\024)2610 2587 y FK(\020)2633 2598 y FE(B)2778
2623 y FG(/)p FF(/)p 2518 2625 V 2789 2648 a FS(B)27
b FT(_)3002 2623 y FX(\026)2979 2648 y FS(B)0 2848 y
FX(No)m(w)33 b(w)m(e)h(can)f(pro)s(ceed)g(as)g(follo)m(ws:)827
3047 y FS(f)g FX(+)22 b FS(g)87 b FX(=)d FT(r)1383 3062
y FR(B)1466 3047 y FT(\016)22 b FX(\()p FS(f)32 b FT(_)23
b FS(g)t FX(\))e FT(\016)h FK(mix)2072 3062 y FR(A;A)2223
3047 y FT(\016)g FX(\001)2376 3062 y FR(A)1139 3192 y
Fl(4)84 b FT(r)1383 3207 y FR(B)1466 3192 y FT(\016)22
b FX(\()p FS(f)32 b FT(_)23 b FS(g)t FX(\))e FT(\016)h(q)2002
3151 y FR(A)2002 3205 y Fn(8)2034 3217 y FR(A)2113 3192
y FT(\016)g FX(\005)2258 3151 y FR(A)2258 3205 y Fn(8)2290
3217 y FR(A)2369 3192 y FT(\016)g FX(\001)2522 3207 y
FR(A)1140 3338 y FX(=)84 b FT(r)1383 3353 y FR(B)1466
3338 y FT(\016)22 b FX(\()p FS(f)32 b FT(_)23 b FS(g)t
FX(\))e FT(\016)h(q)2002 3297 y FR(A)2002 3350 y Fn(8)2034
3362 y FR(A)2113 3338 y FT(\016)g FX(1)2234 3353 y FR(A)1140
3483 y FX(=)84 b FT(r)1383 3498 y FR(B)1466 3483 y FT(\016)22
b FX(\()p FS(f)32 b FT(_)23 b FS(B)5 b FX(\))22 b FT(\016)g
FX(\()p FS(A)g FT(_)h FS(g)t FX(\))e FT(\016)h FX(\()p
FS(A)g FT(_)h(q)2657 3442 y FR(A)2714 3483 y FX(\))f
FT(\016)31 b FX(\024)-58 b FS(\045)2896 3498 y FR(A)1140
3628 y FX(=)84 b FT(r)1383 3643 y FR(B)1466 3628 y FT(\016)22
b FX(\()p FS(f)32 b FT(_)23 b FS(B)5 b FX(\))22 b FT(\016)g
FX(\()p FS(A)g FT(_)h FS(g)i FT(\016)d(q)2397 3587 y
FR(A)2454 3628 y FX(\))g FT(\016)31 b FX(\024)-58 b FS(\045)2636
3643 y FR(A)1139 3774 y Fl(4)84 b FT(r)1383 3789 y FR(B)1466
3774 y FT(\016)22 b FX(\()p FS(f)32 b FT(_)23 b FS(B)5
b FX(\))22 b FT(\016)g FX(\()p FS(A)g FT(_)h(q)2253 3732
y FR(B)2313 3774 y FX(\))f FT(\016)31 b FX(\024)-58 b
FS(\045)2495 3789 y FR(A)1140 3919 y FX(=)84 b FT(r)1383
3934 y FR(B)1466 3919 y FT(\016)22 b(q)1613 3878 y FR(B)1613
3931 y Fn(8)1644 3943 y FR(B)1727 3919 y FT(\016)g FS(f)1140
4064 y FX(=)84 b FS(f)0 4264 y FX(Similarly)-8 b(,)28
b(w)m(e)g(get)e FS(f)19 b FX(+)9 b FS(g)31 b Fl(4)d FS(g)t
FX(.)41 b(No)m(w)26 b(w)m(e)i(sho)m(w)f(that)f FS(f)38
b Fl(4)28 b FS(f)20 b FX(+)9 b FS(f)36 b FX(for)26 b
FS(f)c FX(:)33 b FS(A)28 b FT(!)f FS(B)5 b FX(.)42 b(Let)3235
4237 y(^)3214 4264 y FS(f)22 b FX(:)33 b FS(A)9 b FT(^)3525
4238 y FX(\026)3501 4264 y FS(B)33 b FT(!)28 b FP(f)0
4384 y FX(b)s(e)33 b(the)g(transp)s(ose)g(of)f FS(f)11
b FX(.)43 b(Then)34 b(w)m(e)g(ha)m(v)m(e)1169 4557 y(^)1148
4583 y FS(f)94 b FX(=)84 b(1)1499 4598 y Fs(f)1558 4583
y FT(\016)1651 4557 y FX(^)1630 4583 y FS(f)1290 4729
y FX(=)g(\(1)1537 4744 y Fs(f)1596 4729 y FX(+)22 b(1)1743
4744 y Fs(f)1780 4729 y FX(\))g FT(\016)1933 4702 y FX(^)1912
4729 y FS(f)1290 4874 y FX(=)84 b FT(r)1533 4889 y Fs(f)1592
4874 y FT(\016)22 b FK(mix)1809 4889 y Fs(f)8 b FR(;)p
Fs(f)1920 4874 y FT(\016)22 b FX(\001)2073 4889 y Fs(f)2132
4874 y FT(\016)2226 4848 y FX(^)2204 4874 y FS(f)1290
5031 y Fl(4)83 b FT(r)1533 5046 y Fs(f)1592 5031 y FT(\016)22
b FK(mix)1809 5046 y Fs(f)8 b FR(;)p Fs(f)1920 5031 y
FT(\016)22 b FX(\()2051 5004 y(^)2030 5031 y FS(f)33
b FT(^)2221 5004 y FX(^)2200 5031 y FS(f)10 b FX(\))22
b FT(\016)g FX(\001)2471 5051 y FR(A)p FI(^)2588 5034
y FQ(\026)2571 5051 y FR(B)1290 5187 y FX(=)1471 5161
y(^)1450 5187 y FS(f)33 b FX(+)1650 5161 y(^)1629 5187
y FS(f)1290 5345 y FX(=)1453 5322 y Fi(\\)1450 5345 y
FS(f)g FX(+)22 b FS(f)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 565 30
TeXDict begin 565 29 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(565)p 0 TeXcolorgray
0 314 a(The)36 b(second)g(equation)g(is)g(Lemma)f(5.11,)g(the)h(third)f
(one)g(is)h(the)f(de\014nition)h(of)f(+,)g(the)h(fourth)f(one)0
434 y(is)30 b(\()p FK(LK-)p FX(\001)s(\),)g(the)g(\014fth)f(again)g
(the)h(de\014nition)g(of)e(+,)i(and)f(the)h(last)f(equation)h(uses)h
(Prop)s(osition)e(5.20.)0 555 y(By)44 b(transp)s(osing)f(bac)m(k,)48
b(w)m(e)c(get)f FS(f)57 b Fl(4)46 b FS(f)40 b FX(+)29
b FS(f)11 b FX(.)76 b(F)-8 b(rom)42 b(this)i(together)g(with)f
FS(f)e FX(+)29 b FS(f)56 b Fl(4)47 b FS(f)54 b FX(w)m(e)44
b(get)0 675 y(idemp)s(otency)-8 b(.)44 b(F)-8 b(or)29
b(sho)m(wing)i(that)f FS(f)39 b FT(\024)28 b FS(g)33
b FX(i\013)d FS(g)h Fl(4)d FS(f)11 b FX(,)30 b(w)m(e)h(need)g(to)e(sho)
m(w)i(that)f FS(g)h Fl(4)d FS(f)41 b FX(i\013)29 b FS(f)f
FX(+)16 b FS(g)31 b FX(=)d FS(g)t FX(.)0 796 y(Since)37
b FS(f)e FX(+)25 b FS(g)36 b Fl(4)e FS(f)11 b FX(,)37
b(w)m(e)g(ha)m(v)m(e)g(that)f FS(f)f FX(+)25 b FS(g)36
b FX(=)e FS(g)39 b FX(implies)f FS(g)e Fl(4)e FS(f)11
b FX(.)54 b(No)m(w)36 b(supp)s(ose)i FS(g)e Fl(4)e FS(f)11
b FX(.)54 b(Then)37 b(w)m(e)0 916 y(ha)m(v)m(e)32 b FS(g)f
FX(=)d FS(g)21 b FX(+)d FS(g)31 b Fl(4)d FS(f)h FX(+)18
b FS(g)t FX(.)42 b(This)32 b(\014nishes)h(the)e(pro)s(of)f(since)i
FS(f)d FX(+)18 b FS(g)31 b Fl(4)d FS(g)34 b FX(has)d(b)s(een)g(sho)m
(wn)h(already)-8 b(.)p 3738 916 42 42 v 146 1073 a(Note)43
b(that)g(the)h(con)m(v)m(erse)h(is)f(not)e(necessarily)k(true.)75
b(Not)43 b(ev)m(ery)i(single-mixed)g(idemp)s(oten)m(t)0
1194 y FK(B2)p FX(-category)32 b(is)h(an)f FK(LK)p FX(-category)-8
b(.)43 b(Nonetheless,)35 b(b)s(ecause)e(of)f(Prop)s(osition)h(5.12,)f
(in)g(ev)m(ery)i(single-)0 1314 y(mixed)g(idemp)s(oten)m(t)g
FK(B2)o FX(-category)e(w)m(e)i(ha)m(v)m(e)g(for)e(ev)m(ery)i
FS(f)22 b FX(:)33 b FS(A)28 b FT(!)f FS(B)38 b FX(that)32
b(\005)2872 1278 y FR(B)2955 1314 y FT(\016)22 b FS(f)32
b FX(+)22 b(\005)3278 1278 y FR(A)3363 1314 y FX(=)28
b(\005)3540 1278 y FR(B)3622 1314 y FT(\016)22 b FS(f)11
b FX(,)0 1434 y(and)37 b(hence)h(\005)542 1398 y FR(A)633
1434 y FT(\024)d FX(\005)818 1398 y FR(B)904 1434 y FT(\016)24
b FS(f)47 b FX(whic)m(h)38 b(is)f(exactly)j(\()p FK(LK-)p
FX(\005)s(\).)56 b(Ho)m(w)m(ev)m(er,)40 b(the)d(inequalit)m(y)i(\()p
FK(LK-)p FX(\001)t(\))d(do)s(es)0 1555 y(not)f(follo)m(w)g(from)g
(idemp)s(otency)-8 b(.)52 b(One)35 b(can)g(easily)i(construct)f(coun)m
(termo)s(dels)g(along)f(the)g(lines)h(of)0 1675 y([Str05])c(\(see)i
(also)f(Section)g(9\).)0 1989 y FY(7.)38 b(The)h(medial)e(map)h(and)h
(the)f(n)m(ullary)f(medial)g(map)0 2185 y FX(That)k FK(LK)o
FX(-categories)g(are)f(idemp)s(oten)m(t)i(means)f(that)g(they)g(are)f
(already)h(at)f(the)h(degenerate)g(end)0 2305 y(of)i(the)h(sp)s(ectrum)
h(of)e(Bo)s(olean)h(categories.)77 b(On)44 b(the)g(other)f(hand,)k
FK(B2)p FX(-categories)d(ha)m(v)m(e)g(\(apart)0 2426
y(from)33 b(Theorem)i(5.18\))e(v)m(ery)i(little)f(structure.)48
b(The)35 b(question)g(that)f(arises)g(no)m(w)h(is)f(therefore,)g(ho)m
(w)0 2546 y(w)m(e)k(can)f(add)g(additional)f(structure)i(to)f
FK(B2)o FX(-categories)g(without)h(getting)e(to)s(o)g(m)m(uc)m(h)j
(collapse.)57 b(In)0 2666 y(particular,)28 b(can)f(w)m(e)g(extend)h
(the)f(structure)g(suc)m(h)h(that)e(all)g(the)h(maps)g(men)m(tioned)h
(in)f(Theorem)h(5.18)0 2787 y(b)s(ecome)36 b FT(_)p FX(-monoid)g
(morphisms)h FU(and)45 b FT(^)p FX(-comonoid)36 b(morphisms?)54
b(This)37 b(is)f(where)g(medial)g(en)m(ters)0 2907 y(the)d(scene.)0
3085 y FJ(7.1.)44 b(Definition.)34 b FU(We)41 b(say,)g(a)g
FK(B2)o FU(-c)-5 b(ate)g(gory)41 b FC(C)57 b FX(has)40
b(medial)h FU(if)f(for)h(al)5 b(l)40 b(obje)-5 b(cts)40
b FS(A)p FU(,)i FS(B)5 b FU(,)42 b FS(C)7 b FU(,)42 b(and)0
3206 y FS(D)e FU(ther)-5 b(e)37 b(is)g(a)g(map)f FK(m)853
3221 y FR(A;B)s(;C)q(;D)1148 3206 y FX(:)e(\()p FS(A)24
b FT(^)g FS(B)5 b FX(\))24 b FT(_)g FX(\()p FS(C)31 b
FT(^)24 b FS(D)s FX(\))32 b FT(!)f FX(\()p FS(A)24 b
FT(_)g FS(C)7 b FX(\))24 b FT(^)g FX(\()p FS(B)29 b FT(_)24
b FS(D)s FX(\))37 b FU(with)g(the)g(fol)5 b(lowing)0
3326 y(pr)-5 b(op)g(erties:)p 0 TeXcolorgray 145 3491
a FT(\017)p 0 TeXcolorgray 49 w FU(it)35 b(is)g(natur)-5
b(al)35 b(in)f FS(A)p FU(,)h FS(B)5 b FU(,)35 b FS(C)42
b FU(and)34 b FS(D)s FU(,)p 0 TeXcolorgray 145 3681 a
FT(\017)p 0 TeXcolorgray 49 w FU(it)h(is)g(self-dual,)f(i.e.,)p
995 3826 797 4 v 995 3913 a FX(\()p FS(A)22 b FT(_)h
FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k FT(_)22 b FS(D)s
FX(\))p 1858 3794 308 3 v 1858 3832 a FH(m)1914 3843
y FE(A;B)r(;C;D)2207 3878 y FG(/)p FF(/)p 1817 3880 391
4 v 2232 3826 797 4 v 2232 3913 a FX(\()p FS(A)g FT(^)h
FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))2655 4072 y FI(\030)2655 4093 y FQ(=)2630
4177 y FG(\017)p FF(\017)p 2629 4177 4 215 v 995 4284
a FX(\()1056 4258 y(\026)1033 4284 y FS(D)i FT(^)1251
4258 y FX(\026)1228 4284 y FS(B)5 b FX(\))22 b FT(_)g
FX(\()1515 4258 y(\026)1493 4284 y FS(C)29 b FT(^)1707
4258 y FX(\026)1681 4284 y FS(A)p FX(\))1394 4177 y FG(\017)p
FF(\017)1314 4072 y FI(\030)1314 4093 y FQ(=)p 1392 4177
V 2232 4284 a FX(\()2293 4258 y(\026)2270 4284 y FS(D)c
FT(_)2486 4258 y FX(\026)2464 4284 y FS(C)7 b FX(\))22
b FT(^)h FX(\()2751 4258 y(\026)2728 4284 y FS(B)k FT(_)2943
4258 y FX(\026)2918 4284 y FS(A)p FX(\))2207 4255 y FG(/)p
FF(/)1857 4310 y FH(m)1927 4316 y Ft(\026)1913 4329 y
FE(D)1964 4328 y(;)1997 4315 y Ft(\026)1983 4328 y FE(B)s(;)2064
4315 y Ft(\026)2051 4328 y FE(C)s(;)2133 4315 y Ft(\026)2117
4328 y FE(A)p 1817 4257 391 4 v 3607 4088 a FX(\(39\))244
4495 y FU(c)-5 b(ommutes,)33 b(wher)-5 b(e)33 b(the)h(vertic)-5
b(al)33 b(maps)g(ar)-5 b(e)34 b(the)g(c)-5 b(anonic)g(al)32
b(isomorphisms)g(induc)-5 b(e)g(d)33 b(by)h(Def-)244
4615 y(inition)g(3.2,)p 0 TeXcolorgray 145 4806 a FT(\017)p
0 TeXcolorgray 49 w FU(and)g(it)h(ob)-5 b(eys)35 b(the)g(e)-5
b(quation)1880 4980 y FS(A)23 b FT(_)f FS(B)1424 5077
y FQ(\001)1483 5088 y FE(A)1533 5077 y FI(_)p FQ(\001)1639
5088 y FE(B)1407 5220 y FG(v)p FF(v)1407 5219 y Fz(m)1443
5203 y(m)1480 5186 y(m)1516 5170 y(m)1552 5154 y(m)1589
5137 y(m)1625 5121 y(m)1661 5104 y(m)1698 5088 y(m)1734
5071 y(m)1771 5055 y(m)1807 5038 y(m)1843 5022 y(m)847
5319 y FX(\()p FS(A)g FT(^)h FS(A)p FX(\))f FT(_)h FX(\()p
FS(B)k FT(^)22 b FS(B)5 b FX(\))1859 5349 y FH(m)1915
5360 y FE(A;A;B)r(;B)2363 5295 y FG(/)p FF(/)p 1660 5296
703 4 v 2388 5319 a FX(\()p FS(A)23 b FT(_)f FS(B)5 b
FX(\))22 b FT(^)h FX(\()p FS(A)f FT(_)h FS(B)5 b FX(\))2617
5220 y FG(\()p FF(\()2336 5077 y FQ(\001)2395 5088 y
FE(A)p FD(_)p FE(B)2142 5006 y Fz(Q)2179 5022 y(Q)2215
5039 y(Q)2252 5055 y(Q)2288 5072 y(Q)2324 5088 y(Q)2361
5105 y(Q)2397 5121 y(Q)2434 5137 y(Q)2470 5154 y(Q)2506
5170 y(Q)2543 5187 y(Q)2579 5203 y(Q)3547 5166 y FX(\()p
FK(B3c\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 566 31
TeXDict begin 566 30 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(566)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 244 314 a FU(for)35 b(al)5 b(l)34 b(obje)-5
b(cts)34 b FS(A)h FU(and)g FS(B)5 b FU(.)146 507 y FX(The)34
b(follo)m(wing)f(equation)g(is)g(a)f(consequence)k(of)j(\()p
FK(B3c)p FX(\))32 b(and)h(the)g(self-dualit)m(y)h(of)e(medial.)725
753 y(\()p FS(A)22 b FT(^)h FS(B)5 b FX(\))22 b FT(_)h
FX(\()p FS(A)f FT(^)h FS(B)5 b FX(\))1737 682 y FH(m)1793
693 y FE(A;B)r(;A;B)2241 728 y FG(/)p FF(/)p 1539 730
703 4 v 2266 753 a FX(\()p FS(A)23 b FT(_)f FS(A)p FX(\))g
FT(^)h FX(\()p FS(B)k FT(_)c FS(B)5 b FX(\))2224 980
y FI(r)2283 991 y FE(A)2333 980 y FI(^r)2439 991 y FE(B)2020
1017 y FG(v)p FF(v)2020 1016 y Fz(m)2057 1000 y(m)2093
983 y(m)2130 967 y(m)2166 951 y(m)2202 934 y(m)2239 918
y(m)2275 901 y(m)2312 885 y(m)2348 868 y(m)2384 852 y(m)2421
835 y(m)2457 819 y(m)1759 1110 y FS(A)22 b FT(^)g FS(B)1760
1017 y FG(\()p FF(\()1375 980 y FI(r)1434 991 y FE(A)p
FD(^)p FE(B)1285 803 y Fz(Q)1321 819 y(Q)1358 836 y(Q)1394
852 y(Q)1430 869 y(Q)1467 885 y(Q)1503 902 y(Q)1540 918
y(Q)1576 934 y(Q)1612 951 y(Q)1649 967 y(Q)1685 984 y(Q)1722
1000 y(Q)3524 906 y FX(\()p FK(B3c)3719 870 y FI(0)3742
906 y FX(\))0 1300 y FJ(7.2.)37 b(Theorem.)30 b FU(L)-5
b(et)36 b FC(C)52 b FU(b)-5 b(e)34 b(a)h FK(B2)o FU(-c)-5
b(ate)g(gory)35 b(that)g(has)g(me)-5 b(dial.)43 b(Then)p
0 TeXcolorgray 79 1493 a FX(\(i\))p 0 TeXcolorgray 48
w FU(The)c(maps)f(that)i(pr)-5 b(eserve)38 b(the)i FT(^)p
FU(-c)-5 b(omultiplic)g(ation)38 b(ar)-5 b(e)39 b(close)-5
b(d)38 b(under)h FT(_)p FU(,)i(and)e(dual)5 b(ly,)40
b(the)230 1613 y(maps)34 b(that)i(pr)-5 b(eserve)34 b(the)h
FT(_)p FU(-multiplic)-5 b(ation)34 b(ar)-5 b(e)35 b(close)-5
b(d)34 b(under)g FT(^)p FU(.)p 0 TeXcolorgray 51 1837
a FX(\(ii\))p 0 TeXcolorgray 49 w FU(F)-7 b(or)34 b(al)5
b(l)35 b(maps)f FS(A)936 1777 y FR(f)907 1837 y FT(!)27
b FS(C)7 b FU(,)35 b FS(A)1308 1777 y FR(g)1276 1837
y FT(!)28 b FS(D)s FU(,)34 b FS(B)1688 1781 y FR(h)1659
1837 y FT(!)27 b FS(C)7 b FU(,)35 b(and)f FS(B)2255 1781
y FR(k)2224 1837 y FT(!)27 b FS(D)s FU(,)35 b(we)f(have)g(that)1017
2045 y FX([)p FT(h)p FS(f)5 b(;)17 b(g)t FT(i)p FS(;)g
FT(h)p FS(h;)g(k)s FT(i)p FX(])26 b(=)h FT(h)p FX([)p
FS(f)5 b(;)17 b(h)p FX(])p FS(;)g FX([)p FS(g)t(;)g(k)s
FX(])p FT(i)11 b FX(:)32 b FS(A)23 b FT(_)f FS(B)33 b
FT(!)27 b FS(C)i FT(^)23 b FS(D)100 b FX(.)p 0 TeXcolorgray
24 2292 a(\(iii\))p 0 TeXcolorgray 49 w FU(F)-7 b(or)34
b(al)5 b(l)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5
b FU(,)35 b FS(C)7 b FU(,)35 b(and)f FS(D)s FU(,)584
2500 y FK(m)661 2515 y FR(A;B)s(;C)q(;D)1028 2500 y FX(=)1187
2419 y Fh(\002)16 b(\012)1309 2500 y FT(q)1384 2459 y
FR(C)1384 2525 y(A)1437 2513 y Fn(8)1494 2500 y FT(\016)22
b FX(\005)1639 2459 y FR(B)1639 2525 y(A)1692 2513 y
Fn(8)1728 2500 y FS(;)17 b FT(q)1847 2459 y FR(D)1847
2525 y(B)1903 2513 y Fn(8)1961 2500 y FT(\016)22 b FX(\005)2106
2459 y FR(A)2106 2513 y Fn(8)2138 2525 y FR(B)2215 2419
y Fh(\013)2279 2500 y FS(;)2323 2419 y Fh(\012)2386 2500
y FT(q)2461 2459 y FR(A)2461 2513 y Fn(8)2493 2525 y
FR(C)2574 2500 y FT(\016)g FX(\005)2719 2459 y FR(D)2719
2525 y(C)2774 2513 y Fn(8)2810 2500 y FS(;)17 b FT(q)2929
2459 y FR(B)2929 2513 y Fn(8)2960 2525 y FR(D)3047 2500
y FT(\016)22 b FX(\005)3192 2459 y FR(C)3192 2513 y Fn(8)3223
2525 y FR(D)3304 2419 y Fh(\013)17 b(\003)1028 2678 y
FX(=)1187 2598 y Fh(\012)f(\002)1309 2678 y FT(q)1384
2637 y FR(C)1384 2703 y(A)1437 2691 y Fn(8)1494 2678
y FT(\016)22 b FX(\005)1639 2637 y FR(B)1639 2703 y(A)1692
2691 y Fn(8)1728 2678 y FS(;)17 b FT(q)1847 2637 y FR(A)1847
2691 y Fn(8)1878 2703 y FR(C)1960 2678 y FT(\016)22 b
FX(\005)2105 2637 y FR(D)2105 2703 y(C)2160 2691 y Fn(8)2212
2598 y Fh(\003)2270 2678 y FS(;)2314 2598 y Fh(\002)2372
2678 y FT(q)2447 2637 y FR(D)2447 2703 y(B)2503 2691
y Fn(8)2562 2678 y FT(\016)g FX(\005)2707 2637 y FR(A)2707
2691 y Fn(8)2738 2703 y FR(B)2799 2678 y FS(;)17 b FT(q)2918
2637 y FR(B)2918 2691 y Fn(8)2949 2703 y FR(D)3036 2678
y FT(\016)k FX(\005)3180 2637 y FR(C)3180 2691 y Fn(8)3212
2703 y FR(D)3293 2598 y Fh(\003)16 b(\013)p 0 TeXcolorgray
27 2926 a FX(\(iv\))p 0 TeXcolorgray 49 w FU(F)-7 b(or)34
b(al)5 b(l)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5
b FU(,)35 b FS(C)7 b FU(,)35 b(and)f FS(D)s FU(,)g(the)h(fol)5
b(lowing)34 b(diagr)-5 b(am)33 b(c)-5 b(ommutes:)990
3146 y FX(\(\()p FS(A)23 b FT(^)f FS(B)5 b FX(\))22 b
FT(_)h FX(\()p FS(C)29 b FT(^)23 b FS(D)s FX(\)\))e FT(^)i
FX(\(\()p FS(A)f FT(^)g FS(B)5 b FX(\))23 b FT(_)f FX(\()p
FS(C)29 b FT(^)23 b FS(D)s FX(\)\))2563 3292 y FQ(\(\005)2643
3268 y FE(B)2643 3330 y(A)2689 3318 y Fn(8)2725 3292
y FI(_)p FQ(\005)2825 3268 y FE(D)2825 3330 y(C)2872
3318 y Fn(8)2909 3292 y FQ(\))p FI(^)p FQ(\(\005)3063
3268 y FE(A)3063 3318 y Fn(8)3095 3330 y FE(B)3148 3292
y FI(_)p FQ(\005)3248 3268 y FE(C)3248 3318 y Fn(8)3280
3330 y FE(D)3335 3292 y FQ(\))2822 3410 y FG(*)p FF(*)2783
3397 y Fz(U)2743 3385 y(U)2704 3372 y(U)2664 3360 y(U)2625
3347 y(U)2586 3334 y(U)2546 3322 y(U)2507 3309 y(U)2467
3297 y(U)2428 3284 y(U)2388 3271 y(U)2349 3259 y(U)2310
3246 y(U)2270 3233 y(U)2231 3221 y(U)2191 3208 y(U)2152
3196 y(U)383 3510 y FX(\()p FS(A)f FT(^)h FS(B)5 b FX(\))22
b FT(_)g FX(\()p FS(C)29 b FT(^)23 b FS(D)s FX(\))829
3292 y FQ(\001)888 3306 y Ft(\()p FE(A)p FD(^)p FE(B)r
Ft(\))p FD(_)p Ft(\()p FE(C)s FD(^)p FE(D)r Ft(\))1685
3196 y FG(4)p FF(4)1645 3208 y Fz(i)1606 3221 y(i)1567
3234 y(i)1527 3246 y(i)1488 3259 y(i)1448 3271 y(i)1409
3284 y(i)1369 3297 y(i)1330 3309 y(i)1291 3322 y(i)1251
3334 y(i)1212 3347 y(i)1172 3360 y(i)1133 3372 y(i)1094
3385 y(i)1054 3397 y(i)1015 3410 y(i)2657 3510 y FX(\()p
FS(A)g FT(_)f FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k
FT(_)22 b FS(D)s FX(\))2822 3560 y FG(4)p FF(4)2531 3726
y FI(r)2590 3740 y Ft(\()p FE(A)p FD(_)p FE(C)s Ft(\))p
FD(^)p Ft(\()p FE(B)r FD(_)p FE(D)r Ft(\))2152 3774 y
Fz(i)2191 3761 y(i)2231 3748 y(i)2270 3736 y(i)2310 3723
y(i)2349 3711 y(i)2388 3698 y(i)2428 3685 y(i)2467 3673
y(i)2507 3660 y(i)2546 3648 y(i)2586 3635 y(i)2625 3622
y(i)2664 3610 y(i)2704 3597 y(i)2743 3585 y(i)2783 3572
y(i)990 3874 y FX(\(\()p FS(A)h FT(_)f FS(C)7 b FX(\))22
b FT(^)h FX(\()p FS(B)k FT(_)c FS(D)s FX(\)\))e FT(_)i
FX(\(\()p FS(A)f FT(_)g FS(C)7 b FX(\))23 b FT(^)f FX(\()p
FS(B)27 b FT(_)c FS(D)s FX(\)\))1685 3774 y FG(*)p FF(*)474
3726 y FQ(\()p FI(q)554 3703 y FE(C)554 3764 y(A)600
3752 y Fn(8)636 3726 y FI(^q)736 3703 y FE(D)736 3764
y(B)784 3752 y Fn(8)821 3726 y FQ(\))p FI(_)p FQ(\()p
FI(q)975 3703 y FE(A)975 3752 y Fn(8)1007 3764 y FE(C)1059
3726 y FI(^q)1159 3703 y FE(B)1159 3752 y Fn(8)1191 3764
y FE(D)1246 3726 y FQ(\))1015 3560 y Fz(U)1054 3572 y(U)1093
3585 y(U)1133 3598 y(U)1172 3610 y(U)1212 3623 y(U)1251
3636 y(U)1291 3648 y(U)1330 3661 y(U)1369 3673 y(U)1409
3686 y(U)1448 3699 y(U)1488 3711 y(U)1527 3724 y(U)1567
3736 y(U)1606 3749 y(U)1645 3762 y(U)3607 3510 y FX(\(40\))p
0 TeXcolorgray 54 4134 a(\(v\))p 0 TeXcolorgray 49 w
FU(The)35 b(horizontal)f(diagonal)f(of)56 b FX(\(40\))34
b FU(is)h(e)-5 b(qual)34 b(to)h FK(m)2164 4149 y FR(A;B)s(;C)q(;D)2448
4134 y FU(.)0 4319 y FJ(Pr)n(oof.)30 b FX(F)-8 b(or)32
b(\(i\))o(,)h(c)m(hase)h(the)f(follo)m(wing)g(\(compare)g(with)g(the)g
(pro)s(of)f(of)g(Prop)s(osition)h(5.15)f(\(iii\)\))310
4573 y Fr(A)20 b Fq(_)g Fr(B)1822 4504 y FR(f)7 b FI(_)p
FR(g)3191 4542 y FG(/)p FF(/)p 578 4544 2614 4 v 3216
4573 a Fr(C)27 b Fq(_)19 b Fr(D)3366 4920 y FQ(\001)3425
4931 y FE(C)s FD(_)p FE(D)3341 5208 y FG(\017)p FF(\017)p
3339 5208 4 611 v 936 4926 a Fp(\()p Fr(A)i Fq(^)e Fr(A)p
Fp(\))i Fq(_)f Fp(\()p Fr(B)25 b Fq(^)20 b Fr(B)5 b Fp(\))1672
4844 y FQ(\()p FR(f)i FI(^)p FR(f)g FQ(\))p FI(_)p FQ(\()p
FR(g)r FI(^)p FR(g)r FQ(\))2061 4903 y FG(/)p FF(/)p
1689 4905 373 4 v 1131 4833 a FG(\()p FF(\()808 4679
y FQ(\001)867 4690 y FE(A)917 4679 y FI(_)p FQ(\001)1023
4690 y FE(B)566 4598 y Fz(R)603 4614 y(R)641 4629 y(R)679
4645 y(R)716 4661 y(R)754 4676 y(R)791 4692 y(R)829 4708
y(R)867 4723 y(R)904 4739 y(R)942 4754 y(R)979 4770 y(R)1017
4786 y(R)1055 4801 y(R)1092 4817 y(R)845 5145 y FH(m)901
5156 y FE(A;A;B)r(;B)594 5208 y FG(v)p FF(v)p Fz(m)630
5193 y(m)666 5177 y(m)702 5162 y(m)738 5146 y(m)774 5130
y(m)810 5115 y(m)847 5099 y(m)883 5084 y(m)919 5068 y(m)955
5052 y(m)991 5037 y(m)1027 5021 y(m)1063 5006 y(m)1099
4990 y(m)2086 4926 y Fp(\()p Fr(C)27 b Fq(^)20 b Fr(C)7
b Fp(\))20 b Fq(_)g Fp(\()p Fr(D)j Fq(^)d Fr(D)s Fp(\))2627
5145 y FH(m)2683 5156 y FE(C;C;D)r(;D)3176 5208 y FG(\()p
FF(\()3138 5192 y Fz(Q)3101 5176 y(Q)3064 5161 y(Q)3027
5145 y(Q)2991 5129 y(Q)2954 5114 y(Q)2917 5098 y(Q)2880
5083 y(Q)2844 5067 y(Q)2807 5051 y(Q)2770 5036 y(Q)2733
5020 y(Q)2696 5005 y(Q)2660 4989 y(Q)2623 4973 y(Q)2630
4833 y FG(v)p FF(v)2674 4679 y FQ(\001)2733 4690 y FE(C)2784
4679 y FI(_)p FQ(\001)2890 4690 y FE(D)3166 4613 y Fz(l)3127
4629 y(l)3089 4645 y(l)3051 4660 y(l)3013 4676 y(l)2974
4692 y(l)2936 4707 y(l)2898 4723 y(l)2859 4739 y(l)2821
4754 y(l)2783 4770 y(l)2744 4786 y(l)2706 4801 y(l)2668
4817 y(l)2630 4833 y(l)67 5301 y Fp(\()p Fr(A)h Fq(_)f
Fr(B)5 b Fp(\))20 b Fq(^)g Fp(\()p Fr(A)h Fq(_)e Fr(B)5
b Fp(\))431 5208 y FG(\017)p FF(\017)207 4920 y FQ(\001)266
4931 y FE(A)p FD(_)p FE(B)p 430 5208 4 611 v 2970 5301
a Fp(\()p Fr(C)27 b Fq(_)19 b Fr(D)s Fp(\))i Fq(^)f Fp(\()p
Fr(C)27 b Fq(_)19 b Fr(D)s Fp(\))2945 5278 y FG(/)p FF(/)1680
5353 y FQ(\()p FR(f)7 b FI(_)p FR(g)r FQ(\))p FI(^)p
FQ(\()p FR(f)g FI(_)p FR(g)r FQ(\))p 820 5280 2125 4
v 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 567 32
TeXDict begin 567 31 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(567)p 0 TeXcolorgray
0 320 a(F)-8 b(or)32 b(\(ii\))g(c)m(hase)i(the)f(diagram)263
591 y Fr(A)20 b Fq(_)g Fr(B)1706 519 y FQ([)p FI(h)p
FR(f)s(;g)r FI(i)p FR(;)p FI(h)p FR(h;k)r FI(i)p FQ(])3242
560 y FG(/)p FF(/)p 531 562 2712 4 v 1151 861 a FI(h)p
FR(f)s(;g)r FI(i_h)p FR(h;k)r FI(i)2258 979 y FG(+)p
FF(+)2217 970 y Fz(X)2177 961 y(X)2137 952 y(X)2097 943
y(X)2057 934 y(X)2017 925 y(X)1977 916 y(X)1936 907 y(X)1896
898 y(X)1856 889 y(X)1816 880 y(X)1776 871 y(X)1736 862
y(X)1695 853 y(X)1655 844 y(X)1615 835 y(X)1575 827 y(X)1535
818 y(X)1495 809 y(X)1454 800 y(X)1414 791 y(X)1374 782
y(X)1334 773 y(X)1294 764 y(X)1254 755 y(X)1213 746 y(X)1173
737 y(X)1133 728 y(X)1093 719 y(X)1053 710 y(X)1013 701
y(X)972 692 y(X)932 683 y(X)892 674 y(X)852 665 y(X)812
656 y(X)772 647 y(X)731 638 y(X)691 629 y(X)651 620 y(X)611
611 y(X)571 602 y(X)531 593 y(X)p 391 1277 4 661 v 374
1277 V 3267 591 a Fr(C)26 b Fq(^)20 b Fr(D)p 3398 1277
V 3382 1277 V 828 1072 a Fp(\()p Fr(A)h Fq(^)f Fr(A)p
Fp(\))h Fq(_)e Fp(\()p Fr(B)25 b Fq(^)20 b Fr(B)5 b Fp(\))1675
1124 y FQ(\()p FR(f)i FI(^)p FR(g)r FQ(\))p FI(_)p FQ(\()p
FR(h)p FI(^)p FR(k)r FQ(\))2176 1050 y FG(/)p FF(/)p
1581 1051 596 4 v 861 1337 a FH(m)917 1348 y FE(A;A;B)r(;B)1192
1545 y FG(\017)p FF(\017)p 1191 1545 4 426 v 2201 1072
a Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\))g Fq(_)g Fp(\()p
Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\))2951 1164 y FI(r)3010
1175 y FE(C)s FD(^)p FE(D)3242 1281 y FG(\))p FF(\))3203
1267 y Fz(T)3164 1254 y(T)3125 1240 y(T)3086 1227 y(T)3048
1214 y(T)3009 1200 y(T)2970 1187 y(T)2931 1174 y(T)2893
1160 y(T)2854 1147 y(T)2815 1133 y(T)2776 1120 y(T)2598
1337 y FH(m)2654 1348 y FE(C;D)r(;C;D)2573 1545 y FG(\017)p
FF(\017)p 2571 1545 V 263 1364 a Fr(A)g Fq(_)g Fr(B)571
1165 y FQ(\001)630 1176 y FE(A)680 1165 y FI(_)p FQ(\001)786
1176 y FE(B)991 1120 y FG(5)p FF(5)952 1134 y Fz(j)914
1147 y(j)875 1161 y(j)837 1174 y(j)799 1187 y(j)760 1201
y(j)722 1214 y(j)684 1228 y(j)646 1241 y(j)607 1254 y(j)569
1268 y(j)531 1281 y(j)618 1535 y FQ(\001)677 1546 y FE(A)p
FD(_)p FE(B)991 1545 y FG(\))p FF(\))952 1531 y Fz(T)914
1518 y(T)875 1504 y(T)837 1491 y(T)799 1478 y(T)761 1464
y(T)722 1451 y(T)684 1437 y(T)646 1424 y(T)607 1411 y(T)569
1397 y(T)531 1384 y(T)p 391 2049 4 661 v 374 2049 V 3267
1364 a Fr(C)26 b Fq(^)20 b Fr(D)p 3398 2049 V 3382 2049
V 828 1638 a Fp(\()p Fr(A)h Fq(_)f Fr(B)5 b Fp(\))20
b Fq(^)g Fp(\()p Fr(A)g Fq(_)g Fr(B)5 b Fp(\))1675 1574
y FQ(\()p FR(f)i FI(_)p FR(h)p FQ(\))p FI(^)p FQ(\()p
FR(g)r FI(_)p FR(k)r FQ(\))2176 1615 y FG(/)p FF(/)p
1581 1617 596 4 v 2201 1638 a Fp(\()p Fr(C)27 b Fq(_)20
b Fr(C)7 b Fp(\))20 b Fq(^)g Fp(\()p Fr(D)j Fq(_)d Fr(D)s
Fp(\))2942 1535 y FI(r)3001 1546 y FE(C)3052 1535 y FI(^r)3158
1546 y FE(D)3242 1384 y FG(5)p FF(5)3203 1398 y Fz(j)3164
1411 y(j)3125 1425 y(j)3086 1438 y(j)3048 1451 y(j)3009
1465 y(j)2970 1478 y(j)2931 1492 y(j)2893 1505 y(j)2854
1518 y(j)2815 1532 y(j)2776 1545 y(j)263 2136 y Fr(A)g
Fq(_)g Fr(B)1714 2179 y FI(h)p FQ([)p FR(f)s(;h)p FQ(])p
FR(;)p FQ([)p FR(g)r(;k)r FQ(])p FI(i)3242 2105 y FG(/)p
FF(/)p 531 2106 2712 4 v 3267 2136 a Fr(C)26 b Fq(^)20
b Fr(D)3242 2071 y FG(+)p FF(+)2281 1837 y FQ([)p FR(f)s(;h)p
FQ(])p FI(^)p FQ([)p FR(g)r(;k)r FQ(])1508 1686 y Fz(X)1549
1695 y(X)1589 1704 y(X)1629 1713 y(X)1670 1722 y(X)1710
1731 y(X)1750 1740 y(X)1791 1749 y(X)1831 1758 y(X)1871
1767 y(X)1912 1776 y(X)1952 1785 y(X)1992 1794 y(X)2032
1803 y(X)2073 1812 y(X)2113 1820 y(X)2153 1829 y(X)2194
1838 y(X)2234 1847 y(X)2274 1856 y(X)2315 1865 y(X)2355
1874 y(X)2395 1883 y(X)2435 1892 y(X)2476 1901 y(X)2516
1910 y(X)2556 1919 y(X)2597 1928 y(X)2637 1937 y(X)2677
1946 y(X)2718 1955 y(X)2758 1964 y(X)2798 1973 y(X)2839
1982 y(X)2879 1991 y(X)2919 2000 y(X)2959 2009 y(X)3000
2018 y(X)3040 2027 y(X)3080 2036 y(X)3121 2045 y(X)3161
2054 y(X)3201 2063 y(X)0 2395 y FX(where)37 b(the)f(square)h(in)f(the)g
(cen)m(ter)h(is)f(naturalit)m(y)g(of)f(medial,)j(the)e(t)m(w)m(o)g
(small)g(triangles)h(are)e(\()p FK(B3c)p FX(\))0 2508
y(and)f(\()p FK(B3c)386 2472 y FI(0)409 2508 y FX(\).)49
b(The)35 b(big)f(triangles)h(are)f(just)h(\(26\))o(.)49
b(Note)34 b(the)h(imp)s(ortance)g(of)f(naturalit)m(y)g(of)g(medial)0
2621 y(in)f(the)g(t)m(w)m(o)g(diagrams)g(ab)s(o)m(v)m(e.)44
b(Let)33 b(us)g(no)m(w)g(con)m(tin)m(ue)i(with)e(\(iv\))g(and)f(\(v\))q
(,)g(whic)m(h)j(are)d(pro)m(v)m(ed)i(b)m(y)433 2891 y
Fp(\()p Fr(A)21 b Fq(^)e Fr(B)5 b Fp(\))21 b Fq(_)e Fp(\()p
Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\))1339 2816 y FQ(\001)1398
2830 y Ft(\()p FE(A)p FD(^)p FE(B)r Ft(\))p FD(_)p Ft(\()p
FE(C)s FD(^)p FE(D)r Ft(\))1962 2868 y FG(/)p FF(/)p
1193 2869 770 4 v 917 3165 a FQ(\001)976 3176 y FE(A)p
FD(^)p FE(B)1116 3165 y FI(_)p FQ(\001)1222 3176 y FE(C)s
FD(^)p FE(D)1604 3251 y FG(')p FF(')1567 3233 y Fz(P)1530
3216 y(P)1494 3199 y(P)1457 3181 y(P)1421 3164 y(P)1385
3147 y(P)1348 3129 y(P)1312 3112 y(P)1275 3094 y(P)1239
3077 y(P)1203 3060 y(P)1166 3042 y(P)1130 3025 y(P)1093
3008 y(P)1057 2990 y(P)1021 2973 y(P)984 2956 y(P)948
2938 y(P)80 3338 y FQ(\(\001)166 3349 y FE(A)216 3338
y FI(^)p FQ(\001)322 3349 y FE(B)375 3338 y FQ(\))p FI(_)p
FQ(\(\001)535 3349 y FE(C)587 3338 y FI(^)p FQ(\001)693
3349 y FE(D)748 3338 y FQ(\))801 3705 y FG(\017)p FF(\017)p
799 3705 4 767 v 1987 2891 a Fp(\(\()p Fr(A)h Fq(^)f
Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20
b Fr(D)s Fp(\)\))h Fq(^)e Fp(\(\()p Fr(A)i Fq(^)f Fr(B)5
b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s
Fp(\)\))2869 3331 y FQ(\(\005)2949 3308 y FE(B)2949 3370
y(A)2995 3358 y Fn(8)3031 3331 y FI(_)p FQ(\005)3131
3308 y FE(D)3131 3370 y(C)3178 3358 y Fn(8)3214 3331
y FQ(\))p FI(^)p FQ(\(\005)3368 3308 y FE(A)3368 3358
y Fn(8)3401 3370 y FE(B)3454 3331 y FI(_)p FQ(\005)3554
3308 y FE(C)3554 3358 y Fn(8)3585 3370 y FE(D)3641 3331
y FQ(\))2844 3705 y FG(\017)p FF(\017)p 2842 3705 V 1036
3344 a Fp(\()p Fr(A)h Fq(^)f Fr(B)25 b Fq(^)19 b Fr(A)i
Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)f Fp(\()p Fr(C)27 b Fq(^)20
b Fr(D)j Fq(^)d Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\))2290
3149 y FH(m)2674 2938 y FG(6)p FF(6)2636 2954 y Fz(l)2598
2970 y(l)2561 2985 y(l)2523 3001 y(l)2485 3017 y(l)2448
3032 y(l)2410 3048 y(l)2373 3064 y(l)2335 3079 y(l)2297
3095 y(l)2260 3111 y(l)2222 3126 y(l)2184 3142 y(l)2147
3157 y(l)2109 3173 y(l)2071 3189 y(l)2034 3204 y(l)1996
3220 y(l)1959 3236 y(l)1921 3251 y(l)1776 3615 y FQ(\(\005)1856
3592 y FE(B)1856 3654 y(A)1902 3642 y Fn(8)1939 3615
y FI(^)p FQ(\005)2039 3592 y FE(A)2039 3642 y Fn(8)2070
3654 y FE(B)2123 3615 y FQ(\))p FI(_)p FQ(\(\005)2277
3592 y FE(D)2277 3654 y(C)2324 3642 y Fn(8)2361 3615
y FI(^)p FQ(\005)2461 3592 y FE(C)2461 3642 y Fn(8)2493
3654 y FE(D)2549 3615 y FQ(\))1752 4159 y FG(\017)p FF(\017)p
1750 4159 V 85 3798 a Fp(\()p Fr(A)h Fq(^)f Fr(A)g Fq(^)g
Fr(B)25 b Fq(^)20 b Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p
Fr(C)27 b Fq(^)19 b Fr(C)27 b Fq(^)20 b Fr(D)j Fq(^)d
Fr(D)s Fp(\))1274 3599 y FI(\030)1274 3620 y FQ(=)1604
3392 y FG(7)p FF(7)1567 3410 y Fz(n)1530 3427 y(n)1494
3445 y(n)1457 3462 y(n)1421 3479 y(n)1385 3497 y(n)1348
3514 y(n)1312 3532 y(n)1275 3549 y(n)1239 3566 y(n)1203
3584 y(n)1166 3601 y(n)1130 3618 y(n)1094 3636 y(n)1057
3653 y(n)1021 3670 y(n)984 3688 y(n)948 3705 y(n)442
4073 y FQ(\(\005)522 4050 y FE(A)522 4111 y(A)568 4099
y Fn(8)604 4073 y FI(^)p FQ(\005)704 4050 y FE(B)704
4099 y Fn(8)736 4111 y FE(B)788 4073 y FQ(\))p FI(_)p
FQ(\(\005)942 4050 y FE(C)942 4111 y(C)989 4099 y Fn(8)1026
4073 y FI(^)p FQ(\005)1126 4050 y FE(D)1126 4099 y Fn(8)1158
4111 y FE(D)1214 4073 y FQ(\))1604 4159 y FG(')p FF(')1567
4141 y Fz(P)1530 4124 y(P)1494 4106 y(P)1457 4089 y(P)1421
4072 y(P)1385 4054 y(P)1348 4037 y(P)1312 4019 y(P)1275
4002 y(P)1239 3985 y(P)1203 3967 y(P)1166 3950 y(P)1130
3933 y(P)1093 3915 y(P)1057 3898 y(P)1021 3881 y(P)984
3863 y(P)948 3846 y(P)2476 3798 y Fp(\()p Fr(A)h Fq(_)f
Fr(C)7 b Fp(\))20 b Fq(^)g Fp(\()p Fr(B)25 b Fq(_)19
b Fr(D)s Fp(\))1384 4252 y(\()p Fr(A)i Fq(^)e Fr(B)5
b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s
Fp(\))2290 4057 y FH(m)2674 3846 y FG(6)p FF(6)2636 3862
y Fz(l)2598 3877 y(l)2561 3893 y(l)2523 3909 y(l)2485
3924 y(l)2448 3940 y(l)2410 3956 y(l)2373 3971 y(l)2335
3987 y(l)2297 4003 y(l)2260 4018 y(l)2222 4034 y(l)2184
4050 y(l)2147 4065 y(l)2109 4081 y(l)2071 4096 y(l)2034
4112 y(l)1996 4128 y(l)1959 4143 y(l)1921 4159 y(l)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 568 33
TeXDict begin 568 32 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(568)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FX(and)33 b(\(28\))f(and)g(the)h(self-dualit)m
(y)h(of)e(medial.)45 b(It)32 b(remains)i(to)e(sho)m(w)j(\(iii\).)44
b(F)-8 b(or)31 b(this)j(consider)493 589 y Fp(\()p Fr(A)21
b Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b
Fq(^)20 b Fr(D)s Fp(\))529 876 y FH(m)585 887 y FE(A;B)r(;C;D)861
1106 y FG(\017)p FF(\017)p 859 1106 4 470 v 1926 589
a Fp(\(\()p Fr(A)h Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g
Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\)\))g Fq(^)g Fp(\(\()p
Fr(A)h Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27
b Fq(^)20 b Fr(D)s Fp(\)\))1901 566 y FG(/)p FF(/)1339
514 y FQ(\001)1398 528 y Ft(\()p FE(A)p FD(^)p FE(B)r
Ft(\))p FD(_)p Ft(\()p FE(C)s FD(^)p FE(D)r Ft(\))p 1254
568 648 4 v 493 1199 a Fp(\()p Fr(A)h Fq(_)f Fr(C)7 b
Fp(\))20 b Fq(^)g Fp(\()p Fr(B)25 b Fq(_)20 b Fr(D)s
Fp(\))37 1492 y FQ(\()p FI(q)117 1468 y FE(A)117 1518
y Fn(8)149 1530 y FE(A)199 1492 y FI(_q)299 1468 y FE(C)299
1530 y(C)346 1518 y Fn(8)382 1492 y FQ(\))p FI(^)p FQ(\()p
FI(q)536 1468 y FE(B)536 1518 y Fn(8)569 1530 y FE(B)622
1492 y FI(_q)722 1468 y FE(D)722 1530 y(D)774 1518 y
Fn(8)809 1492 y FQ(\))861 1717 y FG(\017)p FF(\017)p
859 1717 4 470 v 1083 1106 a FG(t)p FF(t)1840 951 y FQ(\(\005)1920
927 y FE(B)1920 989 y(A)1966 977 y Fn(8)2002 951 y FI(_)p
FQ(\005)2102 927 y FE(D)2102 989 y(C)2149 977 y Fn(8)2186
951 y FQ(\))p FI(^)p FQ(\(\005)2340 927 y FE(A)2340 977
y Fn(8)2372 989 y FE(B)2425 951 y FI(_)p FQ(\005)2525
927 y FE(C)2525 977 y Fn(8)2557 989 y FE(D)2612 951 y
FQ(\))2522 649 y Fz(i)2483 662 y(i)2444 674 y(i)2405
686 y(i)2366 699 y(i)2327 711 y(i)2288 723 y(i)2249 736
y(i)2210 748 y(i)2172 760 y(i)2133 773 y(i)2094 785 y(i)2055
797 y(i)2016 810 y(i)1977 822 y(i)1938 835 y(i)1899 847
y(i)1860 859 y(i)1822 872 y(i)1783 884 y(i)1744 896 y(i)1705
909 y(i)1666 921 y(i)1627 933 y(i)1588 946 y(i)1549 958
y(i)1510 970 y(i)1472 983 y(i)1433 995 y(i)1394 1008
y(i)1355 1020 y(i)1316 1032 y(i)1277 1045 y(i)1238 1057
y(i)1199 1069 y(i)1160 1082 y(i)1122 1094 y(i)1083 1106
y(i)1248 1259 y FQ(\()p FI(q)1328 1236 y FE(C)1328 1297
y(A)1374 1285 y Fn(8)1411 1259 y FI(_q)1511 1236 y FE(A)1511
1285 y Fn(8)1542 1297 y FE(C)1594 1259 y FQ(\))p FI(^)p
FQ(\()p FI(q)1748 1236 y FE(D)1748 1297 y(B)1796 1285
y Fn(8)1833 1259 y FI(_q)1933 1236 y FE(B)1933 1285 y
Fn(8)1965 1297 y FE(D)2021 1259 y FQ(\))2043 1177 y FG(/)p
FF(/)p 1254 1178 789 4 v 2068 1199 a Fp(\()p Fr(A)g Fq(_)g
Fr(C)27 b Fq(_)20 b Fr(A)g Fq(_)g Fr(C)7 b Fp(\))20 b
Fq(^)g Fp(\()p Fr(B)25 b Fq(_)19 b Fr(D)k Fq(_)d Fr(B)25
b Fq(_)20 b Fr(D)s Fp(\))2783 1106 y FG(\017)p FF(\017)2849
833 y FQ(\()p FI(q)2929 810 y FE(C)2929 872 y(A)2975
860 y Fn(8)3011 833 y FI(\016)q FQ(\005)3100 810 y FE(B)3100
872 y(A)3146 860 y Fn(8)3182 833 y FI(_q)3282 810 y FE(A)3282
860 y Fn(8)3313 872 y FE(C)3365 833 y FI(\016)p FQ(\005)3453
810 y FE(D)3453 872 y(C)3500 860 y Fn(8)3537 833 y FQ(\))p
FI(^)2957 951 y FQ(\()p FI(q)3037 927 y FE(D)3037 989
y(B)3085 977 y Fn(8)3122 951 y FI(\016)p FQ(\005)3210
927 y FE(A)3210 977 y Fn(8)3242 989 y FE(B)3295 951 y
FI(_q)3395 927 y FE(B)3395 977 y Fn(8)3426 989 y FE(D)3482
951 y FI(\016)p FQ(\005)3570 927 y FE(C)3570 977 y Fn(8)3602
989 y FE(D)3657 951 y FQ(\))p 2781 1106 4 470 v 146 1810
a Fp(\()p Fr(A)h Fq(_)e Fr(A)i Fq(_)f Fr(C)26 b Fq(_)20
b Fr(C)7 b Fp(\))20 b Fq(^)g Fp(\()p Fr(B)25 b Fq(_)20
b Fr(B)25 b Fq(_)19 b Fr(D)k Fq(_)d Fr(D)s Fp(\))1648
1862 y FQ(\()p FI(r)1734 1873 y FE(A)1784 1862 y FI(_r)1890
1873 y FE(C)1942 1862 y FQ(\))p FI(^)p FQ(\()p FI(r)2102
1873 y FE(B)2155 1862 y FI(_r)2261 1873 y FE(D)2316 1862
y FQ(\))2390 1787 y FG(/)p FF(/)p 1601 1789 789 4 v 1765
1557 a FQ(\()p FR(A)p FI(_)t FQ(\024)-39 b FR(\033)1932
1568 y FE(A;C)2049 1557 y FI(_)p FR(C)5 b FQ(\))p FI(^)p
FQ(\()p FR(B)s FI(_)t FQ(\024)-39 b FR(\033)2395 1568
y FE(B)r(;D)2520 1557 y FI(_)p FR(D)r FQ(\))2561 1247
y FG(4)p FF(4)2522 1260 y Fz(i)2483 1272 y(i)2444 1284
y(i)2405 1297 y(i)2366 1309 y(i)2327 1321 y(i)2288 1334
y(i)2249 1346 y(i)2210 1358 y(i)2172 1371 y(i)2133 1383
y(i)2094 1396 y(i)2055 1408 y(i)2016 1420 y(i)1977 1433
y(i)1938 1445 y(i)1899 1457 y(i)1860 1470 y(i)1822 1482
y(i)1783 1494 y(i)1744 1507 y(i)1705 1519 y(i)1666 1531
y(i)1627 1544 y(i)1588 1556 y(i)1549 1569 y(i)1510 1581
y(i)1472 1593 y(i)1433 1606 y(i)1394 1618 y(i)1355 1630
y(i)1316 1643 y(i)1277 1655 y(i)1238 1667 y(i)1199 1680
y(i)1160 1692 y(i)1122 1704 y(i)1083 1717 y(i)2415 1810
y Fp(\()p Fr(A)21 b Fq(_)f Fr(C)7 b Fp(\))20 b Fq(^)f
Fp(\()p Fr(B)25 b Fq(_)20 b Fr(D)s Fp(\))2783 1717 y
FG(\017)p FF(\017)2808 1499 y FI(r)2867 1510 y FE(A)p
FD(_)p FE(C)3006 1499 y FI(^r)3112 1510 y FE(B)r FD(_)p
FE(D)p 2781 1717 4 470 v 0 2078 a FX(The)30 b(topmost)g(triangle)f(is)h
(\(v\),)g(the)g(t)m(w)m(o)g(middle)g(ones)g(are)f(trivial,)i(and)e(the)
h(b)s(ottommost)f(triangle)0 2198 y(is)k(\()p FK(B2c)p
FX(\).)43 b(Note)33 b(that)f(the)h(\014rst-righ)m(t-then-do)m(wn)h
(path)e(is)784 2337 y Fh(\012)17 b(\002)906 2418 y FT(q)981
2377 y FR(C)981 2443 y(A)1034 2431 y Fn(8)1092 2418 y
FT(\016)22 b FX(\005)1237 2377 y FR(B)1237 2443 y(A)1290
2431 y Fn(8)1326 2418 y FS(;)17 b FT(q)1445 2377 y FR(A)1445
2431 y Fn(8)1476 2443 y FR(C)1557 2418 y FT(\016)22 b
FX(\005)1702 2377 y FR(D)1702 2443 y(C)1757 2431 y Fn(8)1810
2337 y Fh(\003)1868 2418 y FS(;)1912 2337 y Fh(\002)1970
2418 y FT(q)2045 2377 y FR(D)2045 2443 y(B)2101 2431
y Fn(8)2159 2418 y FT(\016)g FX(\005)2304 2377 y FR(A)2304
2431 y Fn(8)2336 2443 y FR(B)2397 2418 y FS(;)17 b FT(q)2516
2377 y FR(B)2516 2431 y Fn(8)2547 2443 y FR(D)2633 2418
y FT(\016)22 b FX(\005)2778 2377 y FR(C)2778 2431 y Fn(8)2810
2443 y FR(D)2891 2337 y Fh(\003)16 b(\013)0 2638 y FX(b)m(y)32
b(de\014nition,)g(and)f(the)h(\014rst-do)m(wn-then-righ)m(t)g(path)f
(is)g FK(m)2262 2653 y FR(A;B)s(;C)q(;D)2576 2638 y FX(b)s(ecause)i(of)
k(\(28\).)42 b(W)-8 b(e)32 b(get)f(\(iii\))0 2758 y(b)m(y)i
(self-dualit)m(y)h(of)e(medial.)p 3738 2758 42 42 v 0
2936 a FJ(7.3.)43 b(Remark.)32 b FX(Because)39 b(of)45
b(\(iii\))37 b(and)h(\(v\))g(in)g(Theorem)h(7.2,)g(w)m(e)g(could)f
(obtain)g(a)f FU(we)-5 b(ak)39 b(me)-5 b(dial)0 3049
y(map)42 b FX(b)m(y)c(adding)g(\(iv\))f(or)g(\(ii\))f(as)h(axiom)g(to)g
(a)f FK(B2)p FX(-category)-8 b(.)56 b(This)38 b(w)m(eak)g(medial)f(map)
g(w)m(ould)h(b)s(e)0 3162 y(self-dual.)k(By)26 b(also)h(adding)f
(Theorem)h(7.2)f(\(i\))g(as)h(axiom,)g(w)m(e)h(could)e(ev)m(en)i(reco)m
(v)m(er)g(equations)f(\()p FK(B3c)p FX(\))0 3274 y(and)33
b(\()p FK(B3c)385 3238 y FI(0)408 3274 y FX(\),)f(as)h(the)g(follo)m
(wing)g(diagram)f(sho)m(ws:)324 3536 y Fr(A)20 b Fq(_)g
Fr(B)704 3469 y FQ(\001)763 3480 y FE(A)p FD(_)p FE(B)1016
3505 y FG(/)p FF(/)p 592 3507 425 4 v 1041 3528 a Fp(\()p
Fr(A)h Fq(_)e Fr(B)5 b Fp(\))21 b Fq(^)e Fp(\()p Fr(A)i
Fq(_)f Fr(B)5 b Fp(\))1322 3767 y FQ(\(\001)1408 3778
y FE(A)1459 3767 y FI(_)p FQ(\001)1565 3778 y FE(B)1617
3767 y FQ(\))p FI(^)p FQ(\(\001)1777 3778 y FE(A)1828
3767 y FI(_)p FQ(\001)1934 3778 y FE(B)1987 3767 y FQ(\))2604
3850 y FG(*)p FF(*)2564 3838 y Fz(V)2525 3827 y(V)2485
3815 y(V)2445 3804 y(V)2405 3793 y(V)2366 3781 y(V)2326
3770 y(V)2286 3758 y(V)2246 3747 y(V)2207 3736 y(V)2167
3724 y(V)2127 3713 y(V)2087 3701 y(V)2048 3690 y(V)2008
3678 y(V)1968 3667 y(V)1928 3656 y(V)1888 3644 y(V)1849
3633 y(V)1809 3621 y(V)1769 3610 y(V)1729 3599 y(V)1690
3587 y(V)1650 3576 y(V)p 1794 3499 667 4 v 1794 3515
V 2486 3528 a Fp(\()p Fr(A)20 b Fq(_)g Fr(B)5 b Fp(\))20
b Fq(^)g Fp(\()p Fr(A)h Fq(_)f Fr(B)5 b Fp(\))2849 3576
y FG(O)p FF(O)2874 3722 y FQ(\(\005)2954 3699 y FE(A)2954
3761 y(A)3000 3749 y Fn(8)3037 3722 y FI(_)p FQ(\005)3137
3699 y FE(B)3137 3761 y(B)3185 3749 y Fn(8)3221 3722
y FQ(\))p FI(^)p FQ(\(\005)3375 3699 y FE(A)3375 3749
y Fn(8)3408 3761 y FE(A)3458 3722 y FI(_)p FQ(\005)3558
3699 y FE(B)3558 3749 y Fn(8)3590 3761 y FE(B)3642 3722
y FQ(\))p 2848 3850 4 274 v 81 3943 a Fp(\()p Fr(A)21
b Fq(^)f Fr(A)p Fp(\))h Fq(_)f Fp(\()p Fr(B)25 b Fq(^)19
b Fr(B)5 b Fp(\))445 3850 y FG(\017)p FF(\017)153 3723
y FQ(\001)212 3734 y FE(A)262 3723 y FI(_)p FQ(\001)368
3734 y FE(B)p 444 3850 4 289 v 2000 3943 a Fp(\(\()p
Fr(A)22 b Fq(^)d Fr(A)p Fp(\))i Fq(_)f Fp(\()p Fr(B)25
b Fq(^)20 b Fr(B)5 b Fp(\)\))20 b Fq(^)g Fp(\(\()p Fr(A)h
Fq(^)f Fr(A)p Fp(\))h Fq(_)e Fp(\()p Fr(B)25 b Fq(^)20
b Fr(B)5 b Fp(\)\))1976 3920 y FG(/)p FF(/)1169 3990
y FQ(\001)1228 4004 y Ft(\()p FE(A)p FD(^)p FE(A)p Ft(\))p
FD(_)p Ft(\()p FE(B)r FD(^)p FE(B)r Ft(\))p 834 3922
1142 4 v 0 4211 a FX(where)37 b(the)f(left)g(square)h(sa)m(ys)g(that)f
(\001)1446 4226 y FR(A)1527 4211 y FT(_)25 b FX(\001)1699
4226 y FR(B)1796 4211 y FX(preserv)m(es)38 b(the)f FT(^)p
FX(-com)m(ultiplication.)54 b(Ho)m(w)m(ev)m(er,)39 b(b)m(y)0
4331 y(doing)30 b(this,)i(w)m(e)f(w)m(ould)g FU(not)39
b FX(get)31 b(naturalit)m(y)f(of)g(medial,)i(whic)m(h)f(is)g(crucial)g
(for)f(algebraic)g(as)g(w)m(ell)i(as)0 4452 y(for)g(pro)s(of-theoretic)
g(reasons)i(\(see)f(also)g(the)g(in)m(tro)s(duction\).)0
4637 y FJ(7.4.)42 b(Definition.)32 b FU(A)39 b FK(B2)p
FU(-c)-5 b(ate)g(gory)38 b FC(C)56 b FX(has)37 b(n)m(ullary)h(medial)h
FU(if)g(ther)-5 b(e)38 b(is)h(a)f(map)3203 4636 y FX(\024)3164
4637 y FK(nm)11 b FX(:)35 b FP(t)25 b FT(_)g FP(t)34
b FT(!)g FP(t)0 4757 y FU(\(c)-5 b(al)5 b(le)-5 b(d)34
b(the)42 b FX(n)m(ullary)34 b(medial)f(map)p FU(\))i(such)g(that)g(for)
g(al)5 b(l)34 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5
b FU(,)35 b(the)g(fol)5 b(lowing)34 b(holds:)1836 4983
y FS(A)22 b FT(_)g FS(B)1494 5090 y FQ(\005)1547 5067
y FE(A)1597 5090 y FI(_)p FQ(\005)1697 5067 y FE(B)1573
5222 y FG(z)p FF(z)p Fz(u)1604 5201 y(u)1634 5179 y(u)1665
5158 y(u)1695 5137 y(u)1726 5116 y(u)1756 5095 y(u)1787
5074 y(u)1817 5052 y(u)1848 5031 y(u)1393 5310 y FP(t)g
FT(_)g FP(t)1949 5345 y FQ(\024)1921 5346 y FH(nm)2319
5279 y FG(/)p FF(/)p 1616 5280 703 4 v 2344 5310 a FP(t)2319
5240 y FG(")p FF(")2182 5099 y FQ(\005)2235 5075 y FE(A)p
FD(_)p FE(B)2038 5007 y Fz(D)2069 5033 y(D)2100 5059
y(D)2131 5084 y(D)2163 5110 y(D)2194 5136 y(D)2225 5162
y(D)2256 5187 y(D)2287 5213 y(D)3541 5155 y FX(\()p FK(B3b\))p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 569 34
TeXDict begin 569 33 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(569)p 0 TeXcolorgray
146 323 a(Clearly)-8 b(,)46 b(if)d(a)f(a)g FK(B2)o FX(-category)h(has)g
(n)m(ullary)g(medial,)j(then)2496 322 y(\024)2457 323
y FK(nm)f FX(=)f(\005)2822 287 y Fs(t)p FI(_)p Fs(t)2937
323 y FX(.)73 b(This)43 b(can)g(b)s(e)g(seen)0 444 y(b)m(y)c(plugging)f
(in)h FP(t)e FX(for)h FS(A)g FX(and)g FS(B)44 b FX(in)38
b(\()p FK(B3b)p FX(\).)60 b(By)38 b(dualit)m(y)i FT(q)2338
407 y Fs(f)8 b FI(^)p Fs(f)2491 444 y FX(=)2643 443 y(^)2604
444 y FK(nm)j FX(:)36 b FP(f)47 b FT(!)37 b FP(f)f FT(^)27
b FP(f)48 b FX(\(the)39 b FU(nul)5 b(lary)0 564 y(c)-5
b(ome)g(dial)34 b(map)6 b FX(\))31 b(ob)s(eys)j(the)f(dual)g(of)39
b(\()p FK(B3b)p FX(\))o(.)0 749 y FJ(7.5.)e(Pr)n(oposition.)30
b FU(In)k(a)h FK(B2)p FU(-c)-5 b(ate)g(gory)34 b FC(C)52
b FU(that)36 b(has)e(nul)5 b(lary)35 b(me)-5 b(dial,)34
b(we)g(have)g(that)p 0 TeXcolorgray 79 952 a FX(\(i\))p
0 TeXcolorgray 48 w FU(The)h(maps)g(that)h(pr)-5 b(eserve)35
b(the)h FT(^)p FU(-c)-5 b(ounit)36 b(ar)-5 b(e)36 b(close)-5
b(d)34 b(under)i FT(_)p FU(,)g(and)f(dual)5 b(ly,)36
b(the)g(maps)f(that)230 1073 y(pr)-5 b(eserve)34 b(the)h
FT(_)p FU(-unit)h(ar)-5 b(e)34 b(close)-5 b(d)34 b(under)h
FT(^)p FU(.)p 0 TeXcolorgray 51 1276 a FX(\(ii\))p 0
TeXcolorgray 49 w FU(F)-7 b(or)34 b(al)5 b(l)35 b(obje)-5
b(cts)34 b FS(A;)17 b(B)5 b(;)17 b(C)7 b FU(,)34 b(the)h(map)f
FK(s)1662 1291 y FR(A;B)s(;C)1905 1276 y FU(is)h(a)g(quasientr)-5
b(opy.)0 1479 y FJ(Pr)n(oof.)30 b FX(F)-8 b(or)32 b(sho)m(wing)j(the)e
(\014rst)h(statemen)m(t,)h(replace)f(in)f(\(37\))g(ev)m(ery)i
FT(^)e FX(b)m(y)h(an)f FT(_)p FX(,)h(and)42 b(^)-58 b
FS(\045)3420 1494 y Fs(t)3490 1479 y FX(b)m(y)3665 1478
y(\024)3626 1479 y FK(nm)p FX(.)0 1600 y(The)34 b(second)f(statemen)m
(t)h(is)g(sho)m(wn)f(b)m(y)1020 1852 y(\()p FS(A)22 b
FT(_)g FS(B)5 b FX(\))23 b FT(^)f FS(C)1784 1781 y FH(s)1811
1792 y FE(A;B)r(;C)2209 1827 y FG(/)p FF(/)p 1571 1829
638 4 v 796 2030 a FQ(\(\005)876 2006 y FE(A)926 2030
y FI(_)p FQ(\005)1026 2006 y FE(B)1079 2030 y FQ(\))p
FI(^)p FQ(\005)1206 2006 y FE(C)1283 2116 y FG(\017)p
FF(\017)p 1281 2116 4 215 v 2234 1852 a FS(A)g FT(_)h
FX(\()p FS(B)k FT(^)22 b FS(C)7 b FX(\))2522 2030 y FQ(\005)2575
2006 y FE(A)2625 2030 y FI(_)p FQ(\(\005)2752 2006 y
FE(B)2805 2030 y FI(^)p FQ(\005)2905 2006 y FE(C)2957
2030 y FQ(\))2497 2116 y FG(\017)p FF(\017)p 2495 2116
V 1069 2216 a FX(\()p FP(t)22 b FT(_)g FP(t)p FX(\))g
FT(^)g FP(t)1815 2148 y FH(s)1842 2157 y Fy(t)p FE(;)p
Fy(t)p FE(;)p Fy(t)2258 2191 y FG(/)p FF(/)p 1522 2193
737 4 v 1115 2393 a FQ(\024)1087 2394 y FH(nm)p FI(^)p
Fs(t)1283 2480 y FG(\017)p FF(\017)p 1281 2480 4 215
v 1488 2444 a FQ(^)-42 b FR(\045)1517 2453 y Fy(t)p FD(_)p
Fy(t)1791 2480 y FG(&)p FF(&)1755 2460 y Fz(M)1721 2440
y(M)1686 2421 y(M)1652 2402 y(M)1618 2382 y(M)1584 2363
y(M)1550 2343 y(M)1516 2324 y(M)1482 2305 y(M)1448 2285
y(M)1414 2266 y(M)2283 2216 y FP(t)22 b FT(_)g FX(\()p
FP(t)g FT(^)h FP(t)p FX(\))2160 2444 y Fs(t)p FI(_)6
b FQ(^)-41 b FR(\045)2275 2453 y Fy(t)1989 2480 y FG(x)p
FF(x)p Fz(q)2023 2461 y(q)2057 2441 y(q)2091 2422 y(q)2125
2402 y(q)2159 2383 y(q)2194 2364 y(q)2228 2344 y(q)2262
2325 y(q)2296 2306 y(q)2330 2286 y(q)1184 2568 y FP(t)22
b FT(^)g FP(t)1557 2787 y FQ(^)-42 b FR(\045)1586 2796
y Fy(t)1843 2839 y FG(&)p FF(&)1807 2819 y Fz(N)1772
2801 y(N)1737 2782 y(N)1702 2763 y(N)1667 2744 y(N)1632
2725 y(N)1597 2706 y(N)1562 2688 y(N)1527 2669 y(N)1492
2650 y(N)1457 2631 y(N)1423 2612 y(N)1388 2593 y(N)1791
2568 y FP(t)22 b FT(_)g FP(t)1944 2721 y FQ(\024)1915
2722 y FH(nm)1890 2808 y FG(\017)p FF(\017)p 1888 2808
V 1868 2896 a FP(t)0 3115 y FX(where)40 b(the)f(left)f(do)m(wn-path)h
(is)g(\005)1306 3079 y FQ(\()p FR(A)p FI(_)p FR(B)s FQ(\))p
FI(^)p FR(C)1662 3115 y FX(and)f(the)h(righ)m(t)g(do)m(wn-path)g(is)g
(\005)2941 3079 y FR(A)p FI(_)p FQ(\()p FR(B)s FI(^)p
FR(C)5 b FQ(\))3297 3115 y FX(\(b)s(ecause)39 b(of)0
3235 y(\()p FK(B2b)p FX(\))i(and)h(\()p FK(B3b)p FX(\))o(\).)70
b(The)43 b(t)m(w)m(o)f(squares)h(are)f(naturalit)m(y)g(of)f
FK(s)46 b FX(and)51 b(^)-58 b FS(\045)t FX(,)44 b(and)e(the)g(triangle)
f(at)h(the)0 3356 y(cen)m(ter)30 b(is)f(just)g(\(15\))o(.)42
b(Hence,)31 b(switc)m(h)f(preserv)m(es)h(the)e FT(^)p
FX(-counit,)h(and)e(b)m(y)i(dualit)m(y)f(also)g(the)g
FT(_)p FX(-unit.)p 3738 3356 42 42 v 0 3540 a FJ(7.6.)50
b(Pr)n(oposition.)36 b FU(L)-5 b(et)46 b FC(C)62 b FU(b)-5
b(e)45 b(a)g FK(B2)p FU(-c)-5 b(ate)g(gory)45 b(with)g(me)-5
b(dial)44 b(and)h(nul)5 b(lary)45 b(me)-5 b(dial.)75
b(Then)45 b FC(C)0 3661 y FU(ob)-5 b(eys)35 b(the)f(e)-5
b(quation)940 3913 y FX(\()p FS(A)22 b FT(^)g FP(t)p
FX(\))g FT(_)h FX(\()p FS(B)k FT(^)22 b FP(t)p FX(\))1750
3842 y FH(m)1806 3853 y FE(A;)p Fy(t)p FE(;B)r(;)p Fy(t)2078
3888 y FG(/)p FF(/)p 1688 3890 391 4 v 2103 3913 a FX(\()p
FS(A)g FT(_)h FS(B)5 b FX(\))22 b FT(^)g FX(\()p FP(t)g
FT(_)h FP(t)p FX(\))2490 4087 y FQ(\()p FR(A)p FI(_)p
FR(B)s FQ(\))p FI(^)2776 4086 y FQ(\024)2747 4087 y FH(nm)2465
4177 y FG(\017)p FF(\017)p 2463 4177 4 215 v 1170 4286
a FS(A)f FT(_)h FS(B)1301 4193 y FG(\017)p FF(\017)1061
4095 y FQ(^)-42 b FR(\045)1090 4106 y FE(A)1141 4095
y FI(_)6 b FQ(^)-41 b FR(\045)1224 4106 y FE(B)p 1300
4193 4 231 v 2218 4277 a FX(\()p FS(A)22 b FT(_)h FS(B)5
b FX(\))22 b FT(^)h FP(t)2193 4252 y FG(/)p FF(/)1744
4339 y FQ(^)-42 b FR(\045)1773 4309 y FD(\000)p Ft(1)1773
4362 y FE(A)p FD(_)p FE(B)p 1458 4254 736 4 v 3536 4112
a FX(\()p FK(m)t FX(-)9 b(^)-58 b FS(\045)t FX(\))p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 570 35
TeXDict begin 570 34 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(570)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FJ(Pr)n(oof.)j FX(Chase)25 537
y Fp(\()p Fr(A)21 b Fq(^)e Fo(t)p Fp(\))i Fq(_)e Fp(\()p
Fr(B)26 b Fq(^)19 b Fo(t)p Fp(\))1739 468 y FH(m)1795
479 y FE(A;)p Fy(t)p FE(;B)r(;)p Fy(t)3026 514 y FG(/)p
FF(/)p 717 516 2309 4 v 907 630 a FQ(\001)966 644 y Ft(\()p
FE(A)p FD(^)p Fy(t)p Ft(\))p FD(_)p Ft(\()p FE(B)r FD(^)p
Fy(t)p Ft(\))1476 780 y FG(+)p FF(+)1436 770 y Fz(W)1397
761 y(W)1358 752 y(W)1319 742 y(W)1280 733 y(W)1241 724
y(W)1201 715 y(W)1162 705 y(W)1123 696 y(W)1084 687 y(W)1045
677 y(W)1006 668 y(W)967 659 y(W)928 649 y(W)889 640
y(W)850 631 y(W)810 621 y(W)771 612 y(W)732 603 y(W)693
594 y(W)654 584 y(W)3051 537 y Fp(\()p Fr(A)i Fq(_)e
Fr(B)5 b Fp(\))21 b Fq(^)e Fp(\()p Fo(t)i Fq(_)e Fo(t)p
Fp(\))3410 1035 y FQ(\()p FR(A)p FI(_)p FR(B)s FQ(\))p
FI(^)3697 1034 y FQ(\024)3667 1035 y FH(nm)3385 1453
y FG(\017)p FF(\017)p 3383 1453 4 869 v 892 873 a Fp(\(\()p
Fr(A)i Fq(^)f Fo(t)p Fp(\))g Fq(_)g Fp(\()p Fr(B)25 b
Fq(^)20 b Fo(t)p Fp(\)\))h Fq(^)e Fp(\(\()p Fr(A)i Fq(^)f
Fo(t)p Fp(\))g Fq(_)g Fp(\()p Fr(B)25 b Fq(^)20 b Fo(t)p
Fp(\)\))1146 1035 y FQ(\()6 b(^)-41 b FR(\045)1209 1046
y FE(A)1259 1035 y FI(_)6 b FQ(^)-41 b FR(\045)1342 1046
y FE(B)1395 1035 y FQ(\))p FI(^)p FQ(\()6 b(^)-41 b FR(\045)1532
1046 y FE(A)1584 1035 y FI(_)6 b FQ(^)-41 b FR(\045)1667
1046 y FE(B)1719 1035 y FQ(\))1772 1116 y FG(\017)p FF(\017)p
1770 1116 4 196 v 1825 648 a FQ(\(\005)1905 625 y Fy(t)1905
687 y FE(A)1951 675 y Fn(8)1987 648 y FI(_)p FQ(\005)2087
625 y Fy(t)2087 687 y FE(B)2135 675 y Fn(8)2172 648 y
FQ(\))p FI(^)p FQ(\(\005)2326 625 y FE(A)2326 675 y Fn(8)2358
687 y Fy(t)2390 648 y FI(_)p FQ(\005)2490 625 y FE(B)2490
675 y Fn(8)2521 687 y Fy(t)2553 648 y FQ(\))3047 584
y FG(2)p FF(2)3007 593 y Fz(f)2968 601 y(f)2929 609 y(f)2890
617 y(f)2851 625 y(f)2812 633 y(f)2773 642 y(f)2734 650
y(f)2695 658 y(f)2656 666 y(f)2616 674 y(f)2577 682 y(f)2538
690 y(f)2499 699 y(f)2460 707 y(f)2421 715 y(f)2382 723
y(f)2343 731 y(f)2304 739 y(f)2265 747 y(f)2226 756 y(f)2187
764 y(f)2148 772 y(f)2109 780 y(f)1408 1209 y Fp(\()p
Fr(A)21 b Fq(_)e Fr(B)5 b Fp(\))20 b Fq(^)g Fp(\()p Fr(A)h
Fq(_)f Fr(B)5 b Fp(\))1476 1257 y FG(3)p FF(3)921 1443
y FQ(\001)980 1454 y FE(A)p FD(_)p FE(B)505 1489 y Fz(g)544
1480 y(g)582 1470 y(g)621 1461 y(g)660 1452 y(g)699 1443
y(g)738 1433 y(g)776 1424 y(g)815 1415 y(g)854 1406 y(g)893
1396 y(g)932 1387 y(g)970 1378 y(g)1009 1369 y(g)1048
1360 y(g)1087 1350 y(g)1126 1341 y(g)1164 1332 y(g)1203
1323 y(g)1242 1313 y(g)1281 1304 y(g)1320 1295 y(g)1358
1286 y(g)1397 1276 y(g)1436 1267 y(g)2551 933 y FQ(\()p
FR(A)p FI(_)p FR(B)s FQ(\))p FI(^)p FQ(\(\005)2888 909
y FE(A)2940 933 y FI(_)p FQ(\005)3040 909 y FE(B)3093
933 y FQ(\))3216 584 y FG(6)p FF(6)3178 600 y Fz(l)3140
616 y(l)3103 632 y(l)3065 647 y(l)3028 663 y(l)2990 679
y(l)2953 694 y(l)2915 710 y(l)2878 725 y(l)2840 741 y(l)2803
757 y(l)2765 772 y(l)2728 788 y(l)2690 804 y(l)2653 819
y(l)2615 835 y(l)2578 851 y(l)2540 866 y(l)2503 882 y(l)2465
897 y(l)2428 913 y(l)2390 929 y(l)2353 944 y(l)2315 960
y(l)2278 976 y(l)2240 991 y(l)2203 1007 y(l)2165 1023
y(l)2128 1038 y(l)2090 1054 y(l)2053 1069 y(l)2015 1085
y(l)1978 1101 y(l)1940 1116 y(l)2535 1322 y FQ(\()p FR(A)p
FI(_)p FR(B)s FQ(\))p FI(^)p FQ(\(\005)2872 1299 y FE(A)p
FD(_)p FE(B)3014 1322 y FQ(\))3132 1471 y FG(,)p FF(,)3092
1462 y Fz(X)3052 1454 y(X)3013 1446 y(X)2974 1438 y(X)2934
1429 y(X)2895 1421 y(X)2856 1413 y(X)2817 1405 y(X)2777
1397 y(X)2738 1388 y(X)2699 1380 y(X)2659 1372 y(X)2620
1364 y(X)2581 1356 y(X)2541 1347 y(X)2502 1339 y(X)2463
1331 y(X)2423 1323 y(X)2384 1315 y(X)2345 1306 y(X)2306
1298 y(X)2266 1290 y(X)2227 1282 y(X)2188 1274 y(X)2148
1265 y(X)2109 1257 y(X)237 1554 y Fr(A)21 b Fq(_)e Fr(B)359
1467 y FG(\017)p FF(\017)118 1042 y FQ(^)-41 b FR(\045)148
1053 y FE(A)198 1042 y FI(_)6 b FQ(^)-41 b FR(\045)281
1053 y FE(B)p 357 1467 4 883 v 3157 1546 a Fp(\()p Fr(A)21
b Fq(_)f Fr(B)5 b Fp(\))20 b Fq(^)g Fo(t)3132 1523 y
FG(/)p FF(/)1737 1610 y FQ(^)-42 b FR(\045)1766 1580
y FD(\000)p Ft(1)1766 1633 y FE(A)p FD(_)p FE(B)p 505
1525 2628 4 v 0 1832 a FX(The)25 b(upp)s(er)f(triangle)g(is)g(Theorem)h
(7.2)f(\(v\),)i(the)e(lo)m(w)m(er)h(triangle)f(is)g(the)g(comonoid)g
(equation,)j(the)d(left)0 1953 y(square)k(sa)m(ys)h(that)36
b(^)-58 b FS(\045)759 1968 y FR(A)827 1953 y FT(_)20
b FX(^)-58 b FS(\045)954 1968 y FR(B)1042 1953 y FX(preserv)m(es)30
b(the)e FT(^)p FX(-com)m(ultiplication)g(\(Theorems)h(5.18)e(and)g(7.2)
f(\(i\)\),)j(the)0 2073 y(triangle)g(on)g(the)g(righ)m(t)g(is)h(\()p
FK(B3b)p FX(\))o(,)g(and)f(the)g(triangle)g(in)g(the)g(middle)h(comm)m
(utes)h(b)s(ecause)f(\005)3452 2037 y Fs(t)3452 2103
y FR(A)3505 2091 y Fn(8)3569 2073 y FX(=)37 b(^)-58 b
FS(\045)3723 2088 y FR(A)0 2194 y FX(and)31 b(\005)261
2157 y FR(A)261 2211 y Fn(8)293 2223 y Fs(t)357 2194
y FX(=)c(\005)533 2157 y FR(A)609 2194 y FT(\016)h FX(^)-58
b FS(\045)728 2209 y FR(A)786 2194 y FX(,)31 b(where)h(the)g(latter)f
(equation)h(holds)f(b)s(ecause)i(of)k(\(27\))31 b(and)g(naturalit)m(y)h
(of)39 b(^)-58 b FS(\045)5 b FX(.)p 3738 2194 42 42 v
0 2378 a FJ(7.7.)30 b(Pr)n(oposition.)24 b FU(A)29 b
FK(B2)p FU(-c)-5 b(ate)g(gory)29 b(with)f(me)-5 b(dial)28
b(and)h(nul)5 b(lary)29 b(me)-5 b(dial)27 b(the)i(fol)5
b(lowing)28 b(ar)-5 b(e)28 b(e)-5 b(quiv-)0 2499 y(alent:)p
0 TeXcolorgray 79 2702 a FX(\(i\))p 0 TeXcolorgray 48
w FU(We)35 b(have)1423 2822 y FX(\005)1496 2781 y Fs(t)p
FI(_)p Fs(t)1639 2822 y FX(=)1781 2821 y(\024)1742 2822
y FK(nm)28 b FX(=)f FT(r)2083 2837 y Fs(t)2130 2822 y
FX(:)34 b FP(t)21 b FT(_)i FP(t)k FT(!)h FP(t)956 b FX(\()p
FK(B3a\))p 0 TeXcolorgray 51 3038 a FX(\(ii\))p 0 TeXcolorgray
49 w FU(F)-7 b(or)34 b(al)5 b(l)35 b(obje)-5 b(cts)34
b FS(A)p FU(,)h(the)g(map)43 b FX(^)-58 b FS(\045)1432
3053 y FR(A)1524 3038 y FU(pr)-5 b(eserves)34 b(the)h
FT(_)p FU(-multiplic)-5 b(ation.)0 3242 y FJ(Pr)n(oof.)30
b FX(Chasing)j(the)g(diagram)138 3503 y(\()p FS(A)22
b FT(^)h FP(t)p FX(\))e FT(_)i FX(\()p FS(A)f FT(^)h
FP(t)p FX(\))2014 3440 y FQ(^)-41 b FR(\045)2044 3451
y FE(A)2094 3440 y FI(_)6 b FQ(^)-41 b FR(\045)2177 3451
y FE(A)3355 3478 y FG(/)p FF(/)p 880 3479 2475 4 v 893
3714 a FH(m)949 3725 y FE(A;)p Fy(t)p FE(;B)r(;)p Fy(t)1416
3767 y FG(*)p FF(*)1377 3755 y Fz(U)1339 3743 y(U)1301
3731 y(U)1263 3719 y(U)1226 3707 y(U)1188 3695 y(U)1150
3683 y(U)1112 3671 y(U)1074 3659 y(U)1037 3648 y(U)999
3636 y(U)961 3624 y(U)923 3612 y(U)885 3600 y(U)848 3588
y(U)810 3576 y(U)772 3564 y(U)734 3553 y(U)3380 3512
y FS(A)22 b FT(_)g FS(A)3533 4033 y FI(r)3592 4044 y
FE(A)3508 4495 y FG(\017)p FF(\017)p 3506 4495 4 959
v 1295 3867 a FX(\()p FS(A)g FT(_)h FS(A)p FX(\))f FT(^)h
FX(\()p FP(t)e FT(_)i FP(t)p FX(\))2059 3800 y FQ(\()p
FR(A)p FI(_)p FR(A)p FQ(\))p FI(^)2342 3799 y FQ(\024)2313
3800 y FH(nm)2428 3842 y FG(/)p FF(/)p 2037 3843 391
4 v 1679 4040 a FI(r)1738 4051 y FE(A)1788 4040 y FI(^)p
FQ(\()p Fs(t)p FI(_)p Fs(t)p FQ(\))1654 4131 y FG(\017)p
FF(\017)p 1652 4131 4 215 v 848 4170 a FI(r)907 4181
y FE(A)957 4170 y FI(^r)1063 4179 y Fy(t)592 4495 y FG(y)p
FF(y)p Fz(s)627 4474 y(s)662 4452 y(s)697 4431 y(s)732
4410 y(s)766 4388 y(s)801 4367 y(s)836 4345 y(s)871 4324
y(s)906 4302 y(s)940 4281 y(s)975 4260 y(s)1010 4238
y(s)1045 4217 y(s)1080 4195 y(s)1114 4174 y(s)1149 4153
y(s)1184 4131 y(s)1219 4110 y(s)1254 4088 y(s)1288 4067
y(s)1323 4046 y(s)1358 4024 y(s)1393 4003 y(s)1428 3981
y(s)1462 3960 y(s)1497 3938 y(s)2453 3867 y FX(\()p FS(A)f
FT(_)g FS(A)p FX(\))g FT(^)h FP(t)3089 3723 y FQ(^)-41
b FR(\045)3119 3734 y FE(A)p FD(_)p FE(A)3377 3537 y
FG(6)p FF(6)3339 3554 y Fz(m)3302 3570 y(m)3265 3587
y(m)3229 3603 y(m)3192 3619 y(m)3156 3636 y(m)3119 3652
y(m)3082 3669 y(m)3046 3685 y(m)3009 3701 y(m)2973 3718
y(m)2936 3734 y(m)2899 3751 y(m)2863 3767 y(m)2721 4049
y FI(r)2780 4060 y FE(A)2830 4049 y FI(^)p Fs(t)2696
4147 y FG(\017)p FF(\017)p 2694 4147 4 231 v 1425 4231
a FS(A)22 b FT(^)h FX(\()p FP(t)f FT(_)g FP(t)p FX(\))2136
4276 y FR(A)p FI(^)2265 4275 y FQ(\024)2236 4276 y FH(nm)2557
4206 y FG(/)p FF(/)p 1908 4207 650 4 v 961 4467 a FR(A)p
FI(^r)1120 4476 y Fy(t)635 4512 y FG(t)p FF(t)635 4513
y Fz(i)674 4501 y(i)712 4489 y(i)751 4478 y(i)789 4466
y(i)828 4455 y(i)866 4443 y(i)904 4432 y(i)943 4420 y(i)981
4408 y(i)1020 4397 y(i)1058 4385 y(i)1097 4374 y(i)1135
4362 y(i)1174 4351 y(i)1212 4339 y(i)1251 4327 y(i)1289
4316 y(i)1327 4304 y(i)1366 4293 y(i)2582 4240 y FS(A)h
FT(^)f FP(t)3132 4358 y FQ(^)-41 b FR(\045)3162 4369
y FE(A)3447 4527 y FG(\()p FF(\()3409 4511 y Fz(Q)3373
4496 y(Q)3337 4480 y(Q)3301 4465 y(Q)3265 4450 y(Q)3229
4434 y(Q)3193 4419 y(Q)3157 4403 y(Q)3121 4388 y(Q)3085
4372 y(Q)3049 4357 y(Q)3013 4342 y(Q)2977 4326 y(Q)2941
4311 y(Q)2905 4295 y(Q)2869 4280 y(Q)2833 4265 y(Q)383
4588 y FS(A)22 b FT(^)h FP(t)497 4495 y FG(\017)p FF(\017)294
4041 y FI(r)353 4052 y FE(A)p FD(^)p Fy(t)p 495 4495
4 943 v 3472 4588 a FS(A)3447 4554 y FG(/)p FF(/)2004
4625 y FQ(^)-41 b FR(\045)2034 4636 y FE(A)p 635 4555
2812 4 v 0 4845 a FX(sho)m(ws)43 b(that)d(in)i(the)f(presence)i(of)e
(medial,)j(n)m(ullary)e(medial,)i(and)d(\()p FK(B3a)p
FX(\))f(the)i(map)50 b(^)-58 b FS(\045)3296 4860 y FR(A)3394
4845 y FX(preserv)m(es)0 4958 y(the)33 b FT(_)p FX(-m)m(ultiplication.)
44 b(Note)33 b(that)f(in)h(that)f(diagram)g(the)g(upp)s(ermost)i
(square)f(is)g(\()p FK(m)t FX(-)9 b(^)-58 b FS(\045)t
FX(\))32 b(from)h(the)0 5071 y(previous)f(prop)s(osition.)43
b(The)32 b(lo)m(w)m(ermost)h(square)f(comm)m(utes)h(b)s(ecause)f(of)37
b(\()p FK(B3a)p FX(\))o(,)32 b(and)f(the)g(big)g(left)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 571 36
TeXDict begin 571 35 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(571)p 0 TeXcolorgray
0 320 a(triangle)33 b(is)g(\()p FK(B3c)651 283 y FI(0)674
320 y FX(\).)43 b(Con)m(v)m(ersely)-8 b(,)36 b(consider)e(the)f
(diagram)64 577 y Fo(t)20 b Fq(_)g Fo(t)1598 514 y FQ(\001)1657
523 y Fy(t)p FD(_)p Fy(t)3084 548 y FG(/)p FF(/)p 271
550 2814 4 v 499 742 a FQ(\001)558 751 y Fy(t)589 742
y FI(_)p FQ(\001)695 751 y Fy(t)726 742 y FQ(=)6 b(^)-41
b FR(\045)817 712 y FD(\000)p Ft(1)817 763 y Fy(t)899
742 y FI(_)6 b FQ(^)-41 b FR(\045)982 712 y FD(\000)p
Ft(1)982 763 y Fy(t)638 853 y FG(\045)p FF(\045)603 831
y Fz(K)570 810 y(K)537 789 y(K)504 769 y(K)471 748 y(K)438
727 y(K)405 706 y(K)372 685 y(K)339 664 y(K)306 644 y(K)273
623 y(K)240 602 y(K)239 1237 y FI(q)292 1213 y Fy(t)292
1275 y(t)319 1263 y Fn(8)355 1237 y FI(_q)455 1213 y
Fy(t)455 1263 y Fn(8)487 1275 y Fy(t)719 1530 y FG(\030)p
FF(\030)698 1494 y Fz(1)678 1458 y(1)657 1423 y(1)637
1387 y(1)616 1351 y(1)596 1316 y(1)575 1280 y(1)555 1244
y(1)534 1209 y(1)514 1173 y(1)494 1137 y(1)473 1101 y(1)453
1066 y(1)432 1030 y(1)412 994 y(1)391 959 y(1)371 923
y(1)350 887 y(1)330 852 y(1)309 816 y(1)289 780 y(1)268
745 y(1)248 709 y(1)227 673 y(1)207 638 y(1)186 602 y(1)3109
571 y Fp(\()p Fo(t)20 b Fq(_)g Fo(t)p Fp(\))g Fq(^)g
Fp(\()p Fo(t)g Fq(_)g Fo(t)p Fp(\))3438 1272 y FQ(1)3473
1281 y Fy(t)p FD(_)p Fy(t)3573 1272 y FI(^r)3679 1281
y Fy(t)3413 1889 y FG(\017)p FF(\017)p 3411 1889 4 1271
v 446 946 a Fp(\()p Fo(t)g Fq(^)g Fo(t)p Fp(\))g Fq(_)g
Fp(\()p Fo(t)g Fq(^)g Fo(t)p Fp(\))1235 977 y FR(p)1428
924 y FG(/)p FF(/)p 1078 925 350 4 v 1949 693 a FH(m)2005
702 y Fy(t)p FE(;)p Fy(t)p FE(;)p Fy(t)p FE(;)p Fy(t)3084
594 y FG(1)p FF(1)3043 600 y Fz(d)3002 606 y(d)2961 612
y(d)2920 617 y(d)2879 623 y(d)2838 629 y(d)2798 635 y(d)2757
641 y(d)2716 646 y(d)2675 652 y(d)2634 658 y(d)2593 664
y(d)2552 669 y(d)2511 675 y(d)2470 681 y(d)2429 687 y(d)2388
693 y(d)2347 698 y(d)2306 704 y(d)2265 710 y(d)2224 716
y(d)2183 721 y(d)2142 727 y(d)2102 733 y(d)2061 739 y(d)2020
745 y(d)1979 750 y(d)1938 756 y(d)1897 762 y(d)1856 768
y(d)1815 773 y(d)1774 779 y(d)1733 785 y(d)1692 791 y(d)1651
797 y(d)1610 802 y(d)1569 808 y(d)1528 814 y(d)1487 820
y(d)1446 825 y(d)1406 831 y(d)1365 837 y(d)1324 843 y(d)1283
849 y(d)1242 854 y(d)1201 860 y(d)1160 866 y(d)1119 872
y(d)1078 877 y(d)960 1334 y FQ(\()p FI(q)1040 1310 y
Fy(t)1040 1372 y(t)1067 1360 y Fn(8)1103 1334 y FI(^)p
Fs(t)p FQ(\))p FI(_)p FQ(\()p FI(q)1336 1310 y Fy(t)1336
1360 y Fn(8)1369 1372 y Fy(t)1400 1334 y FI(^)p Fs(t)p
FQ(\))2029 1514 y FG(\()p FF(\()1991 1496 y Fz(P)1953
1479 y(P)1916 1462 y(P)1878 1444 y(P)1841 1427 y(P)1803
1410 y(P)1766 1392 y(P)1728 1375 y(P)1691 1358 y(P)1653
1340 y(P)1615 1323 y(P)1578 1306 y(P)1540 1288 y(P)1503
1271 y(P)1465 1254 y(P)1428 1236 y(P)1390 1219 y(P)1353
1202 y(P)1315 1185 y(P)1277 1167 y(P)1240 1150 y(P)1202
1133 y(P)1165 1115 y(P)1127 1098 y(P)1090 1081 y(P)1052
1063 y(P)1015 1046 y(P)977 1029 y(P)940 1011 y(P)902
994 y(P)1453 946 y Fp(\(\()p Fo(t)g Fq(_)g Fo(t)p Fp(\))g
Fq(^)g Fp(\()p Fo(t)g Fq(_)g Fo(t)p Fp(\)\))h Fq(_)e
Fp(\(\()p Fo(t)i Fq(_)f Fo(t)p Fp(\))g Fq(^)g Fp(\()p
Fo(t)g Fq(_)g Fo(t)p Fp(\)\))2787 806 y FI(r)2846 820
y Ft(\()p Fy(t)p FD(_)p Fy(t)p Ft(\))p FD(^)p Ft(\()p
Fy(t)p FD(_)p Fy(t)p Ft(\))3182 618 y FG(4)p FF(4)3142
631 y Fz(i)3104 642 y(i)3065 654 y(i)3027 666 y(i)2988
677 y(i)2950 689 y(i)2912 701 y(i)2873 713 y(i)2835 724
y(i)2796 736 y(i)2758 748 y(i)2719 760 y(i)2681 771 y(i)2642
783 y(i)2604 795 y(i)2566 806 y(i)2527 818 y(i)2489 830
y(i)2450 842 y(i)2412 853 y(i)2206 1270 y FQ(\(1)2268
1279 y Fy(t)p FD(_)p Fy(t)2368 1270 y FI(^r)2474 1279
y Fy(t)2506 1270 y FQ(\))p FI(_)p FQ(\(1)2642 1279 y
Fy(t)p FD(_)p Fy(t)2743 1270 y FI(^r)2849 1279 y Fy(t)2880
1270 y FQ(\))2181 1514 y FG(\017)p FF(\017)p 2179 1514
4 520 v 517 1613 a Fo(t)g Fq(_)f Fo(t)h Fq(_)g Fo(t)g
Fq(_)g Fo(t)307 1738 y FI(r)366 1747 y Fy(t)p FD(_)p
Fy(t)240 1906 y FG(y)p FF(y)240 1905 y Fz(s)273 1885
y(s)305 1865 y(s)337 1844 y(s)370 1824 y(s)402 1803 y(s)435
1783 y(s)467 1762 y(s)500 1742 y(s)532 1721 y(s)564 1701
y(s)597 1680 y(s)629 1660 y(s)1171 1671 y FQ(^)-42 b
FR(\045)1200 1641 y FD(\000)p Ft(1)1200 1691 y Fy(t)p
FD(_)p Fy(t)1300 1671 y FI(_)6 b FQ(^)-41 b FR(\045)1383
1641 y FD(\000)p Ft(1)1383 1691 y Fy(t)p FD(_)p Fy(t)1640
1584 y FG(/)p FF(/)p 1007 1586 633 4 v 1665 1607 a Fp(\(\()p
Fo(t)21 b Fq(_)e Fo(t)p Fp(\))i Fq(^)e Fo(t)p Fp(\))i
Fq(_)e Fp(\(\()p Fo(t)i Fq(_)f Fo(t)p Fp(\))g Fq(^)g
Fo(t)p Fp(\))2713 1721 y FI(r)2772 1735 y Ft(\()p Fy(t)p
FD(_)p Fy(t)p Ft(\))p FD(^)p Fy(t)3190 1892 y FG(*)p
FF(*)3151 1880 y Fz(U)3112 1868 y(U)3073 1856 y(U)3034
1844 y(U)2995 1832 y(U)2956 1821 y(U)2917 1809 y(U)2878
1797 y(U)2840 1785 y(U)2801 1773 y(U)2762 1761 y(U)2723
1749 y(U)2684 1737 y(U)2645 1726 y(U)2606 1714 y(U)2567
1702 y(U)2528 1690 y(U)2489 1678 y(U)2451 1666 y(U)2412
1654 y(U)64 1988 y Fo(t)g Fq(_)g Fo(t)p 145 1906 4 1304
v 162 1906 V 3215 1982 a Fp(\()p Fo(t)g Fq(_)g Fo(t)p
Fp(\))g Fq(^)g Fo(t)3190 1959 y FG(/)p FF(/)1669 2046
y FQ(^)-41 b FR(\045)1699 2016 y FD(\000)p Ft(1)1699
2067 y Fy(t)p FD(_)p Fy(t)p 271 1961 2920 4 v 0 2270
a FX(where)25 b FS(p)i FX(=)h(\()p FT(q)566 2234 y Fs(t)566
2299 y(t)598 2287 y Fn(8)637 2270 y FT(_)s(q)781 2234
y Fs(t)781 2299 y(t)813 2287 y Fn(8)849 2270 y FX(\))s
FT(^)s FX(\()p FT(q)1072 2234 y Fs(t)1072 2287 y Fn(8)1105
2299 y Fs(t)1144 2270 y FT(_)s(q)1288 2234 y Fs(t)1288
2287 y Fn(8)1320 2299 y Fs(t)1356 2270 y FX(\).)40 b(The)25
b(upp)s(er)f(t)m(w)m(o)g(triangles)g(are)f(\()p FK(B3c)p
FX(\))g(and)h(Theorem)h(7.2)e(\(v\).)0 2390 y(The)49
b(left)f(triangle)g(comm)m(utes)i(b)s(ecause)g(of)e(Prop)s(osition)g
(5.19)f(\(iv\))q(,)52 b(and)c(the)h(triangle)f(at)g(the)0
2511 y(cen)m(ter)43 b(is)g(the)f(monoid)h(equation.)72
b(The)43 b(triangle-shap)s(ed)g(square)g(is)f(the)h(naturalit)m(y)f(of)
51 b(^)-58 b FS(\045)t FX(,)45 b(and)0 2631 y(the)36
b(righ)m(tmost)h(square)f(comm)m(utes)i(b)s(ecause)f(1)1801
2646 y Fs(t)p FI(_)p Fs(t)1940 2631 y FT(^)24 b(r)2113
2646 y Fs(t)2185 2631 y FX(preserv)m(es)38 b(the)f FT(_)p
FX(-m)m(ultiplication,)g(whic)m(h)0 2751 y(follo)m(ws)h(from)g(\(the)g
(dual)g(of)7 b(\))37 b(Prop)s(osition)h(5.15)f(\(ii\))h(and)g(Theorem)h
(7.2)e(\(i\).)59 b(Finally)-8 b(,)40 b(the)e(lo)m(w)m(er)0
2872 y(square)33 b(comm)m(utes)g(b)s(ecause)g(w)m(e)f(assumed)h(that)41
b(^)-58 b FS(\045)1916 2887 y FR(A)2004 2872 y FX(preserv)m(ed)34
b(the)e FT(_)p FX(-m)m(ultiplication.)45 b(Note)31 b(that)0
2992 y(the)49 b(comm)m(utativit)m(y)h(of)e(the)h(outer)f(square)h(sa)m
(ys)h(that)e FT(r)2291 3007 y Fs(t)2375 2992 y FX(is)h(unit)g(for)e
(\001)2956 3007 y Fs(t)p FI(_)p Fs(t)3071 2992 y FX(.)91
b(Therefore,)53 b(b)m(y)0 3113 y(Prop)s(osition)33 b(5.3,)f(w)m(e)i
(can)f(conclude)h(that)1683 3112 y(\024)1644 3113 y FK(nm)28
b FX(=)f(\005)1975 3076 y Fs(t)p FI(_)p Fs(t)2118 3113
y FX(=)g FT(r)2304 3128 y Fs(t)2340 3113 y FX(.)p 3738
3113 42 42 v 0 3297 a FJ(7.8.)42 b(Definition.)33 b FU(A)39
b FK(B3)p FX(-category)g FU(is)f(a)h FK(B2)p FU(-c)-5
b(ate)g(gory)39 b(that)g(ob)-5 b(eys)47 b FX(\()p FK(B3a)p
FX(\))38 b FU(and)g(has)h(me)-5 b(dial)38 b(and)0 3418
y(nul)5 b(lary)35 b(me)-5 b(dial.)0 3602 y FJ(7.9.)46
b(Cor)n(ollar)-7 b(y.)37 b FU(In)k(a)i FK(B3)o FU(-c)-5
b(ate)g(gory,)44 b(the)f(maps)50 b FX(^)-58 b FS(\045)2103
3617 y FR(A)2161 3602 y FU(,)2239 3576 y FX(^)2235 3602
y FS(\025)2292 3617 y FR(A)2349 3602 y FU(,)53 b FX(\024)-58
b FS(\045)2473 3617 y FR(A)2530 3602 y FU(,)45 b(and)2805
3576 y FX(\024)2801 3602 y FS(\025)2858 3617 y FR(A)2958
3602 y FU(ar)-5 b(e)42 b(clonable)f(for)h(al)5 b(l)0
3723 y(obje)-5 b(cts)34 b FS(A)p FU(,)h(i.e,)g(they)g(pr)-5
b(eserve)34 b(b)-5 b(oth)35 b(the)f FT(_)p FU(-multiplic)-5
b(ation)35 b(and)f(the)h FT(^)p FU(-c)-5 b(omultiplic)g(ation.)0
3897 y FJ(Pr)n(oof.)30 b FX(Theorem)35 b(5.18)d(and)i(Prop)s(osition)f
(7.7)g(su\016ce)i(to)e(sho)m(w)h(that)42 b(^)-58 b FS(\045)2784
3912 y FR(A)2874 3897 y FX(is)34 b(clonable.)46 b(F)-8
b(or)3572 3870 y(^)3568 3897 y FS(\025)3625 3912 y FR(A)3715
3897 y FX(it)0 4017 y(is)33 b(similar,)g(and)g(for)41
b(\024)-58 b FS(\045)834 4032 y FR(A)924 4017 y FX(and)1118
3991 y(\024)1114 4017 y FS(\025)1171 4032 y FR(A)1260
4017 y FX(it)33 b(follo)m(ws)g(b)m(y)g(dualit)m(y)-8
b(.)p 3738 4017 V 146 4187 a(It)40 b(has)g(\014rst)h(b)s(een)f(observ)m
(ed)i(b)m(y)f(Lamarc)m(he)f([Lam07])g(that)f(the)h(presence)i(of)e(a)f
(natural)h(and)0 4308 y(self-dual)j(map)g FK(m)702 4323
y FR(A;B)s(;C)q(;D)996 4308 y FX(:)37 b(\()p FS(A)29
b FT(^)g FS(B)5 b FX(\))29 b FT(_)h FX(\()p FS(C)36 b
FT(^)29 b FS(D)s FX(\))44 b FT(!)h FX(\()p FS(A)29 b
FT(_)g FS(C)7 b FX(\))29 b FT(^)h FX(\()p FS(B)k FT(_)29
b FS(D)s FX(\))42 b(in)h(a)f FT(\003)p FX(-autonomous)0
4428 y(category)33 b(induces)h(t)m(w)m(o)g(canonical)f(maps)g
FK(e)1655 4447 y FQ(1)1695 4428 y FS(;)17 b FK(e)1786
4447 y FQ(2)1837 4428 y FX(:)33 b FP(f)38 b FT(!)27 b
FP(t)p FX(,)33 b(namely)269 4717 y FK(e)317 4737 y FQ(1)367
4717 y FX(:)h FP(f)511 4626 y FQ(\024)508 4644 y FR(\025)549
4614 y FD(\000)p Ft(1)549 4668 y Fy(f)629 4693 y FG(/)p
FF(/)p 511 4694 119 4 v 668 4717 a FP(f)e FT(_)23 b FP(f)910
4644 y FQ(^)-42 b FR(\045)939 4614 y FD(\000)p Ft(1)939
4668 y Fy(f)1022 4644 y FI(_)1072 4626 y FQ(^)1069 4644
y FR(\025)1110 4614 y FD(\000)p Ft(1)1110 4668 y Fy(f)1178
4693 y FG(/)p FF(/)p 918 4694 260 4 v 1229 4717 a FX(\()p
FP(f)32 b FT(^)23 b FP(t)p FX(\))f FT(_)g FX(\()p FP(t)g
FT(^)g FP(f)10 b FX(\))1925 4646 y FH(m)1981 4658 y Fy(f)c
FE(;)p Fy(t)p FE(;)p Fy(t)p FE(;)p Fy(f)2168 4693 y FG(/)p
FF(/)p 1908 4694 V 2187 4717 a FX(\()p FP(f)33 b FT(_)22
b FP(t)p FX(\))g FT(^)g FX(\()p FP(t)g FT(_)h FP(f)10
b FX(\))2898 4637 y FQ(\024)2895 4655 y FR(\025)2936
4664 y Fy(t)2967 4655 y FI(^)c FQ(\024)-41 b FR(\045)3050
4664 y Fy(t)3118 4693 y FG(/)p FF(/)p 2858 4694 V 3129
4717 a FP(t)22 b FT(^)g FP(t)3370 4655 y FQ(^)-42 b FR(\045)3399
4664 y Fy(t)3456 4693 y FG(/)p FF(/)p 3338 4694 119 4
v 3467 4717 a FP(t)0 4937 y FX(and)269 5207 y FK(e)317
5226 y FQ(2)367 5207 y FX(:)34 b FP(f)511 5116 y FQ(\024)508
5134 y FR(\025)549 5104 y FD(\000)p Ft(1)549 5158 y Fy(f)629
5182 y FG(/)p FF(/)p 511 5184 V 668 5207 a FP(f)e FT(_)23
b FP(f)906 5116 y FQ(^)903 5134 y FR(\025)944 5104 y
FD(\000)p Ft(1)944 5158 y Fy(f)1027 5134 y FI(_)6 b FQ(^)-41
b FR(\045)1110 5104 y FD(\000)p Ft(1)1110 5158 y Fy(f)1178
5182 y FG(/)p FF(/)p 918 5184 260 4 v 1229 5207 a FX(\()p
FP(t)21 b FT(^)i FP(f)10 b FX(\))23 b FT(_)f FX(\()p
FP(f)33 b FT(^)22 b FP(t)p FX(\))1925 5136 y FH(m)1981
5148 y Fy(t)p FE(;)p Fy(f)6 b FE(;)p Fy(f)g FE(;)p Fy(t)2168
5182 y FG(/)p FF(/)p 1908 5184 V 2187 5207 a FX(\()p
FP(t)22 b FT(_)g FP(f)10 b FX(\))23 b FT(^)f FX(\()p
FP(f)33 b FT(_)22 b FP(t)p FX(\))2901 5145 y FQ(\024)-41
b FR(\045)2931 5154 y Fy(t)2962 5145 y FI(^)3012 5127
y FQ(\024)3009 5145 y FR(\025)3050 5154 y Fy(t)3118 5182
y FG(/)p FF(/)p 2858 5184 V 3129 5207 a FP(t)22 b FT(^)g
FP(t)3370 5145 y FQ(^)-42 b FR(\045)3399 5154 y Fy(t)3456
5182 y FG(/)p FF(/)p 3338 5184 119 4 v 3467 5207 a FP(t)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 572 37
TeXDict begin 572 36 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(572)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 327 a FX(whic)m(h)37 b(are)f(b)s(oth)f(self-dual)i
(\(while)f(\005)1441 291 y Fs(f)1514 327 y FX(and)g FT(q)1782
291 y Fs(t)1853 327 y FX(are)g(dual)g(to)f(eac)m(h)i(other\).)53
b(By)36 b(adding)g(su\016cien)m(t)0 448 y(structure)43
b(one)e(can)h(enforce)g(that)f FK(e)1412 467 y FQ(1)1494
448 y FX(=)h FK(e)1660 467 y FQ(2)1741 448 y FX(and)f(that)g(this)h
(map)g(has)g(the)g(prop)s(erties)g(of)f(Theo-)0 568 y(rem)31
b(4.1.)42 b(In)31 b([Lam07],)g(Lamarc)m(he)g(sho)m(ws)h(ho)m(w)g(this)f
(can)f(b)s(e)h(done)g(without)g(the)g FT(^)p FX(-comonoid)g(and)0
688 y FT(_)p FX(-monoid)40 b(structure)g(for)f(ev)m(ery)j(ob)5
b(ject)40 b(b)m(y)g(using)g(equation)h(\()p FK(m)t FX(-)5
b(^)-54 b FS(\033)t FX(\))39 b(that)h(w)m(e)g(will)g(in)m(tro)s(duce)h
(in)0 809 y(Prop)s(osition)d(7.13.)58 b(In)39 b(our)e(case)i(the)f
(structure)h(of)e(a)h FK(B2)o FX(-category)g(is)g(su\016cien)m(t)i(to)d
(obtain)h(that)0 929 y FK(e)48 948 y FQ(1)125 929 y FX(=)g
FK(e)286 948 y FQ(2)326 929 y FX(.)61 b(But)39 b(for)f(letting)h(this)g
(map)g(ha)m(v)m(e)g(the)g(prop)s(erties)h(of)e(Theorem)i(4.1,)g(as)e
(it)h(is)g(the)g(case)0 1049 y(with)33 b(\005)295 1013
y Fs(f)365 1049 y FX(and)f FT(q)629 1013 y Fs(t)665 1049
y FX(,)h(w)m(e)g(need)h(all)e(the)h(structure)h(of)e(a)g
FK(B3)p FX(-category)-8 b(.)43 b(Then)34 b(w)m(e)g(ha)m(v)m(e)f(the)g
(follo)m(wing:)0 1234 y FJ(7.10.)j(Theorem.)29 b FU(In)k(a)g
FK(B3)p FU(-c)-5 b(ate)g(gory)33 b(we)h(have)f FX(\005)1950
1198 y Fs(f)2014 1234 y FX(=)28 b FK(e)2165 1253 y FQ(1)2232
1234 y FX(=)g FK(e)2383 1253 y FQ(2)2451 1234 y FX(=)f
FT(q)2629 1198 y Fs(t)2665 1234 y FU(,)33 b(i.e.,)h(every)f
FK(B3)p FU(-c)-5 b(ate)g(gory)33 b(is)0 1355 y(single-mixe)-5
b(d.)0 1521 y FJ(Pr)n(oof.)30 b FX(W)-8 b(e)33 b(will)g(\014rst)g(sho)m
(w)h(that)e(\005)1452 1485 y Fs(f)1517 1521 y FX(=)27
b FK(e)1668 1540 y FQ(1)1707 1521 y FX(.)44 b(F)-8 b(or)31
b(this,)j(note)f(that)73 1725 y Fp(\()112 1701 y(\024)108
1725 y Fr(\025)161 1739 y Fs(t)217 1725 y Fq(^)28 b Fp(\024)-53
b Fr(\045)345 1739 y Fs(t)381 1725 y Fp(\))20 b Fq(\016)h
Fj(m)574 1740 y Fs(f)8 b FR(;)p Fs(t)p FR(;)p Fs(t)p
FR(;)p Fs(f)786 1725 y Fq(\016)21 b Fp(\()8 b(^)-53 b
Fr(\045)934 1687 y FI(\000)p FQ(1)934 1755 y Fs(f)1049
1725 y Fq(_)1133 1701 y Fp(^)1130 1725 y Fr(\025)1183
1687 y FI(\000)p FQ(1)1183 1755 y Fs(f)1277 1725 y Fp(\))83
1892 y(=)68 b(\()261 1868 y(\024)257 1892 y Fr(\025)310
1906 y Fs(t)366 1892 y Fq(^)28 b Fp(\024)-53 b Fr(\045)494
1906 y Fs(t)530 1892 y Fp(\))20 b Fq(\016)651 1792 y
Fg(D)14 b(h)780 1892 y Fq(q)848 1855 y Fs(t)848 1919
y(f)881 1907 y Fn(8)937 1892 y Fq(\016)20 b Fp(\005)1070
1855 y Fs(t)1070 1919 y(f)1103 1907 y Fn(8)1139 1892
y Fr(;)15 b Fq(q)1247 1855 y Fs(f)1247 1907 y Fn(8)1280
1919 y Fs(t)1336 1892 y Fq(\016)20 b Fp(\005)1469 1855
y Fs(f)1469 1919 y(t)1501 1907 y Fn(8)1552 1792 y Fg(i)1610
1892 y Fr(;)1650 1792 y Fg(h)1709 1892 y Fq(q)1777 1855
y Fs(f)1777 1919 y(t)1809 1907 y Fn(8)1865 1892 y Fq(\016)g
Fp(\005)1998 1855 y Fs(f)1998 1907 y Fn(8)2030 1919 y
Fs(t)2066 1892 y Fr(;)15 b Fq(q)2174 1855 y Fs(t)2174
1907 y Fn(8)2207 1919 y Fs(f)2264 1892 y Fq(\016)20 b
Fp(\005)2397 1855 y Fs(t)2397 1907 y Fn(8)2429 1919 y
Fs(f)2481 1792 y Fg(i)15 b(E)2615 1892 y Fq(\016)21 b
Fp(\()8 b(^)-53 b Fr(\045)2763 1854 y FI(\000)p FQ(1)2763
1922 y Fs(f)2878 1892 y Fq(_)2962 1868 y Fp(^)2959 1892
y Fr(\025)3012 1854 y FI(\000)p FQ(1)3012 1922 y Fs(f)3106
1892 y Fp(\))83 2089 y(=)222 1988 y Fg(D)14 b(h)354 2065
y Fp(\024)350 2089 y Fr(\025)403 2103 y Fs(t)459 2089
y Fq(\016)21 b(q)593 2052 y Fs(t)593 2116 y(f)626 2104
y Fn(8)682 2089 y Fq(\016)g Fp(\005)816 2052 y Fs(t)816
2116 y(f)849 2104 y Fn(8)905 2089 y Fq(\016)29 b Fp(^)-53
b Fr(\045)1018 2051 y FI(\000)p FQ(1)1018 2119 y Fs(f)1112
2089 y Fr(;)1156 2065 y Fp(\024)1152 2089 y Fr(\025)1205
2103 y Fs(t)1261 2089 y Fq(\016)21 b(q)1395 2052 y Fs(f)1395
2104 y Fn(8)1427 2116 y Fs(t)1483 2089 y Fq(\016)g Fp(\005)1617
2052 y Fs(f)1617 2116 y(t)1649 2104 y Fn(8)1705 2089
y Fq(\016)1774 2065 y Fp(^)1770 2089 y Fr(\025)1823 2051
y FI(\000)p FQ(1)1823 2119 y Fs(f)1933 1988 y Fg(i)1991
2089 y Fr(;)2031 1988 y Fg(h)2098 2089 y Fp(\024)-54
b Fr(\045)2136 2103 y Fs(t)2192 2089 y Fq(\016)21 b(q)2326
2052 y Fs(f)2326 2116 y(t)2358 2104 y Fn(8)2414 2089
y Fq(\016)g Fp(\005)2548 2052 y Fs(f)2548 2104 y Fn(8)2580
2116 y Fs(t)2636 2089 y Fq(\016)29 b Fp(^)-54 b Fr(\045)2748
2051 y FI(\000)p FQ(1)2748 2119 y Fs(f)2843 2089 y Fr(;)23
b Fp(\024)-53 b Fr(\045)2930 2103 y Fs(t)2986 2089 y
Fq(\016)21 b(q)3120 2052 y Fs(t)3120 2104 y Fn(8)3152
2116 y Fs(f)3209 2089 y Fq(\016)f Fp(\005)3342 2052 y
Fs(t)3342 2104 y Fn(8)3374 2116 y Fs(f)3432 2089 y Fq(\016)3501
2065 y Fp(^)3497 2089 y Fr(\025)3550 2051 y FI(\000)p
FQ(1)3550 2119 y Fs(f)3660 1988 y Fg(i)15 b(E)83 2286
y Fp(=)222 2185 y Fg(D)f(h)350 2286 y Fq(q)418 2249 y
Fs(t)454 2286 y Fr(;)h Fp(\005)562 2249 y Fs(f)615 2185
y Fg(i)673 2286 y Fr(;)713 2185 y Fg(h)772 2286 y Fp(\005)840
2249 y Fs(f)877 2286 y Fr(;)g Fq(q)985 2249 y Fs(t)1036
2185 y Fg(i)g(E)0 2520 y FX(The)42 b(\014rst)f(equation)h(is)g(an)f
(application)g(of)g(Theorem)h(7.2)e(\(iii\))q(,)j(the)e(second)h(one)g
(uses)g(Prop)s(osi-)0 2640 y(tion)f(5.19)f(together)h(with)g(the)h
(fact)e(that)50 b(^)-58 b FS(\045)1693 2655 y Fs(f)1771
2640 y FX(and)1973 2614 y(^)1969 2640 y FS(\025)2026
2655 y Fs(f)2103 2640 y FX(preserv)m(e)43 b(the)f FT(^)p
FX(-com)m(ultiplication)g(\(Theo-)0 2760 y(rem)32 b(5.18\))e(and)i
(that)f(these)h(maps)g(are)f(closed)i(under)f FT(_)f
FX(\(Theorem)i(7.2)e(\(i\)\).)42 b(The)33 b(third)e(equation)0
2881 y(is)36 b(an)g(easy)g(calculation,)h(in)m(v)m(olving)i(\(26\))c
(and)g(the)h(naturalit)m(y)g(of)44 b(^)-57 b FS(\045)40
b FX(and)2834 2854 y(^)2830 2881 y FS(\025)t FX(.)53
b(Before)35 b(w)m(e)i(pro)s(ceed,)0 3001 y(notice)c(that:)145
3221 y(\005)218 3180 y Fs(t)218 3234 y Fn(8)250 3246
y Fs(t)314 3221 y FX(=)421 3195 y(^)417 3221 y FS(\025)474
3236 y Fs(t)538 3221 y FX(=)j(^)-58 b FS(\045)691 3236
y Fs(t)755 3221 y FX(=)28 b(\005)932 3180 y Fs(t)932
3246 y(t)964 3234 y Fn(8)1010 3221 y FX(:)34 b FP(t)21
b FT(^)i FP(t)k FT(!)h FP(t)194 b FX(and)h FT(q)2089
3180 y Fs(f)2089 3234 y Fn(8)2121 3246 y Fs(f)2186 3221
y FX(=)2293 3195 y(^)2289 3221 y FS(\025)2346 3180 y
FI(\000)p FQ(1)2346 3249 y Fs(f)2468 3221 y FX(=)36 b(^)-57
b FS(\045)2622 3180 y FI(\000)p FQ(1)2622 3249 y Fs(f)2744
3221 y FX(=)27 b FT(q)2922 3180 y Fs(f)2922 3246 y(f)2955
3234 y Fn(8)3002 3221 y FX(:)33 b FP(f)38 b FT(!)28 b
FP(f)k FT(_)23 b FP(f)156 b FX(\(41\))0 3441 y(No)m(w)33
b(w)m(e)h(ha)m(v)m(e:)860 3661 y FK(e)908 3680 y FQ(1)1030
3661 y FX(=)92 b(^)-58 b FS(\045)1239 3676 y Fs(t)1298
3661 y FT(\016)21 b FX(\()1411 3635 y(\024)1407 3661
y FS(\025)1464 3676 y Fs(t)1522 3661 y FT(^)32 b FX(\024)-58
b FS(\045)1661 3676 y Fs(t)1697 3661 y FX(\))22 b FT(\016)g
FK(m)1906 3676 y Fs(f)8 b FR(;)p Fs(t)p FR(;)p Fs(t)p
FR(;)p Fs(f)2120 3661 y FT(\016)22 b FX(\()9 b(^)-58
b FS(\045)2280 3620 y FI(\000)p FQ(1)2280 3689 y Fs(f)2397
3661 y FT(_)2489 3635 y FX(^)2485 3661 y FS(\025)2542
3620 y FI(\000)p FQ(1)2542 3689 y Fs(f)2636 3661 y FX(\))22
b FT(\016)2772 3635 y FX(\024)2768 3661 y FS(\025)2825
3620 y FI(\000)p FQ(1)2825 3689 y Fs(f)1030 3806 y FX(=)92
b(^)-58 b FS(\045)1239 3821 y Fs(t)1298 3806 y FT(\016)1369
3726 y Fh(\012)17 b(\002)1491 3806 y FT(q)1566 3765 y
Fs(t)1602 3806 y FS(;)g FX(\005)1719 3765 y Fs(f)1772
3726 y Fh(\003)1830 3806 y FS(;)1874 3726 y Fh(\002)1932
3806 y FX(\005)2005 3765 y Fs(f)2042 3806 y FS(;)g FT(q)2161
3765 y Fs(t)2213 3726 y Fh(\003)f(\013)2340 3806 y FT(\016)2416
3780 y FX(\024)2412 3806 y FS(\025)2469 3765 y FI(\000)p
FQ(1)2469 3834 y Fs(f)1030 3963 y FX(=)92 b(^)-58 b FS(\045)1239
3978 y Fs(t)1298 3963 y FT(\016)1369 3883 y Fh(\012)17
b(\002)1491 3963 y FT(q)1566 3922 y Fs(t)1602 3963 y
FS(;)g FX(\005)1719 3922 y Fs(f)1772 3883 y Fh(\003)1836
3963 y FT(\016)1912 3937 y FX(\024)1908 3963 y FS(\025)1965
3922 y FI(\000)p FQ(1)1965 3991 y Fs(f)2059 3963 y FS(;)2103
3883 y Fh(\002)2161 3963 y FX(\005)2234 3922 y Fs(f)2271
3963 y FS(;)g FT(q)2390 3922 y Fs(t)2442 3883 y Fh(\003)2505
3963 y FT(\016)2581 3937 y FX(\024)2577 3963 y FS(\025)2634
3922 y FI(\000)p FQ(1)2634 3991 y Fs(f)2745 3883 y Fh(\013)1030
4119 y FX(=)83 b(\005)1262 4078 y Fs(t)1262 4143 y(t)1294
4131 y Fn(8)1352 4119 y FT(\016)1424 4038 y Fh(\012)17
b(\002)1546 4119 y FT(q)1621 4078 y Fs(t)1656 4119 y
FS(;)g FX(\005)1773 4078 y Fs(f)1827 4038 y Fh(\003)1890
4119 y FT(\016)22 b(q)2037 4078 y Fs(f)2037 4131 y Fn(8)2069
4143 y Fs(f)2106 4119 y FS(;)2150 4038 y Fh(\002)2208
4119 y FX(\005)2281 4078 y Fs(f)2318 4119 y FS(;)17 b
FT(q)2437 4078 y Fs(t)2488 4038 y Fh(\003)2552 4119 y
FT(\016)22 b(q)2699 4078 y Fs(f)2699 4143 y(f)2732 4131
y Fn(8)2784 4038 y Fh(\013)1030 4274 y FX(=)83 b(\005)1262
4233 y Fs(t)1262 4299 y(t)1294 4287 y Fn(8)1352 4274
y FT(\016)1424 4193 y Fh(\012)1488 4274 y FX(\005)1561
4233 y Fs(f)1598 4274 y FS(;)17 b FX(\005)1715 4233 y
Fs(f)1768 4193 y Fh(\013)1030 4429 y FX(=)83 b(\005)1262
4388 y Fs(f)0 4649 y FX(The)25 b(\014rst)g(t)m(w)m(o)g(equations)g(are)
g(just)f(the)h(de\014nition)g(of)f FK(e)2064 4669 y FQ(1)2127
4649 y FX(and)h(the)f(previous)i(calculation.)41 b(The)26
b(third)0 4770 y(equation)k(uses)h(Prop)s(osition)f(5.19)f(and)h(the)g
(fact)f(that)2078 4744 y(\024)2073 4770 y FS(\025)2130
4785 y Fs(f)2195 4770 y FX(=)36 b(\024)-58 b FS(\045)2348
4785 y Fs(f)2415 4770 y FX(preserv)m(es)33 b(the)d FT(^)p
FX(-com)m(ultiplication)0 4890 y(\(Corollary)37 b(7.9\).)58
b(The)38 b(fourth)f(equation)h(applies)g(\(41\),)g(and)f(the)h(last)g
(t)m(w)m(o)g(equations)g(are)f(again)0 5011 y(Prop)s(osition)j(5.19,)g
(together)g(with)g(the)g(fact)f(that)g FT(q)2061 4974
y Fs(t)2136 5011 y FX(preserv)m(es)k(the)c FT(_)p FX(-unit)h(and)g
(\005)3318 4974 y Fs(f)3394 5011 y FX(preserv)m(es)0
5131 y(the)j FT(^)p FX(-counit)f(\(Theorem)i(5.18\).)72
b(Similarly)-8 b(,)46 b(w)m(e)d(sho)m(w)g(that)f FK(e)2474
5150 y FQ(2)2558 5131 y FX(=)i(\005)2751 5095 y Fs(f)2830
5131 y FX(and)e(dually)-8 b(,)46 b(w)m(e)d(obtain)0 5251
y FK(e)48 5270 y FQ(1)115 5251 y FX(=)27 b FK(e)266 5270
y FQ(2)333 5251 y FX(=)g FT(q)511 5215 y Fs(t)547 5251
y FX(.)p 3738 5251 42 42 v 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 573 38
TeXDict begin 573 37 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(573)p 0 TeXcolorgray
0 320 a FJ(7.11.)36 b(Theorem.)28 b FU(In)33 b(a)g FK(B3)p
FU(-c)-5 b(ate)g(gory,)33 b(the)h(str)-5 b(ong)33 b(maps)f(\(in)h
(fact,)h(al)5 b(l)33 b(typ)-5 b(es)33 b(of)g(maps)g(de\014ne)-5
b(d)32 b(in)0 440 y(De\014nition)k(5.4\))g(ar)-5 b(e)37
b(close)-5 b(d)37 b(under)g FT(^)g FU(and)g FT(_)p FU(.)52
b(F)-7 b(urthermor)i(e,)36 b(the)h(maps)g FK(m)2939 455
y FR(A;B)s(;C)q(;D)3259 440 y FU(and)3500 439 y FX(\024)3461
440 y FK(nm)h FU(and)39 559 y FX(^)0 560 y FK(nm)d FU(ar)-5
b(e)35 b(str)-5 b(ong.)0 727 y FJ(Pr)n(oof.)39 b FX(By)49
b(Prop)s(ositions)f(5.13)g(and)g(5.15,)j(the)e FT(^)p
FX(-comonoid)f(morphisms)i(are)e(closed)h(under)0 847
y FT(^)p FX(,)f(and)c(b)m(y)h(Prop)s(osition)f(7.5)g(and)h(Theorem)g
(7.2)f(they)h(are)f(closed)i(under)f FT(_)p FX(.)78 b(Dually)-8
b(,)47 b(the)e FT(_)p FX(-)0 968 y(monoid)26 b(morphisms)h(are)f
(closed)h(under)g FT(_)f FX(and)f FT(^)p FX(,)j(and)e(therefore)g(also)
g(the)g(strong)g(maps)g(ha)m(v)m(e)h(this)0 1088 y(prop)s(ert)m(y)-8
b(.)43 b(Since)30 b(b)m(y)g(Theorem)h(7.2)d(\(v\))q(,)h(medial)h(is)g
(\(\(\005)2111 1052 y FR(B)2111 1118 y(A)2164 1106 y
Fn(8)2215 1088 y FT(_)15 b FX(\005)2369 1052 y FR(D)2369
1118 y(C)2424 1106 y Fn(8)2460 1088 y FX(\))g FT(^)g
FX(\(\005)2705 1052 y FR(A)2705 1106 y Fn(8)2738 1118
y FR(B)2813 1088 y FT(_)g FX(\005)2967 1052 y FR(C)2967
1106 y Fn(8)3000 1118 y FR(D)3064 1088 y FX(\)\))g FT(\016)f
FX(\001)3300 1104 y FQ(\()p FR(A)p FI(^)p FR(B)s FQ(\))p
FI(_)p FQ(\()p FR(C)5 b FI(^)p FR(D)r FQ(\))0 1209 y
FX(as)40 b(w)m(ell)g(as)g FT(r)541 1224 y FQ(\()p FR(A)p
FI(_)p FR(C)5 b FQ(\))p FI(^)p FQ(\()p FR(B)s FI(_)p
FR(D)r FQ(\))1047 1209 y FT(\016)26 b FX(\(\()p FT(q)1274
1172 y FR(C)1274 1238 y(A)1327 1226 y Fn(8)1389 1209
y FT(^)i(q)1558 1172 y FR(D)1558 1238 y(B)1614 1226 y
Fn(8)1650 1209 y FX(\))e FT(_)i FX(\()p FT(q)1921 1172
y FR(A)1921 1226 y Fn(8)1952 1238 y FR(C)2038 1209 y
FT(^)f(q)2206 1172 y FR(B)2206 1226 y Fn(8)2238 1238
y FR(D)2302 1209 y FX(\)\),)41 b(w)m(e)f(ha)m(v)m(e)h(b)m(y)f(Theorem)g
(5.18)f(that)0 1329 y(it)k(is)h(a)f FT(^)p FX(-comonoid)h(morphism)g
(and)f(a)g FT(_)p FX(-monoid)h(morphism,)j(and)c(therefore)h(strong.)76
b(Since)39 1448 y(\024)0 1449 y FK(nm)28 b FX(=)f(\005)331
1413 y Fs(t)p FI(_)p Fs(t)474 1449 y FX(=)g FT(r)660
1464 y Fs(t)696 1449 y FX(,)k(w)m(e)g(get)f(again)g(from)g(Theorem)i
(5.18)e(that)g(it)g(is)h(a)f FT(^)p FX(-comonoid)g(morphism)i(and)0
1570 y(a)g FT(_)p FX(-monoid)h(morphism.)45 b(Similarly)33
b(for)1624 1569 y(^)1584 1570 y FK(nm)28 b FX(=)g FT(q)1918
1534 y Fs(f)8 b FI(^)p Fs(f)2062 1570 y FX(=)27 b(\001)2246
1585 y Fs(f)2284 1570 y FX(.)p 3738 1570 42 42 v 0 1747
a FJ(7.12.)45 b(Pr)n(oposition.)34 b FU(In)41 b(a)g FK(B3)o
FU(-c)-5 b(ate)g(gory)41 b(the)g(maps)51 b FX(\024)-59
b FS(\013)2193 1762 y FR(A;B)s(;C)2401 1747 y FU(,)47
b FX(\024)-54 b FS(\033)2528 1762 y FR(A;B)2662 1747
y FU(,)2739 1721 y FX(\024)2735 1747 y FS(\025)2792 1762
y FR(A)2849 1747 y FU(,)42 b(and)50 b FX(\024)-58 b FS(\045)3167
1762 y FR(A)3266 1747 y FU(pr)-5 b(eserve)40 b(the)0
1879 y FT(^)p FU(-c)-5 b(ounit)38 b(for)f(al)5 b(l)36
b(obje)-5 b(cts)37 b FS(A;)17 b(B)5 b(;)17 b(C)7 b FU(.)51
b(Dual)5 b(ly,)38 b(the)f(maps)46 b FX(^)-58 b FS(\013)2243
1894 y FR(A;B)s(;C)2450 1879 y FU(,)43 b FX(^)-54 b FS(\033)2573
1894 y FR(A;B)2707 1879 y FU(,)2778 1853 y FX(^)2774
1879 y FS(\025)2831 1894 y FR(A)2888 1879 y FU(,)38 b(and)45
b FX(^)-58 b FS(\045)3197 1894 y FR(A)3292 1879 y FU(al)5
b(l)37 b(pr)-5 b(eserve)0 1999 y(the)35 b FT(_)p FU(-unit.)0
2166 y FJ(Pr)n(oof.)27 b FX(As)i(b)s(efore,)h(the)g(cases)g(for)38
b(\024)-58 b FS(\013)1441 2181 y FR(A;B)s(;C)1678 2166
y FX(and)34 b(\024)-54 b FS(\033)1919 2181 y FR(A;B)2081
2166 y FX(are)29 b(similar.)43 b(This)31 b(time,)f(w)m(e)g(sho)m(w)h
(the)e(case)0 2286 y(for)42 b(\024)-59 b FS(\013)211
2301 y FR(A;B)s(;C)419 2286 y FX(:)1097 2460 y FS(A)22
b FT(_)h FX(\()p FS(B)k FT(_)22 b FS(C)7 b FX(\))1782
2389 y FQ(\024)-42 b FR(\013)1820 2400 y FE(A;B)r(;C)2132
2435 y FG(/)p FF(/)p 1648 2436 484 4 v 873 2662 a FQ(\005)926
2639 y FE(A)976 2662 y FI(_)p FQ(\(\005)1103 2639 y FE(B)1156
2662 y FI(_)p FQ(\005)1256 2639 y FE(C)1308 2662 y FQ(\))1360
2774 y FG(\017)p FF(\017)p 1358 2774 4 265 v 2157 2460
a FX(\()p FS(A)22 b FT(_)g FS(B)5 b FX(\))23 b FT(_)f
FS(C)2445 2662 y FQ(\(\005)2525 2639 y FE(A)2575 2662
y FI(_)p FQ(\005)2675 2639 y FE(B)2728 2662 y FQ(\))p
FI(_)p FQ(\005)2855 2639 y FE(C)2420 2774 y FG(\017)p
FF(\017)p 2418 2774 V 1146 2873 a FP(t)g FT(_)g FX(\()p
FP(t)g FT(_)h FP(t)p FX(\))1813 2915 y FQ(\024)-42 b
FR(\013)1851 2924 y Fy(t)p FE(;)p Fy(t)p FE(;)p Fy(t)2181
2849 y FG(/)p FF(/)p 1599 2850 583 4 v 1166 3074 a Fs(t)p
FI(_r)1304 3083 y Fy(t)1360 3188 y FG(\017)p FF(\017)p
1358 3188 4 265 v 2206 2873 a FX(\()p FP(t)22 b FT(_)g
FP(t)p FX(\))g FT(_)g FP(t)2445 3074 y FI(r)2504 3083
y Fy(t)2535 3074 y FI(_)p Fs(t)2420 3188 y FG(\017)p
FF(\017)p 2418 3188 V 1261 3276 a FP(t)g FT(_)g FP(t)1589
3441 y FI(r)1648 3450 y Fy(t)1843 3445 y FG(\()p FF(\()1805
3429 y Fz(R)1769 3414 y(R)1734 3399 y(R)1698 3384 y(R)1662
3370 y(R)1627 3355 y(R)1591 3340 y(R)1555 3325 y(R)1520
3310 y(R)1484 3295 y(R)2321 3276 y FP(t)g FT(_)g FP(t)2100
3441 y FI(r)2159 3450 y Fy(t)1937 3445 y FG(v)p FF(v)p
Fz(l)1972 3430 y(l)2008 3415 y(l)2044 3400 y(l)2079 3385
y(l)2115 3370 y(l)2151 3356 y(l)2186 3341 y(l)2222 3326
y(l)2258 3311 y(l)1868 3496 y FP(t)0 3631 y FX(The)30
b(square)h(is)f(naturalit)m(y)g(of)39 b(\024)-59 b FS(\013)t
FX(,)30 b(and)g(the)g(p)s(en)m(tagon)f(is)h(asso)s(ciativit)m(y)h(of)e
FT(r)t FX(.)43 b(The)30 b(left)g(do)m(wn)g(path)0 3751
y(is)35 b(\005)173 3715 y FR(A)p FI(_)p FQ(\()p FR(B)s
FI(_)p FR(C)5 b FQ(\))524 3751 y FX(and)35 b(the)f(righ)m(t)h(do)m(wn)g
(path)f(is)g(\005)1783 3715 y FQ(\()p FR(A)p FI(_)p FR(B)s
FQ(\))p FI(_)p FR(C)2135 3751 y FX(\(b)s(ecause)i(of)k(\()p
FK(B3b)p FX(\))34 b(and)g(\()p FK(B3a)p FX(\))o(\).)48
b(F)-8 b(or)42 b(\024)-57 b FS(\045)3696 3766 y FR(A)3753
3751 y FX(,)0 3872 y(c)m(hase)1196 4020 y FS(A)22 b FT(_)h
FP(f)1927 3947 y FQ(\024)-42 b FR(\045)1956 3958 y FE(A)2478
3985 y FG(/)p FF(/)p 1449 3986 1029 4 v 1593 4075 a FQ(\005)1646
4052 y FE(A)1696 4075 y FI(_)p Fs(f)1839 4168 y FG(\))p
FF(\))1800 4154 y Fz(T)1761 4141 y(T)1722 4127 y(T)1683
4114 y(T)1644 4100 y(T)1605 4087 y(T)1566 4073 y(T)1527
4060 y(T)1488 4046 y(T)1449 4033 y(T)1423 4372 y FQ(\005)1476
4349 y FE(A)1526 4372 y FI(_)p FQ(\005)1626 4349 y Fy(f)1903
4535 y FG( )p FF( )1872 4507 y Fz(A)1843 4479 y(A)1814
4452 y(A)1784 4425 y(A)1755 4398 y(A)1726 4371 y(A)1696
4343 y(A)1667 4316 y(A)1638 4289 y(A)1608 4262 y(A)1579
4235 y(A)1550 4207 y(A)1520 4180 y(A)1491 4153 y(A)1462
4126 y(A)1433 4099 y(A)1403 4071 y(A)1374 4044 y(A)2503
4019 y FS(A)2564 4428 y FQ(\005)2617 4405 y FE(A)2539
4755 y FG(\017)p FF(\017)p 2538 4755 4 712 v 1864 4245
a FP(t)22 b FT(_)g FP(f)1799 4360 y Fs(t)p FI(_q)1931
4336 y Fy(t)1963 4535 y FG(\017)p FF(\017)p 1962 4535
4 265 v 2252 4481 a FQ(\024)-41 b FR(\045)2282 4490 y
Fy(t)2493 4763 y FG(\036)p FF(\036)2464 4733 y Fz(>)2436
4704 y(>)2408 4675 y(>)2381 4646 y(>)2353 4617 y(>)2325
4588 y(>)2297 4560 y(>)2270 4531 y(>)2242 4502 y(>)2214
4473 y(>)2186 4444 y(>)2159 4415 y(>)2131 4386 y(>)2103
4357 y(>)2076 4328 y(>)2048 4299 y(>)2020 4270 y(>)1864
4623 y FP(t)22 b FT(_)h FP(t)1556 4689 y FQ(\024)1528
4690 y FH(nm)1357 4796 y FG(t)p FF(t)p Fz(j)1394 4784
y(j)1431 4771 y(j)1467 4759 y(j)1504 4746 y(j)1541 4734
y(j)1578 4721 y(j)1615 4709 y(j)1652 4696 y(j)1689 4684
y(j)1726 4671 y(j)1763 4659 y(j)1800 4646 y(j)2207 4682
y FI(r)2266 4691 y Fy(t)2493 4794 y FG(\))p FF(\))2454
4779 y Fz(S)2417 4765 y(S)2380 4751 y(S)2344 4737 y(S)2307
4723 y(S)2270 4709 y(S)2234 4695 y(S)2197 4681 y(S)2161
4667 y(S)2124 4653 y(S)2087 4638 y(S)1288 4843 y FP(t)1310
4755 y FG(\017)p FF(\017)1113 4429 y FQ(\005)1166 4405
y FE(A)p FD(_)p Fy(f)p 1308 4755 4 711 v 2518 4843 a
FP(t)p 1357 4821 1137 4 v 1357 4805 V 0 4984 a FX(The)31
b(upp)s(er)g(righ)m(t)g(quadrangle)g(is)g(naturalit)m(y)g(of)39
b(\024)-58 b FS(\045)t FX(.)43 b(The)31 b(leftmost)g(triangle)g(is)g
(\()p FK(B3b)p FX(\))o(.)43 b(The)31 b(one)g(in)0 5104
y(the)d(cen)m(ter)h(next)f(to)f(it)g(comm)m(utes)j(b)s(ecause)e(of)f
(functorialit)m(y)i(of)e FT(_)g FX(and)h(\005)2791 5068
y Fs(f)2856 5104 y FX(=)f FT(q)3034 5068 y Fs(t)3097
5104 y FX(\(Theorem)i(7.10\).)0 5225 y(The)h(lo)m(w)m(er)g(righ)m(t)e
(triangle)h(the)g(the)h(monoid)f(equation)g(and)g(the)g(triangle)g(at)f
(the)h(b)s(ottom)g(is)g(\()p FK(B3a)p FX(\))o(.)0 5345
y(The)34 b(case)f(for)560 5319 y(\024)556 5345 y FS(\025)613
5360 y FR(A)702 5345 y FX(is)h(similar.)p 3738 5345 42
42 v 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 574 39
TeXDict begin 574 38 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(574)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FJ(7.13.)37 b(Pr)n(oposition.)30
b FU(In)k(a)h FK(B3)p FU(-c)-5 b(ate)g(gory)34 b(the)h(fol)5
b(lowing)34 b(ar)-5 b(e)34 b(e)-5 b(quivalent:)p 0 TeXcolorgray
79 499 a FX(\(i\))p 0 TeXcolorgray 48 w FU(The)35 b(e)-5
b(quation)988 752 y FX(\()p FS(A)23 b FT(^)f FS(B)5 b
FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)23 b FS(D)s
FX(\))1055 914 y FH(m)1111 925 y FE(A;B)r(;C;D)1387 1017
y FG(\017)p FF(\017)p 1385 1017 4 215 v 2225 752 a FX(\()p
FS(B)k FT(^)c FS(A)p FX(\))f FT(_)h FX(\()p FS(D)h FT(^)f
FS(C)7 b FX(\))2200 728 y FG(/)p FF(/)1827 682 y FQ(^)-39
b FR(\033)1863 693 y FE(A;B)1981 682 y FI(_)t FQ(^)g
FR(\033)2068 693 y FE(C;D)p 1810 730 391 4 v 988 1116
a FX(\()p FS(A)23 b FT(_)f FS(C)7 b FX(\))22 b FT(^)h
FX(\()p FS(B)k FT(_)c FS(D)s FX(\))1841 1163 y FQ(^)-39
b FR(\033)1877 1174 y FE(A)p FD(_)p FE(C;B)r FD(_)p FE(D)2200
1091 y FG(/)p FF(/)p 1810 1093 V 2225 1116 a FX(\()p
FS(B)27 b FT(_)c FS(D)s FX(\))f FT(^)g FX(\()p FS(A)g
FT(_)h FS(C)7 b FX(\))2624 1017 y FG(\017)p FF(\017)2648
914 y FH(m)2704 925 y FE(B)r(;A;D)r(;C)p 2622 1017 4
215 v 3531 934 a FX(\()p FK(m)t FX(-)e(^)-54 b FS(\033)t
FX(\))230 1364 y FU(holds)34 b(for)h(al)5 b(l)35 b(obje)-5
b(cts)34 b FS(A)p FU(,)h FS(B)5 b FU(,)35 b FS(C)7 b
FU(,)34 b(and)h FS(D)s FU(.)p 0 TeXcolorgray 51 1561
a FX(\(ii\))p 0 TeXcolorgray 49 w FU(The)g(map)k FX(^)-54
b FS(\033)699 1576 y FR(A;B)843 1561 y FX(:)34 b FS(A)22
b FT(^)h FS(B)32 b FT(!)c FS(B)f FT(^)22 b FS(A)35 b
FU(pr)-5 b(eserves)34 b(the)h FT(_)p FU(-multiplic)-5
b(ation.)p 0 TeXcolorgray 24 1759 a FX(\(iii\))p 0 TeXcolorgray
49 w FU(The)35 b(map)k FX(\024)-54 b FS(\033)699 1774
y FR(A;B)843 1759 y FX(:)34 b FS(A)22 b FT(_)h FS(B)32
b FT(!)c FS(B)f FT(_)22 b FS(A)35 b FU(pr)-5 b(eserves)34
b(the)h FT(^)p FU(-c)-5 b(omultiplic)g(ation.)p 0 TeXcolorgray
27 1956 a FX(\(iv\))p 0 TeXcolorgray 49 w FU(The)35 b(e)-5
b(quation)988 2205 y FX(\()p FS(A)23 b FT(^)f FS(B)5
b FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)23 b FS(D)s
FX(\))1055 2366 y FH(m)1111 2377 y FE(A;B)r(;C;D)1387
2469 y FG(\017)p FF(\017)p 1385 2469 V 2225 2205 a FX(\()p
FS(C)29 b FT(^)23 b FS(D)s FX(\))f FT(_)g FX(\()p FS(A)g
FT(^)h FS(B)5 b FX(\))2200 2180 y FG(/)p FF(/)1839 2134
y FQ(\024)-39 b FR(\033)1875 2145 y FE(A)p FD(^)p FE(B)r(;C)s
FD(^)p FE(D)p 1810 2182 391 4 v 988 2569 a FX(\()p FS(A)23
b FT(_)f FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k FT(_)c
FS(D)s FX(\))1825 2611 y FQ(\024)-38 b FR(\033)1862 2622
y FE(A;C)1978 2611 y FI(^)t FQ(\024)f FR(\033)2065 2622
y FE(B)r(;D)2200 2544 y FG(/)p FF(/)p 1810 2546 V 2225
2569 a FX(\()p FS(C)29 b FT(_)23 b FS(A)p FX(\))f FT(^)h
FX(\()p FS(D)h FT(_)f FS(B)5 b FX(\))2624 2469 y FG(\017)p
FF(\017)2648 2366 y FH(m)2704 2377 y FE(C;D)r(;A;B)p
2622 2469 4 215 v 3531 2387 a FX(\()p FK(m)t FX(-)g(\024)-54
b FS(\033)t FX(\))230 2812 y FU(holds)34 b(for)h(al)5
b(l)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5 b FU(,)35
b FS(C)7 b FU(,)34 b(and)h FS(D)s FU(.)0 2997 y FJ(Pr)n(oof.)30
b FX(Supp)s(ose)j(\()p FK(m)5 b FX(-)g(^)-54 b FS(\033)t
FX(\))32 b(do)s(es)h(hold.)44 b(Then)34 b(w)m(e)f(ha)m(v)m(e)882
3250 y(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(_)f
FX(\()p FS(A)g FT(^)h FS(B)5 b FX(\))945 3412 y FH(m)1001
3423 y FE(A;B)r(;A;B)1276 3515 y FG(\017)p FF(\017)p
1274 3515 V 2110 3250 a FX(\()p FS(B)27 b FT(^)c FS(A)p
FX(\))f FT(_)h FX(\()p FS(B)k FT(^)22 b FS(A)p FX(\))2085
3226 y FG(/)p FF(/)1712 3180 y FQ(^)-38 b FR(\033)1749
3191 y FE(A;B)1866 3180 y FI(_)t FQ(^)f FR(\033)1953
3191 y FE(A;B)p 1695 3228 391 4 v 882 3614 a FX(\()p
FS(A)22 b FT(_)g FS(A)p FX(\))h FT(^)f FX(\()p FS(B)27
b FT(_)c FS(B)5 b FX(\))983 3789 y FI(r)1042 3800 y FE(A)1092
3789 y FI(^r)1198 3800 y FE(B)1276 3879 y FG(\017)p FF(\017)p
1274 3879 4 215 v 1726 3544 a FQ(^)-39 b FR(\033)1762
3555 y FE(A)p FD(_)p FE(A;B)r FD(_)p FE(B)2085 3589 y
FG(/)p FF(/)p 1695 3591 391 4 v 2110 3614 a FX(\()p FS(B)27
b FT(_)c FS(B)5 b FX(\))22 b FT(^)h FX(\()p FS(A)f FT(_)g
FS(A)p FX(\))2504 3515 y FG(\017)p FF(\017)2529 3412
y FH(m)2585 3423 y FE(B)r(;A;B)r(;A)p 2503 3515 4 215
v 1144 3972 a FS(A)h FT(^)f FS(B)1815 4009 y FQ(^)-39
b FR(\033)1851 4020 y FE(A;B)2348 3938 y FG(/)p FF(/)p
1432 3939 916 4 v 2373 3972 a FS(B)27 b FT(^)c FS(A)2504
3879 y FG(\017)p FF(\017)2529 3789 y FI(r)2588 3800 y
FE(B)2641 3789 y FI(^r)2747 3800 y FE(A)p 2503 3879 4
215 v 0 4216 a FX(whic)m(h)33 b(together)f(with)h(\()p
FK(B3c)1079 4180 y FI(0)1102 4216 y FX(\))f(sa)m(ys)h(that)k(^)-54
b FS(\033)1644 4231 y FR(A;B)1809 4216 y FX(preserv)m(es)35
b(the)d FT(_)p FX(-m)m(ultiplication.)45 b(Con)m(v)m(ersely)-8
b(,)35 b(w)m(e)0 4329 y(ha)m(v)m(e)536 4550 y Fp(\()p
Fr(A)21 b Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27
b Fq(^)19 b Fr(D)s Fp(\))79 4724 y FQ(\()p FI(q)159 4701
y FE(C)159 4762 y(A)205 4750 y Fn(8)242 4724 y FI(^q)342
4701 y FE(D)342 4762 y(B)390 4750 y Fn(8)426 4724 y FQ(\))p
FI(_)p FQ(\()p FI(q)580 4701 y FE(A)580 4750 y Fn(8)613
4762 y FE(C)664 4724 y FI(^q)764 4701 y FE(B)764 4750
y Fn(8)796 4762 y FE(D)852 4724 y FQ(\))904 4832 y FG(\017)p
FF(\017)p 902 4832 4 235 v 2508 4550 a Fp(\()p Fr(B)25
b Fq(^)20 b Fr(A)p Fp(\))h Fq(_)f Fp(\()p Fr(D)j Fq(^)d
Fr(C)7 b Fp(\))2483 4527 y FG(/)p FF(/)1712 4481 y FQ(^)-39
b FR(\033)1748 4492 y FE(A;B)1866 4481 y FI(_)t FQ(^)g
FR(\033)1953 4492 y FE(C;D)p 1297 4529 1187 4 v 47 4925
a Fp(\(\()p Fr(A)21 b Fq(_)f Fr(C)7 b Fp(\))20 b Fq(^)g
Fp(\()p Fr(B)25 b Fq(_)20 b Fr(D)s Fp(\)\))h Fq(_)e Fp(\(\()p
Fr(A)j Fq(_)d Fr(C)7 b Fp(\))20 b Fq(^)g Fp(\()p Fr(B)25
b Fq(_)20 b Fr(D)s Fp(\)\))402 5099 y FI(r)461 5113 y
Ft(\()p FE(A)p FD(_)p FE(C)s Ft(\))p FD(^)p Ft(\()p FE(B)r
FD(_)p FE(D)r Ft(\))904 5208 y FG(\017)p FF(\017)p 902
5208 4 235 v 1549 4818 a FQ(^)-39 b FR(\033)1585 4829
y FE(A)p FD(_)p FE(C;B)r FD(_)p FE(D)1882 4818 y FI(_)t
FQ(^)g FR(\033)1969 4829 y FE(A)p FD(_)p FE(C;B)r FD(_)p
FE(D)1995 4902 y FG(/)p FF(/)p 1785 4904 210 4 v 2019
4925 a Fp(\(\()p Fr(B)26 b Fq(_)20 b Fr(D)s Fp(\))g Fq(^)g
Fp(\()p Fr(A)h Fq(_)e Fr(C)7 b Fp(\)\))21 b Fq(_)f Fp(\(\()p
Fr(B)25 b Fq(_)20 b Fr(D)s Fp(\))g Fq(^)g Fp(\()p Fr(A)h
Fq(_)f Fr(C)7 b Fp(\)\))2876 4832 y FG(\017)p FF(\017)2901
4724 y FQ(\()p FI(q)2981 4701 y FE(D)2981 4762 y(B)3029
4750 y Fn(8)3066 4724 y FI(^q)3166 4701 y FE(C)3166 4762
y(A)3212 4750 y Fn(8)3248 4724 y FQ(\))p FI(_)p FQ(\()p
FI(q)3402 4701 y FE(B)3402 4750 y Fn(8)3434 4762 y FE(D)3490
4724 y FI(^q)3590 4701 y FE(A)3590 4750 y Fn(8)3622 4762
y FE(C)3673 4724 y FQ(\))p 2874 4832 4 235 v 536 5301
a Fp(\()p Fr(A)21 b Fq(_)f Fr(C)7 b Fp(\))20 b Fq(^)g
Fp(\()p Fr(B)25 b Fq(_)19 b Fr(D)s Fp(\))1725 5349 y
FQ(^)-38 b FR(\033)1762 5360 y FE(A)p FD(_)p FE(C;B)r
FD(_)p FE(D)2483 5278 y FG(/)p FF(/)p 1297 5280 1187
4 v 2508 5301 a Fp(\()p Fr(B)25 b Fq(_)20 b Fr(D)s Fp(\))h
Fq(^)e Fp(\()p Fr(A)i Fq(_)f Fr(C)7 b Fp(\))2876 5208
y FG(\017)p FF(\017)2901 5099 y FI(r)2960 5113 y Ft(\()p
FE(B)r FD(_)p FE(D)r Ft(\))p FD(^)p Ft(\()p FE(A)p FD(_)p
FE(C)s Ft(\))p 2874 5208 4 235 v 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 575 40
TeXDict begin 575 39 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(575)p 0 TeXcolorgray
0 314 a(The)40 b(upp)s(er)f(square)i(is)e(naturalit)m(y)h(of)j(^)-54
b FS(\033)5 b FX(,)40 b(and)f(the)h(lo)m(w)m(er)g(square)g(sa)m(ys)h
(that)i(^)-54 b FS(\033)3047 329 y FR(A;B)3220 314 y
FX(preserv)m(es)42 b(the)0 434 y FT(_)p FX(-m)m(ultiplication.)65
b(T)-8 b(ogether)39 b(with)h(Theorem)h(7.2)e(\(v\),)i(this)f(is)f(\()p
FK(m)t FX(-)5 b(^)-54 b FS(\033)5 b FX(\).)63 b(Hence)40
b(\(i\))f(and)h(\(ii\))f(are)0 555 y(equiv)-5 b(alen)m(t.)45
b(The)34 b(other)f(equiv)-5 b(alences)35 b(follo)m(w)e(b)s(ecause)h(of)
e(dualit)m(y)-8 b(.)p 3738 555 42 42 v 0 735 a FJ(7.14.)37
b(Pr)n(oposition.)30 b FU(In)k(a)h FK(B3)p FU(-c)-5 b(ate)g(gory)34
b(the)h(fol)5 b(lowing)34 b(ar)-5 b(e)34 b(e)-5 b(quivalent:)p
0 TeXcolorgray 79 913 a FX(\(i\))p 0 TeXcolorgray 48
w FU(The)35 b(e)-5 b(quation)311 1141 y FX(\()p FS(A)22
b FT(^)h FX(\()p FS(B)k FT(^)c FS(C)7 b FX(\)\))22 b
FT(_)g FX(\()p FS(D)j FT(^)d FX(\()p FS(E)29 b FT(^)22
b FS(F)14 b FX(\)\))464 1303 y FH(m)520 1314 y FE(A;B)r
FD(^)p FE(C;D)r(;E)s FD(^)p FE(F)973 1406 y FG(\017)p
FF(\017)p 972 1406 4 215 v 2076 1141 a FX(\(\()p FS(A)22
b FT(^)g FS(B)5 b FX(\))23 b FT(^)f FS(C)7 b FX(\))22
b FT(_)h FX(\(\()p FS(D)h FT(^)f FS(E)6 b FX(\))22 b
FT(^)h FS(F)14 b FX(\))2051 1117 y FG(/)p FF(/)1608 1039
y FQ(^)-42 b FR(\013)1646 1050 y FE(A;B)r(;C)1830 1039
y FI(_)7 b FQ(^)-42 b FR(\013)1922 1050 y FE(D)r(;E)s(;F)p
1661 1119 391 4 v 311 1505 a FX(\()p FS(A)22 b FT(_)h
FS(D)s FX(\))f FT(^)g FX(\(\()p FS(B)27 b FT(^)c FS(C)7
b FX(\))22 b FT(_)g FX(\()p FS(E)29 b FT(^)22 b FS(F)14
b FX(\)\))383 1677 y FQ(\()p FR(A)p FI(_)p FR(D)r FQ(\))p
FI(^)p FH(m)700 1688 y FE(B)r(;C;E)s(;F)973 1770 y FG(\017)p
FF(\017)p 972 1770 4 215 v 2076 1505 a FX(\(\()p FS(A)22
b FT(^)g FS(B)5 b FX(\))23 b FT(_)f FX(\()p FS(D)j FT(^)e
FS(E)6 b FX(\)\))22 b FT(^)g FX(\()p FS(C)29 b FT(_)23
b FS(F)14 b FX(\))2738 1406 y FG(\017)p FF(\017)2763
1303 y FH(m)2819 1314 y FE(A)p FD(^)p FE(B)r(;C;D)r FD(^)p
FE(E)s(;F)p 2736 1406 V 311 1869 a FX(\()p FS(A)22 b
FT(_)h FS(D)s FX(\))f FT(^)g FX(\(\()p FS(B)27 b FT(_)c
FS(E)6 b FX(\))22 b FT(^)h FX(\()p FS(C)29 b FT(_)22
b FS(F)14 b FX(\)\))1613 1970 y FQ(^)-42 b FR(\013)1651
1981 y FE(A)p FD(_)p FE(D)r(;B)r FD(_)p FE(E)s(;C)s FD(_)p
FE(F)2051 1844 y FG(/)p FF(/)p 1661 1846 391 4 v 2076
1869 a FX(\(\()p FS(A)22 b FT(_)g FS(D)s FX(\))g FT(^)h
FX(\()p FS(B)k FT(_)c FS(E)6 b FX(\)\))22 b FT(^)g FX(\()p
FS(C)29 b FT(_)23 b FS(F)14 b FX(\))2738 1770 y FG(\017)p
FF(\017)2763 1677 y FH(m)2819 1688 y FE(A;B)r(;D)r(;E)3073
1677 y FI(^)p FQ(\()p FR(C)5 b FI(_)p FR(F)10 b FQ(\))p
2736 1770 4 215 v 3524 1505 a FX(\()p FK(m)t FX(-)g(^)-59
b FS(\013)t FX(\))230 2133 y FU(holds)34 b(for)h(al)5
b(l)35 b(obje)-5 b(cts)34 b FS(A)p FU(,)h FS(B)5 b FU(,)35
b FS(C)7 b FU(,)34 b FS(D)s FU(,)h FS(E)6 b FU(,)35 b(and)f
FS(F)14 b FU(.)p 0 TeXcolorgray 51 2328 a FX(\(ii\))p
0 TeXcolorgray 49 w FU(The)35 b(map)43 b FX(^)-58 b FS(\013)706
2343 y FR(A;B)s(;C)925 2328 y FX(:)33 b FS(A)22 b FT(^)h
FX(\()p FS(B)k FT(^)22 b FS(C)7 b FX(\))28 b FT(!)f FX(\()p
FS(A)c FT(^)f FS(B)5 b FX(\))22 b FT(^)h FS(C)42 b FU(pr)-5
b(eserves)34 b(the)h FT(_)p FU(-multiplic)-5 b(ation.)0
2506 y FJ(Pr)n(oof.)30 b FX(Similar)35 b(to)e(the)h(previous)h(prop)s
(osition.)48 b(\(Here)34 b(the)g(statemen)m(ts)i(corresp)s(onding)e(to)
g(\(iii\))0 2626 y(and)j(\(iv\))g(in)g(Prop)s(osition)h(7.13)e(are)h
(omitted)g(to)g(sa)m(v)m(e)h(space,)h(but)f(ob)m(viously)g(they)g(hold)
f(accord-)0 2747 y(ingly)-8 b(.\))p 3738 2747 42 42 v
0 2927 a FJ(7.15.)37 b(Remark.)30 b FX(This)j(prop)s(osition)g(allo)m
(ws)h(us)f(to)f(sp)s(eak)h(of)g(uniquely)h(de\014ned)g(maps)325
3116 y(^)311 3117 y FK(m)388 3076 y FH(2)388 3142 y FR(A;B)s(;C)q(;D)r
(;E)t(;F)832 3117 y FX(:)f(\()p FS(A)22 b FT(^)h FS(B)k
FT(^)c FS(C)7 b FX(\))22 b FT(_)g FX(\()p FS(D)j FT(^)e
FS(E)28 b FT(^)22 b FS(F)14 b FX(\))28 b FT(!)f FX(\()p
FS(A)22 b FT(_)h FS(D)s FX(\))f FT(^)g FX(\()p FS(B)27
b FT(_)c FS(E)6 b FX(\))22 b FT(^)h FX(\()p FS(C)29 b
FT(_)22 b FS(F)14 b FX(\))0 3308 y(and)33 b(dually)325
3497 y(\024)311 3498 y FK(m)388 3457 y FH(2)388 3523
y FR(A;B)s(;C)q(;D)r(;E)t(;F)832 3498 y FX(:)g(\()p FS(A)22
b FT(^)h FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29 b
FT(^)22 b FS(D)s FX(\))g FT(_)h FX(\()p FS(E)28 b FT(^)22
b FS(F)14 b FX(\))28 b FT(!)f FX(\()p FS(A)22 b FT(_)h
FS(C)29 b FT(_)22 b FS(E)6 b FX(\))22 b FT(^)h FX(\()p
FS(B)k FT(_)c FS(D)i FT(_)d FS(F)14 b FX(\))0 3688 y(A)45
b(more)g(sophisticated)i(and)e(more)h(general)f(notation)g(for)f(comp)s
(osed)i(v)-5 b(ariations)45 b(of)g(medial)g(is)0 3809
y(in)m(tro)s(duced)34 b(b)m(y)f(Lamarc)m(he)h(in)e([Lam07].)0
3989 y FJ(7.16.)d(Pr)n(oposition.)23 b FU(In)k(a)h(a)f
FK(B3)p FU(-c)-5 b(ate)g(gory)27 b(ob)-5 b(eying)36 b
FX(\()p FK(m)5 b FX(-)g(^)-54 b FS(\033)t FX(\))27 b
FU(and)38 b FX(\()p FK(m)t FX(-)10 b(^)-59 b FS(\013)t
FX(\))28 b FU(the)f(fol)5 b(lowing)27 b(ar)-5 b(e)27
b(e)-5 b(quiv-)0 4109 y(alent:)p 0 TeXcolorgray 79 4287
a FX(\(i\))p 0 TeXcolorgray 48 w FU(The)35 b(e)-5 b(quation)724
4515 y FX(\(\()p FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b
FT(_)f FX(\()p FS(C)29 b FT(^)23 b FS(D)s FX(\)\))f FT(^)g
FS(E)820 4685 y FH(m)876 4696 y FE(A;B)r(;C;D)1127 4685
y FI(^)p FR(E)1254 4780 y FG(\017)p FF(\017)p 1253 4780
4 215 v 2263 4515 a FX(\()p FS(A)g FT(^)h FS(B)5 b FX(\))22
b FT(_)h FX(\()p FS(C)29 b FT(^)22 b FS(D)j FT(^)e FS(E)6
b FX(\))2238 4490 y FG(/)p FF(/)1828 4445 y FH(s)1855
4456 y FE(A)p FD(^)p FE(B)r(;C)s FD(^)p FE(D)r(;E)p 1810
4492 429 4 v 762 4879 a FX(\()p FS(A)22 b FT(_)g FS(C)7
b FX(\))23 b FT(^)f FX(\()p FS(B)27 b FT(_)c FS(D)s FX(\))f
FT(^)g FS(E)1750 4929 y FQ(\()p FR(A)p FI(_)p FR(C)5
b FQ(\))p FI(^)p FH(s)2033 4940 y FE(B)r(;D)r(;E)2200
4854 y FG(/)p FF(/)p 1772 4856 V 2225 4879 a FX(\()p
FS(A)22 b FT(_)h FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k
FT(_)22 b FX(\()p FS(D)j FT(^)e FS(E)6 b FX(\)\))2756
4780 y FG(\017)p FF(\017)2781 4677 y FH(m)2837 4688 y
FE(A;B)r(;C;D)r FD(^)p FE(E)p 2754 4780 4 215 v 3549
4707 a FX(\()p FK(m)t FX(-)p FK(s)t FX(\))230 5122 y
FU(holds)34 b(for)h(al)5 b(l)35 b(obje)-5 b(cts)34 b
FS(A)p FU(,)h FS(B)5 b FU(,)35 b FS(C)7 b FU(,)34 b FS(D)s
FU(,)h(and)f FS(E)6 b FU(.)p 0 TeXcolorgray 51 5317 a
FX(\(ii\))p 0 TeXcolorgray 49 w FU(The)35 b(map)f FK(s)681
5332 y FR(A;B)s(;C)900 5317 y FX(:)f FS(A)23 b FT(^)f
FX(\()p FS(B)27 b FT(_)c FS(C)7 b FX(\))27 b FT(!)h FX(\()p
FS(A)22 b FT(^)g FS(B)5 b FX(\))23 b FT(_)f FS(C)42 b
FU(pr)-5 b(eserves)34 b(the)h FT(^)p FU(-c)-5 b(omultiplic)g(ation.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 576 41
TeXDict begin 576 40 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(576)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FJ(Pr)n(oof.)32 b FX(First)j(note)h(that)f(if)g
(the)h(equations)h(\()p FK(m)t FX(-)5 b(^)-54 b FS(\033)t
FX(\),)37 b(\()p FK(m)t FX(-)10 b(^)-59 b FS(\013)t FX(\),)36
b(and)f(\()p FK(m)5 b FX(-)p FK(s)t FX(\))35 b(hold,)i(w)m(e)f(can)g
(comp)s(ose)0 440 y(them)d(to)g(get)f(the)h(comm)m(utativit)m(y)i(of)d
(diagrams)h(lik)m(e)383 662 y(\(\()p FS(A)22 b FT(^)h
FS(B)5 b FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)22
b FS(D)s FX(\)\))g FT(^)h FS(E)28 b FT(^)22 b FS(F)2123
637 y FG(/)p FF(/)p 1657 639 467 4 v 2148 662 a FX(\()p
FS(A)g FT(^)h FS(B)5 b FX(\))22 b FT(_)g FX(\()p FS(C)29
b FT(^)23 b FS(E)28 b FT(^)23 b FS(D)i FT(^)d FS(F)14
b FX(\))2759 823 y FH(m)2815 834 y FE(A;B)r(;C)s FD(^)p
FE(E)s(;D)r FD(^)p FE(F)2734 926 y FG(\017)p FF(\017)p
2733 926 4 215 v 421 1026 a FX(\()p FS(A)22 b FT(_)h
FS(C)7 b FX(\))22 b FT(^)h FX(\()p FS(B)k FT(_)22 b FS(D)s
FX(\))g FT(^)h FS(E)28 b FT(^)22 b FS(F)1008 926 y FG(\017)p
FF(\017)472 831 y FH(m)528 842 y FE(A;B)r(;C;D)779 831
y FI(^)p FR(E)t FI(^)p FR(F)p 1006 926 V 2072 1026 a
FX(\()p FS(A)g FT(_)h FX(\()p FS(C)29 b FT(^)22 b FS(E)6
b FX(\)\))22 b FT(^)h FX(\()p FS(B)k FT(_)c FX(\()p FS(D)i
FT(^)d FS(F)14 b FX(\)\))2047 1001 y FG(/)p FF(/)p 1619
1002 429 4 v 3607 844 a FX(\(42\))0 1253 y(where)34 b(the)f(horizon)m
(tal)g(maps)h(are)e(the)i(canonical)f(maps)g(\(comp)s(osed)h(of)e(t)m
(wist,)i(asso)s(ciativit)m(y)-8 b(,)35 b(and)0 1373 y(switc)m(h\))f
(that)f(are)f(uniquely)j(determined)f(b)m(y)g(the)f FT(\003)p
FX(-autonomous)f(structure.)45 b(No)m(w)33 b(c)m(hase)734
1626 y(\()p FS(A)23 b FT(_)f FS(B)5 b FX(\))22 b FT(^)h
FS(C)493 1799 y FQ(\(\001)579 1810 y FE(A)629 1799 y
FI(_)p FQ(\001)735 1810 y FE(B)788 1799 y FQ(\))p FI(^)p
FQ(\001)921 1810 y FE(C)998 1890 y FG(\017)p FF(\017)p
996 1890 4 215 v 1751 1555 a FH(s)1778 1566 y FE(A;B)r(;C)2427
1601 y FG(/)p FF(/)p 1286 1603 1142 4 v 2452 1626 a FS(A)f
FT(_)h FX(\()p FS(B)k FT(^)22 b FS(C)7 b FX(\))2740 1799
y FQ(\001)2799 1810 y FE(A)2849 1799 y FI(_)p FQ(\(\001)2982
1810 y FE(B)3035 1799 y FI(^)p FQ(\001)3141 1810 y FE(C)3192
1799 y FQ(\))2715 1890 y FG(\017)p FF(\017)p 2713 1890
4 215 v 378 1990 a FX(\(\()p FS(A)22 b FT(^)h FS(A)p
FX(\))f FT(_)g FX(\()p FS(B)28 b FT(^)22 b FS(B)5 b FX(\)\))22
b FT(^)h FS(C)29 b FT(^)22 b FS(C)463 2159 y FH(m)519
2170 y FE(A;A;B)r(;B)769 2159 y FI(^)p FR(C)5 b FI(^)p
FR(C)998 2254 y FG(\017)p FF(\017)p 996 2254 V 1637 1919
a FH(s)1664 1930 y FE(A)p FD(^)p FE(A;B)r FD(^)p FE(B)r(;C)s
FD(^)p FE(C)2108 1965 y FG(/)p FF(/)p 1642 1966 467 4
v 2363 2254 a FG(,)p FF(,)2322 2245 y Fz(X)2281 2237
y(X)2241 2228 y(X)2201 2219 y(X)2160 2211 y(X)2120 2202
y(X)2079 2194 y(X)2039 2185 y(X)1998 2177 y(X)1958 2168
y(X)1917 2159 y(X)1877 2151 y(X)1836 2142 y(X)1796 2134
y(X)1755 2125 y(X)1715 2117 y(X)1674 2108 y(X)1634 2099
y(X)1593 2091 y(X)1553 2082 y(X)1512 2074 y(X)1472 2065
y(X)1431 2056 y(X)1391 2048 y(X)1350 2039 y(X)2133 1990
y FX(\()p FS(A)22 b FT(^)h FS(A)p FX(\))f FT(_)h FX(\()p
FS(B)k FT(^)c FS(B)k FT(^)22 b FS(C)29 b FT(^)23 b FS(C)7
b FX(\))2740 2161 y FQ(\()p FR(A)p FI(^)p FR(A)p FQ(\))p
FI(_)p FQ(\()p FR(B)s FI(^)t FQ(^)-39 b FR(\033)3164
2172 y FE(B)r(;C)3285 2161 y FI(^)p FR(C)5 b FQ(\))2715
2254 y FG(\017)p FF(\017)p 2713 2254 4 215 v 416 2353
a FX(\()p FS(A)22 b FT(_)h FS(B)5 b FX(\))22 b FT(^)g
FX(\()p FS(A)h FT(_)f FS(B)5 b FX(\))22 b FT(^)h FS(C)29
b FT(^)23 b FS(C)365 2525 y FQ(\()p FR(A)p FI(_)p FR(B)s
FQ(\))p FI(^)t FQ(^)-39 b FR(\033)662 2536 y FE(A)p FD(_)p
FE(B)r(;C)871 2525 y FI(^)p FR(C)998 2618 y FG(\017)p
FF(\017)p 996 2618 V 1365 w FG(,)p FF(,)2322 2609 y Fz(X)2281
2601 y(X)2241 2592 y(X)2201 2583 y(X)2160 2575 y(X)2120
2566 y(X)2079 2558 y(X)2039 2549 y(X)1998 2541 y(X)1958
2532 y(X)1917 2523 y(X)1877 2515 y(X)1836 2506 y(X)1796
2498 y(X)1755 2489 y(X)1715 2480 y(X)1674 2472 y(X)1634
2463 y(X)1593 2455 y(X)1553 2446 y(X)1512 2438 y(X)1472
2429 y(X)1431 2420 y(X)1391 2412 y(X)1350 2403 y(X)2133
2353 y FX(\()p FS(A)22 b FT(^)h FS(A)p FX(\))f FT(_)h
FX(\()p FS(B)k FT(^)c FS(C)29 b FT(^)22 b FS(B)27 b FT(^)c
FS(C)7 b FX(\))2740 2515 y FH(m)2796 2526 y FE(A;A;B)r
FD(^)p FE(C;B)r FD(^)p FE(C)2715 2618 y FG(\017)p FF(\017)p
2713 2618 V 416 2717 a FX(\()p FS(A)22 b FT(_)h FS(B)5
b FX(\))22 b FT(^)g FS(C)29 b FT(^)23 b FX(\()p FS(A)f
FT(_)h FS(B)5 b FX(\))22 b FT(^)h FS(C)1584 2754 y FH(s)1611
2765 y FE(A;B)r(;C)1795 2754 y FI(^)p FH(s)1869 2765
y FE(A;B)r(;C)2033 2692 y FG(/)p FF(/)p 1604 2694 429
4 v 2057 2717 a FX(\()p FS(A)g FT(_)f FX(\()p FS(B)27
b FT(^)c FS(C)7 b FX(\)\))22 b FT(^)g FX(\()p FS(A)h
FT(_)f FX(\()p FS(B)27 b FT(^)c FS(C)7 b FX(\)\))0 2977
y(where)31 b(the)g(parallelogram)f(is)h(just)f(\(42\),)g(the)h(upp)s
(er)g(square)g(is)g(naturalit)m(y)g(of)e(switc)m(h)j(and)f(the)f(t)m(w)
m(o)0 3090 y(triangles)e(are)f(la)m(ws)h(of)f FT(\003)p
FX(-autonomous)g(categories.)43 b(Note)27 b(that,)h(b)m(y)i(\()p
FK(B2c)p FX(\))d(and)g(\()p FK(B3c)p FX(\),)h(the)g(v)m(ertical)0
3203 y(paths)d(are)g(just)g(\001)679 3219 y FQ(\()p FR(A)p
FI(_)p FR(B)s FQ(\))p FI(^)p FR(C)1022 3203 y FX(and)g(\001)1285
3219 y FR(A)p FI(_)p FQ(\()p FR(B)s FI(^)p FR(C)5 b FQ(\))1602
3203 y FX(.)41 b(Therefore)26 b(switc)m(h)h(preserv)m(es)g(the)e
FT(^)p FX(-com)m(ultiplication.)0 3316 y(Con)m(v)m(ersely)-8
b(,)36 b(consider)e(the)f(diagram)472 3553 y Fp(\(\()p
Fr(A)p Fq(^)p Fr(B)5 b Fp(\))p Fq(_)p Fp(\()p Fr(C)i
Fq(^)p Fr(D)s Fp(\)\))p Fq(^)p Fr(E)242 3728 y FQ(\001)301
3742 y Ft(\(\()p FE(A)p FD(^)p FE(B)r Ft(\))p FD(_)p
Ft(\()p FE(C)s FD(^)p FE(D)r Ft(\)\))p FD(^)p FE(E)881
3836 y FG(\017)p FF(\017)p 879 3836 4 235 v 1711 3485
a FH(s)1738 3496 y FE(A)p FD(^)p FE(B)r(;C)s FD(^)p FE(D)r(;E)2501
3531 y FG(/)p FF(/)p 1314 3533 1187 4 v 2526 3553 a Fp(\()p
Fr(A)p Fq(^)p Fr(B)e Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p
Fr(D)s Fq(^)p Fr(E)e Fp(\))2924 3728 y FQ(\001)2983 3742
y Ft(\()p FE(A)p FD(^)p FE(B)r Ft(\))p FD(_)p Ft(\()p
FE(C)s FD(^)p FE(D)r FD(^)p FE(E)s Ft(\))2899 3836 y
FG(\017)p FF(\017)p 2898 3836 4 235 v 32 3929 a Fp(\(\()p
Fr(A)p Fq(^)p Fr(B)g Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p
Fr(D)s Fp(\)\))p Fq(^)p Fr(E)e Fq(^)p Fp(\(\()p Fr(A)p
Fq(^)p Fr(B)g Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p Fr(D)s
Fp(\)\))p Fq(^)p Fr(E)820 4102 y FR(p)881 4211 y FG(\017)p
FF(\017)p 879 4211 V 1835 3873 a FH(s)t FI(^)p FH(s)2026
3906 y FG(/)p FF(/)p 1754 3908 273 4 v 2051 3929 a Fp(\(\()p
Fr(A)p Fq(^)p Fr(B)e Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p
Fr(D)s Fq(^)p Fr(E)e Fp(\)\))p Fq(^)p Fp(\(\()p Fr(A)p
Fq(^)p Fr(B)g Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p Fr(D)s
Fq(^)p Fr(E)e Fp(\)\))2924 4102 y FR(q)2899 4211 y FG(\017)p
FF(\017)p 2898 4211 4 235 v 112 4305 a Fp(\(\()p Fr(A)p
Fq(^)p Fo(t)p Fp(\))p Fq(_)p Fp(\()p Fr(C)i Fq(^)p Fo(t)p
Fp(\)\))p Fq(^)p Fo(t)p Fq(^)p Fp(\(\()p Fo(t)p Fq(^)p
Fr(B)e Fp(\))p Fq(_)p Fp(\()p Fo(t)p Fq(^)p Fr(D)s Fp(\)\))p
Fq(^)p Fr(E)801 4472 y FI(\030)801 4493 y FQ(=)881 4587
y FG(\017)p FF(\017)p 879 4587 V 1835 4249 a FH(s)t FI(^)p
FH(s)2106 4282 y FG(/)p FF(/)p 1674 4283 433 4 v 2131
4305 a Fp(\(\()p Fr(A)p Fq(^)p Fo(t)p Fp(\))p Fq(_)p
Fp(\()p Fr(C)i Fq(^)p Fo(t)p Fq(^)p Fo(t)p Fp(\)\))p
Fq(^)p Fp(\(\()p Fo(t)p Fq(^)p Fr(B)e Fp(\))p Fq(_)p
Fp(\()p Fo(t)p Fq(^)p Fr(D)s Fq(^)p Fr(E)g Fp(\)\))2924
4472 y FI(\030)2924 4493 y FQ(=)2899 4587 y FG(\017)p
FF(\017)p 2898 4587 4 235 v 510 4680 a Fp(\()p Fr(A)p
Fq(_)p Fr(C)i Fp(\))p Fq(^)p Fp(\()p Fr(B)e Fq(_)p Fr(C)i
Fp(\))p Fq(^)p Fr(E)1634 4732 y FQ(\()p FR(A)p FI(_)p
FR(C)e FQ(\))p FI(^)p FH(s)1917 4743 y FE(B)r(;D)r(;E)2466
4657 y FG(/)p FF(/)p 1276 4659 1190 4 v 2491 4680 a Fp(\()p
Fr(A)p Fq(_)p Fr(C)i Fp(\))p Fq(^)p Fp(\()p Fr(B)e Fq(_)p
Fp(\()p Fr(D)s Fq(^)p Fr(E)g Fp(\)\))0 4942 y FX(where)490
5157 y FS(p)83 b FX(=)g(\(\()p FS(A)22 b FT(^)h FX(\005)1114
5116 y FR(B)1175 5157 y FX(\))f FT(_)g FX(\()p FS(C)29
b FT(^)23 b FX(\005)1622 5116 y FR(D)1686 5157 y FX(\)\))f
FT(^)h FX(\005)1946 5116 y FR(E)2027 5157 y FT(^)g FX(\(\(\005)2265
5116 y FR(A)2344 5157 y FT(^)g FS(B)5 b FX(\))22 b FT(_)g
FX(\(\005)2771 5116 y FR(C)2853 5157 y FT(^)g FS(D)s
FX(\)\))g FT(^)h FS(E)492 5345 y(q)87 b FX(=)c(\(\()p
FS(A)22 b FT(^)h FX(\005)1114 5304 y FR(B)1175 5345 y
FX(\))f FT(_)g FX(\()p FS(C)29 b FT(^)23 b FX(\005)1622
5304 y FR(D)1708 5345 y FT(^)g FX(\005)1870 5304 y FR(E)1929
5345 y FX(\)\))f FT(^)h FX(\(\(\005)2265 5304 y FR(A)2344
5345 y FT(^)g FS(B)5 b FX(\))22 b FT(_)g FX(\(\005)2771
5304 y FR(C)2853 5345 y FT(^)g FS(D)j FT(^)e FS(E)6 b
FX(\)\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 577 42
TeXDict begin 577 41 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(577)p 0 TeXcolorgray
0 314 a(Note)28 b(that)f(the)h(left)g(v)m(ertical)h(map)f(is)g
FK(m)1490 329 y FR(A;B)s(;C)q(;D)1785 314 y FT(^)12 b
FX(1)1912 329 y FR(E)2000 314 y FX(while)28 b(the)g(righ)m(t)g(v)m
(ertical)h(map)f(is)g FK(m)3367 329 y FR(A;B)s(;C)q(;D)r
FI(^)p FR(E)3753 314 y FX(.)0 434 y(The)k(upp)s(er)g(square)g(comm)m
(utes)h(b)s(ecause)f(w)m(e)g(assumed)h(that)e(switc)m(h)i(preserv)m(es)
h(the)d FT(^)p FX(-com)m(ultipli-)0 555 y(cation,)37
b(the)g(middle)h(one)e(is)h(naturalit)m(y)g(of)f(switc)m(h,)j(and)e
(the)f(lo)m(w)m(er)i(one)f(comm)m(utes)h(b)s(ecause)g(the)0
675 y(category)33 b(is)g FT(\003)p FX(-autonomous)f(\(the)h
(isomorphisms)i(are)d(just)h(comp)s(ositions)h(of)41
b(^)-58 b FS(\045)37 b FX(and)3267 649 y(^)3263 675 y
FS(\025)t FX(\).)p 3738 675 42 42 v 0 860 a FJ(7.17.)28
b(Definition.)22 b FU(A)28 b FK(B4)o FX(-category)f FU(is)g(a)g
FK(B3)o FU(-c)-5 b(ate)g(gory)27 b(that)g(ob)-5 b(eys)27
b(the)g(e)-5 b(quations)35 b FX(\()p FK(m)t FX(-)5 b(^)-54
b FS(\033)t FX(\))p FU(,)28 b FX(\()p FK(m)t FX(-)10
b(^)-59 b FS(\013)t FX(\))p FU(,)0 980 y(and)45 b FX(\()p
FK(m)t FX(-)p FK(s)t FX(\))p FU(.)0 1165 y FJ(7.18.)37
b(Remark.)29 b FX(Equiv)-5 b(alen)m(tly)d(,)35 b(one)d(can)g(de\014ne)i
(a)e FK(B4)o FX(-category)g(as)h(a)f FK(B3)o FX(-category)g(in)h(whic)m
(h)38 b(^)-54 b FS(\033)5 b FX(,)10 1285 y(^)-59 b FS(\013)t
FX(,)28 b(and)e FK(s)k FX(are)c(strong.)41 b(W)-8 b(e)27
b(ha)m(v)m(e)g(c)m(hosen)g(the)g(form)e(of)h(De\014nition)g(\(7.17\))f
(to)h(sho)m(w)h(the)f(resem)m(blance)0 1406 y(to)32 b(the)g(w)m(ork)h
([Lam07])f(where)h(the)f(equations)h(\()p FK(m)5 b FX(-)g(^)-54
b FS(\033)t FX(\),)32 b(\()p FK(m)t FX(-)10 b(^)-59 b
FS(\013)t FX(\),)32 b(and)g(\()p FK(m)t FX(-)p FK(s)t
FX(\))g(are)g(also)g(considered)i(as)0 1526 y(primitiv)m(es.)0
1711 y FJ(7.19.)j(Theorem.)30 b FU(In)j(a)i FK(B4)o FU(-c)-5
b(ate)g(gory,)34 b(the)h(maps)43 b FX(^)-59 b FS(\013)2021
1726 y FR(A;B)s(;C)2229 1711 y FU(,)40 b FX(^)-54 b FS(\033)2349
1726 y FR(A;B)2482 1711 y FU(,)44 b FX(^)-58 b FS(\045)2597
1726 y FR(A)2654 1711 y FU(,)2722 1685 y FX(^)2718 1711
y FS(\025)2775 1726 y FR(A)2867 1711 y FU(and)43 b FX(\024)-58
b FS(\013)3118 1726 y FR(A;B)s(;C)3325 1711 y FU(,)40
b FX(\024)-54 b FS(\033)3445 1726 y FR(A;B)3578 1711
y FU(,)44 b FX(\024)-58 b FS(\045)3693 1726 y FR(A)3750
1711 y FU(,)4 1805 y FX(\024)0 1831 y FS(\025)57 1846
y FR(A)114 1831 y FU(,)35 b(as)f(wel)5 b(l)34 b(as)h
FK(s)664 1846 y FR(A;B)s(;C)907 1831 y FU(and)f FK(mix)1241
1846 y FR(A;B)1409 1831 y FU(ar)-5 b(e)35 b(al)5 b(l)34
b(str)-5 b(ong.)0 2017 y FJ(Pr)n(oof.)34 b FX(That)50
b(^)-58 b FS(\013)691 2032 y FR(A;B)s(;C)898 2017 y FX(,)48
b(^)-55 b FS(\033)1022 2032 y FR(A;B)1156 2017 y FX(,)51
b(^)-58 b FS(\045)1275 2032 y FR(A)1332 2017 y FX(,)1406
1990 y(^)1401 2017 y FS(\025)1458 2032 y FR(A)1555 2017
y FX(and)50 b(\024)-58 b FS(\013)1815 2032 y FR(A;B)s(;C)2022
2017 y FX(,)48 b(\024)-55 b FS(\033)2146 2032 y FR(A;B)2280
2017 y FX(,)51 b(\024)-58 b FS(\045)2399 2032 y FR(A)2456
2017 y FX(,)2529 1990 y(\024)2525 2017 y FS(\025)2582
2032 y FR(A)2679 2017 y FX(are)41 b(quasien)m(tropies)h(follo)m(ws)0
2148 y(from)k(Theorem)i(5.18)e(and)h(Prop)s(osition)f(7.12.)85
b(That)56 b(^)-58 b FS(\045)2226 2163 y FR(A)2283 2148
y FX(,)2364 2122 y(^)2360 2148 y FS(\025)2417 2163 y
FR(A)2520 2148 y FX(and)56 b(\024)-58 b FS(\045)2774
2163 y FR(A)2831 2148 y FX(,)2912 2122 y(\024)2908 2148
y FS(\025)2965 2163 y FR(A)3069 2148 y FX(are)46 b(clonable)i(has)0
2269 y(b)s(een)39 b(said)f(already)h(in)f(Corollary)h(7.9.)59
b(F)-8 b(or)47 b(^)-58 b FS(\013)1802 2284 y FR(A;B)s(;C)2009
2269 y FX(,)45 b(^)-54 b FS(\033)2131 2284 y FR(A;B)2303
2269 y FX(and)47 b(\024)-58 b FS(\013)2560 2284 y FR(A;B)s(;C)2768
2269 y FX(,)44 b(\024)-54 b FS(\033)2889 2284 y FR(A;B)3061
2269 y FX(this)38 b(follo)m(ws)h(from)0 2389 y(Theorem)i(5.18)f(and)g
(Prop)s(ositions)g(7.13)g(and)g(7.14)f(\(and)h(b)m(y)h(dualit)m(y\).)67
b(Hence,)43 b(all)d(these)h(maps)0 2509 y(are)34 b(strong.)46
b(That)34 b FK(s)785 2524 y FR(A;B)s(;C)1026 2509 y FX(is)g(strong)g
(follo)m(ws)g(from)g(Prop)s(osition)f(7.5)h(and)f(Prop)s(osition)h
(7.16)f(\(and)0 2630 y(self-dualit)m(y)k(of)f(switc)m(h\).)55
b(F)-8 b(or)35 b(sho)m(wing)j(that)d FK(mix)1920 2645
y FR(A;B)2089 2630 y FX(is)i(also)f(strong)g(it)g(su\016ces)i(to)d
(observ)m(e)j(that)0 2750 y(mix)47 b(is)h(a)e(comp)s(osition)h(of)g
(strong)f(maps)i(via)f FT(\016)o FX(,)k FT(^)p FX(,)f(and)d
FT(_)p FX(.)86 b(See)48 b(\(18\))o(,)i(Theorem)e(7.10,)i(and)0
2871 y(Theorem)34 b(7.11.)p 3738 2871 V 0 3055 a FJ(7.20.)44
b(Remark.)32 b FX(Theorem)40 b(7.19)d(giv)m(es)j(justi\014cation)f(to)f
(the)h(algebraic)f(concern)i(raised)f(in)f(Re-)0 3176
y(mark)27 b(5.6.)41 b(In)27 b(a)f FK(B4)p FX(-category)g(all)g
(isomorphisms)j(that)d(are)h(imp)s(osed)g(b)m(y)h(the)f
FK(B4)o FX(-structure)h(do)e(pre-)0 3296 y(serv)m(e)h(the)f
FT(_)p FX(-monoid)f(and)h FT(^)p FX(-comonoid)f(structure)i(\(and)e
(are)g(therefore)h(\\prop)s(er)f(isomorphisms"\).)0 3416
y(Note)33 b(that)f(there)i(migh)m(t)f(still)g(b)s(e)g(\\improp)s(er)g
(isomorphisms")h(in)f(a)g FK(B4)o FX(-category)-8 b(.)44
b(But)33 b(these)h(liv)m(e)0 3537 y(outside)29 b(the)f
FK(B4)o FX(-structure)h(and)e(are)h(therefore)g(not)g(accessible)i(to)d
(pro)s(of-theoretic)h(in)m(v)m(estigations.)146 3707
y(It)43 b(has)h(\014rst)f(b)s(een)h(observ)m(ed)h(b)m(y)f(Lamarc)m(he)g
(in)f([Lam07])g(that)g(the)h(equation)f(\()p FK(m)5 b
FX(-)p FK(mix)s FX(\))43 b(\(see)0 3827 y(b)s(elo)m(w\))37
b(is)f(a)g(consequence)i(of)e(the)g(equations)h(\()p
FK(m)t FX(-)10 b(^)-59 b FS(\013)t FX(\),)37 b(\()p FK(m)t
FX(-)5 b(^)-54 b FS(\033)t FX(\),)37 b(and)f(\()p FK(m)t
FX(-)p FK(s)t FX(\).)53 b(Due)36 b(to)g(the)g(presence)0
3948 y(of)c(the)h FT(_)p FX(-monoids)g(and)g FT(^)p FX(-comonoids,)h(w)
m(e)f(can)g(giv)m(e)g(here)h(a)e(simpler)i(pro)s(of)e(of)g(that)g
(fact:)0 4132 y FJ(7.21.)37 b(Cor)n(ollar)-7 b(y.)32
b FU(In)i(a)h FK(B4)o FU(-c)-5 b(ate)g(gory,)35 b(the)g(diagr)-5
b(am)903 4411 y FS(A)22 b FT(^)h FS(B)k FT(^)c FS(C)29
b FT(^)22 b FS(D)1661 4331 y FR(A)p FI(^)t FQ(^)-39 b
FR(\033)1801 4342 y FE(B)r(;C)1920 4331 y FI(^)p FR(D)2115
4377 y FG(/)p FF(/)p 1573 4379 542 4 v 2140 4411 a FS(A)22
b FT(^)g FS(C)30 b FT(^)22 b FS(B)27 b FT(^)c FS(D)2487
4555 y FH(mix)2592 4566 y FE(A;C)2709 4555 y FI(^)p FH(mix)2861
4566 y FE(B)r(;D)2462 4650 y FG(\017)p FF(\017)p 2460
4650 4 215 v 827 4750 a FX(\()p FS(A)f FT(^)h FS(B)5
b FX(\))22 b FT(_)h FX(\()p FS(C)29 b FT(^)22 b FS(D)s
FX(\))1225 4650 y FG(\017)p FF(\017)796 4555 y FH(mix)901
4566 y FE(A)p FD(^)p FE(B)r(;C)s FD(^)p FE(D)p 1224 4650
V 2064 4750 a FX(\()p FS(A)g FT(_)h FS(C)7 b FX(\))22
b FT(^)g FX(\()p FS(B)27 b FT(_)c FS(D)s FX(\))2039 4725
y FG(/)p FF(/)1690 4779 y FH(m)1746 4790 y FE(A;B)r(;C;D)p
1649 4726 391 4 v 3441 4567 a FX(\()p FK(m)5 b FX(-)p
FK(mix)s FX(\))0 4994 y FU(c)-5 b(ommutes.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 578 43
TeXDict begin 578 42 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(578)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FJ(Pr)n(oof.)j FX(Chase)137 562
y Fr(A)20 b Fq(^)g Fr(B)25 b Fq(^)20 b Fr(C)26 b Fq(^)20
b Fr(D)1707 485 y FR(A)p FI(^)t FQ(^)-39 b FR(\033)1847
496 y FE(B)r(;C)1966 485 y FI(^)p FR(D)3024 531 y FG(/)p
FF(/)p 756 533 2269 4 v 573 797 a FQ(\001)632 808 y FE(A)682
797 y FI(^)p FQ(\001)788 808 y FE(B)841 797 y FI(^)p
FQ(\001)947 808 y FE(C)998 797 y FI(^)p FQ(\001)1104
808 y FE(D)1698 900 y FG(*)p FF(*)1658 888 y Fz(V)1619
876 y(V)1579 865 y(V)1539 853 y(V)1500 842 y(V)1460 830
y(V)1420 818 y(V)1380 807 y(V)1341 795 y(V)1301 784 y(V)1261
772 y(V)1221 760 y(V)1182 749 y(V)1142 737 y(V)1102 726
y(V)1063 714 y(V)1023 702 y(V)983 691 y(V)943 679 y(V)904
668 y(V)864 656 y(V)824 644 y(V)785 633 y(V)745 621 y(V)705
610 y(V)665 598 y(V)626 586 y(V)3049 562 y Fr(A)20 b
Fq(^)g Fr(C)27 b Fq(^)20 b Fr(B)k Fq(^)c Fr(D)p 3353
1750 4 1164 v 3336 1750 V 2583 1026 a FQ(\001)2642 1037
y FE(A)2692 1026 y FI(^)p FQ(\001)2798 1037 y FE(C)2849
1026 y FI(^)p FQ(\001)2955 1037 y FE(B)3008 1026 y FI(^)p
FQ(\001)3114 1037 y FE(D)1986 1325 y FG(x)p FF(x)p Fz(r)2021
1305 y(r)2056 1284 y(r)2091 1264 y(r)2126 1243 y(r)2161
1223 y(r)2196 1202 y(r)2232 1182 y(r)2267 1161 y(r)2302
1141 y(r)2337 1120 y(r)2372 1100 y(r)2407 1079 y(r)2442
1059 y(r)2477 1038 y(r)2512 1018 y(r)2547 997 y(r)2583
977 y(r)2618 956 y(r)2653 936 y(r)2688 915 y(r)2723 895
y(r)2758 874 y(r)2793 854 y(r)2828 833 y(r)2863 813 y(r)2898
792 y(r)2934 772 y(r)2969 751 y(r)3004 731 y(r)3039 710
y(r)3074 690 y(r)3109 669 y(r)3144 649 y(r)3179 628 y(r)3214
608 y(r)1246 987 y Fr(A)g Fq(^)g Fr(A)g Fq(^)g Fr(B)25
b Fq(^)19 b Fr(B)25 b Fq(^)20 b Fr(C)27 b Fq(^)19 b Fr(C)27
b Fq(^)20 b Fr(D)j Fq(^)d Fr(D)1113 1181 y FR(A)p FI(^)p
FR(A)p FI(^)t FQ(^)-39 b FR(\033)1353 1192 y FE(B)r FD(^)p
FE(B)r(;C)s FD(^)p FE(C)1651 1181 y FI(^)p FR(D)r FI(^)p
FR(D)1890 1325 y FG(\017)p FF(\017)p 1888 1325 4 314
v 1246 1412 a Fr(A)20 b Fq(^)g Fr(A)g Fq(^)g Fr(C)27
b Fq(^)19 b Fr(C)27 b Fq(^)20 b Fr(B)25 b Fq(^)19 b Fr(B)25
b Fq(^)20 b Fr(D)j Fq(^)d Fr(D)1810 1595 y FI(\030)1810
1616 y FQ(=)1890 1750 y FG(\017)p FF(\017)p 1888 1750
V 2633 1559 a FQ(\005)2686 1536 y FE(A)2686 1586 y Fn(8)2718
1598 y FE(A)2768 1559 y FI(^)p FQ(\005)2868 1536 y FE(C)2868
1586 y Fn(8)2900 1598 y FE(C)2952 1559 y FI(^)p FQ(\005)3052
1536 y FE(B)3052 1598 y(B)3100 1586 y Fn(8)3136 1559
y FI(^)p FQ(\005)3236 1536 y FE(D)3236 1598 y(D)3288
1586 y Fn(8)3154 1750 y FG(*)p FF(*)3114 1738 y Fz(V)3075
1726 y(V)3035 1715 y(V)2995 1703 y(V)2955 1692 y(V)2916
1680 y(V)2876 1669 y(V)2836 1657 y(V)2797 1645 y(V)2757
1634 y(V)2717 1622 y(V)2677 1611 y(V)2638 1599 y(V)2598
1587 y(V)2558 1576 y(V)2519 1564 y(V)2479 1553 y(V)2439
1541 y(V)2399 1529 y(V)2360 1518 y(V)2320 1506 y(V)2280
1495 y(V)2241 1483 y(V)2201 1471 y(V)2161 1460 y(V)2121
1448 y(V)2082 1437 y(V)137 1837 y Fr(A)g Fq(^)g Fr(B)25
b Fq(^)20 b Fr(C)26 b Fq(^)20 b Fr(D)798 1770 y FQ(\001)857
1781 y FE(A)p FD(^)p FE(B)r FD(^)p FE(C)s FD(^)p FE(D)1221
1806 y FG(/)p FF(/)p 756 1807 465 4 v 424 1750 4 1164
v 441 1750 V 1246 1837 a Fr(A)g Fq(^)g Fr(B)k Fq(^)c
Fr(C)27 b Fq(^)20 b Fr(D)j Fq(^)d Fr(A)g Fq(^)g Fr(B)k
Fq(^)c Fr(C)27 b Fq(^)20 b Fr(D)2419 1935 y FQ(\(\005)2499
1911 y FE(B)2499 1973 y(A)2545 1961 y Fn(8)2582 1935
y FI(^)p FQ(\005)2682 1911 y FE(D)2682 1973 y(C)2729
1961 y Fn(8)2765 1935 y FQ(\))p FI(^)p FQ(\005)2892 1911
y FE(A)2892 1961 y Fn(8)2924 1973 y FE(B)2977 1935 y
FI(^)p FQ(\005)3077 1911 y FE(C)3077 1961 y Fn(8)3109
1973 y FE(D)3024 1806 y FG(/)p FF(/)p 2559 1807 465 4
v 1008 2031 a FH(mix)1114 2042 y FE(A)p FD(^)p FE(B)r(;C)s
FD(^)p FE(D)1413 2031 y FI(^)p FH(mix)1566 2042 y FE(A)p
FD(^)p FE(B)r(;C)s FD(^)p FE(D)1890 2175 y FG(\017)p
FF(\017)p 1888 2175 4 314 v 3049 1837 a Fr(A)g Fq(^)g
Fr(C)27 b Fq(^)20 b Fr(B)k Fq(^)c Fr(D)3371 2264 y FH(mix)s
FI(^)p FH(mix)3346 2629 y FG(\017)p FF(\017)p 3344 2629
4 767 v 1033 2268 a Fp(\(\()p Fr(A)h Fq(^)f Fr(B)5 b
Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s
Fp(\)\))h Fq(^)f Fp(\(\()p Fr(A)h Fq(^)e Fr(B)5 b Fp(\))20
b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\)\))1829
2551 y FQ(\(\005)1909 2528 y FE(B)1909 2589 y(A)1955
2577 y Fn(8)1991 2551 y FI(_)p FQ(\005)2091 2528 y FE(D)2091
2589 y(C)2138 2577 y Fn(8)2174 2551 y FQ(\))p FI(^)p
FQ(\(\005)2328 2528 y FE(A)2328 2577 y Fn(8)2361 2589
y FE(B)2414 2551 y FI(_)p FQ(\005)2514 2528 y FE(C)2514
2577 y Fn(8)2545 2589 y FE(D)2601 2551 y FQ(\))3120 2629
y FG(*)p FF(*)3081 2616 y Fz(U)3042 2604 y(U)3003 2592
y(U)2965 2580 y(U)2926 2568 y(U)2888 2556 y(U)2849 2544
y(U)2810 2532 y(U)2772 2520 y(U)2733 2508 y(U)2695 2496
y(U)2656 2484 y(U)2617 2472 y(U)2579 2460 y(U)2540 2448
y(U)2502 2436 y(U)2463 2424 y(U)2424 2412 y(U)2386 2400
y(U)2347 2388 y(U)2309 2376 y(U)2270 2364 y(U)2231 2352
y(U)2193 2340 y(U)2154 2328 y(U)2116 2316 y(U)66 2722
y Fp(\()p Fr(A)h Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p
Fr(C)27 b Fq(^)20 b Fr(D)s Fp(\))434 2629 y FG(\017)p
FF(\017)300 2264 y FH(mix)p 432 2629 V 722 2420 a FQ(\001)781
2434 y Ft(\()p FE(A)p FD(^)p FE(B)r Ft(\))p FD(_)p Ft(\()p
FE(C)s FD(^)p FE(D)r Ft(\))1664 2316 y FG(4)p FF(4)1625
2328 y Fz(i)1586 2340 y(i)1547 2352 y(i)1509 2364 y(i)1470
2376 y(i)1432 2388 y(i)1393 2400 y(i)1354 2412 y(i)1316
2424 y(i)1277 2436 y(i)1239 2448 y(i)1200 2460 y(i)1162
2472 y(i)1123 2484 y(i)1084 2496 y(i)1046 2508 y(i)1007
2520 y(i)969 2532 y(i)930 2544 y(i)891 2556 y(i)853 2568
y(i)814 2581 y(i)776 2593 y(i)737 2605 y(i)698 2617 y(i)660
2629 y(i)2978 2722 y Fp(\()p Fr(A)h Fq(_)f Fr(C)7 b Fp(\))20
b Fq(^)g Fp(\()p Fr(B)25 b Fq(_)20 b Fr(D)s Fp(\))2953
2699 y FG(/)p FF(/)1736 2753 y FH(m)1792 2764 y FE(A;B)r(;C;D)p
827 2701 2127 4 v 0 2968 a FX(The)49 b(topmost)g(quadrangle)g(comm)m
(utes)h(b)s(ecause)g(of)e(naturalit)m(y)g(of)53 b(^)-54
b FS(\033)5 b FX(.)90 b(The)50 b(p)s(en)m(tagon)e(b)s(elo)m(w)0
3088 y(consists)37 b(of)e(sev)m(eral)i(applications)f(of)41
b(\()p FK(B2c)p FX(\).)51 b(The)36 b(t)m(w)m(o)g(triangles)g(on)f(the)h
(righ)m(t)f(are)g(trivial.)52 b(The)0 3209 y(quadrangle)29
b(on)f(the)g(lo)m(w)m(er)h(left)f(comm)m(utes)i(b)s(ecause)f(mix)g
(preserv)m(es)i(the)d FT(^)p FX(-com)m(ultiplication,)j(and)0
3329 y(the)37 b(quadrangle)h(on)e(the)i(lo)m(w)m(er)g(righ)m(t)f(b)s
(ecause)h(of)e(naturalit)m(y)h(of)g(mix.)57 b(Finally)-8
b(,)38 b(the)f(triangle)g(on)0 3450 y(the)c(b)s(ottom)f(is)h(Theorem)h
(7.2)e(\(v\))q(.)p 3738 3450 42 42 v 146 3620 a(Ob)m(viously)27
b(one)f(can)f(come)h(up)f(with)h(more)f(diagrams)h(lik)m(e)g(\()p
FK(m)t FX(-)p FK(mix)t FX(\))f(or)f(\()p FK(m)5 b FX(-)k(^)-58
b FS(\045)t FX(\))25 b(and)g(ask)h(whether)0 3740 y(they)33
b(comm)m(ute,)i(for)d(example)i(the)f(follo)m(wing)g(due)g(to)f
(McKinley)i([McK05]:)697 3999 y(\()p FS(A)23 b FT(^)f
FP(f)10 b FX(\))23 b FT(_)f FX(\()p FS(B)27 b FT(^)c
FS(C)7 b FX(\))1820 3927 y FH(m)1876 3939 y FE(A;)p Fy(f)f
FE(;B)r(;C)2446 3974 y FG(/)p FF(/)p 1480 3976 967 4
v 2471 3999 a FX(\()p FS(A)22 b FT(_)h FS(B)5 b FX(\))22
b FT(^)h FX(\()p FP(f)32 b FT(_)23 b FS(C)7 b FX(\))2875
4177 y FQ(\()p FR(A)p FI(_)p FR(B)s FQ(\))p FI(^)3135
4159 y FQ(\024)3132 4177 y FR(\025)3173 4188 y FE(C)2850
4263 y FG(\017)p FF(\017)p 2848 4263 4 215 v 698 4362
a FX(\()p FS(A)22 b FT(^)h FP(t)p FX(\))e FT(_)i FX(\()p
FS(B)k FT(^)c FS(C)7 b FX(\))1076 4263 y FG(\017)p FF(\017)551
4176 y FQ(\()p FR(A)p FI(^)p FQ(\005)731 4153 y Fy(f)763
4176 y FQ(\))p FI(_)p FQ(\()p FR(B)s FI(^)p FR(C)e FQ(\))p
1075 4263 V 2587 4362 a FX(\()p FS(A)22 b FT(_)g FS(B)5
b FX(\))23 b FT(^)f FS(C)2354 4574 y FH(s)2381 4585 y
FE(A;B)r(;C)2145 4627 y FG(v)p FF(v)p Fz(l)2182 4611
y(l)2220 4596 y(l)2257 4581 y(l)2294 4565 y(l)2331 4550
y(l)2369 4535 y(l)2406 4520 y(l)2443 4504 y(l)2480 4489
y(l)2518 4474 y(l)2555 4459 y(l)2592 4443 y(l)2629 4428
y(l)1700 4726 y FS(A)g FT(_)h FX(\()p FS(B)k FT(^)22
b FS(C)7 b FX(\))1781 4627 y FG(\()p FF(\()1271 4594
y FQ(^)-41 b FR(\045)1301 4605 y FE(A)1351 4594 y FI(_)p
FQ(\()p FR(B)s FI(^)p FR(C)5 b FQ(\))1258 4412 y Fz(R)1295
4428 y(R)1333 4443 y(R)1370 4458 y(R)1407 4474 y(R)1444
4489 y(R)1482 4504 y(R)1519 4519 y(R)1556 4535 y(R)1594
4550 y(R)1631 4565 y(R)1668 4581 y(R)1705 4596 y(R)1743
4611 y(R)3607 4349 y FX(\(43\))p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 579 44
TeXDict begin 579 43 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(579)p 0 TeXcolorgray
0 320 a(It)33 b(w)m(as)g(so)s(on)g(disco)m(v)m(ered)i(indep)s(enden)m
(tly)g(b)m(y)f(sev)m(eral)g(p)s(eople)f(that)g(\(43\))f(is)h(equiv)-5
b(alen)m(t)34 b(to:)1009 524 y(\()p FS(A)22 b FT(^)g
FS(B)5 b FX(\))23 b FT(_)f FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))1075 803 y FH(m)1131 814 y FE(A;B)r(;C;D)1407
1023 y FG(\017)p FF(\017)p 1405 1023 4 450 v 2050 823
a FS(A)g FT(_)f FS(B)27 b FT(_)c FX(\()p FS(C)29 b FT(^)23
b FS(D)s FX(\))2161 724 y FG(*)p FF(*)1872 603 y FH(mix)1978
614 y FE(A;B)2095 603 y FI(_)p FQ(\()p FR(C)5 b FI(^)p
FR(D)r FQ(\))1657 573 y Fz(U)1696 585 y(U)1735 596 y(U)1773
608 y(U)1812 619 y(U)1851 631 y(U)1889 642 y(U)1928 654
y(U)1966 665 y(U)2005 677 y(U)2044 688 y(U)2082 700 y(U)2121
711 y(U)1009 1123 y FX(\()p FS(A)22 b FT(_)g FS(C)7 b
FX(\))23 b FT(^)f FX(\()p FS(B)27 b FT(_)c FS(D)s FX(\))1941
1019 y FQ(^)1946 1028 y FH(t)1971 1039 y FE(A;C;B)r(;D)2160
873 y FG(4)p FF(4)2121 885 y Fz(i)2082 896 y(i)2044 908
y(i)2005 920 y(i)1966 931 y(i)1928 943 y(i)1889 954 y(i)1851
966 y(i)1812 977 y(i)1773 989 y(i)1735 1000 y(i)1696
1012 y(i)1657 1023 y(i)3370 823 y FX(\()p FK(mix)s FX(-)p
FK(m)t FX(-)3696 809 y(^)3703 823 y FK(t)t FX(\))0 1321
y(Here)33 b(are)g(t)m(w)m(o)g(other)g(examples)h(that)f(do)f(not)h(con)
m(tain)g(the)g(units:)228 1559 y Fp(\(\()p Fr(A)21 b
Fq(^)f Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p Fr(C)27 b Fq(^)20
b Fr(D)s Fp(\)\))h Fq(^)e Fp(\()p Fr(E)26 b Fq(_)20 b
Fr(F)13 b Fp(\))333 1719 y FH(s)360 1730 y FE(A)p FD(^)p
FE(B)r(;C)s FD(^)p FE(D)r(;E)s FD(^)p FE(F)839 1821 y
FG(\017)p FF(\017)p 838 1821 4 215 v 2081 1559 a Fp(\()p
Fr(A)21 b Fq(_)f Fr(C)7 b Fp(\))20 b Fq(^)g Fp(\()p Fr(B)25
b Fq(_)19 b Fr(D)s Fp(\))i Fq(^)f Fp(\()p Fr(E)25 b Fq(_)20
b Fr(F)13 b Fp(\))2056 1537 y FG(/)p FF(/)1483 1491 y
FH(m)1539 1502 y FE(A;B)r(;C;D)1790 1491 y FI(^)p FQ(\()p
FR(E)t FI(_)p FR(F)d FQ(\))p 1475 1539 581 4 v 264 1915
a Fp(\()p Fr(A)20 b Fq(^)g Fr(B)5 b Fp(\))20 b Fq(_)g
Fp(\()p Fr(C)27 b Fq(^)20 b Fr(D)j Fq(^)d Fp(\()p Fr(E)26
b Fq(_)19 b Fr(F)13 b Fp(\)\))280 2085 y FQ(\()p FR(A)p
FI(^)p FR(B)s FQ(\))p FI(_)532 2076 y FQ(\024)537 2085
y FH(t)562 2096 y FE(C;D)r(;E)s(;F)839 2177 y FG(\017)p
FF(\017)p 838 2177 4 215 v 2046 1915 a Fp(\(\()p Fr(A)21
b Fq(_)f Fr(C)7 b Fp(\))20 b Fq(^)g Fr(F)13 b Fp(\))20
b Fq(_)g Fp(\()p Fr(E)26 b Fq(^)20 b Fp(\()p Fr(B)25
b Fq(_)20 b Fr(D)s Fp(\)\))2657 1821 y FG(\017)p FF(\017)2677
1720 y FQ(\024)2682 1729 y FH(t)2707 1740 y FE(A)p FD(_)p
FE(C;B)r FD(_)p FE(D)r(;E)s(;F)p 2655 1821 V 264 2270
a Fp(\()p Fr(A)g Fq(^)g Fr(B)5 b Fp(\))20 b Fq(_)g Fp(\()p
Fr(C)27 b Fq(^)20 b Fr(F)13 b Fp(\))21 b Fq(_)e Fp(\()p
Fr(E)26 b Fq(^)20 b Fr(D)s Fp(\))1560 2327 y FQ(\024)1550
2328 y FH(m)1606 2305 y Fm(2)1606 2351 y FE(A;B)r(;C;F)r(;E)s(;D)2092
2247 y FG(/)p FF(/)p 1440 2249 652 4 v 2117 2270 a Fp(\()p
Fr(A)g Fq(_)g Fr(C)27 b Fq(_)20 b Fr(E)5 b Fp(\))20 b
Fq(^)g Fp(\()p Fr(F)34 b Fq(_)20 b Fr(B)k Fq(_)c Fr(D)s
Fp(\))2657 2177 y FG(\017)p FF(\017)2682 2074 y FH(m)2738
2085 y FE(A)p FD(_)p FE(C;F)r(;E)s(;B)r FD(_)p FE(D)p
2655 2177 4 215 v 3496 1923 a Fp(\()p Fj(m)5 b Fp(-)3632
1910 y(\024)3638 1923 y Fj(t)t Fp(-)p Fj(s)g Fp(\))1002
2555 y(\()p Fr(A)1105 2522 y FI(0)1129 2555 y Fq(_)p
Fr(A)p Fp(\))p Fq(^)p Fp(\()p Fr(B)1463 2522 y FI(0)1486
2555 y Fq(_)p Fr(B)g Fp(\))p Fq(^)p Fp(\()p Fr(C)1824
2522 y FI(0)1846 2555 y Fq(_)p Fr(C)i Fp(\))p Fq(^)p
Fp(\()p Fr(D)2188 2522 y FI(0)2211 2555 y Fq(_)p Fr(D)s
Fp(\))1242 2672 y FR(p)1028 2817 y FG(v)p FF(v)1028 2818
y Fz(m)1063 2802 y(m)1099 2787 y(m)1134 2772 y(m)1170
2757 y(m)1205 2741 y(m)1241 2726 y(m)1276 2711 y(m)1312
2696 y(m)1347 2681 y(m)1383 2665 y(m)1418 2650 y(m)1454
2635 y(m)1489 2620 y(m)136 2912 y Fp(\(\()p Fr(A)274
2879 y FI(0)298 2912 y Fq(_)p Fr(B)433 2879 y FI(0)455
2912 y Fp(\))p Fq(^)p Fp(\()p Fr(C)658 2879 y FI(0)681
2912 y Fq(_)p Fr(D)820 2879 y FI(0)843 2912 y Fp(\)\))p
Fq(_)p Fp(\()p Fr(D)s Fq(^)p Fr(C)g Fp(\))p Fq(_)p Fp(\()p
Fr(B)e Fq(^)p Fr(A)p Fp(\))137 3074 y FQ(\024)127 3075
y FH(m)183 3052 y Fm(2)183 3106 y FE(A)229 3092 y FD(0)251
3106 y(_)p FE(B)341 3092 y FD(0)363 3106 y FE(;C)429
3092 y FD(0)452 3106 y(_)p FE(D)546 3092 y FD(0)567 3106
y FE(;D)r(;C;B)r(;A)862 3174 y FG(\017)p FF(\017)p 861
3174 V 1798 2912 a Fp(\(\()p Fr(A)1936 2879 y FI(0)1960
2912 y Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()p Fr(B)2294
2879 y FI(0)2317 2912 y Fq(_)p Fr(C)i Fp(\)\))p Fq(_)p
Fp(\()p Fr(B)e Fq(^)p Fr(D)2829 2879 y FI(0)2851 2912
y Fp(\))p Fq(_)p Fp(\()p Fr(D)s Fq(_)p Fr(C)3193 2879
y FI(0)3215 2912 y Fp(\))2358 2817 y FG(\()p FF(\()2110
2672 y FR(q)1859 2603 y Fz(Q)1894 2618 y(Q)1930 2633
y(Q)1965 2648 y(Q)2001 2664 y(Q)2036 2679 y(Q)2072 2694
y(Q)2107 2709 y(Q)2143 2725 y(Q)2178 2740 y(Q)2214 2755
y(Q)2249 2770 y(Q)2285 2786 y(Q)2320 2801 y(Q)242 3269
y Fp(\()p Fr(A)345 3236 y FI(0)369 3269 y Fq(_)p Fr(B)504
3236 y FI(0)526 3269 y Fq(_)p Fr(B)g Fq(_)p Fr(D)s Fp(\))p
Fq(^)p Fp(\()p Fr(D)1009 3236 y FI(0)1031 3269 y Fq(_)p
Fr(C)1164 3236 y FI(0)1186 3269 y Fq(_)p Fr(C)i Fq(_)p
Fr(A)p Fp(\))405 3452 y FQ(^)410 3461 y FH(t)435 3481
y FE(A)481 3467 y FD(0)504 3481 y(_)p FE(B)594 3467 y
FD(0)617 3481 y FE(;B)r FD(_)p FE(D)r(;D)849 3467 y FD(0)870
3481 y(_)p FE(C)959 3467 y FD(0)981 3481 y FE(;C)s FD(_)p
FE(A)1527 3531 y FG(\()p FF(\()1489 3515 y Fz(Q)1454
3500 y(Q)1418 3484 y(Q)1383 3469 y(Q)1347 3454 y(Q)1312
3439 y(Q)1276 3423 y(Q)1241 3408 y(Q)1205 3393 y(Q)1170
3378 y(Q)1134 3362 y(Q)1099 3347 y(Q)1063 3332 y(Q)1028
3317 y(Q)1904 3269 y Fp(\()p Fr(A)2007 3236 y FI(0)2031
3269 y Fq(_)p Fr(A)p Fq(_)p Fr(B)e Fq(_)p Fr(D)s Fp(\))p
Fq(^)p Fp(\()p Fr(D)2643 3236 y FI(0)2664 3269 y Fq(_)p
Fr(C)2797 3236 y FI(0)2820 3269 y Fq(_)p Fr(B)2955 3236
y FI(0)2977 3269 y Fq(_)p Fr(C)i Fp(\))2524 3174 y FG(\017)p
FF(\017)2559 3074 y FQ(\024)2549 3075 y FH(m)2605 3052
y Fm(2)2605 3106 y FE(A)2651 3092 y FD(0)2674 3106 y(_)p
FE(A;B)2829 3092 y FD(0)2851 3106 y(_)p FE(C;B)r(;D)3075
3092 y FD(0)3097 3106 y FE(;D)r(;C)3234 3092 y FD(0)p
2523 3174 V 1037 3626 a Fr(A)1105 3593 y FI(0)1129 3626
y Fq(_)p Fr(B)1264 3593 y FI(0)1286 3626 y Fq(_)p Fp(\(\()p
Fr(B)e Fq(_)p Fr(D)s Fp(\))p Fq(^)p Fp(\()p Fr(D)1839
3593 y FI(0)1862 3626 y Fq(_)p Fr(C)1995 3593 y FI(0)2017
3626 y Fp(\)\))p Fq(_)p Fr(C)i Fq(_)p Fr(A)1859 3531
y FG(v)p FF(v)2270 3452 y FQ(^)2275 3461 y FH(t)2300
3481 y FE(A)2346 3467 y FD(0)2369 3481 y(_)p FE(A;B)r
FD(_)p FE(D)r(;D)2689 3467 y FD(0)2710 3481 y(_)p FE(C)2799
3467 y FD(0)2821 3481 y FE(;B)2888 3467 y FD(0)2911 3481
y(_)p FE(C)2320 3333 y Fz(m)2285 3348 y(m)2249 3364 y(m)2214
3379 y(m)2178 3394 y(m)2143 3409 y(m)2107 3425 y(m)2072
3440 y(m)2036 3455 y(m)2001 3470 y(m)1965 3485 y(m)1930
3501 y(m)1894 3516 y(m)1859 3531 y(m)3386 3090 y Fp(\()3434
3089 y(\024)3421 3090 y Fj(m)3493 3057 y FH(2)3533 3090
y Fp(-)p Fj(s)e Fp(-)3646 3089 y(\024)3633 3090 y Fj(m)3705
3057 y FH(2)3745 3090 y Fp(\))0 3798 y FX(where)32 b
FS(p)f FX(and)h FS(q)j FX(are)c(the)g(canonical)h(maps)g(\(comp)s(osed)
g(of)f(sev)m(eral)i(switc)m(hes,)h(t)m(wists,)f(and)e(asso)s(cia-)0
3919 y(tivit)m(y\))j(that)e(are)h(determined)h(b)m(y)g(the)f
FT(\003)p FX(-autonomous)f(structure.)146 4039 y(One)d(usually)g(sp)s
(eaks)h(of)e(\\coherence")h([Mac71])g(if)f(all)g(diagrams)g(of)g(this)h
(kind)g(comm)m(ute.)43 b(V)-8 b(ery)0 4160 y(often)32
b(a)h(\\coherence)g(theorem")g(is)g(based)h(on)e(so-called)h
(\\coherence)h(graphs")e([KM71,)h(DP04].)43 b(In)0 4280
y(certain)36 b(cases)h(\(see,)h(e.g.,)f([Str05]\))e(the)i(notion)e(of)h
(coherence)h(graph)f(is)g(to)s(o)f(restricted.)54 b(F)-8
b(or)35 b(this)0 4400 y(reason,)e(in)g([LS05a],)f(the)h(notion)g(of)f
(\\graphicalit)m(y")h(is)g(in)m(tro)s(duced.)0 4581 y
FJ(7.22.)41 b(Definition.)31 b FU(L)-5 b(et)38 b FC(C)55
b FU(b)-5 b(e)37 b(a)h(single-mixe)-5 b(d)35 b FK(B1)p
FU(-c)-5 b(ate)g(gory,)38 b(and)f(let)g FC(C)2892 4545
y FI(_)-47 b(^)2981 4581 y FU(b)-5 b(e)37 b(the)h(c)-5
b(ate)g(gory)37 b(ob-)0 4701 y(taine)-5 b(d)32 b(fr)-5
b(om)33 b FC(C)50 b FU(by)33 b(adding)f(for)h(e)-5 b(ach)32
b(p)-5 b(air)32 b(of)h(obje)-5 b(cts)32 b FS(A)h FU(and)g
FS(B)38 b FU(a)32 b(map)g FK(mix)2912 4660 y FI(\000)p
FQ(1)2912 4728 y FR(A;B)3056 4701 y FX(:)i FS(A)18 b
FT(_)g FS(B)33 b FT(!)27 b FS(A)18 b FT(^)g FS(B)0 4822
y FU(which)30 b(is)g(inverse)g(to)h FK(mix)959 4837 y
FR(A;B)1123 4822 y FU(\(i.e.,)f(the)h(two)g(bifunctors)f
FT(\000)13 b(^)g(\000)32 b FU(and)e FT(\000)13 b(_)g(\000)32
b FU(ar)-5 b(e)31 b(natur)-5 b(al)5 b(ly)31 b(isomor-)0
4942 y(phic)h(in)g FC(C)408 4906 y FI(_)-47 b(^)459 4942
y FU(\).)44 b(We)32 b(say)h(that)g FC(C)50 b FU(is)40
b FX(graphical)33 b FU(if)g(the)f(c)-5 b(anonic)g(al)32
b(for)-5 b(getful)32 b(functor)h FS(F)25 b FX(:)33 b
FC(C)45 b FT(!)27 b FC(C)3626 4906 y FI(_)-47 b(^)3710
4942 y FU(is)0 5062 y(faithful.)146 5225 y FX(Note)38
b(that)g FC(C)687 5188 y FI(_)-47 b(^)776 5225 y FX(is)38
b(a)g FT(\003)p FX(-autonomous)f(category)i(in)f(whic)m(h)h(the)f(t)m
(w)m(o)h(monoidal)f(structures)h(co-)0 5345 y(incide,)d(i.e.,)f(it)g
(is)g(a)f(compact)g(closed)i(category)-8 b(.)49 b(In)34
b(fact,)h(the)g(whole)g(p)s(oin)m(t)f(of)g(De\014nition)h(7.22)e(is)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 580 45
TeXDict begin 580 44 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(580)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FX(to)35 b(forget)g(in)g(a)g(giv)m(en)h
FT(\003)p FX(-autonomous)f(category)h(the)f(di\013erence)i(b)s(et)m(w)m
(een)g FT(^)f FX(and)f FT(_)p FX(.)52 b(The)36 b(actual)0
434 y(problem)44 b(is)f(usually)h(to)f(\014nd)g(a)g(canonical)g(w)m(a)m
(y)h(of)f(making)g(this)h(collapse.)75 b(But)43 b(here,)k(w)m(e)d(can)0
555 y(explore)35 b(the)f(fact)f(that)g FC(C)51 b FX(is)34
b(single-mixed)i(and)d(that)h(the)g(structure)h(of)e(a)g
FK(B1)p FX(-category)g(do)s(es)h(not)0 675 y(induce)g(an)m(y)f(other)g
(natural)g(maps)g FS(A)23 b FT(^)f FS(B)33 b FT(!)28
b FS(A)22 b FT(_)h FS(B)38 b FX(or)32 b FS(A)22 b FT(_)h
FS(B)33 b FT(!)28 b FS(A)22 b FT(^)h FS(B)5 b FX(.)44
b(Although)33 b(in)g(general)0 796 y(in)m(v)m(erting)i(arro)m(ws)f(in)f
(a)g(category)h(can)f(destro)m(y)i(the)e(structure,)i(it)e(is)h
(harmless)h(here)f(since)g(it)f(only)0 916 y(mak)m(es)41
b(mix)f(an)f(iso,)i(and)e(hence)i FC(C)1380 880 y FI(_)-47
b(^)1471 916 y FX(compact)39 b(closed.)65 b(W)-8 b(e)40
b(do)f(not)g(go)f(in)m(to)i(further)f(details)h(of)0
1036 y(in)m(v)m(erting)35 b(arro)m(ws)e(in)h(categories)g(b)s(ecause)g
(the)g(pap)s(er)f(is)h(already)f(v)m(ery)i(long)e(and)g(De\014nition)h
(7.22)0 1157 y(do)s(es)h(not)g(pla)m(y)h(an)f(imp)s(ortan)m(t)g(role)g
(in)g(the)h(pap)s(er.)51 b(Its)35 b(main)g(purp)s(ose)h(is)g(to)e(pro)m
(vide)i(the)g(means)0 1277 y(of)c(form)m(ulating)h(the)g(follo)m(wing)g
(op)s(en)f(problem.)0 1462 y FJ(7.23.)i(Open)f(Pr)n(oblem.)26
b FU(L)-5 b(et)32 b FC(E)50 b FU(b)-5 b(e)31 b(a)h(set)g(of)f(e)-5
b(quations)31 b(and)g(let)h FC(C)48 b FU(b)-5 b(e)32
b(the)f(fr)-5 b(e)g(e)32 b FK(B1)o FU(-c)-5 b(ate)g(gory)32
b(that)0 1582 y(is)k(gener)-5 b(ate)g(d)36 b(fr)-5 b(om)37
b(a)f(set)h FC(A)59 b FU(of)37 b(gener)-5 b(ators)36
b(\(e.g.,)g(pr)-5 b(op)g(ositional)35 b(variables\))h(and)g(that)h(ob)
-5 b(eys)36 b(al)5 b(l)0 1703 y(of)34 b FC(E)18 b FU(.)45
b(Is)33 b FC(C)52 b FU(gr)-5 b(aphic)g(al?)43 b(This)33
b(question)h(is)g(e)-5 b(quivalent)33 b(to)i(asking)e(for)h(a)g(gener)
-5 b(al)33 b(c)-5 b(oher)g(enc)g(e)33 b(r)-5 b(esult)0
1823 y(for)36 b(Bo)-5 b(ole)g(an)34 b(c)-5 b(ate)g(gories.)48
b(The)35 b(pr)-5 b(esent)36 b(p)-5 b(ap)g(er)35 b(exhibits)h(many)f(e)
-5 b(quations)36 b(that)g(have)g(to)g(hold,)f(but)0 1943
y(it)g(gives)f(no)h(clue)f(whether)h(they)g(ar)-5 b(e)35
b(enough,)f(or)h(what)f(c)-5 b(ould)35 b(b)-5 b(e)34
b(missing.)146 2114 y FX(Note)51 b(that)f(for)g(example)i(the)f(freely)
h(generated)f FT(\003)p FX(-autonomous)f(category)h(without)g(units)0
2234 y([LS05a,)38 b(HHS05,)g(DP05])g(is)h(graphical.)60
b(This)40 b(can)e(b)s(e)h(sho)m(wn)g(b)m(y)h(using)f(traditional)f(pro)
s(of)f(nets)0 2354 y(for)32 b(m)m(ultiplicativ)m(e)j(linear)e(logic.)44
b(Ho)m(w)m(ev)m(er,)35 b(the)e(w)m(ork)g(of)f([LS06])h(can)g(b)s(e)f
(used)i(to)e(sho)m(w)i(that)f(the)0 2475 y(freely)h(generated)f
FT(\003)p FX(-autonomous)f(category)h(with)g(units)h(is)f(not)f
(graphical.)146 2595 y(Clearly)-8 b(,)43 b(in)d(a)f(graphical)h
FK(B4)p FX(-category)f(the)h(equations)h(\()p FK(mix)t
FX(-)p FK(m)t FX(-)2644 2581 y(^)2651 2595 y FK(t)t FX(\),)g(\()p
FK(m)t FX(-)2941 2581 y(\024)2948 2595 y FK(t)t FX(-)p
FK(s)t FX(\),)h(and)d(\()3416 2594 y(\024)3402 2595 y
FK(m)3479 2559 y FH(2)3519 2595 y FX(-)p FK(s)t FX(-)3640
2594 y(\024)3626 2595 y FK(m)3703 2559 y FH(2)3742 2595
y FX(\))0 2716 y(all)f(hold.)59 b(Ho)m(w)m(ev)m(er,)41
b(at)d(the)g(curren)m(t)h(state)f(of)f(the)h(art)f(it)h(is)g(not)g(kno)
m(wn)h(whether)g(they)g(hold)f(in)0 2836 y(ev)m(ery)c
FK(B4)p FX(-category)-8 b(.)783 2800 y FQ(10)901 2836
y FX(But)33 b(what)f(can)h(easily)h(b)s(e)f(sho)m(wn)h(is)f(the)g
(follo)m(wing)g(prop)s(osition.)0 3021 y FJ(7.24.)k(Pr)n(oposition.)30
b FU(In)k(every)h FK(B4)p FU(-c)-5 b(ate)g(gory)p 0 TeXcolorgray
79 3224 a FX(\(i\))p 0 TeXcolorgray 48 w FU(the)35 b(e)-5
b(quation)42 b FX(\(43\))35 b FU(holds)f(if)g(and)h(only)f(if)h(e)-5
b(quation)42 b FX(\()p FK(mix)t FX(-)p FK(m)s FX(-)2558
3210 y(^)2565 3224 y FK(t)t FX(\))35 b FU(holds,)f(and)p
0 TeXcolorgray 51 3427 a FX(\(ii\))p 0 TeXcolorgray 49
w FU(the)h(e)-5 b(quation)42 b FX(\(30\))35 b FU(holds)f(if)g(and)h
(only)f(if)h(e)-5 b(quation)42 b FX(\()p FK(m)t FX(-)2377
3413 y(\024)2384 3427 y FK(t)t FX(-)p FK(s)t FX(\))35
b FU(holds.)0 3631 y FJ(Pr)n(oof.)28 b FX(Since)j(w)m(e)h(do)e(not)g
(need)h(this)g(later,)g(w)m(e)h(lea)m(v)m(e)g(the)f(pro)s(of)e(as)i(an)
f(exercise)j(to)d(the)g(reader.)p 3738 3631 42 42 v 0
3816 a FJ(7.25.)c(Definition.)20 b FU(A)25 b FK(B5)p
FX(-category)g FU(is)f(a)h FK(B4)o FU(-c)-5 b(ate)g(gory)25
b(that)g(ob)-5 b(eys)25 b(e)-5 b(quations)33 b FX(\()p
FK(mix)t FX(-)p FK(m)s FX(-)3338 3802 y(^)3345 3816 y
FK(t)t FX(\))p FU(,)27 b FX(\()p FK(m)t FX(-)3624 3802
y(\024)3631 3816 y FK(t)t FX(-)p FK(s)t FX(\))p FU(,)0
3936 y(and)45 b FX(\()252 3935 y(\024)238 3936 y FK(m)315
3900 y FH(2)354 3936 y FX(-)p FK(s)t FX(-)475 3935 y(\024)461
3936 y FK(m)538 3900 y FH(2)577 3936 y FX(\))35 b FU(for)g(al)5
b(l)34 b(obje)-5 b(cts.)146 4106 y FX(The)34 b(motiv)-5
b(ation)33 b(for)g(this)h(de\014nition)g(is)f(the)h(follo)m(wing)f
(lemma)h(whic)m(h)h(will)e(b)s(e)h(needed)g(in)g(the)0
4227 y(next)f(section.)p 0 TeXcolorgray 0 4384 600 4
v 79 4445 a FO(10)149 4475 y FZ(The)28 b(conjecture)f(is)h(that)g(it)g
(is)f(not)h(the)g(case,)f(but)h(so)f(far)g(no)g(coun)n(terexample)f
(could)i(b)r(e)g(constructed.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 581 46
TeXDict begin 581 45 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(581)p 0 TeXcolorgray
0 318 a FJ(7.26.)36 b(Lemma.)29 b FU(In)j(a)h FK(B5)p
FU(-c)-5 b(ate)g(gory)33 b(the)h(fol)5 b(lowing)32 b(e)-5
b(quation)33 b(holds)f(for)h(al)5 b(l)33 b(obje)-5 b(cts)33
b FS(A)p FU(,)h FS(A)3418 282 y FI(0)3441 318 y FU(,)g
FS(B)5 b FU(,)34 b FS(B)3727 282 y FI(0)3750 318 y FU(,)0
431 y FS(C)7 b FU(,)35 b FS(C)219 395 y FI(0)242 431
y FU(,)g FS(D)s FU(,)f(and)g FS(D)728 395 y FI(0)751
431 y FU(:)1169 614 y Fp(\()p Fr(A)1272 581 y FI(0)1296
614 y Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()p Fr(B)1630
581 y FI(0)1653 614 y Fq(_)p Fr(B)5 b Fp(\))p Fq(^)p
Fp(\()p Fr(C)1991 581 y FI(0)2013 614 y Fq(_)p Fr(C)i
Fp(\))p Fq(^)p Fp(\()p Fr(D)2355 581 y FI(0)2378 614
y Fq(_)p Fr(D)s Fp(\))2553 788 y FQ(^)2558 797 y FH(t)2583
817 y FE(A)2629 803 y FD(0)2652 817 y FE(;A;B)2784 803
y FD(0)2807 817 y FE(;B)2878 798 y FI(^)2920 789 y FQ(^)2925
798 y FH(t)2950 817 y FE(C)2997 803 y FD(0)3021 817 y
FE(;C;D)3155 803 y FD(0)3176 817 y FE(;D)2567 935 y FG(')p
FF(')2530 917 y Fz(O)2495 900 y(O)2460 883 y(O)2425 866
y(O)2390 849 y(O)2355 832 y(O)2320 815 y(O)2285 798 y(O)2250
781 y(O)2215 764 y(O)2180 747 y(O)2146 730 y(O)2111 712
y(O)2076 695 y(O)2041 678 y(O)2006 661 y(O)388 1030 y
Fp(\()p Fr(A)491 997 y FI(0)514 1030 y Fq(_)p Fr(A)p
Fp(\))p Fq(^)p Fp(\()p Fr(B)848 997 y FI(0)871 1030 y
Fq(_)p Fp(\()p Fr(B)e Fq(^)p Fr(C)1174 997 y FI(0)1196
1030 y Fp(\))p Fq(_)p Fr(C)i Fp(\))p Fq(^)p Fp(\()p Fr(D)1573
997 y FI(0)1596 1030 y Fq(_)p Fr(D)s Fp(\))1212 935 y
FG(x)p FF(x)323 798 y FQ(\()p FR(A)403 774 y FD(0)426
798 y FI(_)p FR(A)p FQ(\))p FI(^)595 789 y FQ(^)600 798
y FH(t)625 817 y FE(B)673 803 y FD(0)696 817 y FE(;B)r(;C)829
803 y FD(0)853 817 y FE(;C)923 798 y FI(^)p FQ(\()p FR(D)1057
774 y FD(0)1080 798 y FI(_)p FR(D)r FQ(\))1690 681 y
Fz(p)1656 699 y(p)1622 717 y(p)1588 735 y(p)1553 754
y(p)1519 772 y(p)1485 790 y(p)1451 808 y(p)1417 826 y(p)1383
844 y(p)1349 863 y(p)1315 881 y(p)1281 899 y(p)1246 917
y(p)1212 935 y(p)2021 1030 y Fp(\()p Fr(A)2124 997 y
FI(0)2148 1030 y Fq(_)p Fr(B)2283 997 y FI(0)2306 1030
y Fq(_)p Fp(\()p Fr(A)p Fq(^)p Fr(B)e Fp(\)\))p Fq(^)p
Fp(\()p Fr(C)2843 997 y FI(0)2865 1030 y Fq(_)p Fr(D)3004
997 y FI(0)3027 1030 y Fq(_)p Fp(\()p Fr(C)i Fq(^)p Fr(D)s
Fp(\)\))2732 1219 y FQ(^)2737 1228 y FH(t)2762 1247 y
FE(A)2808 1233 y FD(0)2831 1247 y(_)p FE(B)2921 1233
y FD(0)2944 1247 y FE(;A)p FD(^)p FE(B)r(;C)3165 1233
y FD(0)3187 1247 y(_)p FE(D)3281 1233 y FD(0)3303 1247
y FE(;C)s FD(^)p FE(D)2712 1352 y FG(\017)p FF(\017)p
2711 1352 4 274 v 423 1447 a Fp(\()p Fr(A)526 1414 y
FI(0)550 1447 y Fq(_)p Fr(B)685 1414 y FI(0)707 1447
y Fq(_)p Fp(\()p Fr(B)e Fq(^)p Fr(C)1010 1414 y FI(0)1032
1447 y Fp(\))p Fq(_)p Fr(C)i Fq(_)p Fr(A)p Fp(\))p Fq(^)p
Fp(\()p Fr(D)1538 1414 y FI(0)1561 1447 y Fq(_)p Fr(D)s
Fp(\))1079 1352 y FG(\017)p FF(\017)69 1225 y FH(mix)174
1244 y FE(A)220 1230 y FD(0)243 1244 y(_)p FE(A;B)398
1230 y FD(0)420 1244 y(_)p Ft(\()p FE(B)r FD(^)p FE(C)623
1230 y FD(0)646 1244 y Ft(\))p FD(_)p FE(C)763 1225 y
FI(^)p FQ(\()p FR(D)897 1201 y FD(0)919 1225 y FI(_)p
FR(D)r FQ(\))p 1077 1352 V 1986 1447 a Fp(\(\()p Fr(A)2124
1414 y FI(0)2148 1447 y Fq(_)p Fr(B)2283 1414 y FI(0)2306
1447 y Fp(\))p Fq(^)p Fp(\()p Fr(C)2509 1414 y FI(0)2532
1447 y Fq(_)p Fr(D)2671 1414 y FI(0)2693 1447 y Fp(\)\))p
Fq(_)p Fp(\()p Fr(D)s Fq(^)p Fr(C)g Fp(\))p Fq(_)p Fp(\()p
Fr(B)e Fq(^)p Fr(A)p Fp(\))2737 1646 y FQ(\(\()p FR(A)2844
1623 y FD(0)2867 1646 y FI(_)p FR(B)2970 1623 y FD(0)2993
1646 y FQ(\))p FI(^)p FQ(\()p FR(C)3149 1623 y FD(0)3173
1646 y FI(_)p FR(D)3280 1623 y FD(0)3302 1646 y FQ(\)\))p
FI(_)p FH(m)3459 1657 y FE(D)r(;C;B)r(;A)2712 1768 y
FG(\017)p FF(\017)p 2711 1768 V 458 1863 a Fr(A)526 1830
y FI(0)550 1863 y Fq(_)p Fr(B)685 1830 y FI(0)707 1863
y Fq(_)p Fp(\()p Fr(B)g Fq(^)p Fp(\()p Fr(D)1051 1830
y FI(0)1074 1863 y Fq(_)p Fr(D)s Fp(\))p Fq(^)p Fr(C)1381
1830 y FI(0)1403 1863 y Fp(\))p Fq(_)p Fr(C)i Fq(_)p
Fr(A)1079 1768 y FG(\017)p FF(\017)301 1632 y FH(s)328
1651 y FE(A)374 1637 y FD(0)396 1651 y(_)p FE(B)486 1637
y FD(0)509 1651 y(_)p FE(C)s FD(_)p FE(A;B)r FD(^)p FE(C)842
1637 y FD(0)864 1651 y FE(;D)935 1637 y FD(0)957 1651
y(_)p FE(D)p 1077 1768 V 1951 1863 a Fp(\(\()p Fr(A)2089
1830 y FI(0)2113 1863 y Fq(_)p Fr(B)2248 1830 y FI(0)2270
1863 y Fp(\))p Fq(^)p Fp(\()p Fr(C)2473 1830 y FI(0)2496
1863 y Fq(_)p Fr(D)2635 1830 y FI(0)2658 1863 y Fp(\)\))p
Fq(_)p Fp(\(\()p Fr(D)s Fq(_)p Fr(B)e Fp(\))p Fq(^)p
Fp(\()p Fr(C)i Fq(_)p Fr(A)p Fp(\)\))2737 2048 y FH(m)2793
2067 y FE(A)2839 2053 y FD(0)2862 2067 y(_)p FE(B)2952
2053 y FD(0)2974 2067 y FE(;C)3040 2053 y FD(0)3063 2067
y(_)p FE(D)3157 2053 y FD(0)3178 2067 y FE(;D)r FD(_)p
FE(B)r(;C)s FD(_)p FE(A)2712 2185 y FG(\017)p FF(\017)p
2711 2185 V 458 2279 a Fr(A)526 2246 y FI(0)550 2279
y Fq(_)p Fr(B)685 2246 y FI(0)707 2279 y Fq(_)p Fp(\()p
Fr(B)e Fq(^)p Fr(D)1016 2246 y FI(0)1038 2279 y Fp(\))p
Fq(_)p Fp(\()p Fr(D)s Fq(^)p Fr(C)1380 2246 y FI(0)1403
2279 y Fp(\))p Fq(_)p Fr(C)i Fq(_)p Fr(A)1079 2185 y
FG(\017)p FF(\017)274 2059 y FR(A)327 2035 y FD(0)349
2059 y FI(_)p FR(B)452 2035 y FD(0)475 2059 y FI(_)517
2050 y FQ(\024)522 2059 y FH(t)547 2078 y FE(B)r(;D)666
2064 y FD(0)689 2078 y FE(;D)r(;C)826 2064 y FD(0)852
2059 y FI(_)p FR(C)e FI(_)p FR(A)p 1077 2185 V 2092 2279
a Fp(\()p Fr(A)2195 2246 y FI(0)2219 2279 y Fq(_)p Fr(B)2354
2246 y FI(0)2376 2279 y Fq(_)p Fr(B)g Fq(_)p Fr(D)s Fp(\))p
Fq(^)p Fp(\()p Fr(D)2859 2246 y FI(0)2881 2279 y Fq(_)p
Fr(C)3014 2246 y FI(0)3037 2279 y Fq(_)p Fr(C)i Fq(_)p
Fr(A)p Fp(\))2486 2500 y FQ(^)2491 2509 y FH(t)2516 2529
y FE(A)2562 2515 y FD(0)2585 2529 y(_)p FE(B)2675 2515
y FD(0)2697 2529 y FE(;B)r FD(_)p FE(D)r(;D)2929 2515
y FD(0)2950 2529 y(_)p FE(C)3039 2515 y FD(0)3061 2529
y FE(;C)s FD(_)p FE(A)2006 2601 y FG(w)p FF(w)p Fz(o)2041
2584 y(o)2076 2567 y(o)2111 2550 y(o)2146 2533 y(o)2180
2516 y(o)2215 2499 y(o)2250 2482 y(o)2285 2465 y(o)2320
2448 y(o)2355 2431 y(o)2390 2414 y(o)2425 2397 y(o)2460
2380 y(o)2495 2363 y(o)2529 2346 y(o)1204 2696 y Fr(A)1272
2663 y FI(0)1296 2696 y Fq(_)p Fr(B)1431 2663 y FI(0)1453
2696 y Fq(_)p Fp(\(\()p Fr(B)e Fq(_)p Fr(D)s Fp(\))p
Fq(^)p Fp(\()p Fr(D)2006 2663 y FI(0)2029 2696 y Fq(_)p
Fr(C)2162 2663 y FI(0)2184 2696 y Fp(\)\))p Fq(_)p Fr(C)i
Fq(_)p Fr(A)1727 2601 y FG(&)p FF(&)445 2510 y FR(A)498
2486 y FD(0)520 2510 y FI(_)p FR(B)623 2486 y FD(0)646
2510 y FI(_)p FH(m)749 2529 y FE(B)r(;D)868 2515 y FD(0)890
2529 y FE(;D)r(;C)1027 2515 y FD(0)1053 2510 y FI(_)p
FR(C)e FI(_)p FR(A)1212 2327 y Fz(N)1246 2345 y(N)1281
2363 y(N)1315 2382 y(N)1349 2400 y(N)1383 2418 y(N)1417
2436 y(N)1451 2454 y(N)1485 2472 y(N)1519 2491 y(N)1553
2509 y(N)1588 2527 y(N)1622 2545 y(N)1656 2563 y(N)1690
2581 y(N)0 2881 y FJ(Pr)n(oof.)30 b FX(Chase)k(the)f(follo)m(wing)f
(diagram:)25 3089 y FQ(\()p FR(A)105 3066 y FD(0)128
3089 y FI(_)p FR(A)p FQ(\))p FI(^)p FQ(\()p FR(B)385
3066 y FD(0)408 3089 y FI(_)p FQ(\()p FR(B)s FI(^)p FR(C)640
3066 y FD(0)664 3089 y FQ(\))p FI(_)p FR(C)5 b FQ(\))p
FI(^)p FQ(\()p FR(D)954 3066 y FD(0)977 3089 y FI(_)p
FR(D)r FQ(\))460 3403 y Fm(mix)568 3649 y FG(\017)p FF(\017)p
567 3649 4 518 v 902 3198 a Fm(s)1102 3331 y FG(')p FF(')1065
3313 y Fz(O)1031 3296 y(O)997 3280 y(O)963 3263 y(O)929
3247 y(O)894 3230 y(O)860 3214 y(O)826 3197 y(O)792 3181
y(O)758 3164 y(O)724 3147 y(O)689 3131 y(O)1335 3089
y FQ(\()p FR(A)1415 3066 y FD(0)1438 3089 y FI(_)p FR(A)p
FQ(\))p FI(^)p FQ(\()p FR(B)1695 3066 y FD(0)1719 3089
y FI(_)p FR(B)s FQ(\))p FI(^)p FQ(\()p FR(C)1978 3066
y FD(0)2001 3089 y FI(_)p FR(C)g FQ(\))p FI(^)p FQ(\()p
FR(D)2264 3066 y FD(0)2288 3089 y FI(_)p FR(D)r FQ(\))1206
3032 y Ft(^)1212 3039 y Fm(t)1137 3072 y FG(o)p FF(o)p
1137 3074 174 4 v 2498 3032 a Ft(^)2503 3039 y Fm(t)g
FD(^)2563 3032 y Ft(^)2569 3039 y Fm(t)2648 3072 y FG(/)p
FF(/)p 2447 3074 202 4 v 2673 3089 a FQ(\()p FR(A)2753
3066 y FD(0)2776 3089 y FI(_)p FR(B)2879 3066 y FD(0)2901
3089 y FI(_)p FQ(\()p FR(A)p FI(^)p FR(B)s FQ(\)\))p
FI(^)p FQ(\()p FR(C)3314 3066 y FD(0)3339 3089 y FI(_)p
FR(D)3446 3066 y FD(0)3468 3089 y FI(_)p FQ(\()p FR(C)g
FI(^)p FR(D)r FQ(\)\))3236 3399 y Ft(^)3241 3406 y Fm(t)3216
3649 y FG(\017)p FF(\017)p 3215 3649 4 518 v 625 3407
a FQ(\(\(\()p FR(A)759 3384 y FD(0)783 3407 y FI(_)p
FR(A)p FQ(\))p FI(^)p FQ(\()p FR(B)1040 3384 y FD(0)1063
3407 y FI(_)p FR(C)g FQ(\)\))p FI(_)p FQ(\()p FR(B)s
FI(^)p FR(C)1451 3384 y FD(0)1476 3407 y FQ(\)\))p FI(^)p
FQ(\()p FR(D)1664 3384 y FD(0)1687 3407 y FI(_)p FR(D)r
FQ(\))886 3608 y Fm(mix)689 3649 y FG(w)p FF(w)p Fz(o)724
3633 y(o)758 3616 y(o)792 3600 y(o)826 3583 y(o)860 3566
y(o)894 3550 y(o)929 3533 y(o)963 3517 y(o)997 3500 y(o)1031
3484 y(o)1065 3467 y(o)1248 3714 y Fm(m)1223 3966 y FG(\017)p
FF(\017)p 1222 3966 V 1866 3357 a Fm(s)1911 3390 y FG(/)p
FF(/)p 1847 3391 64 4 v 1935 3407 a FQ(\(\(\()p FR(A)2069
3384 y FD(0)2093 3407 y FI(_)p FR(A)p FQ(\))p FI(^)p
FQ(\()p FR(B)2350 3384 y FD(0)2374 3407 y FI(_)p FR(C)g
FQ(\)\))p FI(_)p FQ(\()p FR(B)s FI(^)p FR(C)2762 3384
y FD(0)2786 3407 y FI(^)p FQ(\()p FR(D)2920 3384 y FD(0)2943
3407 y FI(_)p FR(D)r FQ(\)\))2466 3715 y Ft(\024)2472
3722 y Fm(t)2520 3966 y FG(\017)p FF(\017)p 2518 3966
4 518 v 52 3725 a FQ(\()p FR(A)132 3701 y FD(0)155 3725
y FI(_)p FR(B)258 3701 y FD(0)281 3725 y FI(_)p FQ(\()p
FR(B)s FI(^)p FR(C)513 3701 y FD(0)536 3725 y FQ(\))p
FI(_)p FR(C)g FI(_)p FR(A)p FQ(\))p FI(^)p FQ(\()p FR(D)926
3701 y FD(0)950 3725 y FI(_)p FR(D)r FQ(\))519 4032 y
Fm(s)568 4284 y FG(\017)p FF(\017)p 567 4284 V 2645 3725
a FQ(\(\()p FR(A)2752 3701 y FD(0)2776 3725 y FI(_)p
FR(B)2879 3701 y FD(0)2901 3725 y FQ(\))p FI(^)p FQ(\()p
FR(C)3057 3701 y FD(0)3081 3725 y FI(_)p FR(D)3188 3701
y FD(0)3210 3725 y FQ(\)\))p FI(_)p FQ(\()p FR(D)r FI(^)p
FR(C)g FQ(\))p FI(_)p FQ(\()p FR(B)s FI(^)p FR(A)p FQ(\))3241
4032 y Fm(m)3216 4284 y FG(\017)p FF(\017)p 3215 4284
V 707 4042 a FQ(\()p FR(A)787 4019 y FD(0)810 4042 y
FI(_)p FR(A)p FI(_)p FR(B)s FQ(\))p FI(^)p FQ(\()p FR(B)1170
4019 y FD(0)1194 4042 y FI(_)p FR(C)g FI(_)p FR(C)1398
4019 y FD(0)1421 4042 y FQ(\))p FI(^)p FQ(\()p FR(D)1582
4019 y FD(0)1605 4042 y FI(_)p FR(D)r FQ(\))1243 4351
y Ft(\024)1248 4358 y Fm(t)1223 4602 y FG(\017)p FF(\017)p
1222 4602 V 896 3826 a Ft(^)902 3833 y Fm(t)689 3766
y FG(g)p FF(g)p Fz(O)724 3782 y(O)758 3799 y(O)792 3815
y(O)826 3832 y(O)860 3849 y(O)894 3865 y(O)929 3882 y(O)963
3898 y(O)997 3915 y(O)1031 3931 y(O)1065 3948 y(O)1949
4042 y FQ(\(\()p FR(A)2056 4019 y FD(0)2079 4042 y FI(_)p
FR(A)p FQ(\))p FI(^)p FQ(\()p FR(B)2336 4019 y FD(0)2360
4042 y FI(_)p FR(C)g FQ(\)\))p FI(_)p FQ(\()p FR(B)s
FI(^)p FR(D)2753 4019 y FD(0)2777 4042 y FQ(\))p FI(_)p
FQ(\()p FR(C)2933 4019 y FD(0)2956 4042 y FI(^)p FR(D)r
FQ(\))2433 4358 y Ft(\024)2427 4359 y Fm(m)2469 4338
y Ff(2)2520 4602 y FG(\017)p FF(\017)p 2518 4602 V 80
4360 a FR(A)133 4337 y FD(0)155 4360 y FI(_)p FR(B)258
4337 y FD(0)281 4360 y FI(_)p FQ(\()p FR(B)s FI(^)p FQ(\()p
FR(D)545 4337 y FD(0)569 4360 y FI(_)p FR(D)r FQ(\))p
FI(^)p FR(C)805 4337 y FD(0)827 4360 y FQ(\))p FI(_)p
FR(C)g FI(_)p FR(A)514 4669 y Ft(\024)520 4676 y Fm(t)568
4920 y FG(\017)p FF(\017)p 567 4920 V 2618 4360 a FQ(\(\()p
FR(A)2725 4337 y FD(0)2748 4360 y FI(_)p FR(B)2851 4337
y FD(0)2874 4360 y FQ(\))p FI(^)p FQ(\()p FR(C)3030 4337
y FD(0)3053 4360 y FI(_)p FR(D)3160 4337 y FD(0)3183
4360 y FQ(\)\))p FI(_)p FQ(\(\()p FR(B)s FI(_)p FR(D)r
FQ(\))p FI(^)p FQ(\()p FR(C)g FI(^)p FR(A)p FQ(\)\))3241
4668 y Fm(m)3216 4920 y FG(\017)p FF(\017)p 3215 4920
V 680 4678 a FQ(\(\()p FR(A)787 4654 y FD(0)810 4678
y FI(_)p FR(A)p FI(_)p FR(B)s FQ(\))p FI(^)p FR(D)1147
4654 y FD(0)1170 4678 y FQ(\))p FI(_)p FQ(\()p FR(D)r
FI(^)p FQ(\()p FR(B)1461 4654 y FD(0)1485 4678 y FI(_)p
FR(C)g FI(_)p FR(C)1689 4654 y FD(0)1712 4678 y FQ(\)\))1876
4627 y Fm(m)2007 4661 y FG(/)p FF(/)p 1792 4662 215 4
v 885 4872 a Fm(s)t FD(_)p Fm(s)689 4920 y FG(w)p FF(w)p
Fz(o)724 4904 y(o)758 4887 y(o)792 4870 y(o)826 4854
y(o)860 4837 y(o)894 4821 y(o)929 4804 y(o)963 4788 y(o)997
4771 y(o)1031 4755 y(o)1065 4738 y(o)2031 4678 y FQ(\()p
FR(A)2111 4654 y FD(0)2134 4678 y FI(_)p FR(A)p FI(_)p
FR(B)s FI(_)p FR(D)r FQ(\))p FI(^)p FQ(\()p FR(D)2605
4654 y FD(0)2629 4678 y FI(_)p FR(B)2732 4654 y FD(0)2755
4678 y FI(_)p FR(C)g FI(_)p FR(C)2959 4654 y FD(0)2981
4678 y FQ(\))2200 4879 y Ft(^)2206 4886 y Fm(t)1997 4920
y FG(w)p FF(w)p Fz(o)2034 4902 y(o)2071 4883 y(o)2107
4865 y(o)2144 4847 y(o)2181 4829 y(o)2217 4811 y(o)2254
4792 y(o)2291 4774 y(o)2328 4756 y(o)2364 4738 y(o)80
4996 y FR(A)133 4972 y FD(0)155 4996 y FI(_)p FR(B)258
4972 y FD(0)281 4996 y FI(_)p FQ(\()p FR(B)s FI(^)p FR(D)518
4972 y FD(0)541 4996 y FQ(\))p FI(_)p FQ(\()p FR(D)r
FI(^)p FR(C)804 4972 y FD(0)827 4996 y FQ(\))p FI(_)p
FR(C)g FI(_)p FR(A)1187 5025 y Fm(m)1338 4978 y FG(/)p
FF(/)p 1082 4980 257 4 v 1363 4996 a FR(A)1416 4972 y
FD(0)1438 4996 y FI(_)p FR(B)1541 4972 y FD(0)1564 4996
y FI(_)p FQ(\(\()p FR(B)s FI(_)p FR(D)r FQ(\))p FI(^)p
FQ(\()p FR(D)1989 4972 y FD(0)2013 4996 y FI(_)p FR(C)2115
4972 y FD(0)2138 4996 y FQ(\)\))p FI(_)p FR(C)g FI(_)p
FR(A)334 b FQ(\()p FR(A)2808 4972 y FD(0)2830 4996 y
FI(_)p FR(B)2933 4972 y FD(0)2956 4996 y FI(_)p FR(B)s
FI(_)p FR(D)r FQ(\))p FI(^)p FQ(\()p FR(D)3327 4972 y
FD(0)3351 4996 y FI(_)p FR(C)3453 4972 y FD(0)3475 4996
y FI(_)p FR(C)5 b FI(_)p FR(A)p FQ(\))2544 5038 y Ft(^)2549
5045 y Fm(t)2419 4978 y FG(o)p FF(o)p 2419 4980 284 4
v 0 5225 a FX(The)45 b(little)f(triangle)g(in)g(the)g(upp)s(er)g(left)g
(comm)m(utes)h(b)s(ecause)h(of)k(\()p FK(mix)s FX(-)10
b(^)-59 b FS(\013)t FX(\).)77 b(The)45 b(little)f(triangle)0
5345 y(b)s(elo)m(w)31 b(it)f(is)g(just)h(\()p FK(mix)s
FX(-)p FK(m)t FX(-)981 5331 y(^)988 5345 y FK(t)t FX(\),)f(and)h(the)f
(p)s(en)m(tagon)g(b)s(elo)m(w)h(comm)m(utes)h(b)s(ecause)f(of)f(the)g
(coherence)i(in)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 582 47
TeXDict begin 582 46 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(582)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 324 a FT(\003)p FX(-autonomous)35 b(categories)1050
288 y FQ(11)1160 324 y FX([BCST96,)h(LS06].)50 b(The)36
b(big)f(square)h(in)g(the)f(cen)m(ter)h(is)g(\()p FK(m)t
FX(-)3430 310 y(\024)3437 324 y FK(t)t FX(-)p FK(s)t
FX(\))f(and)0 444 y(the)c(small)g(parallelogram)f(at)g(the)h(b)s(ottom)
f(is)g(just)h(t)m(w)m(o)g(applications)g(of)37 b(\()p
FK(m)t FX(-)p FK(s)5 b FX(\))30 b(plugged)h(together,)0
565 y(and)i(the)g(big)f(horse-sho)s(e)i(shap)s(e)f(on)f(the)h(left)g
(is)g(\()1894 564 y(\024)1880 565 y FK(m)1957 528 y FH(2)1997
565 y FX(-)p FK(s)t FX(-)2118 564 y(\024)2104 565 y FK(m)2181
528 y FH(2)2220 565 y FX(\).)p 3738 565 42 42 v 0 884
a FY(8.)38 b(Bey)m(ond)g(medial)0 1080 y FX(The)47 b(de\014nition)g(of)
f(monoidal)h(categories)g(settles)g(ho)m(w)g(the)g(maps)57
b(^)-59 b FS(\013)2729 1095 y FR(A;B)s(;C)2937 1080 y
FX(,)55 b(^)-55 b FS(\033)3068 1095 y FR(A;B)3202 1080
y FX(,)59 b(^)-58 b FS(\045)3329 1095 y FR(A)3386 1080
y FX(,)50 b(and)3670 1054 y(^)3666 1080 y FS(\025)3723
1095 y FR(A)0 1200 y FX(b)s(eha)m(v)m(e)40 b(with)e(resp)s(ect)i(to)e
(eac)m(h)h(other,)g(and)g(ho)m(w)f(the)h(maps)48 b(\024)-58
b FS(\013)2437 1215 y FR(A;B)s(;C)2645 1200 y FX(,)44
b(\024)-54 b FS(\033)2766 1215 y FR(A;B)2900 1200 y FX(,)48
b(\024)-58 b FS(\045)3016 1215 y FR(A)3074 1200 y FX(,)39
b(and)3339 1174 y(\024)3335 1200 y FS(\025)3392 1215
y FR(A)3487 1200 y FX(b)s(eha)m(v)m(e)0 1321 y(with)j(resp)s(ect)h(to)f
(eac)m(h)g(other.)72 b(The)42 b(notion)g(of)f FT(\003)p
FX(-autonomous)h(category)g(then)g(settles)h(via)g(the)0
1441 y(bijection)i(\()p FS(?)p FX(\))g(ho)m(w)g(the)g(t)m(w)m(o)h
(monoidal)f(structures)h(in)m(teract.)81 b(Then,)49 b(the)c(structure)h
(of)f(a)f FK(B1)o FX(-)0 1561 y(category)30 b(adds)h
FT(_)p FX(-monoids)g(and)f FT(^)p FX(-comonoids,)h(and)f(the)h
(structure)g(of)f FK(B2)o FX(-categories)h(allo)m(ws)g(the)0
1682 y FT(_)p FX(-monoidal)44 b(structure)h(to)e(go)h(w)m(ell)h(with)f
(the)h FT(_)p FX(-monoids)f(and)g(the)g FT(^)p FX(-monoidal)g
(structure)h(to)0 1802 y(go)38 b(w)m(ell)h(with)f(the)h
FT(^)p FX(-comonoids.)61 b(Finally)-8 b(,)39 b(the)g(structure)g(of)f
FK(B4)o FX(-categories)g(ensures)i(that)e FU(b)-5 b(oth)0
1922 y FX(monoidal)33 b(structures)h(go)e(w)m(ell)i(with)f(the)g
FT(_)p FX(-monoids)g FU(and)43 b FX(the)33 b FT(^)p FX(-comonoids.)146
2043 y(Ho)m(w)m(ev)m(er,)k(what)c(has)h(b)s(een)h(neglected)g(so)f(far)
f(is)h(ho)m(w)g(the)g FT(_)p FX(-monoids)g(and)g(the)g
FT(^)p FX(-comonoids)0 2163 y(go)39 b(along)h(with)g(eac)m(h)h(other.)
65 b(Recall)40 b(that)f(in)h(an)m(y)h FK(B2)o FX(-category)f(the)g
(maps)g FT(r)k FX(and)c FT(q)k FX(preserv)m(e)0 2284
y(the)31 b FT(_)p FX(-monoid)g(structure)h(and)f(the)g(maps)g(\001)36
b(and)30 b(\005)35 b(preserv)m(e)e(the)f FT(^)p FX(-comonoid)f
(structure)h(\(The-)0 2404 y(orem)h(7.19\).)0 2587 y
FJ(8.1.)39 b(Comp)-7 b(a)g(tibility)40 b(of)g FT(_)p
FJ(-monoids)g(and)f FT(^)p FJ(-comonoids.)32 b FU(We)k(have)f(the)h
(fol)5 b(lowing)35 b(p)-5 b(ossi-)0 2708 y(bilities:)p
0 TeXcolorgray 79 2904 a FX(\(i\))p 0 TeXcolorgray 48
w FU(The)35 b(maps)f FX(\005)39 b FU(and)34 b FT(q)39
b FU(ar)-5 b(e)34 b(quasientr)-5 b(opies.)p 0 TeXcolorgray
51 3104 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(The)35 b(maps)f
FX(\005)39 b FU(and)34 b FT(q)39 b FU(ar)-5 b(e)34 b(clonable.)p
0 TeXcolorgray 24 3305 a FX(\(iii\))p 0 TeXcolorgray
49 w FU(The)h(maps)f FX(\001)39 b FU(and)34 b FT(r)39
b FU(ar)-5 b(e)35 b(quasientr)-5 b(opies.)p 0 TeXcolorgray
27 3506 a FX(\(iv\))p 0 TeXcolorgray 49 w FU(The)35 b(maps)f
FX(\001)39 b FU(and)34 b FT(r)39 b FU(ar)-5 b(e)35 b(clonable.)146
3702 y FX(Condition)f(\(i\))e(sa)m(ys)i(in)f(particular)g(that)f(the)h
(follo)m(wing)g(diagram)f(comm)m(utes)1883 3920 y FP(f)1628
4028 y FI(q)1681 4005 y FE(A)1655 4160 y FG(\000)p FF(\000)p
Fz(\002)1680 4132 y(\002)1705 4105 y(\002)1730 4077 y(\002)1755
4050 y(\002)1780 4023 y(\002)1805 3995 y(\002)1830 3968
y(\002)1565 4253 y FS(A)1853 4301 y FQ(\005)1906 4277
y FE(A)2147 4218 y FG(/)p FF(/)p 1663 4220 485 4 v 2172
4250 a FP(t)2147 4165 y FG(\035)p FF(\035)2074 4034 y
FQ(\005)2127 4011 y Fy(f)1952 3940 y Fz(;)1976 3967 y(;)2000
3995 y(;)2024 4023 y(;)2048 4050 y(;)2072 4078 y(;)2096
4106 y(;)2120 4133 y(;)3607 4101 y FX(\(44\))0 4500 y(Ev)m(ery)45
b FK(B1)o FX(-category)e(ob)s(eying)i(\()p FK(B2a)p FX(\))d(and)i
(\(44\))e(is)i(not)f(only)g(single-mixed)i(but)e(also)h(for)e(ev)m(ery)
0 4657 y(ob)5 b(ject)26 b FS(A)f FX(the)h(comp)s(osition)g
FP(f)1177 4600 y FI(q)1230 4577 y FE(A)1169 4657 y FT(!)39
b FS(A)1428 4600 y FQ(\005)1481 4577 y FE(A)1420 4657
y FT(!)g FP(t)24 b FX(yields)j(the)f(same)g(result.)42
b(In)26 b([LS05a])f(the)h(equation)g(\(44\))0 4777 y(w)m(as)40
b(used)g(as)g(basic)f(axiom,)j(and)d(the)g(mix)h(map)f(w)m(as)h
(constructed)h(from)e(that)g(without)g(the)h(use)0 4897
y(prop)s(er)33 b(units.)146 5018 y(The)28 b(next)f(observ)-5
b(ation)27 b(to)f(mak)m(e)h(is)g(that)g(\(ii\))f(and)g(\(iii\))h(of)f
(8.1)g(are)g(equiv)-5 b(alen)m(t,)30 b(pro)m(vided)e(\()p
FK(B3b)p FX(\))0 5138 y(and)33 b(\()p FK(B3a)p FX(\))e(are)i(presen)m
(t:)p 0 TeXcolorgray 0 5253 600 4 v 79 5315 a FO(11)149
5345 y FZ(It)28 b(ev)n(en)f(comm)n(utes)h(in)g(the)g(setting)f(of)h(w)n
(eakly)e(distributiv)n(e)i(categories.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 583 48
TeXDict begin 583 47 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(583)p 0 TeXcolorgray
0 320 a FJ(8.2.)50 b(Pr)n(oposition.)38 b FU(In)45 b(a)h
FK(B2)o FU(-c)-5 b(ate)g(gory)46 b(with)g(nul)5 b(lary)46
b(me)-5 b(dial)45 b(and)56 b FX(\()p FK(B3a)p FX(\))45
b FU(the)h(fol)5 b(lowing)44 b(ar)-5 b(e)0 440 y(e)g(quivalent)34
b(for)h(every)g(obje)-5 b(ct)34 b FS(A)p FU(:)p 0 TeXcolorgray
79 643 a FX(\(i\))p 0 TeXcolorgray 48 w FU(The)h(map)f
FX(\005)717 607 y FR(A)809 643 y FU(pr)-5 b(eserves)34
b(the)h FT(_)p FU(-multiplic)-5 b(ation.)p 0 TeXcolorgray
51 847 a FX(\(ii\))p 0 TeXcolorgray 49 w FU(The)35 b(map)f
FT(r)727 862 y FR(A)819 847 y FU(pr)-5 b(eserves)34 b(the)h
FT(^)p FU(-c)-5 b(ounit.)p 0 TeXcolorgray 24 1050 a FX(\(iii\))p
0 TeXcolorgray 49 w FU(The)35 b(map)f FT(q)737 997 y
FQ(\026)719 1014 y FR(A)810 1050 y FU(pr)-5 b(eserves)34
b(the)h FT(^)p FU(-c)-5 b(omultiplic)g(ation.)p 0 TeXcolorgray
27 1254 a FX(\(iv\))p 0 TeXcolorgray 49 w FU(The)35 b(map)f
FX(\001)744 1258 y FQ(\026)725 1274 y FR(A)817 1254 y
FU(pr)-5 b(eserves)34 b(the)h FT(_)p FU(-unit.)0 1457
y FJ(Pr)n(oof.)30 b FX(The)j(equiv)-5 b(alence)35 b(of)k(\(ii\))33
b(and)f(\(i\))h(follo)m(ws)g(from)1534 1730 y FS(A)22
b FT(_)h FS(A)1966 1853 y FQ(\005)2019 1830 y FE(A)p
FD(_)p FE(A)2221 2001 y FG(&)p FF(&)2184 1981 y Fz(N)2150
1962 y(N)2115 1943 y(N)2081 1924 y(N)2046 1906 y(N)2012
1887 y(N)1977 1868 y(N)1943 1849 y(N)1908 1830 y(N)1874
1812 y(N)1840 1793 y(N)1805 1774 y(N)1771 1755 y(N)1957
1660 y FI(r)2016 1671 y FE(A)2206 1696 y FG(/)p FF(/)p
1816 1698 391 4 v 2231 1730 a FS(A)2292 1891 y FQ(\005)2345
1868 y FE(A)2268 1970 y FG(\017)p FF(\017)p 2266 1970
4 215 v 1564 2058 a FP(t)e FT(_)i FP(t)1663 1970 y FG(\017)p
FF(\017)1384 1891 y FQ(\005)1437 1868 y FE(A)1488 1891
y FI(_)p FQ(\005)1588 1868 y FE(A)p 1661 1970 V 2246
2058 a FP(t)2221 2026 y FG(/)p FF(/)1959 2096 y FI(r)2018
2105 y Fy(t)p 1786 2028 435 4 v 0 2313 a FX(The)28 b(lo)m(w)m(er)h
(triangle)e(is)h(\()p FK(B3b)p FX(\))f(together)h(with)g(\()p
FK(B3a)p FX(\))o(.)41 b(The)29 b(upp)s(er)f(triangle)f(is)h(\(ii\),)g
(and)g(the)g(square)0 2433 y(is)33 b(\(i\).)44 b(The)33
b(other)g(equiv)-5 b(alences)35 b(follo)m(w)e(b)m(y)g(dualit)m(y)-8
b(.)p 3738 2433 42 42 v 146 2603 a(Condition)24 b(8.1)f(\(iv\))h
(exhibits)i(y)m(et)e(another)g(example)g(of)f(a)h(\\creativ)m(e)g
(tension")h(b)s(et)m(w)m(een)g(algebra)0 2724 y(and)34
b(pro)s(of)e(theory)-8 b(.)47 b(F)-8 b(rom)33 b(the)h(viewp)s(oin)m(t)h
(of)e(algebra,)h(it)g(mak)m(es)h(p)s(erfect)f(sense)h(to)f(demand)g
(that)0 2844 y(the)43 b FT(_)p FX(-monoid)g(structure)h(and)f(the)g
FT(^)p FX(-comonoid)h(structure)g(b)s(e)f(compatible)h(with)f(eac)m(h)h
(other,)0 2965 y(i.e.,)37 b(that)f(8.1)g(\(i\){\(iv\))g(do)g(all)g
(hold)g(\(see)h([Lam07]\).)53 b(Ho)m(w)m(ev)m(er,)39
b(from)d(the)g(pro)s(of-theoretic)g(p)s(oin)m(t)0 3085
y(of)d(view)i(it)f(is)g(reasonable)g(to)g(mak)m(e)g(some)h(\014ne)f
(distinctions:)48 b(W)-8 b(e)34 b(ha)m(v)m(e)h(to)e(k)m(eep)i(in)f
(mind)g(that)g(in)0 3205 y(the)f(sequen)m(t)i(calculus)f(it)e(is)i(the)
f(\\con)m(traction-con)m(traction-case")p 1432 3471 4
4 v 1434 3471 V 1437 3470 V 1439 3470 V 1442 3470 V 1444
3469 V 1447 3469 V 1449 3469 V 1451 3468 V 1454 3468
V 1456 3468 V 1458 3468 V 1461 3467 V 1463 3467 V 1465
3467 V 1467 3466 V 1470 3466 V 1472 3466 V 1474 3466
V 1476 3465 V 1478 3465 V 1480 3465 V 1482 3465 V 1484
3465 V 1486 3464 V 1488 3464 V 1490 3464 V 1492 3464
V 1494 3464 V 1496 3463 V 1498 3463 V 1500 3463 V 1501
3463 V 1503 3463 V 1505 3463 V 1507 3463 V 1508 3463
V 1510 3462 V 1512 3462 V 1514 3462 V 1515 3462 V 1518
3462 V 1522 3462 V 1525 3462 V 1528 3462 V 1531 3462
V 1534 3462 V 1536 3462 V 1539 3462 V 1542 3462 V 1544
3462 V 1547 3462 V 1549 3462 V 1552 3462 V 1554 3462
V 1557 3462 V 1559 3462 V 1561 3463 V 1563 3463 V 1565
3463 V 1568 3463 V 1570 3463 V 1572 3464 V 1574 3464
V 1576 3464 V 1577 3464 V 1579 3465 V 1581 3465 V 1583
3465 V 1585 3466 V 1586 3466 V 1588 3466 V 1590 3467
V 1592 3467 V 1593 3467 V 1595 3468 V 1596 3468 V 1600
3469 V 1603 3470 V 1606 3470 V 1609 3471 V 1612 3472
V 1615 3473 V 1619 3474 V 1622 3474 V 1623 3475 V 1625
3475 V 1627 3475 V 1628 3476 V 1630 3476 V 1632 3476
V 1634 3477 V 1635 3477 V 1637 3477 V 1639 3478 V 1641
3478 V 1643 3478 V 1645 3479 V 1647 3479 V 1649 3479
V 1651 3479 V 1653 3480 V 1655 3480 V 1657 3480 V 1659
3480 V 1662 3480 V 1664 3480 V 1666 3481 V 1669 3481
V 1671 3481 V 1674 3481 V 1676 3481 V 1679 3481 V 1682
3481 V 1685 3481 V 1688 3481 V 1691 3481 V 1694 3481
V 1697 3481 V 1700 3480 V 1703 3480 V 1705 3480 V 1706
3480 V 1708 3480 V 1710 3480 V 1711 3480 V 1713 3480
V 1715 3480 V 1717 3479 V 1719 3479 V 1720 3479 V 1722
3479 V 1724 3479 V 1726 3479 V 1728 3479 V 1730 3478
V 1732 3478 V 1734 3478 V 1736 3478 V 1738 3478 V 1740
3477 V 1742 3477 V 1744 3477 V 1746 3477 V 1749 3476
V 1751 3476 V 1753 3476 V 1755 3476 V 1757 3475 V 1760
3475 V 1762 3475 V 1764 3474 V 1767 3474 V 1769 3474
V 1772 3473 V 1774 3473 V 1777 3473 V 1779 3472 V 1782
3472 V 1784 3472 V 1787 3471 V 1611 3647 a Fz(\177)1635
3622 y(\177)1660 3598 y(\177)1685 3573 y(\177)1710 3548
y(\177)1734 3524 y(\177)1759 3499 y(\177)1433 3470 y(?)1458
3494 y(?)1483 3519 y(?)1507 3544 y(?)1532 3568 y(?)1557
3593 y(?)1581 3618 y(?)1573 3546 y FR(\031)1614 3555
y Ft(1)1419 3756 y FT(`)28 b FX(\000)p FS(;)17 b(A;)g(A)1214
3833 y FK(cont)p 1419 3810 384 4 v 1478 3909 a FT(`)27
b FX(\000)p FS(;)17 b(A)p 2157 3471 4 4 v 2160 3471 V
2162 3470 V 2165 3470 V 2167 3470 V 2170 3469 V 2172
3469 V 2175 3469 V 2177 3468 V 2180 3468 V 2182 3468
V 2184 3468 V 2186 3467 V 2189 3467 V 2191 3467 V 2193
3466 V 2195 3466 V 2198 3466 V 2200 3466 V 2202 3465
V 2204 3465 V 2206 3465 V 2208 3465 V 2210 3465 V 2212
3464 V 2214 3464 V 2216 3464 V 2218 3464 V 2220 3464
V 2222 3463 V 2223 3463 V 2225 3463 V 2227 3463 V 2229
3463 V 2231 3463 V 2232 3463 V 2234 3463 V 2236 3462
V 2238 3462 V 2239 3462 V 2241 3462 V 2244 3462 V 2247
3462 V 2250 3462 V 2253 3462 V 2256 3462 V 2259 3462
V 2262 3462 V 2265 3462 V 2267 3462 V 2270 3462 V 2273
3462 V 2275 3462 V 2278 3462 V 2280 3462 V 2282 3462
V 2285 3462 V 2287 3463 V 2289 3463 V 2291 3463 V 2293
3463 V 2295 3463 V 2297 3464 V 2299 3464 V 2301 3464
V 2303 3464 V 2305 3465 V 2307 3465 V 2309 3465 V 2310
3466 V 2312 3466 V 2314 3466 V 2316 3467 V 2317 3467
V 2319 3467 V 2321 3468 V 2322 3468 V 2325 3469 V 2329
3470 V 2332 3470 V 2335 3471 V 2338 3472 V 2341 3473
V 2344 3474 V 2347 3474 V 2349 3475 V 2351 3475 V 2352
3475 V 2354 3476 V 2356 3476 V 2357 3476 V 2359 3477
V 2361 3477 V 2363 3477 V 2365 3478 V 2366 3478 V 2368
3478 V 2370 3479 V 2372 3479 V 2374 3479 V 2376 3479
V 2378 3480 V 2381 3480 V 2383 3480 V 2385 3480 V 2387
3480 V 2390 3480 V 2392 3481 V 2394 3481 V 2397 3481
V 2400 3481 V 2402 3481 V 2405 3481 V 2408 3481 V 2410
3481 V 2413 3481 V 2416 3481 V 2419 3481 V 2422 3481
V 2425 3480 V 2429 3480 V 2430 3480 V 2432 3480 V 2434
3480 V 2435 3480 V 2437 3480 V 2439 3480 V 2441 3480
V 2443 3479 V 2444 3479 V 2446 3479 V 2448 3479 V 2450
3479 V 2452 3479 V 2454 3479 V 2456 3478 V 2458 3478
V 2460 3478 V 2462 3478 V 2464 3478 V 2466 3477 V 2468
3477 V 2470 3477 V 2472 3477 V 2474 3476 V 2476 3476
V 2479 3476 V 2481 3476 V 2483 3475 V 2485 3475 V 2488
3475 V 2490 3474 V 2492 3474 V 2495 3474 V 2497 3473
V 2500 3473 V 2502 3473 V 2505 3472 V 2507 3472 V 2510
3472 V 2512 3471 V 2336 3647 a Fz(\177)2361 3622 y(\177)2386
3598 y(\177)2411 3573 y(\177)2435 3548 y(\177)2460 3524
y(\177)2485 3499 y(\177)2159 3470 y(?)2184 3494 y(?)2208
3519 y(?)2233 3544 y(?)2258 3568 y(?)2282 3593 y(?)2307
3618 y(?)2299 3546 y FR(\031)2340 3555 y Ft(2)2135 3756
y FT(`)2249 3731 y FX(\026)2223 3756 y FS(A;)2366 3731
y FX(\026)2340 3756 y FS(A;)g FX(\001)1930 3833 y FK(cont)p
2135 3810 404 4 v 2193 3909 a FT(`)2307 3883 y FX(\026)2282
3909 y FS(A;)g FX(\001)1321 3986 y FK(cut)p 1478 3963
1003 4 v 1841 4061 a FT(`)28 b FX(\000)p FS(;)17 b FX(\001)0
4274 y(whic)m(h)35 b(sp)s(oils)e(the)h(con\015uence)h(of)d(cut)i
(elimination)g(and)f(whic)m(h)i(causes)f(the)g(exp)s(onen)m(tial)g(blo)
m(w-up)0 4395 y(of)e(the)h(size)h(of)e(the)h(pro)s(of.)43
b(This)33 b(questions)i(8.1)d(\(iv\))q(,)g(i.e.,)h(the)g(comm)m
(utativit)m(y)i(of)d(the)h(diagram)1410 4668 y FS(A)23
b FT(_)f FS(A)2009 4598 y FI(r)2068 4609 y FE(A)2434
4634 y FG(/)p FF(/)p 1692 4636 742 4 v 2459 4668 a FS(A)2520
4825 y FQ(\001)2579 4836 y FE(A)2495 4923 y FG(\017)p
FF(\017)p 2494 4923 4 231 v 1151 5007 a FX(\()p FS(A)g
FT(^)g FS(A)p FX(\))h FT(_)f FX(\()p FS(A)g FT(^)h FS(A)p
FX(\))1539 4907 y FG(\017)p FF(\017)1249 4817 y FQ(\001)1308
4828 y FE(A)1358 4817 y FI(_)p FQ(\001)1464 4828 y FE(A)p
1537 4907 4 215 v 2367 5016 a FS(A)f FT(^)h FS(A)2342
4982 y FG(/)p FF(/)2049 5052 y FI(r)2108 5063 y FE(A)p
FD(^)p FE(A)p 1952 4984 391 4 v 3607 4833 a FX(\(45\))0
5265 y(motiv)-5 b(ates)33 b(the)g(distinction)h(made)f(in)g(the)g
(follo)m(wing)g(de\014nition.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 584 49
TeXDict begin 584 48 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(584)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 326 a FJ(8.3.)33 b(Definition.)26 b
FU(We)31 b(say)h(a)e FK(B1)p FU(-c)-5 b(ate)g(gory)31
b(is)39 b FX(w)m(eakly)30 b(\015at)h FU(if)g(for)g(every)g(obje)-5
b(ct)31 b FS(A)p FU(,)g(the)h(maps)e FX(\005)3723 290
y FR(A)0 447 y FU(and)36 b FT(q)266 411 y FR(A)360 447
y FU(ar)-5 b(e)37 b(str)-5 b(ong)36 b(and)h(the)g(maps)f
FX(\001)1515 462 y FR(A)1609 447 y FU(and)g FT(r)1883
462 y FR(A)1977 447 y FU(ar)-5 b(e)37 b(quasientr)-5
b(opies)36 b(\(i.e.,)h(8.1)f FX(\(i\))p FU({)p FX(\(iii\))h
FU(hold\),)0 567 y(and)d(it)h(is)43 b FX(\015at)34 b
FU(if)h(for)f(every)h(obje)-5 b(ct)34 b FS(A)p FU(,)h(the)g(maps)e
FX(\005)1984 531 y FR(A)2042 567 y FU(,)h FT(q)2181 531
y FR(A)2238 567 y FU(,)g FX(\001)2383 582 y FR(A)2475
567 y FU(and)h FT(r)2748 582 y FR(A)2839 567 y FU(ar)-5
b(e)35 b(al)5 b(l)34 b(str)-5 b(ong)34 b(\(i.e.,)g(al)5
b(l)0 688 y(of)35 b(8.1)f FX(\(i\))p FU({)p FX(\(iv\))h
FU(do)g(hold\).)0 872 y FJ(8.4.)30 b(Cor)n(ollar)-7 b(y.)24
b FU(A)29 b FK(B3)p FU(-c)-5 b(ate)g(gory)28 b(is)g(we)-5
b(akly)28 b(\015at,)h(if)g(and)e(only)h(if)g FX(\005)2655
836 y FR(A)2741 872 y FU(is)g(a)g FT(_)p FU(-monoid)f(morphism)0
993 y(for)35 b(every)f(obje)-5 b(ct)35 b FS(A)p FU(.)146
1163 y FX(T)-8 b(o)31 b(understand)g(the)g(next)g(\(and)g(\014nal\))f
(axiom)h(of)f(this)h(pap)s(er,)g(recall)g(that)f(in)g(ev)m(ery)j
(*-autono-)0 1283 y(mous)g(category)g(w)m(e)h(ha)m(v)m(e)1260
1561 y FP(t)1474 1477 y FQ(\024)1480 1493 y FK(\020)1503
1504 y FE(A)1553 1493 y FI(^)1594 1477 y FQ(\024)1600
1493 y FK(\020)1623 1504 y FE(A)1825 1529 y FG(/)p FF(/)p
1329 1531 497 4 v 1850 1557 a FX(\()1914 1532 y(\026)1888
1557 y FS(A)23 b FT(_)f FS(A)p FX(\))g FT(^)h FX(\()2357
1532 y(\026)2332 1557 y FS(A)f FT(_)h FS(A)p FX(\))2258
1729 y FQ(^)2263 1738 y FH(t)2238 1822 y FG(\017)p FF(\017)p
2237 1822 4 215 v 1179 1915 a FX(\026)1153 1940 y FS(A)g
FT(_)f FS(A)1282 1834 y FG(\017)p FF(\017)1178 1717 y
FQ(\024)1184 1733 y FK(\020)1207 1744 y FE(A)p 1280 1834
4 249 v 1914 1903 a FX(\026)1888 1928 y FS(A)h FT(_)f
FX(\()p FS(A)g FT(^)2320 1903 y FX(\026)2294 1928 y FS(A)p
FX(\))g FT(_)h FS(A)1531 1970 y FQ(\026)1513 1986 y FR(A)p
FI(_)1607 1971 y FQ(^)1613 1986 y FK(\020)1636 1997 y
FE(A)1686 1986 y FI(_)p FR(A)1435 1900 y FG(o)p FF(o)p
1435 1901 429 4 v 3607 1741 a FX(\(46\))0 2200 y(and)28
b(that)g(this)h(equation)g(is)g(the)f(reason)h(wh)m(y)h(the)e(cut)h
(elimination)g(for)f(m)m(ultiplicativ)m(e)i(linear)f(logic)0
2320 y(\(pro)s(of)36 b(nets)h(as)g(w)m(ell)h(as)e(sequen)m(t)j
(calculus\))f(w)m(orks)g(so)f(w)m(ell.)57 b(The)37 b(motiv)-5
b(ation)37 b(for)f(the)h(follo)m(wing)0 2440 y(de\014nition)d(is)f(to)f
(obtain)g(something)i(similar)f(for)f(classical)i(logic)f(\(cf.)g
([LS05a]\).)0 2625 y FJ(8.5.)46 b(Definition.)34 b FU(A)43
b FK(B1)o FU(-c)-5 b(ate)g(gory)42 b(is)50 b FX(con)m(tractible)43
b FU(if)f(the)g(fol)5 b(lowing)41 b(diagr)-5 b(am)41
b(c)-5 b(ommutes)41 b(for)0 2745 y(al)5 b(l)34 b(obje)-5
b(cts)35 b FS(A)p FU(.)1260 2923 y FP(t)1664 2840 y FQ(\024)1670
2855 y FK(\020)1693 2867 y FE(A)2085 2891 y FG(/)p FF(/)p
1329 2893 757 4 v 2136 2907 a FX(\026)2110 2932 y FS(A)22
b FT(_)h FS(A)2263 3078 y FQ(\001)2338 3084 y Ft(\026)2322
3097 y FE(A)2368 3096 y FD(_)p FE(A)2238 3172 y FG(\017)p
FF(\017)p 2237 3172 4 215 v 1850 3278 a FX(\()1914 3253
y(\026)1888 3278 y FS(A)g FT(_)f FS(A)p FX(\))g FT(^)h
FX(\()2357 3253 y(\026)2332 3278 y FS(A)f FT(_)h FS(A)p
FX(\))2258 3449 y FQ(^)2263 3458 y FH(t)2238 3542 y FG(\017)p
FF(\017)p 2237 3542 V 1179 3636 a FX(\026)1153 3661 y
FS(A)g FT(_)f FS(A)1282 3555 y FG(\017)p FF(\017)1178
3259 y FQ(\024)1184 3274 y FK(\020)1207 3286 y FE(A)p
1280 3555 4 607 v 1914 3623 a FX(\026)1888 3649 y FS(A)h
FT(_)f FX(\()p FS(A)g FT(^)2320 3623 y FX(\026)2294 3649
y FS(A)p FX(\))g FT(_)h FS(A)1531 3690 y FQ(\026)1513
3707 y FR(A)p FI(_)1607 3691 y FQ(^)1613 3707 y FK(\020)1636
3718 y FE(A)1686 3707 y FI(_)p FR(A)1435 3620 y FG(o)p
FF(o)p 1435 3622 429 4 v 3607 3283 a FX(\(47\))146 3875
y(The)41 b(follo)m(wing)g(theorem)g(states)g(one)f(of)g(the)h(main)f
(results)i(of)d(this)i(pap)s(er.)67 b(It)40 b(explains)i(the)0
3995 y(deep)32 b(reasons)g(wh)m(y)g(the)g(cut)f(elimination)h(for)e
(the)i(pro)s(of)e(nets)i(of)e([LS05b])h(is)h(not)f(con\015uen)m(t)h(in)
g(the)0 4115 y(general)e(case.)43 b(It)30 b(also)g(sho)m(ws)h(that)e
(the)h(com)m(bination)g(of)f(equations)i(\(45\))e(and)h(\(47\))f
(together)g(with)0 4236 y(the)i FK(B5)p FX(-structure)g(leads)h(to)e(a)
g(certain)i(collapse,)g(whic)m(h)g(can)f(b)s(e)g(compared)g(to)g(the)g
(collapse)g(made)0 4356 y(b)m(y)39 b(an)g FK(LK)o FX(-category)-8
b(.)61 b(Nonetheless,)42 b(ev)m(en)e(with)f(this)g(collapse)h(w)m(e)f
(can)g(\014nd)g(reasonable)g(mo)s(dels)0 4476 y(for)32
b(pro)s(ofs)g(of)g(Bo)s(olean)h(logic,)f(as)h(it)g(is)g(sho)m(wn)h(in)e
(the)h(next)h(section.)0 4661 y FJ(8.6.)j(Theorem.)30
b FU(In)35 b(a)f FK(B5)p FU(-c)-5 b(ate)g(gory)35 b(that)g(is)f(\015at)
i(and)e(c)-5 b(ontr)g(actible,)34 b(we)h(have)1606 4881
y FX(1)1655 4896 y FR(A)1734 4881 y FX(+)22 b(1)1881
4896 y FR(A)1965 4881 y FX(=)28 b(1)2118 4896 y FR(A)0
5101 y FU(for)35 b(al)5 b(l)34 b(obje)-5 b(cts)34 b FS(A)p
FU(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 585 50
TeXDict begin 585 49 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(585)p 0 TeXcolorgray
0 320 a FJ(Pr)n(oof.)27 b FX(The)j(pro)s(of)e(idea)h(here)h(is)g(the)g
(same)g(as)f(in)g(the)h(pro)s(of)e(of)h(Theorem)h(2.4.7)f(in)g
([LS05a].)42 b(The)0 440 y(no)m(v)m(elt)m(y)33 b(is)f(that)f(here)h(w)m
(e)g(do)g(not)f(need)h(the)g(sledge-hammer)g(axiom)g(of)f(graphicalit)m
(y)-8 b(.)44 b(Instead)32 b(w)m(e)0 560 y(mak)m(e)38
b(use)g(of)e(Lemma)i(7.26.)56 b(W)-8 b(e)37 b(pro)s(ceed)h(b)m(y)g(sho)
m(wing)g(that)2413 559 y(\024)2426 560 y FK(\020)2449
575 y FR(A)2531 560 y FX(+)2619 559 y(\024)2632 560 y
FK(\020)2655 575 y FR(A)2747 560 y FX(=)2845 559 y(\024)2858
560 y FK(\020)2881 575 y FR(A)2949 560 y FX(:)d FP(t)f
FT(!)3250 535 y FX(\026)3224 560 y FS(A)25 b FT(_)h FS(A)37
b FX(for)f(all)0 681 y(ob)5 b(jects)38 b FS(A)p FX(.)55
b(F)-8 b(rom)36 b(this)h(the)g(result)h(follo)m(ws)f(b)m(y)g(Prop)s
(osition)g(5.20.)55 b(Note)36 b(that)g(in)h(particular)g(w)m(e)0
801 y(ha)m(v)m(e)d(that)423 800 y(\024)436 801 y FK(\020)459
816 y FR(A)538 801 y FX(+)623 800 y(\024)636 801 y FK(\020)659
816 y FR(A)749 801 y FX(is)f(the)g(map)417 1086 y FP(t)594
1002 y FQ(\024)600 1018 y FK(\020)623 1029 y FE(A)p FD(^)p
FE(A)876 1054 y FG(/)p FF(/)p 486 1056 391 4 v 927 1057
a FX(\026)901 1082 y FS(A)22 b FT(_)1110 1057 y FX(\026)1085
1082 y FS(A)g FT(_)g FX(\()p FS(A)h FT(^)f FS(A)p FX(\))1630
991 y FQ(\026)1611 1008 y FR(A)p FI(_)1730 991 y FQ(\026)1711
1008 y FR(A)p FI(_)p FH(mix)1916 1019 y FE(A;A)2016 1054
y FG(/)p FF(/)p 1626 1056 V 2067 1070 a FX(\026)2041
1095 y FS(A)h FT(_)2251 1070 y FX(\026)2225 1095 y FS(A)f
FT(_)h FS(A)f FT(_)h FS(A)2753 1011 y FI(r)2828 1017
y Ft(\026)2812 1030 y FE(A)2862 1011 y FI(_r)2968 1022
y FE(A)3081 1054 y FG(/)p FF(/)p 2691 1056 V 3132 1070
a FX(\026)3106 1095 y FS(A)f FT(_)h FS(A)0 1315 y FX(whic)m(h)41
b(is)e(b)s(ecause)i(of)k(\()p FK(mix)t FX(-)10 b(^)-59
b FS(\013)t FX(\))39 b(and)g(the)g FT(\003)p FX(-autonomous)g
(structure)i(the)e(same)h(as)f(the)h(left-most)0 1428
y(do)m(wn)33 b(path)g(in)g(the)g(follo)m(wing)g(diagram.)432
1690 y Fo(t)1241 1613 y FQ(\024)1248 1625 y Fj(\020)1270
1636 y FE(A)1320 1625 y FI(^)1360 1613 y FQ(\024)1367
1625 y Fj(\020)1389 1636 y FE(A)1439 1625 y FI(^)1479
1613 y FQ(\024)1486 1625 y Fj(\020)1508 1636 y FE(A)1558
1625 y FI(^)1598 1613 y FQ(\024)1605 1625 y Fj(\020)1627
1636 y FE(A)2427 1661 y FG(/)p FF(/)p 498 1663 1929 4
v 952 1821 a FQ(\024)959 1833 y Fj(\020)981 1844 y FE(A)1031
1833 y FI(^)1071 1821 y FQ(\024)1078 1833 y Fj(\020)1100
1844 y FE(A)1150 1833 y FI(^)1190 1821 y FQ(\024)1197
1833 y Fj(\020)1219 1844 y FE(A)1299 2020 y FG(\()p FF(\()1261
2004 y Fz(Q)1224 1989 y(Q)1188 1973 y(Q)1152 1958 y(Q)1115
1943 y(Q)1079 1927 y(Q)1043 1912 y(Q)1006 1896 y(Q)970
1881 y(Q)934 1865 y(Q)897 1850 y(Q)861 1835 y(Q)825 1819
y(Q)789 1804 y(Q)752 1788 y(Q)716 1773 y(Q)680 1757 y(Q)643
1742 y(Q)607 1727 y(Q)571 1711 y(Q)534 1696 y(Q)498 1680
y(Q)230 2310 y FQ(\024)237 2322 y Fj(\020)259 2333 y
FE(A)309 2322 y FI(^)349 2310 y FQ(\024)356 2322 y Fj(\020)378
2333 y FE(A)453 2886 y FG(\017)p FF(\017)p 451 2886 4
1172 v 2452 1687 a Fp(\()2511 1664 y(\026)2487 1687 y
Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()2839 1664 y(\026)2815
1687 y Fr(A)q Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()3168
1664 y(\026)3144 1687 y Fr(A)p Fq(_)p Fr(A)p Fp(\))p
Fq(^)p Fp(\()3496 1664 y(\026)3472 1687 y Fr(A)p Fq(_)p
Fr(A)p Fp(\))3098 1882 y FQ(^)3103 1891 y FH(t)3144 1897
y Ft(\026)3128 1910 y FE(A;A;)3274 1897 y Ft(\026)3258
1910 y FE(A;A)3078 2020 y FG(\017)p FF(\017)p 3076 2020
4 286 v 1010 2120 a Fp(\()1069 2097 y(\026)1045 2120
y Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()1397 2097
y(\026)1373 2120 y Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p
Fp(\()1726 2097 y(\026)1701 2120 y Fr(A)q Fq(_)p Fr(A)p
Fp(\))1171 2315 y FQ(^)1176 2324 y FH(t)1218 2330 y Ft(\026)1201
2343 y FE(A)q(;A;)1348 2330 y Ft(\026)1332 2343 y FE(A;A)1472
2453 y FG(\017)p FF(\017)p 1470 2453 V 2216 1830 a FQ(\024)2223
1842 y Fj(\020)2244 1853 y FE(A)2805 1735 y FG(3)p FF(3)2765
1746 y Fz(h)2726 1756 y(h)2687 1767 y(h)2647 1777 y(h)2608
1788 y(h)2569 1798 y(h)2530 1809 y(h)2490 1820 y(h)2451
1830 y(h)2412 1841 y(h)2373 1851 y(h)2333 1862 y(h)2294
1872 y(h)2255 1883 y(h)2216 1894 y(h)2176 1904 y(h)2137
1915 y(h)2098 1925 y(h)2059 1936 y(h)2019 1946 y(h)1980
1957 y(h)1941 1968 y(h)1902 1978 y(h)1863 1989 y(h)1823
1999 y(h)1784 2010 y(h)1745 2020 y(h)2452 2120 y Fp(\()2511
2097 y(\026)2487 2120 y Fr(A)p Fq(_)p Fr(A)p Fp(\))p
Fq(^)p Fp(\()2839 2097 y(\026)2815 2120 y Fr(A)q Fq(_)p
Fp(\()p Fr(A)p Fq(^)3132 2097 y Fp(\026)3109 2120 y Fr(A)o
Fp(\))p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()3496 2097
y(\026)3471 2120 y Fr(A)q Fq(_)p Fr(A)p Fp(\))3103 2318
y FH(mix)3224 2324 y Ft(\026)3208 2337 y FE(A)3254 2336
y FD(_)p FE(A;)3377 2323 y Ft(\026)3361 2336 y FE(A)p
FD(_)p Ft(\()p FE(A)p FD(^)3576 2323 y Ft(\026)3561 2336
y FE(A)o Ft(\))p FD(_)p FE(A)3078 2453 y FG(\017)p FF(\017)p
3076 2453 V 1010 2553 a Fp(\()1069 2530 y(\026)1045 2553
y Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()1397 2530
y(\026)1373 2553 y Fr(A)p Fq(_)p Fp(\()p Fr(A)p Fq(^)1690
2530 y Fp(\026)1666 2553 y Fr(A)p Fp(\))p Fq(_)p Fr(A)p
Fp(\))1337 2762 y FH(mix)1472 2886 y FG(\017)p FF(\017)p
1470 2886 V 2216 2263 a FQ(\024)2223 2275 y Fj(\020)2244
2286 y FE(A)2805 2168 y FG(3)p FF(3)2765 2178 y Fz(h)2726
2189 y(h)2687 2200 y(h)2647 2210 y(h)2608 2221 y(h)2569
2231 y(h)2530 2242 y(h)2490 2252 y(h)2451 2263 y(h)2412
2274 y(h)2373 2284 y(h)2333 2295 y(h)2294 2305 y(h)2255
2316 y(h)2216 2326 y(h)2176 2337 y(h)2137 2348 y(h)2098
2358 y(h)2059 2369 y(h)2019 2379 y(h)1980 2390 y(h)1941
2400 y(h)1902 2411 y(h)1863 2422 y(h)1823 2432 y(h)1784
2443 y(h)1745 2453 y(h)945 2814 y FQ(^)952 2826 y Fj(\020)974
2837 y FE(A)626 2886 y FG(v)p FF(v)626 2887 y Fz(m)663
2871 y(m)701 2855 y(m)738 2839 y(m)775 2823 y(m)813 2807
y(m)850 2792 y(m)887 2776 y(m)925 2760 y(m)962 2744 y(m)999
2728 y(m)1037 2712 y(m)1074 2696 y(m)1111 2681 y(m)1149
2665 y(m)1186 2649 y(m)1223 2633 y(m)1261 2617 y(m)2487
2553 y Fp(\()2546 2530 y(\026)2522 2553 y Fr(A)q Fq(_)2675
2530 y Fp(\026)2652 2553 y Fr(A)o Fq(_)p Fp(\()p Fr(A)p
Fq(^)2968 2530 y Fp(\026)2944 2553 y Fr(A)p Fp(\))p Fq(_)p
Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()3461 2530 y(\026)3436
2553 y Fr(A)q Fq(_)p Fr(A)p Fp(\))3103 2744 y FH(s)3146
2750 y Ft(\026)3130 2763 y FE(A)p FD(_)3233 2750 y Ft(\026)3218
2763 y FE(A)p FD(_)p FE(A)p FD(_)p FE(A;A)p FD(^)3561
2750 y Ft(\026)3547 2763 y FE(A)n(;)3626 2750 y Ft(\026)3610
2763 y FE(A)p FD(_)p FE(A)3078 2886 y FG(\017)p FF(\017)p
3076 2886 V 155 2986 a Fp(\()214 2963 y(\026)190 2986
y Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()542 2963
y(\026)518 2986 y Fr(A)q Fq(_)p Fr(A)p Fp(\))32 3191
y FH(mix)154 3196 y Ft(\026)138 3209 y FE(A)p FD(_)p
FE(A;)306 3196 y Ft(\026)291 3209 y FE(A)o FD(_)p FE(A)453
3330 y FG(\017)p FF(\017)p 451 3330 4 298 v 1104 2963
a Fp(\026)1080 2986 y Fr(A)q Fq(_)1233 2963 y Fp(\026)1210
2986 y Fr(A)o Fq(_)p Fp(\()p Fr(A)p Fq(^)1526 2963 y
Fp(\026)1502 2986 y Fr(A)p Fp(\))p Fq(_)p Fr(A)p Fq(_)p
Fr(A)2150 3026 y FQ(\024)2157 3038 y Fj(\020)2179 3049
y FE(A)2498 2960 y FG(/)p FF(/)p 1888 2961 610 4 v 2216
2695 a FQ(\024)2223 2707 y Fj(\020)2244 2718 y FE(A)2805
2600 y FG(3)p FF(3)2765 2611 y Fz(h)2726 2622 y(h)2687
2632 y(h)2647 2643 y(h)2608 2654 y(h)2569 2664 y(h)2530
2675 y(h)2490 2685 y(h)2451 2696 y(h)2412 2706 y(h)2373
2717 y(h)2333 2728 y(h)2294 2738 y(h)2255 2749 y(h)2216
2759 y(h)2176 2770 y(h)2137 2780 y(h)2098 2791 y(h)2059
2802 y(h)2019 2812 y(h)1980 2823 y(h)1941 2833 y(h)1902
2844 y(h)1863 2854 y(h)1823 2865 y(h)1784 2876 y(h)1745
2886 y(h)932 3253 y FQ(^)939 3265 y Fj(\020)960 3276
y FE(A)599 3330 y FG(v)p FF(v)599 3331 y Fz(m)636 3315
y(m)673 3300 y(m)709 3284 y(m)746 3268 y(m)783 3253 y(m)820
3237 y(m)856 3222 y(m)893 3206 y(m)930 3190 y(m)967 3175
y(m)1003 3159 y(m)1040 3144 y(m)1077 3128 y(m)1114 3112
y(m)1150 3097 y(m)1187 3081 y(m)1224 3066 y(m)1261 3050
y(m)2546 2963 y Fp(\026)2522 2986 y Fr(A)q Fq(_)2675
2963 y Fp(\026)2652 2986 y Fr(A)o Fq(_)p Fp(\()p Fr(A)p
Fq(^)p Fp(\()3003 2963 y(\026)2979 2986 y Fr(A)q Fq(_)p
Fr(A)p Fp(\))p Fq(^)3296 2963 y Fp(\026)3273 2986 y Fr(A)p
Fp(\))p Fq(_)p Fr(A)p Fq(_)p Fr(A)3098 3178 y FQ(\024)3103
3187 y FH(t)3128 3206 y FE(A;)3209 3193 y Ft(\026)3193
3206 y FE(A;A;)3339 3193 y Ft(\026)3323 3206 y FE(A)3078
3319 y FG(\017)p FF(\017)p 3076 3319 4 286 v 250 3407
a Fp(\026)226 3430 y Fr(A)p Fq(_)378 3407 y Fp(\026)355
3430 y Fr(A)o Fq(_)p Fr(A)p Fq(_)p Fr(A)163 3623 y FI(r)238
3629 y Ft(\026)222 3642 y FE(A)272 3623 y FI(_r)378 3634
y FE(A)453 3763 y FG(\017)p FF(\017)p 451 3763 4 309
v 1104 3396 a Fp(\026)1080 3419 y Fr(A)q Fq(_)1233 3396
y Fp(\026)1210 3419 y Fr(A)o Fq(_)p Fp(\()p Fr(A)p Fq(^)1526
3396 y Fp(\026)1502 3419 y Fr(A)p Fp(\))p Fq(_)p Fr(A)p
Fq(_)p Fr(A)1182 3623 y FI(r)1257 3629 y Ft(\026)1241
3642 y FE(A)1291 3623 y FI(_r)1397 3634 y FE(A)1472 3752
y FG(\017)p FF(\017)p 1470 3752 4 286 v 837 3464 a FQ(^)844
3476 y Fj(\020)866 3487 y FE(A)705 3393 y FG(o)p FF(o)p
705 3394 351 4 v 2546 3396 a Fp(\026)2522 3419 y Fr(A)q
Fq(_)2675 3396 y Fp(\026)2652 3419 y Fr(A)o Fq(_)p Fp(\()p
Fr(A)p Fq(^)2968 3396 y Fp(\026)2944 3419 y Fr(A)p Fp(\))p
Fq(_)p Fp(\()p Fr(A)p Fq(^)3296 3396 y Fp(\026)3272 3419
y Fr(A)q Fp(\))p Fq(_)p Fr(A)p Fq(_)p Fr(A)3103 3610
y FH(m)3159 3628 y FE(A;)3240 3615 y Ft(\026)3224 3628
y FE(A;A;)3370 3615 y Ft(\026)3354 3628 y FE(A)3078 3752
y FG(\017)p FF(\017)p 3076 3752 4 286 v 2095 3349 a FI(r)2154
3368 y FE(A)p FD(^)2257 3355 y Ft(\026)2242 3368 y FE(A)1888
3393 y FG(o)p FF(o)p 1888 3394 610 4 v 378 3840 a Fp(\026)354
3863 y Fr(A)p Fq(_)p Fr(A)1233 3828 y Fp(\026)1209 3851
y Fr(A)p Fq(_)p Fp(\()p Fr(A)p Fq(^)1526 3828 y Fp(\026)1502
3851 y Fr(A)p Fp(\))p Fq(_)p Fr(A)837 3897 y FQ(^)844
3909 y Fj(\020)866 3920 y FE(A)576 3826 y FG(o)p FF(o)p
576 3827 609 4 v 2511 3828 a Fp(\026)2487 3851 y Fr(A)p
Fq(_)2640 3828 y Fp(\026)2616 3851 y Fr(A)p Fq(_)p Fp(\(\()p
Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()3168 3828 y(\026)3143
3851 y Fr(A)q Fq(_)3296 3828 y Fp(\026)3273 3851 y Fr(A)p
Fp(\)\))p Fq(_)p Fr(A)p Fq(_)p Fr(A)1795 3900 y FI(r)1869
3906 y Ft(\026)1854 3919 y FE(A)1904 3900 y FI(_)p FQ(\()p
FI(r)2037 3911 y FE(A)2087 3900 y FI(^r)2209 3906 y Ft(\026)2193
3919 y FE(A)2243 3900 y FQ(\))p FI(_r)2376 3911 y FE(A)1759
3826 y FG(o)p FF(o)p 1759 3827 703 4 v 2185 3566 a FI(r)2244
3577 y FE(A)2294 3566 y FI(^r)2416 3572 y Ft(\026)2400
3585 y FE(A)1745 3466 y FG(k)p FF(k)p Fz(V)1784 3476
y(V)1823 3487 y(V)1862 3497 y(V)1902 3508 y(V)1941 3519
y(V)1980 3529 y(V)2019 3540 y(V)2059 3550 y(V)2098 3561
y(V)2137 3572 y(V)2176 3582 y(V)2216 3593 y(V)2255 3603
y(V)2294 3614 y(V)2333 3624 y(V)2373 3635 y(V)2412 3646
y(V)2451 3656 y(V)2490 3667 y(V)2530 3677 y(V)2569 3688
y(V)2608 3698 y(V)2647 3709 y(V)2687 3720 y(V)2726 3730
y(V)2765 3741 y(V)0 4113 y FX(The)38 b(upp)s(er)g(triangle)g(comm)m
(utes)h(b)s(ecause)g(of)e(functorialit)m(y)i(of)e FT(^)p
FX(,)i(the)f(square)h(in)e(the)h(lo)m(w)m(er)h(left)0
4226 y(corner)c(b)s(ecause)g(of)f(functorialit)m(y)h(of)f
FT(_)p FX(,)h(and)f(the)h(parallelograms)f(b)s(ecause)i(of)e(naturalit)
m(y)g(of)g FK(mix)0 4339 y FX(and)180 4325 y(^)187 4339
y FK(t)t FX(.)43 b(The)31 b(quadrangle)f(in)g(the)g(upp)s(er)h(left)f
(comm)m(utes)h(b)s(ecause)g(of)37 b(\(46\))o(,)30 b(and)g(the)h(little)
f(triangle)0 4452 y(in)j(the)g(righ)m(t)f(cen)m(ter)i(is)f(just)g
(\(15\))f(together)g(with)h(naturalit)m(y)g(of)f(switc)m(h.)46
b(The)33 b(p)s(en)m(tagon)g(b)s(elo)m(w)g(it)0 4565 y(is)38
b(just)g(the)g(dual)g(of)44 b(\(47\),)39 b(and)e(the)h(t)m(w)m(o)h
(little)f(triangles)g(at)f(the)i(lo)m(w)m(er)f(righ)m(t)g(corner)g(are)
g(\()p FK(B3c)3719 4529 y FI(0)3742 4565 y FX(\))0 4678
y(and)29 b(functorialit)m(y)h(of)f FT(_)p FX(.)43 b(Therefore,)31
b(this)f(diagram)f(giv)m(es)h(us)g(a)f(complicated)i(w)m(a)m(y)f(of)f
(writing)h(just)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 586 51
TeXDict begin 586 50 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(586)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray -13 313 a FX(\024)0 314 y FK(\020)23 329
y FR(A)102 314 y FX(+)187 313 y(\024)200 314 y FK(\020)223
329 y FR(A)280 314 y FX(.)44 b(Similarly)-8 b(,)33 b(the)g(next)h
(diagram)e(giv)m(es)i(us)f(a)f(complicated)i(w)m(a)m(y)g(of)e(writing)
3170 313 y(\024)3183 314 y FK(\020)3206 329 y FR(A)3263
314 y FX(:)255 542 y Fo(t)1067 466 y FQ(\024)1073 478
y Fj(\020)1095 489 y FE(A)1145 478 y FI(^)1185 466 y
FQ(\024)1192 478 y Fj(\020)1214 489 y FE(A)1264 478 y
FI(^)1304 466 y FQ(\024)1311 478 y Fj(\020)1333 489 y
FE(A)1383 478 y FI(^)1423 466 y FQ(\024)1430 478 y Fj(\020)1452
489 y FE(A)2255 514 y FG(/)p FF(/)p 320 516 1936 4 v
570 1002 a FQ(\024)577 1014 y Fj(\020)598 1025 y FE(A)1027
1317 y FG(\036)p FF(\036)998 1287 y Fz(=)970 1257 y(=)942
1226 y(=)913 1196 y(=)885 1166 y(=)857 1136 y(=)829 1106
y(=)800 1075 y(=)772 1045 y(=)744 1015 y(=)716 985 y(=)687
955 y(=)659 924 y(=)631 894 y(=)603 864 y(=)574 834 y(=)546
804 y(=)518 773 y(=)490 743 y(=)461 713 y(=)433 683 y(=)405
653 y(=)377 622 y(=)348 592 y(=)320 562 y(=)1479 853
y FQ(\024)1486 865 y Fj(\020)1508 880 y Ft(\()p FE(A)p
FD(^)p FE(A)p Ft(\))p FD(_)p Ft(\()p FE(A)p FD(^)p FE(A)p
Ft(\))2683 1306 y FG(*)p FF(*)2644 1293 y Fz(T)2605 1280
y(T)2566 1267 y(T)2528 1255 y(T)2489 1242 y(T)2450 1229
y(T)2411 1216 y(T)2373 1204 y(T)2334 1191 y(T)2295 1178
y(T)2257 1165 y(T)2218 1153 y(T)2179 1140 y(T)2140 1127
y(T)2102 1114 y(T)2063 1102 y(T)2024 1089 y(T)1985 1076
y(T)1947 1064 y(T)1908 1051 y(T)1869 1038 y(T)1831 1025
y(T)1792 1013 y(T)1753 1000 y(T)1714 987 y(T)1676 974
y(T)1637 962 y(T)1598 949 y(T)1559 936 y(T)1521 923 y(T)1482
911 y(T)1443 898 y(T)1405 885 y(T)1366 872 y(T)1327 860
y(T)1288 847 y(T)1250 834 y(T)1211 821 y(T)1172 809 y(T)1133
796 y(T)1095 783 y(T)1056 771 y(T)1017 758 y(T)978 745
y(T)940 732 y(T)901 720 y(T)862 707 y(T)824 694 y(T)785
681 y(T)746 669 y(T)707 656 y(T)669 643 y(T)630 630 y(T)591
618 y(T)552 605 y(T)514 592 y(T)475 579 y(T)436 567 y(T)398
554 y(T)359 541 y(T)320 529 y(T)2280 540 y Fp(\()2340
517 y(\026)2315 540 y Fr(A)q Fq(_)p Fr(A)p Fp(\))p Fq(^)p
Fp(\()2668 517 y(\026)2644 540 y Fr(A)p Fq(_)p Fr(A)p
Fp(\))p Fq(^)p Fp(\()2996 517 y(\026)2972 540 y Fr(A)p
Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()3325 517 y(\026)3300
540 y Fr(A)q Fq(_)p Fr(A)p Fp(\))2927 734 y FQ(^)2932
743 y FH(t)2973 749 y Ft(\026)2957 762 y FE(A;A;)3103
749 y Ft(\026)3087 762 y FE(A;A)3202 744 y FI(^)3244
735 y FQ(^)3249 744 y FH(t)3290 750 y Ft(\026)3274 763
y FE(A)3321 762 y(;A;)3420 749 y Ft(\026)3405 762 y FE(A)o(;A)2907
873 y FG(\017)p FF(\017)p 2905 873 4 286 v 2280 972 a
Fp(\()2340 949 y(\026)2315 972 y Fr(A)q Fq(_)2469 949
y Fp(\026)2445 972 y Fr(A)p Fq(_)p Fp(\()p Fr(A)p Fq(^)p
Fr(A)p Fp(\)\))p Fq(^)p Fp(\()2996 949 y(\026)2972 972
y Fr(A)p Fq(_)3125 949 y Fp(\026)3101 972 y Fr(A)p Fq(_)p
Fp(\()p Fr(A)p Fq(^)p Fr(A)p Fp(\)\))2927 1167 y FQ(^)2932
1176 y FH(t)2973 1182 y Ft(\026)2957 1195 y FE(A)p FD(_)3060
1182 y Ft(\026)3045 1195 y FE(A;A)p FD(^)p FE(A;)3278
1182 y Ft(\026)3263 1195 y FE(A)o FD(_)3365 1182 y Ft(\026)3350
1195 y FE(A;A)p FD(^)p FE(A)2907 1306 y FG(\017)p FF(\017)p
2905 1306 V 1010 1394 a Fp(\026)986 1417 y Fr(A)p Fq(_)p
Fr(A)795 1604 y FQ(\001)870 1610 y Ft(\026)854 1623 y
FE(A)904 1604 y FI(_)p FQ(\001)1010 1615 y FE(A)1085
1739 y FG(\017)p FF(\017)p 1083 1739 4 298 v 2245 1405
a Fp(\(\()2340 1382 y(\026)2315 1405 y Fr(A)q Fq(_)2469
1382 y Fp(\026)2445 1405 y Fr(A)p Fp(\))p Fq(^)p Fp(\()2668
1382 y(\026)2644 1405 y Fr(A)p Fq(_)2797 1382 y Fp(\026)2773
1405 y Fr(A)p Fp(\)\))p Fq(_)p Fp(\()p Fr(A)p Fq(^)p
Fr(A)p Fp(\))p Fq(_)p Fp(\()p Fr(A)p Fq(^)p Fr(A)p Fp(\))2932
1600 y FH(m)2988 1611 y FE(A;A;A;A)2907 1739 y FG(\017)p
FF(\017)p 2905 1739 4 286 v 1528 1552 a FQ(\()p FI(r)1630
1558 y Ft(\026)1614 1571 y FE(A)1665 1552 y FI(^r)1786
1558 y Ft(\026)1771 1571 y FE(A)1821 1552 y FQ(\))p FI(_r)1954
1563 y FE(A)p FD(^)p FE(A)1394 1739 y FG(s)p FF(s)p Fz(g)1435
1730 y(g)1475 1720 y(g)1515 1711 y(g)1555 1701 y(g)1595
1692 y(g)1635 1682 y(g)1675 1672 y(g)1715 1663 y(g)1755
1653 y(g)1795 1644 y(g)1835 1634 y(g)1875 1625 y(g)1915
1615 y(g)1956 1606 y(g)1996 1596 y(g)2036 1587 y(g)2076
1577 y(g)2116 1568 y(g)2156 1558 y(g)2196 1549 y(g)2236
1539 y(g)2276 1530 y(g)2316 1520 y(g)2356 1511 y(g)2396
1501 y(g)2436 1492 y(g)2477 1482 y(g)2517 1472 y(g)2557
1463 y(g)787 1838 y Fp(\()846 1815 y(\026)822 1838 y
Fr(A)p Fq(^)975 1815 y Fp(\026)951 1838 y Fr(A)p Fp(\))p
Fq(_)p Fp(\()p Fr(A)p Fq(^)p Fr(A)p Fp(\))759 2029 y
FH(m)831 2035 y Ft(\026)815 2048 y FE(A;)896 2035 y Ft(\026)880
2048 y FE(A;A;A)1085 2171 y FG(\017)p FF(\017)p 1083
2171 V 2210 1838 a Fp(\(\()2304 1815 y(\026)2280 1838
y Fr(A)q Fq(_)2433 1815 y Fp(\026)2410 1838 y Fr(A)o
Fp(\))p Fq(^)p Fp(\()2633 1815 y(\026)2608 1838 y Fr(A)q
Fq(_)2761 1815 y Fp(\026)2738 1838 y Fr(A)p Fp(\)\))p
Fq(_)p Fp(\(\()p Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p
Fp(\()p Fr(A)p Fq(_)p Fr(A)p Fp(\)\))2932 2029 y FH(m)3003
2035 y Ft(\026)2988 2048 y FE(A)p FD(^)3091 2035 y Ft(\026)3076
2048 y FE(A)o(;)3156 2035 y Ft(\026)3140 2048 y FE(A)p
FD(_)3243 2035 y Ft(\026)3228 2048 y FE(A;A)p FD(_)p
FE(A;A)p FD(_)p FE(A)2907 2171 y FG(\017)p FF(\017)p
2905 2171 V 1453 1887 a FQ(\()p FI(r)1555 1893 y Ft(\026)1539
1906 y FE(A)1589 1887 y FI(^r)1711 1893 y Ft(\026)1695
1906 y FE(A)1745 1887 y FQ(\))p FI(_)p FQ(\()p FI(r)1905
1898 y FE(A)1956 1887 y FI(^r)2062 1898 y FE(A)2112 1887
y FQ(\))1408 1812 y FG(o)p FF(o)p 1408 1814 778 4 v 787
2271 a Fp(\()846 2248 y(\026)822 2271 y Fr(A)p Fq(_)p
Fr(A)p Fp(\))p Fq(^)p Fp(\()1174 2248 y(\026)1150 2271
y Fr(A)q Fq(_)p Fr(A)p Fp(\))784 2466 y FQ(^)789 2475
y FH(t)831 2481 y Ft(\026)814 2494 y FE(A)q(;A;)961 2481
y Ft(\026)945 2494 y FE(A;A)1085 2604 y FG(\017)p FF(\017)p
1083 2604 4 286 v 2351 2271 a Fp(\()2410 2248 y(\026)2386
2271 y Fr(A)q Fq(_)2539 2248 y Fp(\026)2516 2271 y Fr(A)o
Fq(_)p Fr(A)p Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()2996
2248 y(\026)2972 2271 y Fr(A)p Fq(_)3125 2248 y Fp(\026)3101
2271 y Fr(A)p Fq(_)p Fr(A)p Fq(_)p Fr(A)p Fp(\))2927
2466 y FQ(^)2932 2475 y FH(t)2973 2481 y Ft(\026)2957
2494 y FE(A)p FD(^)3060 2481 y Ft(\026)3045 2494 y FE(A;A)p
FD(_)p FE(A;)3278 2481 y Ft(\026)3263 2494 y FE(A)o FD(_)3365
2481 y Ft(\026)3350 2494 y FE(A;A)p FD(_)p FE(A)2907
2604 y FG(\017)p FF(\017)p 2905 2604 V 1523 2320 a FQ(\()p
FI(r)1626 2326 y Ft(\026)1609 2339 y FE(A)1660 2320 y
FI(_r)1766 2331 y FE(A)1816 2320 y FQ(\))p FI(^)p FQ(\()p
FI(r)1993 2326 y Ft(\026)1976 2339 y FE(A)2027 2320 y
FI(_r)2133 2331 y FE(A)2183 2320 y FQ(\))1408 2245 y
FG(o)p FF(o)p 1408 2247 919 4 v 200 2692 a Fp(\026)176
2715 y Fr(A)q Fq(_)p Fr(A)275 2616 y FG(\017)p FF(\017)171
1601 y FQ(\024)178 1613 y Fj(\020)200 1624 y FE(A)p 273
2616 4 2049 v 846 2681 a Fp(\026)822 2704 y Fr(A)p Fq(_)p
Fp(\()p Fr(A)p Fq(^)1139 2681 y Fp(\026)1115 2704 y Fr(A)p
Fp(\))p Fq(_)p Fr(A)555 2749 y FQ(^)562 2761 y Fj(\020)584
2772 y FE(A)398 2678 y FG(o)p FF(o)p 398 2680 399 4 v
2340 2681 a Fp(\026)2316 2704 y Fr(A)p Fq(_)2469 2681
y Fp(\026)2445 2704 y Fr(A)p Fq(_)p Fp(\(\()p Fr(A)p
Fq(_)p Fr(A)p Fp(\))p Fq(^)p Fp(\()2996 2681 y(\026)2972
2704 y Fr(A)p Fq(_)3125 2681 y Fp(\026)3101 2704 y Fr(A)p
Fp(\)\))p Fq(_)p Fr(A)p Fq(_)p Fr(A)1516 2753 y FI(r)1590
2759 y Ft(\026)1575 2772 y FE(A)1625 2753 y FI(_)p FQ(\()p
FI(r)1758 2764 y FE(A)1808 2753 y FI(^r)1930 2759 y Ft(\026)1914
2772 y FE(A)1964 2753 y FQ(\))p FI(_r)2097 2764 y FE(A)1372
2678 y FG(o)p FF(o)p 1372 2680 919 4 v 0 2932 a FX(Here)43
b(the)g(big)f(upp)s(er)h(righ)m(t)g(\\triangle")f(comm)m(utes)i(b)s
(ecause)g(of)e(the)h FT(\003)p FX(-autonomous)f(structure.)0
3052 y(The)36 b(irregular)f(quadrangle)g(in)g(the)g(cen)m(ter)h(is)g(a)
e(transp)s(osed)i(v)m(ersion)g(of)42 b(\(45\))o(,)35
b(the)h(little)f(triangle)0 3172 y(b)s(elo)m(w)45 b(it)g(is)g(\()p
FK(B3c)703 3136 y FI(0)726 3172 y FX(\),)i(the)e(t)m(w)m(o)g(squares)h
(at)e(the)h(b)s(ottom)f(are)g(naturalit)m(y)h(of)f FK(m)49
b FX(and)3322 3158 y(^)3329 3172 y FK(t)5 b FX(,)47 b(and)e(the)0
3293 y(left-most)c(part)h(of)f(the)g(diagram)g(comm)m(utes)j(b)s
(ecause)e(of)48 b(\(47\))41 b(and)g(\()p FK(B3c)p FX(\).)70
b(Finally)-8 b(,)44 b(w)m(e)e(apply)0 3413 y(Lemma)33
b(7.26)f(to)g(paste)i(the)f(t)m(w)m(o)g(diagrams)g(together,)g(whic)m
(h)h(yields)2651 3412 y(\024)2664 3413 y FK(\020)2687
3428 y FR(A)2766 3413 y FX(+)2851 3412 y(\024)2864 3413
y FK(\020)2887 3428 y FR(A)2972 3413 y FX(=)3063 3412
y(\024)3075 3413 y FK(\020)3098 3428 y FR(A)3188 3413
y FX(as)e(desired.)p 3738 3413 42 42 v 146 3572 a(In)c(Figure)f(1)g
(the)g(basic)h(idea)g(of)f(this)g(pro)s(of)g(is)g(sho)m(wn.)43
b(The)28 b(\014rst)g(four)f(equations)h(in)g(that)f(\014gure)0
3692 y(express)40 b(the)e(idea)f(b)s(ehind)i(the)f(\014rst)f(big)h
(diagram)f(in)h(the)g(pro)s(of)e(of)h(Theorem)i(8.6,)f(and)g(the)g
(last)0 3813 y(three)h(equations)g(in)f(Figure)g(1)f(express)k(the)d
(idea)g(of)g(the)g(second)h(diagram.)59 b(More)39 b(explanations)0
3933 y(on)32 b(this)i(will)f(follo)m(w)g(in)g(the)g(next)g(section.)0
4112 y FJ(8.7.)i(Cor)n(ollar)-7 b(y.)30 b FU(L)-5 b(et)33
b FC(A)56 b FU(b)-5 b(e)33 b(a)f(set)h(of)g(pr)-5 b(op)g(ositional)32
b(variables)g(and)g(let)h FC(C)51 b FU(b)-5 b(e)32 b(the)h(fr)-5
b(e)g(e)33 b(\015at)h(and)0 4232 y(c)-5 b(ontr)g(actible)34
b FK(B5)p FU(-c)-5 b(ate)g(gory)35 b(gener)-5 b(ate)g(d)34
b(by)h FC(A)22 b FU(.)45 b(Then)34 b FC(C)52 b FU(is)35
b(idemp)-5 b(otent.)0 4548 y FY(9.)38 b(A)h(concrete)f(example:)50
b(pro)s(of)37 b(nets)0 4743 y FX(In)h(this)h(section)g(w)m(e)g(will)g
(construct)g(a)f(concrete)h(example)g(of)f(a)g(category)g(whic)m(h)h
(has)g(almost)f(all)0 4863 y(the)30 b(prop)s(erties)h(discussed)i(in)d
(this)g(pap)s(er.)43 b(Its)31 b(existence)h(sho)m(ws)g(that)d(this)i
(pap)s(er)f(actually)g(mak)m(es)0 4984 y(sense:)52 b(The)37
b(equations)g(presen)m(ted)h(here)f(do)f(not)f(lead)i(to)e(the)i
(collapse)g(in)m(to)f(a)f(Bo)s(olean)h(algebra.)0 5104
y(In)42 b(fact,)h(this)f(category)f(w)m(as)h(the)g(main)f(source)i(of)d
(motiv)-5 b(ation)42 b(for)e(in)m(tro)s(ducing)i(the)g(equations)0
5225 y(presen)m(ted)35 b(in)e(Sections)h(3,)e(5,)g(7,)h(and)f(8.)146
5345 y(W)-8 b(e)33 b(are)g(going)f(to)g(presen)m(t)i(t)m(w)m(o)g(v)m
(ersions)g(of)e(pro)s(of)g(nets:)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 587 52
TeXDict begin 587 51 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(587)p 0 TeXcolorgray
0 TeXcolorgray 0 320 a(1.)p 0 TeXcolorgray 49 w(The)30
b FU(simple)i(pr)-5 b(o)g(of)32 b(nets)37 b FX(are)30
b(a)g(sligh)m(t)g(mo)s(di\014cation)h(of)e(the)h(pro)s(of)f(nets)i(in)m
(tro)s(duced)g(in)f([LS05b,)125 440 y(LS05a].)42 b(The)33
b(di\013erence)h(is)e(that)g(the)g(categories)h(of)e(pro)s(of)g(nets)i
(de\014ned)g(in)f(these)h(pap)s(ers)g(had)125 560 y(only)26
b(w)m(eak)g(units,)i(while)f(here)f(w)m(e)h(are)e(assuming)i(from)e
(the)h(b)s(eginning)g(that)g FP(t)f FX(and)g FP(f)36
b FX(are)26 b(prop)s(er)125 681 y(unit)33 b(ob)5 b(jects.)p
0 TeXcolorgray 0 881 a(2.)p 0 TeXcolorgray 49 w(The)41
b FU(extende)-5 b(d)42 b(pr)-5 b(o)g(of)41 b(nets)49
b FX(ha)m(v)m(e)42 b(a)e(ric)m(her)i(structure)g(than)e(the)h(simple)h
(nets.)69 b(F)-8 b(rom)40 b(the)h(al-)125 1002 y(gebraic)h(p)s(oin)m(t)
f(of)g(view)i(the)f(main)g(di\013erence)h(to)e(the)h(simple)h(nets)f
(is)g(that)g(the)g(category)f(of)125 1122 y(extended)31
b(nets)f(do)s(es)f(not)g(ob)s(ey)h(equation)g(\(45\))e(and)i(is)f(not)g
(idemp)s(oten)m(t)i(\(and)e(is)g(therefore)h(not)125
1242 y(an)g FK(LK)p FX(-category\).)42 b(F)-8 b(rom)30
b(the)h(pro)s(of)e(theoretic)j(p)s(oin)m(t)e(of)g(view,)i(the)f
(extended)h(nets)g(k)m(eep)g(more)125 1363 y(information)g(ab)s(out)g
(the)h(pro)s(ofs.)43 b(In)33 b(particular)g(the)g(size)h(of)e(pro)s
(ofs)g(can)h(captured.)0 1557 y FJ(9.1.)43 b(Definition.)34
b FU(L)-5 b(et)40 b FC(A)63 b FU(b)-5 b(e)39 b(a)h(set)g(of)g(pr)-5
b(op)g(ositional)38 b(variables.)59 b(The)39 b(set)h
FC(F)54 b FU(of)61 b FX(form)m(ulae)40 b FU(is)0 1678
y(gener)-5 b(ate)g(d)34 b(via)1072 1798 y FC(F)1203 1795
y FU(::)1263 1798 y FX(=)27 b FC(A)51 b FT(j)1618 1771
y FX(\026)1552 1798 y FC(A)g FT(j)27 b FP(t)g FT(j)g
FP(f)39 b FT(j)27 b FC(F)36 b FT(^)22 b FC(F)42 b FT(j)27
b FC(F)36 b FT(_)23 b FC(F)111 b FX(.)0 1968 y FU(A)29
b FX(sequen)m(t)i FU(is)e(a)f(\014nite)h(list)f(of)h(formulae,)g(sep)-5
b(ar)g(ate)g(d)28 b(by)h(c)-5 b(omma.)42 b(A)29 b(formula)f(c)-5
b(an)28 b(b)-5 b(e)29 b(se)-5 b(en)28 b(as)g(a)h(tr)-5
b(e)g(e)0 2088 y(and)28 b(a)g(se)-5 b(quent)29 b(as)f(a)h(for)-5
b(est)28 b(whose)g(le)-5 b(aves)27 b(ar)-5 b(e)29 b(lab)-5
b(ele)g(d)27 b(by)i(elements)f(of)g(the)h(set)f FC(A)j
FT([)3246 2062 y FX(\026)3179 2088 y FC(A)h FT([)8 b(f)p
FP(f)i FS(;)17 b FP(t)p FT(g)29 b FU(and)0 2209 y(whose)38
b(inner)h(no)-5 b(des)38 b(ar)-5 b(e)38 b(lab)-5 b(ele)g(d)38
b(by)i(elements)e(of)g FT(f^)p FS(;)17 b FT(_g)p FU(.)58
b(F)-7 b(or)38 b(a)h(se)-5 b(quent)39 b FX(\000)p FU(,)g(let)h
FC(L)19 b FX(\(\000\))39 b FU(denote)0 2329 y(the)c(set)g(of)g(its)g
(le)-5 b(aves.)45 b(F)-7 b(or)34 b(a)h(le)-5 b(af)34
b FS(i)28 b FT(2)h FC(L)19 b FX(\(\000\))35 b FU(let)g
FS(`)p FX(\()p FS(i)p FX(\))28 b FT(2)h FC(A)45 b FT([)2455
2302 y FX(\026)2390 2329 y FC(A)g FT([)22 b(f)p FP(f)10
b FS(;)17 b FP(t)p FT(g)35 b FU(denote)f(its)h(lab)-5
b(eling.)45 b(A)0 2450 y FX(linking)36 b FU(for)e(a)h(se)-5
b(quent)35 b FX(\000)g FU(is)f(a)h(binary)g(r)-5 b(elation)34
b FS(P)41 b FT(\022)28 b FC(L)19 b FX(\(\000\))j FT(\002)h
FC(L)c FX(\(\000\))35 b FU(such)g(that)p 0 TeXcolorgray
75 2644 a(\(i\))p 0 TeXcolorgray 48 w(for)g(every)g FS(i)27
b FT(2)i FC(L)19 b FX(\(\000\))34 b FU(with)h FS(`)p
FX(\()p FS(i)p FX(\))28 b(=)f FP(t)35 b FU(we)f(have)h
FX(\()p FS(i;)17 b(i)p FX(\))27 b FT(2)h FS(P)14 b FU(,)35
b(and)p 0 TeXcolorgray 45 2845 a(\(ii\))p 0 TeXcolorgray
48 w(if)g FX(\()p FS(i;)17 b(j)6 b FX(\))27 b FT(2)h
FS(P)14 b FU(,)34 b(then)h(one)f(of)h(the)g(fol)5 b(lowing)33
b(c)-5 b(ases)34 b(must)i(hold:)p 0 TeXcolorgray 349
3045 a FT(\017)p 0 TeXcolorgray 49 w FS(i)28 b FX(=)f
FS(j)41 b FU(and)34 b FS(`)p FX(\()p FS(i)p FX(\))28
b(=)g FP(t)p FU(,)34 b(or)p 0 TeXcolorgray 349 3204 a
FT(\017)p 0 TeXcolorgray 49 w FS(i)28 b FT(6)p FX(=)f
FS(j)41 b FU(and)34 b FS(`)p FX(\()p FS(i)p FX(\))28
b(=)h(\026)-50 b FS(a)35 b FU(and)f FS(`)p FX(\()p FS(j)6
b FX(\))27 b(=)h FS(a)35 b FU(for)g(some)f FS(a)28 b
FT(2)g FC(A)23 b FU(.)0 3405 y(A)42 b FX(simple)f(prenet)695
3368 y FQ(12)813 3405 y FU(c)-5 b(onsists)40 b(of)i(a)f(se)-5
b(quent)41 b FX(\000)h FU(and)f(a)g(linking)g FS(P)55
b FU(for)41 b(it.)65 b(It)42 b(wil)5 b(l)41 b(b)-5 b(e)41
b(denote)-5 b(d)41 b(by)0 3525 y FS(P)36 b Fl(B)22 b
FX(\000)p FU(.)146 3692 y FX(In)k(this)h(pap)s(er,)g(w)m(e)g(will)g
(write)f(prenets)i(b)m(y)e(simply)i(writing)e(do)m(wn)h(the)f(sequen)m
(t)i(and)e(b)m(y)h(putting)0 3813 y(the)33 b(linking)g(as)g
(\(directed\))h(graph)e(ab)s(o)m(v)m(e)i(it,)e(as)h(in)g(these)h(t)m(w)
m(o)f(examples)2791 3776 y FQ(13)2868 3813 y FX(:)1890
3965 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1890 3965 a 1125 4447 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 184.27878 92.13939
3.61665 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1125 4447 a 1125 4447
a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 1125 4447 a 1121 4420 a FX(\026)1125 4447 y FS(b)23
b FT(^)1277 4447 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 1277 4447 a FS(a)98 b(;)1567 4447
y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 1567 4447 a 1 w FX(\026)-50 b FS(a)23 b FT(^)1729 4447
y
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb2 16 {InitRnode } NewNode end end
 1729 4447 a 1725 4420 a FX(\026)1729 4447 y FS(b)98
b(;)2009 4447 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 2009 4447 a FS(b)23 b FT(^)2162 4447
y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 2162 4447 a FS(a)97 b(;)2452 4447 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 2452 4447 a 1 w
FX(\026)-50 b FS(a)22 b FT(^)2613 4447 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 2613 4447 a
FS(b)2655 4447 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA 80. 
def /AngleB 100.  def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2655 4447 a 2655 4447 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2655 4447 a
2655 4447 a
 tx@Dict begin NAngle  RotBegin  end
 2655 4447 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2655 4447 a
 tx@Dict begin RotEnd  end
 2655 4447 a 2655 4447 a
 tx@Dict begin PutEnd  end
 2655 4447 a 2655
4447 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 55.  def /AngleB 70.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2655 4447 a 2655 4447 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA 110.  def /AngleB 125.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2655 4447 a 2655 4447
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2655 4447 a 2655 4447 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2655 4447 a 2655 4447 a
 tx@Dict begin NAngle  RotBegin  end
 2655
4447 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2655 4447
a
 tx@Dict begin RotEnd  end
 2655 4447 a 2655 4447 a
 tx@Dict begin PutEnd  end
 2655 4447 a 2655 4447 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2655
4447 a 2655 4447 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2655 4447 a 2655 4447 a
 tx@Dict begin NAngle  RotBegin  end
 2655 4447
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2655 4447 a
 tx@Dict begin RotEnd  end

2655 4447 a 2655 4447 a
 tx@Dict begin PutEnd  end
 2655 4447 a 2655 4447 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2655
4447 a 2655 4447 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2655 4447 a 2655 4447 a
 tx@Dict begin NAngle  RotBegin  end
 2655 4447
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2655 4447 a
 tx@Dict begin RotEnd  end

2655 4447 a 2655 4447 a
 tx@Dict begin PutEnd  end
 2655 4447 a 3607 4226 a FX(\(48\))p
0 TeXcolorgray 0 4556 600 4 v 79 4617 a FO(12)149 4648
y FZ(What)28 b(w)n(e)g(call)f Fu(pr)l(enet)35 b FZ(is)28
b(in)g(the)g(literature)e(sometimes)i(also)e(called)h(a)g
Fu(pr)l(o)l(of)k(structur)l(e.)79 4717 y FO(13)149 4747
y FZ(Here)26 b(w)n(e)f(mak)n(e)h(t)n(w)n(o)f(mo)r(di\014cations)g(to)h
(the)g(pro)r(of)f(nets)h(used)g(in)g([LS05b,)g(LS05a]:)34
b(\(i\))27 b(W)-7 b(e)26 b(force)f(ev)n(ery)g FM(t)h
FZ(to)g(b)r(e)0 4847 y(link)n(ed)h(to)g(itself)g(and)g(w)n(e)g(do)f
(not)h(allo)n(w)f(links)h(b)r(et)n(w)n(een)g FM(t)g FZ(and)g
FM(f)9 b FZ(.)37 b(The)27 b(reason)e(is)i(that)g(w)n(e)g(deal)g(in)g
(this)g(pap)r(er)g(with)0 4946 y(prop)r(er)d(units)h(in)g(the)g
(categorical)d(sense,)j(while)g([LS05b,)f(LS05a])f(used)i(\\w)n(eak)e
(units")i(\(see)f(also)g(the)h(in)n(tro)r(duction\).)0
5046 y(The)e(observ)-5 b(ation)21 b(that)j(linking)e(ev)n(ery)g
FM(t)h FZ(to)g(itself)g(and)g(disallo)n(wing)f FM(t)p
FZ(-)p FM(f)9 b FZ(-links)22 b(is)h(enough)f(to)h(get)g(prop)r(er)f
(units)h(is)g(due)0 5146 y(to)32 b(F)-7 b(ran\030)-37
b(cois)32 b(Lamarc)n(he.)50 b(\(ii\))33 b(W)-7 b(e)33
b(use)f(here)g(directed)h(links)f(b)r(et)n(w)n(een)h(complemen)n(tary)e
(pairs)h(of)g(atoms)g(\(instead)0 5245 y(of)d(undirected)g(links)f(as)h
(in)g([LS05b,)f(LS05a]\).)40 b(This)28 b(brings)g(a)h(sligh)n(t)f
(simpli\014cation)h(of)g(cut)g(elimination)g(via)f(path)0
5345 y(comp)r(osition.)36 b(The)28 b(idea)f(for)g(this)h(has)f(b)r(een)
h(tak)n(en)f(from)h(Dominic)f(Hughes)h([Hug05b,)f(Hug05a].)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 588 53
TeXDict begin 588 52 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(588)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FX(and)1890 352 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1890 352 a 435
954 a
 tx@Dict begin tx@NodeDict begin {9.94438 3.0 350.43323 175.21661 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 435 954 a 435 954 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 435 954 a 431 928 a FX(\026)435
954 y FS(b)c FT(_)587 954 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 587 954 a FS(a)98 b(;)114
b FX(\(\()953 954 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 953 954 a 1 w FX(\026)-50 b FS(a)23
b FT(^)1115 954 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@t1 16 {InitRnode } NewNode end end
 1115 954 a FP(t)p FX(\))f FT(^)1307
954 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 1307 954 a 1 w FX(\026)-50 b FS(a)q FX(\))22 b
FT(^)1507 954 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 1507 954 a FS(b)98 b(;)1788 954 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 1788
954 a FS(b)22 b FT(_)h FX(\(\()2016 954 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 2016 954 a
FS(a)f FT(^)2178 954 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 5.05687 2.52843 2.58333
} false /N@c1 16 {InitRnode } NewNode end end
 2178 954 a FS(c)p FX(\))g FT(_)2368
954 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@f1 16 {InitRnode } NewNode end end
 2368 954 a FP(f)11 b FX(\))97 b FS(;)2689 954 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@t2 16 {InitRnode } NewNode end end

2689 954 a FP(t)22 b FT(_)h FX(\(\()2920 954 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 5.05687 2.52843 3.38887
} false /N@nc1 16 {InitRnode } NewNode end end
 2920 954
a 2 w FX(\026)-51 b FS(c)22 b FT(^)3072 954 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@f2 16 {InitRnode } NewNode end end
 3072 954
a FP(f)11 b FX(\))22 b FT(^)3265 954 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b3 16 {InitRnode } NewNode end end
 3265 954 a FS(b)q
FX(\))3345 954 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3345 954 a 3345 954 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3345 954 a 3345
954 a
 tx@Dict begin NAngle  RotBegin  end
 3345 954 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3345 954 a
 tx@Dict begin RotEnd  end
 3345 954 a 3345 954 a
 tx@Dict begin PutEnd  end
 3345 954 a 3345 954
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3345 954 a 3345 954 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3345 954 a 3345 954 a
 tx@Dict begin NAngle  RotBegin  end
 3345 954
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3345 954 a
 tx@Dict begin RotEnd  end
 3345
954 a 3345 954 a
 tx@Dict begin PutEnd  end
 3345 954 a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3345 954 a 3345
954 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3345 954 a 3345 954 a
 tx@Dict begin NAngle  RotBegin  end
 3345 954 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3345 954 a
 tx@Dict begin RotEnd  end
 3345 954 a 3345 954
a
 tx@Dict begin PutEnd  end
 3345 954 a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a1 InitNC { /AngleA 100.  def /AngleB 100.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3345 954 a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3345 954
a 3345 954 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3345 954 a 3345 954 a
 tx@Dict begin NAngle  RotBegin  end
 3345 954 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3345 954 a
 tx@Dict begin RotEnd  end
 3345 954 a 3345 954
a
 tx@Dict begin PutEnd  end
 3345 954 a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 75.  def /AngleB 125.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3345 954 a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA 90.  def /AngleB 125.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3345 954
a 3345 954 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b3 InitNC { /AngleA 105.  def /AngleB 125.  def
0.55  0.55  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3345 954 a 3607 676 a FX(\(49\))146 1109
y(No)m(w)28 b(w)m(e)f(will)h(de\014ne)g(when)f(a)g(simple)h(prenet)f
(is)h(correct,)g(i.e.,)h(comes)e(from)g(an)f(actual)h(pro)s(of.)41
b(A)0 1229 y FU(c)-5 b(onjunctive)28 b(pruning)35 b FX(of)26
b(a)g(prenet)h FS(P)c Fl(B)10 b FX(\000)26 b(is)h(the)g(result)g(of)f
(remo)m(ving)h(one)g(of)f(the)h(t)m(w)m(o)g(subform)m(ulae)0
1350 y(of)38 b(eac)m(h)i FT(^)f FX(in)g(\000)g(and)g(restricting)g(the)
h(linking)f FS(P)52 b FX(accordingly)-8 b(.)63 b(Here)40
b(are)f(t)m(w)m(o)g(\(of)f(16)h(p)s(ossible\))0 1470
y(conjunctiv)m(e)c(prunings)e(of)39 b(\(48\):)897 1629
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 897 1629 a 116 2110 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 188.1954 94.0977
3.61665 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 116 2110 a 0.86 TeXcolorgray
116 2110 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 116 2110 a 112 2084 a FX(\026)116 2110 y FS(b)p
0 TeXcolorgray 23 w FT(^)268 2110 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 268 2110 a FS(a)98
b(;)558 2110 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 558 2110 a 1 w FX(\026)-50 b FS(a)23 b
FT(^)p 0.86 TeXcolorgray 720 2110 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb2 16 {InitRnode } NewNode end end
 720 2110 a 716 2084
a FX(\026)720 2110 y FS(b)p 0 TeXcolorgray 98 w(;)1001
2110 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 1001 2110 a FS(b)f FT(^)p 0.86 TeXcolorgray 1153
2110 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 1153 2110 a FS(a)p 0 TeXcolorgray 97 w(;)p 0.86
TeXcolorgray 1443 2110 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 1443 2110 a 1 w FX(\026)-50
b FS(a)p 0 TeXcolorgray 22 w FT(^)1605 2110 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 1605 2110
a FS(b)p 0.86 TeXcolorgray 1679 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA
80.  def /AngleB 100.  def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 1679 2110 a 1679
2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1679 2110 a 1679 2110 a
 tx@Dict begin NAngle  RotBegin  end
 1679 2110 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1679 2110 a
 tx@Dict begin RotEnd  end
 1679 2110 a 1679
2110 a
 tx@Dict begin PutEnd  end
 1679 2110 a 1679 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0.91
 setgray  /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
2.58333 2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 55.  def /AngleB
70.  def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2
div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB
0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict
begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3
ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub
3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub
def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def
/getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0
add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t
3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul by
t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1 roll
sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0
100 { /t0 u def /u u du add def /t u def getdL add } repeat } def /GetArrowPos
{ /ende 0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u
0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def
/sum getdL sum add def sum ende gt {exit} if } loop u } def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo
0.4  1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi {
/ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 1679 2110 a 1679 2110
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0.91
 setgray  /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
2.58333 2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA 110.  def /AngleB
125.  def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth
2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB
0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict
begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3
ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub
3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub
def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def
/getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0
add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t
3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul by
t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1 roll
sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0
100 { /t0 u def /u u du add def /t u def getdL add } repeat } def /GetArrowPos
{ /ende 0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u
0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def
/sum getdL sum add def sum ende gt {exit} if } loop u } def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo
0.6  1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi {
/ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 1679 2110 a 1679 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA
70.  def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 1679 2110 a 1679 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1679
2110 a 1679 2110 a
 tx@Dict begin NAngle  RotBegin  end
 1679 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end


@endspecial 1679 2110 a
 tx@Dict begin RotEnd  end
 1679 2110 a 1679 2110 a
 tx@Dict begin PutEnd  end
 1679
2110 a 1679 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA
110.  def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 1679 2110 a 1679 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1679 2110
a 1679 2110 a
 tx@Dict begin NAngle  RotBegin  end
 1679 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1679 2110 a
 tx@Dict begin RotEnd  end
 1679 2110 a 1679 2110 a
 tx@Dict begin PutEnd  end
 1679 2110 a 0 TeXcolorgray
1679 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1679 2110 a 1679 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1679 2110 a 1679
2110 a
 tx@Dict begin NAngle  RotBegin  end
 1679 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1679 2110 a
 tx@Dict begin RotEnd  end
 1679 2110 a 1679 2110 a
 tx@Dict begin PutEnd  end
 1679 2110 a 2883
1629 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 2883 1629 a 2101 2110 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 188.1954 94.0977
3.61665 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2101 2110 a 2101 2110
a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 2101 2110 a 2097 2084 a FX(\026)2101 2110 y FS(b)23
b FT(^)p 0.86 TeXcolorgray 2254 2110 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 2254 2110 a FS(a)p
0 TeXcolorgray 97 w(;)2544 2110 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 2544 2110 a 1 w FX(\026)-50
b FS(a)22 b FT(^)p 0.86 TeXcolorgray 2705 2110 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb2 16 {InitRnode } NewNode end end
 2705
2110 a 2701 2084 a FX(\026)2705 2110 y FS(b)p 0 TeXcolorgray
98 w(;)2986 2110 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 2986 2110 a FS(b)g FT(^)p 0.86 TeXcolorgray
3138 2110 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 3138 2110 a FS(a)p 0 TeXcolorgray 98 w(;)p
0.86 TeXcolorgray 3428 2110 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 3428 2110 a 1 w FX(\026)-50
b FS(a)p 0 TeXcolorgray 22 w FT(^)3590 2110 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 3590 2110
a FS(b)p 0.86 TeXcolorgray 3664 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0.91
 setgray  /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
2.58333 2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA 110.  def /AngleB
125.  def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth
2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB
0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict
begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3
ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub
3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub
def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def
/getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0
add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t
3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul by
t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1 roll
sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0
100 { /t0 u def /u u du add def /t u def getdL add } repeat } def /GetArrowPos
{ /ende 0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u
0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def
/sum getdL sum add def sum ende gt {exit} if } loop u } def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo
0.6  1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi {
/ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 3664 2110 a 3664
2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA
110.  def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 3664 2110 a 3664 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3664 2110 a 3664 2110
a
 tx@Dict begin NAngle  RotBegin  end
 3664 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3664 2110 a
 tx@Dict begin RotEnd  end
 3664 2110 a 3664 2110 a
 tx@Dict begin PutEnd  end
 3664 2110 a 3664
2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA
70.  def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 3664 2110 a 3664 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3664 2110 a 3664 2110
a
 tx@Dict begin NAngle  RotBegin  end
 3664 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3664 2110 a
 tx@Dict begin RotEnd  end
 3664 2110 a 3664 2110 a
 tx@Dict begin PutEnd  end
 3664 2110 a 3664
2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA
110.  def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 3664 2110 a 3664 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3664 2110 a 3664 2110
a
 tx@Dict begin NAngle  RotBegin  end
 3664 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3664 2110 a
 tx@Dict begin RotEnd  end
 3664 2110 a 3664 2110 a
 tx@Dict begin PutEnd  end
 3664 2110 a 0 TeXcolorgray
3664 2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA 80. 
def /AngleB 100.  def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3664 2110 a 3664 2110 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3664 2110 a 3664
2110 a
 tx@Dict begin NAngle  RotBegin  end
 3664 2110 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3664 2110 a
 tx@Dict begin RotEnd  end
 3664 2110 a 3664 2110 a
 tx@Dict begin PutEnd  end
 3664 2110 a 3664
2110 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 55.  def /AngleB 70.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3664 2110 a 0 2303 a FX(A)39 b(simple)i(prenet)f(is)g
FU(c)-5 b(orr)g(e)g(ct)48 b FX(if)39 b(eac)m(h)h(of)f(its)h(conjunctiv)
m(e)h(prunings)f(con)m(tains)g(at)f(least)h(one)f(link)0
2423 y(\(i.e,)h(the)f(linking)h(is)f(not)f(empt)m(y\).)62
b(A)39 b FU(simple)g(pr)-5 b(o)g(of)40 b(net)48 b FX(is)39
b(a)f(correct)h(simple)h(prenet.)62 b(The)39 b(t)m(w)m(o)0
2544 y(examples)46 b(in)e(\(48\))g(and)g(\(49\))f(are)h(pro)s(of)f
(nets.)79 b(Here)45 b(is)f(a)g(prenet,)k(whic)m(h)d(is)g(not)f(a)f(pro)
s(of)h(net)0 2664 y(b)s(ecause)34 b(there)f(is)g(a)g(pruning)g(in)g
(whic)m(h)h(all)e(links)i(disapp)s(ear:)1215 2817 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1215
2817 a 893 3118 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 893 3118 a 893 3118 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 893 3118 a 889
3092 a FX(\026)893 3118 y FS(b)22 b FT(^)1045 3118 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end

1045 3118 a FS(a)98 b(;)1335 3118 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 1335 3118 a 1 w FX(\026)-50
b FS(a)22 b FT(^)1497 3118 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 1497 3118 a FS(b)1538 3118
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1538 3118 a 1538 3118 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1538 3118 a 1538 3118 a
 tx@Dict begin NAngle  RotBegin  end
 1538
3118 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1538 3118
a
 tx@Dict begin RotEnd  end
 1538 3118 a 1538 3118 a
 tx@Dict begin PutEnd  end
 1538 3118 a 1538 3118 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1538
3118 a 1538 3118 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1538 3118 a 1538 3118 a
 tx@Dict begin NAngle  RotBegin  end
 1538 3118
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1538 3118 a
 tx@Dict begin RotEnd  end

1538 3118 a 1538 3118 a
 tx@Dict begin PutEnd  end
 1538 3118 a 1793 3088 a FT(\000)-16
b(!)2548 2817 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 2548 2817 a 2209 3118 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 81.67422 40.83711
3.61665 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2209 3118 a 2209
3118 a
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb1 16 {InitRnode } NewNode end end
 2209 3118 a 2205 3092 a FX(\026)2209 3118 y FS(b)23
b FT(^)p 0.86 TeXcolorgray 2361 3118 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 2361 3118 a FS(a)p
0 TeXcolorgray 98 w(;)2651 3118 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 2651 3118 a 1 w FX(\026)-50
b FS(a)23 b FT(^)p 0.86 TeXcolorgray 2813 3118 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 2813
3118 a FS(b)p 0 TeXcolorgray 0.86 TeXcolorgray 2887 3118
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA
70.  def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 2887 3118 a 2887 3118 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2887 3118 a 2887 3118 a
 tx@Dict begin NAngle  RotBegin  end
 2887
3118 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2887 3118
a
 tx@Dict begin RotEnd  end
 2887 3118 a 2887 3118 a
 tx@Dict begin PutEnd  end
 2887 3118 a 2887 3118 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.91  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA
110.  def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub
yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0.91  setgray 0 setlinecap stroke  grestore  grestore
end
 2887
3118 a 2887 3118 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2887 3118 a 2887 3118 a
 tx@Dict begin NAngle  RotBegin  end
 2887 3118
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0.91  setgray
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0.91  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2887 3118 a
 tx@Dict begin RotEnd  end

2887 3118 a 2887 3118 a
 tx@Dict begin PutEnd  end
 2887 3118 a 0 TeXcolorgray 146
3316 a FX(No)m(w)38 b(w)m(e)g(sho)m(w)h(ho)m(w)e(simple)i(pro)s(of)d
(nets)i(can)g(b)s(e)f(comp)s(osed.)58 b(As)38 b(in)f([LS05b,)h(LS05a,)e
(Str05])0 3437 y(this)c(is)h(done)f(via)g(cut)g(elimination.)44
b(But)32 b(w)m(e)h(use)f(here)h(a)e(notational)h(tric)m(k)g(to)g(mak)m
(e)h(it)e(ev)m(en)j(more)0 3557 y(in)m(tuitiv)m(e:)52
b(w)m(e)37 b(allo)m(w)f(to)g(write)g(pro)s(of)f(nets)i(in)f(t)m(w)m
(o-sided)i(form:)49 b(Instead)37 b(of)f(putting)g(the)g(linking)0
3677 y FU(ab)-5 b(ove)37 b FX(a)30 b(sequen)m(t)i FS(A)769
3692 y FQ(1)809 3677 y FS(;)17 b(:)g(:)g(:)f(;)h(A)1101
3692 y FR(n)1148 3677 y FS(;)g(B)1266 3692 y FQ(1)1305
3677 y FS(;)g(:)g(:)g(:)f(;)h(B)1598 3692 y FR(m)1664
3677 y FX(,)31 b(w)m(e)g(put)g(it)f FU(in)i(b)-5 b(etwe)g(en)2637
3652 y FX(\026)2611 3677 y FS(A)2684 3692 y FR(n)2731
3677 y FS(;)17 b(:)g(:)g(:)f(;)2976 3652 y FX(\026)2950
3677 y FS(A)3023 3692 y FQ(1)3093 3677 y FX(and)30 b
FS(B)3354 3692 y FQ(1)3394 3677 y FS(;)17 b(:)g(:)g(:)f(;)h(B)3687
3692 y FR(m)3753 3677 y FX(,)0 3798 y(where)34 b(the)f(negation)871
3772 y(\026)845 3798 y FS(A)g FX(of)f(a)g(form)m(ula)h
FS(A)g FX(is)g(inductiv)m(ely)i(de\014ned)f(as)f(follo)m(ws)2949
3762 y FQ(14)3024 3798 y FX(:)289 4014 y(\026)-50 b FS(a)27
b FX(=)i(\026)-50 b FS(a)17 b(;)680 4001 y FX(\026)680
4014 y(\026)-50 b FS(a)28 b FX(=)g FS(a)17 b(;)1068 3993
y FX(\026)1071 4014 y FP(t)27 b FX(=)g FP(f)g FS(;)1446
3987 y FX(\026)1448 4014 y FP(f)38 b FX(=)27 b FP(t)17
b FS(;)p 1825 3927 339 4 v 114 w FX(\()p FS(A)22 b FT(^)h
FS(B)5 b FX(\))27 b(=)2318 3988 y(\026)2295 4014 y FS(B)g
FT(_)2510 3988 y FX(\026)2485 4014 y FS(A)16 b(;)p 2716
3927 V 115 w FX(\()p FS(A)22 b FT(_)g FS(B)5 b FX(\))28
b(=)3209 3988 y(\026)3186 4014 y FS(B)f FT(^)3401 3988
y FX(\026)3376 4014 y FS(A)16 b(:)0 4230 y FX(Here)33
b(are)g(three)g(di\013eren)m(t)h(w)m(a)m(ys)g(of)e(writing)h(example)h
(\(48\))e(in)h(t)m(w)m(o-sided)h(form:)548 4441 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 24.49701 12.2485 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 548
4441 a 548 4441 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 548 4441 a 1 w FX(\026)-50 b FS(a)22
b FT(_)710 4441 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 710 4441 a FS(b)106 5043 y
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 131.01819 65.5091
3.61665 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 106 5043
a 106 5043 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 106 5043 a 1 w FX(\026)-50 b FS(a)22 b FT(^)267
5043 y
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@nb2 16 {InitRnode } NewNode end end
 267 5043 a 263 5016 a FX(\026)267 5043 y FS(b)98
b(;)548 5043 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 548 5043 a FS(b)22 b FT(^)700 5043 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 700
5043 a FS(a)98 b(;)990 5043 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 990 5043 a 1 w FX(\026)-50
b FS(a)22 b FT(^)1152 5043 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 1152 5043 a FS(b)1193 5043
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1193 5043 a 1193 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA -70.  def /AngleB 100.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1193 5043 a 1193 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA 95.  def /AngleB 125.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1193
5043 a 1193 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 80.  def /AngleB -110.  def
0.85  0.85  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1193 5043 a 1193 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1193 5043
a 1193 5043 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1193 5043 a 1193 5043 a
 tx@Dict begin NAngle  RotBegin  end
 1193 5043 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1193 5043 a
 tx@Dict begin RotEnd  end
 1193 5043 a 1193
5043 a
 tx@Dict begin PutEnd  end
 1193 5043 a 1193 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1193 5043 a 1193 5043
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1193 5043 a 1193 5043 a
 tx@Dict begin NAngle  RotBegin  end
 1193 5043 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 1193 5043 a
 tx@Dict begin RotEnd  end
 1193 5043 a 1193 5043 a
 tx@Dict begin PutEnd  end
 1193
5043 a 1481 4441 a
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1481 4441 a 1481 4441 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb2 16 {InitRnode } NewNode end end
 1481 4441
a FS(b)g FT(_)1633 4441 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 1633 4441 a FS(a)97 b(;)1923
4441 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 1923 4441 a 1 w FX(\026)-50 b FS(a)22 b FT(_)2085
4441 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 2085 4441 a FS(b)1481 5043 y
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1481 5043 a 1481
5043 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 1481 5043 a FS(b)g FT(^)1633 5043 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 1633 5043
a FS(a)97 b(;)1923 5043 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 1923 5043 a 1 w FX(\026)-50
b FS(a)22 b FT(^)2085 5043 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 2085 5043 a FS(b)2126 5043
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA -80.  def /AngleB 80.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126 5043 a 2126 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA -105.  def /AngleB 75.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126 5043 a 2126 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA -75.  def /AngleB 105.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126
5043 a 2126 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA -100.  def /AngleB 100. 
def 1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126 5043 a 2126 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126 5043
a 2126 5043 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2126 5043 a 2126 5043 a
 tx@Dict begin NAngle  RotBegin  end
 2126 5043 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2126 5043 a
 tx@Dict begin RotEnd  end
 2126 5043 a 2126
5043 a
 tx@Dict begin PutEnd  end
 2126 5043 a 2126 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2126 5043 a 2126 5043
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2126 5043 a 2126 5043 a
 tx@Dict begin NAngle  RotBegin  end
 2126 5043 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 2126 5043 a
 tx@Dict begin RotEnd  end
 2126 5043 a 2126 5043 a
 tx@Dict begin PutEnd  end
 2126
5043 a 2413 4441 a
 tx@Dict begin tx@NodeDict begin {9.94438 2.33331 131.01819 65.5091
3.61665 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2413 4441 a 2413 4441 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a2 16 {InitRnode } NewNode end end
 2413 4441
a 1 w FX(\026)-50 b FS(a)23 b FT(_)2575 4441 y
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@b1 16 {InitRnode } NewNode end end
 2575 4441
a 2571 4415 a FX(\026)2575 4441 y FS(b)98 b(;)2855 4441
y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb2 16 {InitRnode } NewNode end end
 2855 4441 a FS(b)23 b FT(_)3008 4441 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 3008 4441 a
FS(a)97 b(;)3298 4441 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 3298 4441 a 1 w FX(\026)-50 b
FS(a)22 b FT(_)3460 4441 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 3460 4441 a FS(b)2855 5043
y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 24.49701 12.2485 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2855 5043 a 2855 5043 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 2855 5043 a 1 w FX(\026)-50
b FS(a)23 b FT(^)3017 5043 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 3017 5043 a FS(b)3059 5043
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA -100.  def /AngleB 70.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3059 5043 a 3059 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA -125.  def /AngleB -95. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3059 5043 a 3059 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@b2 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3059
5043 a 3059 5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb2 /N@b1 InitNC { /AngleA -110.
 def /AngleB -70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3059 5043 a 3059 5043 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3059 5043
a 3059 5043 a
 tx@Dict begin NAngle  RotBegin  end
 3059 5043 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3059 5043 a
 tx@Dict begin RotEnd  end
 3059 5043 a 3059 5043 a
 tx@Dict begin PutEnd  end
 3059 5043 a 3059
5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3059 5043 a 3059 5043 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3059 5043 a 3059 5043
a
 tx@Dict begin NAngle  RotBegin  end
 3059 5043 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3059 5043 a
 tx@Dict begin RotEnd  end
 3059 5043 a 3059 5043 a
 tx@Dict begin PutEnd  end
 3059 5043 a 3059
5043 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA 110.  def /AngleB -80.  def
0.85  0.85  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3059 5043 a 3607 4735 a FX(\(50\))p 0 TeXcolorgray
0 5154 600 4 v 79 5215 a FO(14)149 5245 y FZ(W)-7 b(e)38
b(in)n(v)n(ert)e(the)h(order)f(when)h(taking)f(the)i(negation)e(in)h
(order)e(to)i(reduce)g(the)g(n)n(um)n(b)r(er)g(of)g(crossings)d(in)k
(the)0 5345 y(pictures.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 589 54
TeXDict begin 589 53 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(589)p 0 TeXcolorgray
0 320 a(And)33 b(here)g(is)g(a)g(di\013eren)m(t)h(w)m(a)m(y)f(of)f
(writing)h(example)i(\(49\))o(:)1360 525 y
 tx@Dict begin tx@NodeDict begin {9.94438 3.0 127.62538 63.81268 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1360 525 a
1360 525 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 1360 525 a 1 w FX(\026)-50 b FS(a)23 b FT(^)1522
525 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 1522 525 a FS(b)98 b(;)114 b FX(\()1840 525 y
 tx@Dict begin tx@NodeDict begin {9.94438 0.0 4.99576 2.49788 4.97218
} false /N@b3 16 {InitRnode } NewNode end end
 1840
525 a 1836 499 a FX(\026)1840 525 y FS(b)23 b FT(_)g
FX(\()2031 525 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@f2 16 {InitRnode } NewNode end end
 2031 525 a FP(t)e FT(_)2185 525 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 5.05687 2.52843 2.58333
} false /N@nc1 16 {InitRnode } NewNode end end
 2185
525 a FS(c)p FX(\))h FT(^)2375 525 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@t2 16 {InitRnode } NewNode end end
 2375 525 a FP(f)1103
1127 y
 tx@Dict begin tx@NodeDict begin {9.0 3.0 189.47487 94.73743 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1103 1127 a FX(\(\()1179 1127 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na1 16 {InitRnode } NewNode end end
 1179 1127 a 1
w FX(\026)-50 b FS(a)23 b FT(^)1341 1127 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@t1 16 {InitRnode } NewNode end end
 1341 1127
a FP(t)p FX(\))f FT(^)1533 1127 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 1533 1127 a 1 w FX(\026)-50
b FS(a)q FX(\))22 b FT(^)1733 1127 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 1733 1127 a FS(b)98
b(;)2014 1127 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 2014 1127 a FS(b)22 b FT(_)h FX(\(\()2242
1127 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 2242 1127 a FS(a)f FT(^)2404 1127 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 5.05687 2.52843 2.58333
} false /N@c1 16 {InitRnode } NewNode end end
 2404 1127
a FS(c)p FX(\))g FT(_)2594 1127 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@f1 16 {InitRnode } NewNode end end
 2594 1127 a FP(f)11
b FX(\))2677 1127 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2677 1127
a 2677 1127 a
 tx@Dict begin NAngle  RotBegin  end
 2677 1127 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2677 1127 a
 tx@Dict begin RotEnd  end
 2677 1127 a 2677 1127 a
 tx@Dict begin PutEnd  end
 2677 1127 a 2677
1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2677 1127 a 2677 1127
a
 tx@Dict begin NAngle  RotBegin  end
 2677 1127 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2677 1127 a
 tx@Dict begin RotEnd  end
 2677 1127 a 2677 1127 a
 tx@Dict begin PutEnd  end
 2677 1127 a 2677
1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 90.  def /AngleB -100.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a1 InitNC { /AngleA 90.  def /AngleB -80.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA -85.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677
1127 a 2677 1127 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nb1 /N@b3 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2677 1127 a 2677 1127 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2677 1127
a 2677 1127 a
 tx@Dict begin NAngle  RotBegin  end
 2677 1127 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2677 1127 a
 tx@Dict begin RotEnd  end
 2677 1127 a 2677 1127 a
 tx@Dict begin PutEnd  end
 2677 1127 a 3607
822 a FX(\(51\))146 1319 y(Note)28 b(that)f(for)g(de\014ning)i(the)f
(direction)g(of)g(the)g(links)g(and)g(for)f(c)m(hec)m(king)j
(correctness)g(w)m(e)e(alw)m(a)m(ys)0 1440 y(ha)m(v)m(e)33
b(to)e(consider)h(the)g(negation)f(of)g(the)h(form)m(ula)f(on)h(the)f
(top.)43 b(This)33 b(is)f(equiv)-5 b(alen)m(t)33 b(to)e(pretending)0
1560 y(w)m(e)g(had)e(not)g(tak)m(en)i(the)f(negation)f(of)g(that)h
(form)m(ula)f(when)i(going)e(from)g(the)h(one-sided)h(to)e(the)h(t)m(w)
m(o-)0 1681 y(sided)37 b(v)m(ersion.)55 b(One)37 b(can)f(mak)m(e)h
(this)g(formally)f(precise)h(b)m(y)g(using)g(p)s(olarities)f([Lam01].)
53 b(What)36 b(is)0 1801 y(imp)s(ortan)m(t)31 b(is)h(the)g(fact)f(that)
g(the)h(ob)5 b(jects)33 b(in)e(\(48\))g(and)g(in)h(\(50\))f(denote)h
FU(the)i(same)j FX(net.)44 b(Similarly)-8 b(,)0 1921
y(\(49\))32 b(and)h(in)f(\(51\))g(are)h(just)g(di\013eren)m(t)h(w)m(a)m
(ys)g(of)e(dra)m(wing)h(the)g(same)h(pro)s(of)d(net.)146
2034 y(Cut)45 b(elimination)f(can)g(no)m(w)h(b)s(e)f(de\014ned)h(b)m(y)
f(plugging)g(nets)h(together,)i(as)d(in)f(the)i(follo)m(wing)0
2147 y(example)34 b(whic)m(h)g(is)f(a)g(comp)s(osition)g(of)f(\(the)h
(middle\))g(net)g(in)g(\(50\))f(and)h(the)g(one)g(in)g(\(51\))o(:)504
2326 y
 tx@Dict begin tx@NodeDict begin {7.60416 2.12917 72.07474 36.03737
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 504 2326 a 504 2326 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 504 2326 a Fr(b)20 b Fq(_)644
2326 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 644 2326 a Fr(a)91 b(;)914 2326 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 914 2326 a 1
w Fp(\026)-46 b Fr(a)21 b Fq(_)1063 2326 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 1063 2326
a Fr(b)108 2778 y
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 108 2778 a 108 2778 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 108 2778 a Fr(b)f
Fq(^)248 2778 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 248 2778 a Fr(a)91 b(;)518 2778 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@cna2 16 {InitRnode } NewNode end end
 518
2778 a 1 w Fp(\026)-46 b Fr(a)21 b Fq(^)667 2778 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@cb2 16 {InitRnode } NewNode end end
 667
2778 a Fr(b)91 b(;)107 b Fp(\()964 2778 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 964 2778 a
961 2754 a Fp(\026)964 2778 y Fr(b)20 b Fq(_)g Fp(\()1139
2778 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 1139 2778 a Fo(t)g Fq(_)1281 2778 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 1281 2778
a Fr(c)p Fp(\))h Fq(^)1457 2778 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 1457 2778 a Fo(f)76
3230 y
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 175.2732 87.6366 3.30017
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 76 3230 a Fp(\(\()146 3230 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 146 3230 a 1 w Fp(\026)-46
b Fr(a)21 b Fq(^)295 3230 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 295 3230 a Fo(t)p Fp(\))g
Fq(^)472 3230 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 472 3230 a 1 w Fp(\026)-46 b Fr(a)q Fp(\))20
b Fq(^)657 3230 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 657 3230 a Fr(b)91 b(;)918 3230 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 918
3230 a Fr(b)20 b Fq(_)g Fp(\(\()1128 3230 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 1128 3230
a Fr(a)h Fq(^)1278 3230 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 1278 3230 a Fr(c)p Fp(\))g
Fq(_)1454 3230 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 1454 3230 a Fo(f)9 b Fp(\))1530 3230
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@cb2 InitNC { /AngleA -80.  def /AngleB 80. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA -105.  def /AngleB 75.
 def 0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@cb2 InitNC { /AngleA -85.  def /AngleB 95. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530
3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA -100.  def /AngleB 100.
 def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230
a 1530 3230 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1530 3230 a 1530 3230 a
 tx@Dict begin NAngle  RotBegin  end
 1530 3230 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1530 3230 a
 tx@Dict begin RotEnd  end
 1530 3230 a 1530
3230 a
 tx@Dict begin PutEnd  end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cna2 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1530 3230 a 1530 3230 a
 tx@Dict begin NAngle  RotBegin  end
 1530 3230 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 1530 3230 a
 tx@Dict begin RotEnd  end
 1530 3230 a 1530 3230 a
 tx@Dict begin PutEnd  end
 1530
3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1530 3230
a 1530 3230 a
 tx@Dict begin NAngle  RotBegin  end
 1530 3230 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1530 3230 a
 tx@Dict begin RotEnd  end
 1530 3230 a 1530 3230 a
 tx@Dict begin PutEnd  end
 1530 3230 a 1530
3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1530 3230 a 1530 3230
a
 tx@Dict begin NAngle  RotBegin  end
 1530 3230 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1530 3230 a
 tx@Dict begin RotEnd  end
 1530 3230 a 1530 3230 a
 tx@Dict begin PutEnd  end
 1530 3230 a 1530
3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@cna2 InitNC { /AngleA 90.  def /AngleB -100.
 def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@cna2 InitNC { /AngleA 90.  def /AngleB -80. 
def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b2 InitNC { /AngleA -85.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530
3230 a 1530 3230 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cb2 /N@b3 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1530 3230 a 1530 3230 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1530 3230
a 1530 3230 a
 tx@Dict begin NAngle  RotBegin  end
 1530 3230 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1530 3230 a
 tx@Dict begin RotEnd  end
 1530 3230 a 1530 3230 a
 tx@Dict begin PutEnd  end
 1530 3230 a 1637
2781 a Fq(\000)-16 b(!)2076 2389 y
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2076 2389 a 2076 2389
a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 2076 2389 a Fr(b)21 b Fq(_)2216 2389 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 2216 2389 a
Fr(a)91 b(;)2487 2389 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 2487 2389 a 1 w Fp(\026)-46 b
Fr(a)20 b Fq(_)2636 2389 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 2636 2389 a Fr(b)91 b(;)106
b Fp(\()2932 2389 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 2932 2389 a 2929 2365 a Fp(\026)2932
2389 y Fr(b)21 b Fq(_)e Fp(\()3107 2389 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 3107 2389 a
Fo(t)i Fq(_)3249 2389 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 3249 2389 a Fr(c)q Fp(\))f Fq(^)3425
2389 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 3425 2389 a Fo(f)1839 3180 y
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 224.69391 112.34695
3.30017 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1839 3180 a 1839
3180 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 1839 3180 a Fr(b)g Fq(^)1979 3180 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 1979 3180
a Fr(a)91 b(;)106 b Fp(\(\()2319 3180 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 2319 3180 a 1
w Fp(\026)-46 b Fr(a)21 b Fq(^)2469 3180 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 2469 3180
a Fo(t)p Fp(\))f Fq(^)2646 3180 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 2646 3180 a 1 w Fp(\026)-46
b Fr(a)p Fp(\))21 b Fq(^)2830 3180 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 2830 3180 a Fr(b)91
b(;)3092 3180 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 3092 3180 a Fr(b)20 b Fq(_)g Fp(\(\()3302
3180 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 3302 3180 a Fr(a)h Fq(^)3451 3180 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 3451 3180
a Fr(c)q Fp(\))f Fq(_)3627 3180 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 3627 3180 a Fo(f)10
b Fp(\))3704 3180 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA -120.  def /AngleB 75.
 def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.65  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.65 } ifelse def /ArrowPos 0.  def /loopNo
0.65  1 gt {CurveLength 0.65  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA -100.  def /AngleB 90.
 def 1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180
a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3704 3180 a 3704
3180 a
 tx@Dict begin NAngle  RotBegin  end
 3704 3180 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3704 3180 a
 tx@Dict begin RotEnd  end
 3704 3180 a 3704 3180 a
 tx@Dict begin PutEnd  end
 3704 3180 a 3704
3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3704 3180 a 3704 3180
a
 tx@Dict begin NAngle  RotBegin  end
 3704 3180 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3704 3180 a
 tx@Dict begin RotEnd  end
 3704 3180 a 3704 3180 a
 tx@Dict begin PutEnd  end
 3704 3180 a 3704
3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3704 3180 a 3704 3180
a
 tx@Dict begin NAngle  RotBegin  end
 3704 3180 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3704 3180 a
 tx@Dict begin RotEnd  end
 3704 3180 a 3704 3180 a
 tx@Dict begin PutEnd  end
 3704 3180 a 3704
3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3704 3180 a 3704 3180
a
 tx@Dict begin NAngle  RotBegin  end
 3704 3180 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3704 3180 a
 tx@Dict begin RotEnd  end
 3704 3180 a 3704 3180 a
 tx@Dict begin PutEnd  end
 3704 3180 a 3704
3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@xa2 InitNC { /AngleA 100.  def /AngleB 90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@b1 InitNC { /AngleA -105.  def /AngleB 90. 
def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.45  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.45 } ifelse def /ArrowPos 0.  def /loopNo
0.45  1 gt {CurveLength 0.45  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@b2 InitNC { /AngleA -85.  def /AngleB 90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xnb1 /N@b3 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704
3180 a 3704 3180 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3704 3180 a 3704 3180 a
 tx@Dict begin NAngle  RotBegin  end
 3704 3180
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3704 3180 a
 tx@Dict begin RotEnd  end

3704 3180 a 3704 3180 a
 tx@Dict begin PutEnd  end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b1 InitNC { /AngleA -90.  def /AngleB 115. 
def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3704
3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b2 InitNC { /AngleA -75.  def /AngleB 115. 
def 0.75  0.75  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180 a 3704 3180 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b3 InitNC { /AngleA -65.  def /AngleB -90. 
def 0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3704 3180
a 3618 2781 a Fp(\(52\))0 3413 y FX(There)31 b(is)e(a)g(link)i(in)e
(the)h(resulting)g(net)g(if)f(and)h(only)f(if)h(there)g(is)f(a)g
(corresp)s(onding)i(path)e(in)h(the)f(non-)0 3526 y(reduced)34
b(comp)s(osition.)44 b(W)-8 b(riting)33 b(it)g(in)f(the)i(t)m(w)m
(o-sided)g(v)m(ersion)g(mak)m(es)g(it)f(more)g(in)m(tuitiv)m(e)h(than)f
(in)0 3639 y(the)g(one-sided)h(v)m(ersion,)g(where)g(\(52\))e(w)m(ould)
h(b)s(e)g(written)g(as:)1890 3782 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1890 3782 a 76 4406
a
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 436.8854 218.4427
3.30017 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 76 4406 a 76 4406 a
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@xnb1 16 {InitRnode } NewNode end end
 76 4406 a 73 4382 a Fp(\026)76
4406 y Fr(b)21 b Fq(^)216 4406 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa1 16 {InitRnode } NewNode end end
 216 4406 a Fr(a)31 b(;)366
4406 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xna1 16 {InitRnode } NewNode end end
 366 4406 a 1 w Fp(\026)-46 b Fr(a)20 b Fq(^)515
4406 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@xnb2 16 {InitRnode } NewNode end end
 515 4406 a 512 4382 a Fp(\026)515 4406 y Fr(b)30
b(;)655 4406 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 655 4406 a Fr(b)20 b Fq(^)795 4406 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 795
4406 a Fr(a)30 b(;)46 b Fp(\()979 4406 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xna2 16 {InitRnode } NewNode end end
 979 4406 a 1
w Fp(\026)-46 b Fr(a)20 b Fq(^)1128 4406 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb2 16 {InitRnode } NewNode end end
 1128 4406
a Fr(b)p Fp(\))h Fk(\006)p 1252 4416 3 74 v 20 w Fp(\()1339
4406 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@nb1 16 {InitRnode } NewNode end end
 1339 4406 a 1336 4382 a Fp(\026)1339 4406 y Fr(b)f
Fq(_)1479 4406 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a1 16 {InitRnode } NewNode end end
 1479 4406 a Fr(a)p Fp(\))31 b Fr(;)45
b Fp(\(\()1733 4406 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 1733 4406 a 1 w Fp(\026)-46 b Fr(a)21
b Fq(^)1883 4406 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 1883 4406 a Fo(t)p Fp(\))f Fq(^)2060
4406 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 2060 4406 a 1 w Fp(\026)-46 b Fr(a)p Fp(\))21
b Fq(^)2245 4406 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 2245 4406 a Fr(b)30 b(;)2385 4406
y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 2385 4406 a Fr(b)20 b Fq(_)g Fp(\(\()2595 4406 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 2595
4406 a Fr(a)h Fq(^)2744 4406 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 2744 4406 a Fr(c)q Fp(\))f
Fq(_)2920 4406 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 2920 4406 a Fo(f)10 b Fp(\))31 b Fr(;)3098
4406 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t2 16 {InitRnode } NewNode end end
 3098 4406 a Fo(t)20 b Fq(_)g Fp(\(\()3310 4406
y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 4.73868 2.36934 3.10857
} false /N@nc1 16 {InitRnode } NewNode end end
 3310 4406 a 2 w Fp(\026)-47 b Fr(c)21 b Fq(^)3451 4406
y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f2 16 {InitRnode } NewNode end end
 3451 4406 a Fo(f)10 b Fp(\))20 b Fq(^)3629 4406 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b3 16 {InitRnode } NewNode end end
 3629
4406 a Fr(b)p Fp(\))3703 4406 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406 a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703
4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406
a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703 4406 a 3703
4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406 a 3703 4406
a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703 4406 a 3703
4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a1 InitNC { /AngleA 100.  def /AngleB 100.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406 a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703
4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b1 InitNC { /AngleA 75.  def /AngleB 125.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b2 InitNC { /AngleA 90.  def /AngleB 125.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3703 4406
a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@b3 InitNC { /AngleA 105.  def /AngleB 125.  def
0.55  0.55  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xnb1 /N@xb2 InitNC { /AngleA 80.
 def /AngleB 100.  def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703
4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406 a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703
4406 a
 tx@Dict begin PutEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA 55.  def /AngleB 70.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3703 4406 a 3703 4406
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@xb2 InitNC { /AngleA 110.  def /AngleB 125.
 def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703
4406 a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703
4406 a 3703 4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406
a 3703 4406 a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703 4406 a 3703
4406 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna2 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3703 4406 a 3703 4406 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3703 4406 a 3703 4406
a
 tx@Dict begin NAngle  RotBegin  end
 3703 4406 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3703 4406 a
 tx@Dict begin RotEnd  end
 3703 4406 a 3703 4406 a
 tx@Dict begin PutEnd  end
 3703 4406 a 1860
4492 a Fg(?)1860 4547 y(y)1890 4827 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1890 4827 a 436
5372 a
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 350.21088 175.10544
3.30017 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 436 5372 a 436 5372 a
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@xnb1 16 {InitRnode } NewNode end end
 436 5372 a 433 5348 a Fp(\026)436
5372 y Fr(b)g Fq(^)576 5372 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa1 16 {InitRnode } NewNode end end
 576 5372 a Fr(a)31 b(;)725
5372 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xna1 16 {InitRnode } NewNode end end
 725 5372 a 1 w Fp(\026)-46 b Fr(a)21 b Fq(^)874
5372 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@xnb2 16 {InitRnode } NewNode end end
 874 5372 a 871 5348 a Fp(\026)874 5372 y Fr(b)31
b(;)1014 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 1014 5372 a Fr(b)21 b Fq(^)1154 5372
y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 1154 5372 a Fr(a)31 b(;)46 b Fp(\(\()1374 5372 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 1374
5372 a 1 w Fp(\026)-46 b Fr(a)20 b Fq(^)1523 5372 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 1523
5372 a Fo(t)p Fp(\))g Fq(^)1700 5372 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 1700 5372 a 1
w Fp(\026)-46 b Fr(a)p Fp(\))21 b Fq(^)1885 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 1885
5372 a Fr(b)30 b(;)2025 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 2025 5372 a Fr(b)20 b
Fq(_)g Fp(\(\()2235 5372 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 2235 5372 a Fr(a)h Fq(^)2385
5372 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 2385 5372 a Fr(c)p Fp(\))f Fq(_)2560 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 2560
5372 a Fo(f)10 b Fp(\))31 b Fr(;)2738 5372 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t2 16 {InitRnode } NewNode end end
 2738 5372
a Fo(t)20 b Fq(_)g Fp(\(\()2950 5372 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 4.73868 2.36934 3.10857
} false /N@nc1 16 {InitRnode } NewNode end end
 2950 5372 a 2
w Fp(\026)-47 b Fr(c)21 b Fq(^)3091 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f2 16 {InitRnode } NewNode end end
 3091 5372
a Fo(f)10 b Fp(\))21 b Fq(^)3269 5372 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b3 16 {InitRnode } NewNode end end
 3269 5372 a Fr(b)p
Fp(\))3343 5372 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372 a
3343 5372 a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3343 5372 a
 tx@Dict begin RotEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343 5372 a 3343
5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372 a 3343 5372
a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3343 5372 a
 tx@Dict begin RotEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343 5372 a 3343
5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372 a 3343 5372
a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3343 5372 a
 tx@Dict begin RotEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343 5372 a 3343
5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@xa2 InitNC { /AngleA 100.  def /AngleB 100. 
def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372 a 3343 5372 a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3343 5372 a
 tx@Dict begin RotEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343
5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372
a 3343 5372 a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3343 5372 a
 tx@Dict begin RotEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343 5372 a 3343
5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA 55.  def /AngleB 90.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@b1 InitNC { /AngleA 70.  def /AngleB 110.  def
0.55  0.55  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.3  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.3 } ifelse def /ArrowPos 0.  def /loopNo 0.3
 1 gt {CurveLength 0.3  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372 a 3343 5372
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@b2 InitNC { /AngleA 85.  def /AngleB 110.  def
0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@b3 InitNC { /AngleA 100.  def /AngleB 115. 
def 0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3343
5372 a 3343 5372 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3343 5372 a 3343 5372 a
 tx@Dict begin NAngle  RotBegin  end
 3343 5372
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3343 5372 a
 tx@Dict begin RotEnd  end

3343 5372 a 3343 5372 a
 tx@Dict begin PutEnd  end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b1 InitNC { /AngleA 85.  def /AngleB 130.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343
5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b2 InitNC { /AngleA 100.  def /AngleB 130. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372 a 3343 5372 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@b3 InitNC { /AngleA 115.  def /AngleB 130. 
def 0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3343 5372
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 590 55
TeXDict begin 590 54 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(590)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FX(This)34 b(is)g(the)f(w)m(a)m(y)h(it)f(has)g
(b)s(een)h(done)f(in)h([LS05b])f(where)h(it)f(has)g(b)s(een)h(sho)m(wn)
g(that)f(this)g(op)s(eration)0 440 y(is)k(asso)s(ciativ)m(e)h(and)e
(preserv)m(es)k(correctness.)57 b(In)37 b([LS05b])f(it)g(has)h(also)g
(b)s(een)g(sho)m(wn)h(ho)m(w)f(sequen)m(t)0 560 y(calculus)46
b(deriv)-5 b(ations)46 b(are)f(translated)g(in)m(to)g(pro)s(of)f(nets.)
81 b(After)45 b(what)g(has)g(b)s(een)h(said)f(here,)k(it)0
681 y(migh)m(t)42 b(b)s(e)g(more)g(in)m(tuitiv)m(e)i(to)d(think)i(of)e
(them)h(as)g FU(\015ow)h(gr)-5 b(aphs)49 b FX([Bus91,)42
b(Car97])g(of)f(deriv)-5 b(ations)0 801 y(in)42 b FK(SKS)g
FX([BT01].)70 b(F)-8 b(rom)41 b(the)h(historical)g(p)s(ersp)s(ectiv)m
(e)i(it)e(should)g(b)s(e)g(men)m(tioned)h(that)e(the)h(basic)0
922 y(idea)31 b(of)f(the)h(simple)h(pro)s(of)e(nets)i(discussed)h(here)
e(app)s(eared)h(in)e(the)h(literature)h(already)f(in)g([And76])0
1042 y(as)39 b FU(matings)47 b FX(and)40 b(in)f([Bib81])g(as)h
FU(matrix)h(pr)-5 b(o)g(ofs)1868 1006 y FQ(15)1942 1042
y FX(,)41 b(and)e(that)g(this)h(idea)g(go)s(es)f(ev)m(en)i(bac)m(k)g
(to)e(the)0 1162 y FU(c)-5 b(oher)g(enc)g(e)34 b(gr)-5
b(aphs)40 b FX(of)32 b([KM71].)146 1283 y(If)43 b(w)m(e)h(no)m(w)f
(restrict)g(ourselv)m(es)i(to)e(pro)s(of)e(nets)j(with)f(only)g(t)m(w)m
(o)h(conclusions,)j(then)c(w)m(e)h(ha)m(v)m(e)0 1403
y(a)f(category)452 1367 y FQ(16)527 1403 y FX(:)64 b(the)43
b(ob)5 b(jects)45 b(are)d(the)i(form)m(ulae)f(and)g(the)h(arro)m(ws)f
FS(A)j FT(!)f FS(B)j FX(are)43 b(the)g(pro)s(of)f(nets)0
1523 y FS(P)35 b Fl(B)222 1498 y FX(\026)197 1523 y FS(A;)17
b(B)5 b FX(.)43 b(Arro)m(w)33 b(comp)s(osition)f(is)h(de\014ned)h(as)e
(ab)s(o)m(v)m(e,)h(and)g(the)f(iden)m(tities)i(are)f(the)f(trivial)h
(pro)s(of)0 1644 y(nets)39 b FS(P)g Fl(B)443 1619 y FX(\026)418
1644 y FS(A;)17 b(A)p FX(.)59 b(Let)38 b(us)h(call)f(this)h(category)f
FP(SNet)p FX(\()p FC(A)23 b FX(\))38 b(where)h FC(A)61
b FX(is)38 b(the)h(set)f(of)g(prop)s(ositional)0 1764
y(v)-5 b(ariables)33 b(from)g(whic)m(h)h(w)m(e)f(started.)0
1949 y FJ(9.2.)k(Theorem.)30 b FU(The)35 b(c)-5 b(ate)g(gory)34
b FP(SNet)p FX(\()p FC(A)23 b FX(\))35 b FU(is)f(a)h
FK(B5)o FU(-c)-5 b(ate)g(gory)35 b(that)g(is)g(\015at)g(and)g(c)-5
b(ontr)g(actible.)0 2123 y FJ(Pr)n(oof.)24 b FX(The)i(maps)36
b(^)-58 b FS(\013)t FX(,)32 b(^)-54 b FS(\033)5 b FX(,)36
b(^)-58 b FS(\045)t FX(,)1156 2097 y(^)1152 2123 y FS(\025)t
FX(,)27 b FK(s)t FX(,)g FK(m)5 b FX(,)27 b(\005)t(,)g(and)f(\001)k(are)
c(giv)m(en)h(b)m(y)g(the)f(ob)m(vious)h(nets.)42 b(W)-8
b(e)26 b(sho)m(w)h(here)0 2243 y(as)33 b(example)h(the)f(nets)g(for)f
FK(m)1102 2258 y FR(A;B)s(;C)q(;D)1386 2243 y FX(,)41
b(^)-58 b FS(\045)1495 2258 y FR(A)1553 2243 y FX(,)32
b(\005)1685 2207 y FR(A)1742 2243 y FX(,)h(and)g(\001)2073
2258 y FR(A)2163 2243 y FX(\(the)f(others)i(b)s(eing)f(similar,)g(cf.)
44 b([Str05]\):)358 2454 y
 tx@Dict begin tx@NodeDict begin {9.0 3.0 123.96744 61.98372 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 358 2454 a FX(\()413 2454
y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@nA 16 {InitRnode } NewNode end end
 413 2454 a FS(A)50 b FT(^)652 2454 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 9.53186 4.76593 4.09999 }
false /N@nB 16 {InitRnode } NewNode end end
 652 2454 a FS(B)22
b FX(\))50 b FT(_)g FX(\()1006 2454 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 9.26823 4.63411 4.09999 }
false /N@nC 16 {InitRnode } NewNode end end
 1006 2454 a FS(C)57
b FT(^)1249 2454 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 10.08214 5.04106 4.09999
} false /N@nD 16 {InitRnode } NewNode end end
 1249 2454 a FS(D)20 b FX(\))358 2815
y
 tx@Dict begin tx@NodeDict begin {9.0 3.0 123.96744 61.98372 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 358 2815 a FX(\()413 2815 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A 16 {InitRnode } NewNode end end
 413 2815 a FS(A)50 b FT(_)652
2815 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 9.26823 4.63411 4.09999 }
false /N@C 16 {InitRnode } NewNode end end
 652 2815 a FS(C)24 b FX(\))49 b FT(^)i FX(\()1004
2815 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 9.53186 4.76593 4.09999 }
false /N@B 16 {InitRnode } NewNode end end
 1004 2815 a FS(B)k FT(_)1249 2815 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 10.08214 5.04106 4.09999
} false /N@D 16 {InitRnode } NewNode end end
 1249 2815
a FS(D)20 b FX(\))1388 2815 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1388 2815 a 1388 2815 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nB /N@B InitNC { /AngleA -75.  def /AngleB 105.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.9  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.9 } ifelse def /ArrowPos 0.  def /loopNo 0.9
 1 gt {CurveLength 0.9  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end

1388 2815 a 1388 2815 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nC /N@C InitNC { /AngleA -105.  def /AngleB 75.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.9  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.9 } ifelse def /ArrowPos 0.  def /loopNo 0.9
 1 gt {CurveLength 0.9  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1388 2815 a 1388 2815 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nD /N@D InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1388
2815 a 1843 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 34.05807 17.02904 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1843 2463 a 1843 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@nA 16 {InitRnode } NewNode end end
 1843 2463
a FS(A)50 b FT(^)2082 2463 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@tt 16 {InitRnode } NewNode end end
 2082 2463 a FP(t)1948 2824
y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1948 2824 a 1948 2824 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A 16 {InitRnode } NewNode end end
 1948 2824 a FS(A)2021 2824
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A InitNC { /AngleA -75.  def /AngleB 105.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2021 2824 a 2581 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2581 2463 a 2581 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@nA 16 {InitRnode } NewNode end end
 2581
2463 a FS(A)2596 2824 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2596 2824 a 2596 2824 a
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@tt 16 {InitRnode } NewNode end end
 2596
2824 a FP(t)2639 2824 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@tt /N@tt InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2639 2824 a 2639 2824 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2639
2824 a 2639 2824 a
 tx@Dict begin NAngle  RotBegin  end
 2639 2824 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 2639 2824 a
 tx@Dict begin RotEnd  end
 2639 2824 a 2639 2824 a
 tx@Dict begin PutEnd  end
 2639
2824 a 3229 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 3229 2463 a 3229 2463 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@nA 16 {InitRnode } NewNode end end
 3229 2463
a FS(A)3109 2824 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 37.61632 18.80815 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 3109 2824 a 3109 2824 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A1 16 {InitRnode } NewNode end end
 3109 2824
a FS(A)g FT(^)3348 2824 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A2 16 {InitRnode } NewNode end end
 3348 2824 a FS(A)3422 2824
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A1 InitNC { /AngleA -105.  def /AngleB 75.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.9  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.9 } ifelse def /ArrowPos 0.  def /loopNo 0.9
 1 gt {CurveLength 0.9  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3422 2824 a 3422 2824 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A2 InitNC { /AngleA -75.  def /AngleB 105.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.9  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.9 } ifelse def /ArrowPos 0.  def /loopNo 0.9
 1 gt {CurveLength 0.9  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3422 2824 a 0 3017 a FX(In)32
b(these)h(dra)m(wings)g(the)f(b)s(old)f(links)i(b)s(et)m(w)m(een)h
(form)m(ulae)e(represen)m(t)i(bundles)f(of)e(sev)m(eral)i(links,)h(one)
0 3137 y(for)h(eac)m(h)i(leaf)f(of)f(the)i(form)m(ula)f(tree.)53
b(Note)36 b(that)g(the)g(arro)m(ws)h(ha)m(v)m(e)g(to)e(ha)m(v)m(e)j
(the)e(righ)m(t)g(direction,)0 3258 y(and)d(that)f(there)h(are)g(no)f
(links)i(connecting)g FP(f)43 b FX(and)33 b FP(t)p FX(.)43
b(There)34 b(are)e(four)g(cases:)575 3454 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 575 3454
a 575 3454 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@nA 16 {InitRnode } NewNode end end
 575 3454 a FS(A)575 3815 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 575 3815 a 575
3815 a
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A 16 {InitRnode } NewNode end end
 575 3815 a FS(A)648 3815 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 648 3815 a 1099 3625
a Fe(;)1649 3441 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1649 3441 a 1649 3441 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@nA 16 {InitRnode } NewNode end end
 1649 3441
a FS(a)1649 3802 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1649 3802 a 1649 3802 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@A 16 {InitRnode } NewNode end end
 1649 3802
a FS(a)1700 3802 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1700 3802 a 2155 3448 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2155 3448
a 2155 3448 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@A 16 {InitRnode } NewNode end end
 2155 3448 a 1 w FX(\026)-50 b FS(a)2155
3809 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2155 3809 a 2155 3809 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@nA 16 {InitRnode } NewNode end end
 2155 3809 a 1 w FX(\026)g
FS(a)2206 3809 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nA /N@A InitNC { /AngleA 90.  def /AngleB -90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2206 3809 a 2662 3451 a
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2662 3451 a
2662 3451 a
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@nA 16 {InitRnode } NewNode end end
 2662 3451 a FP(t)2662 3812 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2662 3812 a
2662 3812 a
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@A 16 {InitRnode } NewNode end end
 2662 3812 a FP(t)2705 3812 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@A /N@A InitNC { /AngleA 125.  def
/AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2705 3812 a
2705 3812 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2705 3812 a 2705 3812 a
 tx@Dict begin NAngle  RotBegin  end
 2705 3812 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2705 3812 a
 tx@Dict begin RotEnd  end
 2705 3812 a 2705
3812 a
 tx@Dict begin PutEnd  end
 2705 3812 a 3160 3454 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 3160 3454 a 3160 3454
a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@A 16 {InitRnode } NewNode end end
 3160 3454 a FP(f)3160 3815 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 3160 3815 a 3160 3815
a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@nA 16 {InitRnode } NewNode end end
 3160 3815 a FP(f)3205 3815 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@A /N@A InitNC { /AngleA -55.  def
/AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3205 3815 a 3205 3815
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3205 3815 a 3205 3815 a
 tx@Dict begin NAngle  RotBegin  end
 3205 3815 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3205 3815 a
 tx@Dict begin RotEnd  end
 3205 3815 a 3205 3815 a
 tx@Dict begin PutEnd  end
 3205
3815 a 3607 3625 a FX(\(53\))p 0 TeXcolorgray 0 3908
600 4 v 79 3970 a FO(15)149 4000 y FZ(Note,)36 b(ho)n(w)n(ev)n(er,)d
(that)h(there)g(is)f(a)g(subtle)i(but)f(crucial)f(di\013erence)g(b)r
(et)n(w)n(een)h(our)f(simple)h(nets)g(and)f(the)i(w)n(ork)0
4099 y(of)g([And76,)f(Bib81]:)51 b(in)35 b(this)g(early)f(w)n(ork)f
(links)i(b)r(et)n(w)n(een)g(atoms)f(in)h(a)g(conjunction)g(relation)f
(w)n(ere)g(not)g(allo)n(w)n(ed)0 4199 y(\(b)r(ecause)29
b(they)h(are)f(irrelev)-5 b(an)n(t)28 b(for)h(correctness\),)g(but)h
(these)f(links)h(are)e(crucial)h(for)g(obtaining)g(an)g(asso)r(ciativ)n
(e)f(cut)0 4299 y(elimination)g(op)r(eration)e(\(see)i([LS05b]\).)79
4368 y FO(16)149 4398 y FZ(Without)h(the)f(restriction)e(to)i(t)n(w)n
(o)f(form)n(ulae)f(w)n(e)h(w)n(ould)h(obtain)f(a)g(p)r(olycategory)f
([Lam69,)g(Sza75].)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 591 56
TeXDict begin 591 55 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(591)p 0 TeXcolorgray
0 314 a(It)25 b(is)g(an)g(easy)h(exercise)i(to)c(c)m(hec)m(k)j(that)e
(all)g(the)g(equations)i(demanded)f(b)m(y)g(the)f(de\014nitions)i(do)e
(indeed)0 434 y(hold.)44 b(W)-8 b(e)33 b(sho)m(w)g(here)h(only)f(the)g
(case)g(of)f(the)h(con)m(tractibilit)m(y)i(axiom)e(\(47\))o(:)875
1052 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 875 1052 a FP(t)671 1413 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 54.44951 27.22475 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 671 1413 a 671 1413
a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na1 16 {InitRnode } NewNode end end
 671 1413 a 697 1388 a FX(\026)671 1413 y FS(A)120 b
FT(_)1050 1413 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a1 16 {InitRnode } NewNode end end
 1050 1413 a FS(A)1123 1413 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 2.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1123 1413
a 1123 1413 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1123 1413 a 1123 1413 a
 tx@Dict begin NAngle  RotBegin  end
 1123 1413 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1123 1413 a
 tx@Dict begin RotEnd  end
 1123 1413 a 1123
1413 a
 tx@Dict begin PutEnd  end
 1123 1413 a 1574 1226 a FX(=)2583 631 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.61665 }
false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2583 631
a FP(t)2448 932 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 37.61632 18.80815 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2448 932 a 2448 932 a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na1 16 {InitRnode } NewNode end end
 2448 932 a 2474
906 a FX(\026)2448 932 y FS(A)50 b FT(_)2687 932 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a1 16 {InitRnode } NewNode end end
 2687
932 a FS(A)2100 1232 y
 tx@Dict begin tx@NodeDict begin {9.81107 3.0 121.50993 60.75496 3.61665
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2100 1232 a FX(\()2155 1232 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na21 16 {InitRnode } NewNode end end

2155 1232 a 2180 1207 a FX(\026)2155 1232 y FS(A)f FT(_)2394
1232 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a21 16 {InitRnode } NewNode end end
 2394 1232 a FS(A)16 b FX(\))50 b FT(^)g FX(\()2742
1232 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na22 16 {InitRnode } NewNode end end
 2742 1232 a 2768 1207 a FX(\026)2742 1232 y FS(A)g
FT(_)2981 1232 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a22 16 {InitRnode } NewNode end end
 2981 1232 a FS(A)17 b FX(\))2154 1533
y
 tx@Dict begin tx@NodeDict begin {9.81107 3.0 108.3712 54.1856 3.61665
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 2154 1533 a 2154 1533 a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na31 16 {InitRnode } NewNode end end
 2154 1533 a 2180 1508 a FX(\026)2154
1533 y FS(A)50 b FT(_)h FX(\()2449 1533 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a31 16 {InitRnode } NewNode end end
 2449 1533 a
FS(A)e FT(^)2687 1533 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na32 16 {InitRnode } NewNode end end
 2687 1533 a 2713 1508 a FX(\026)2687
1533 y FS(A)17 b FX(\))50 b FT(_)2981 1533 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a32 16 {InitRnode } NewNode end end
 2981 1533
a FS(A)2432 1834 y
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 41.61626 20.80812 3.61665
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 2432 1834 a 2432 1834 a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@na4 16 {InitRnode } NewNode end end
 2432 1834
a 2457 1809 a FX(\026)2432 1834 y FS(A)66 b FT(_)2704
1834 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@a4 16 {InitRnode } NewNode end end
 2704 1834 a FS(A)2777 1834 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 2.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2777 1834 a 2777
1834 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2777 1834 a 2777 1834 a
 tx@Dict begin NAngle  RotBegin  end
 2777 1834 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2777 1834 a
 tx@Dict begin RotEnd  end
 2777 1834 a 2777
1834 a
 tx@Dict begin PutEnd  end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na21 /N@na1 InitNC { /AngleA 60.  def /AngleB -120.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na22 /N@na1 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a21 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.9  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.9 } ifelse def /ArrowPos 0.  def /loopNo 0.9
 1 gt {CurveLength 0.9  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a22 InitNC { /AngleA -60.  def /AngleB 120.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777
1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na31 /N@na21 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na32 /N@na22 InitNC { /AngleA 75.  def /AngleB -105.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834
a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a31 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a32 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777
1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a31 /N@na32 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 2.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2777 1834 a 2777 1834
a
 tx@Dict begin NAngle  RotBegin  end
 2777 1834 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2777 1834 a
 tx@Dict begin RotEnd  end
 2777 1834 a 2777 1834 a
 tx@Dict begin PutEnd  end
 2777 1834 a 2777
1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na31 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 2777 1834 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  2.0 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a32 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2777 1834 a 0 2012 a FX(As)33
b(ab)s(o)m(v)m(e,)h(the)f(b)s(old)f(links)i(represen)m(t)h(bundles)f
(of)e(normal)g(links:)355 2169 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 355 2169 a 129 2470
a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 54.44951 27.22475 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 129 2470 a 129 2470 a
 tx@Dict begin tx@NodeDict begin {9.81107 0.0 8.80824 4.40411 4.90553
} false /N@nA 16 {InitRnode } NewNode end end
 129 2470 a 154 2445 a FX(\026)129
2470 y FS(A)120 b FT(_)508 2470 y
 tx@Dict begin tx@NodeDict begin {8.2 0.0 8.80824 4.40411 4.09999 }
false /N@A 16 {InitRnode } NewNode end end
 508 2470 a FS(A)581
2470 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nA /N@A InitNC { /AngleA 70.  def
/AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 2.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 581 2470 a 581 2470 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 581 2470 a 581 2470 a
 tx@Dict begin NAngle  RotBegin  end
 581
2470 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 2.0 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 581 2470
a
 tx@Dict begin RotEnd  end
 581 2470 a 581 2470 a
 tx@Dict begin PutEnd  end
 581 2470 a 738 2329 a Fe(;)1200
2169 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1200 2169 a 996 2470 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 49.16899 24.58449 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 996 2470 a 996 2470 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@nA 16 {InitRnode } NewNode end end
 996
2470 a 1 w FX(\026)-50 b FS(a)120 b FT(_)1353 2470 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@A 16 {InitRnode } NewNode end end

1353 2470 a FS(a)1404 2470 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nA /N@A InitNC { /AngleA 70.  def
/AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1404 2470 a 1404 2470 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end

1404 2470 a 1404 2470 a
 tx@Dict begin NAngle  RotBegin  end
 1404 2470 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 1404 2470 a
 tx@Dict begin RotEnd  end
 1404 2470 a 1404 2470 a
 tx@Dict begin PutEnd  end
 1404
2470 a 1868 2169 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1868 2169 a 1664 2470 a
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 49.16899 24.58449 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1664 2470
a 1664 2470 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@A 16 {InitRnode } NewNode end end
 1664 2470 a FS(a)g FT(_)2021 2470 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@nA 16 {InitRnode } NewNode end end
 2021
2470 a 1 w FX(\026)-50 b FS(a)2072 2470 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@nA /N@A InitNC { /AngleA 110.  def
/AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2072 2470 a
2072 2470 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2072 2470 a 2072 2470 a
 tx@Dict begin NAngle  RotBegin  end
 2072 2470 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2072 2470 a
 tx@Dict begin RotEnd  end
 2072 2470 a 2072
2470 a
 tx@Dict begin PutEnd  end
 2072 2470 a 2529 2169 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 2529 2169 a 2333 2470
a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 47.4372 23.7186 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2333 2470 a 2333 2470 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@nA 16 {InitRnode } NewNode end end
 2333 2470 a FP(f)130 b FT(_)2683
2470 y
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@A 16 {InitRnode } NewNode end end
 2683 2470 a FP(t)2726 2470 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@A /N@A InitNC { /AngleA 125.  def
/AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2726 2470 a 2726
2470 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2726 2470 a 2726 2470 a
 tx@Dict begin NAngle  RotBegin  end
 2726 2470 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2726 2470 a
 tx@Dict begin RotEnd  end
 2726 2470 a 2726
2470 a
 tx@Dict begin PutEnd  end
 2726 2470 a 3281 2169 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 3281 2169 a 3084 2470
a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 47.4372 23.7186 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 3084 2470 a 3084 2470 a
 tx@Dict begin tx@NodeDict begin {7.61905 0.0 5.25 2.625 3.80952 }
false /N@A 16 {InitRnode } NewNode end end
 3084 2470 a FP(t)119 b FT(_)3433
2470 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 5.35417 2.67708 4.16666
} false /N@nA 16 {InitRnode } NewNode end end
 3433 2470 a FP(f)3478 2470 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@A /N@A InitNC { /AngleA 125.  def
/AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub
Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def
/ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED
tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3
ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1
y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul
cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by
sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul
add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add
ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul
by t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1
roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def
0 100 { /t0 u def /u u du add def /t u def getdL add } repeat } def
/GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul}
ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add
def /t u def /sum getdL sum add def sum ende gt {exit} if } loop u
} def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos
0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse
def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3478 2470 a 3478
2470 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3478 2470 a 3478 2470 a
 tx@Dict begin NAngle  RotBegin  end
 3478 2470 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 3478 2470 a
 tx@Dict begin RotEnd  end
 3478 2470 a 3478
2470 a
 tx@Dict begin PutEnd  end
 3478 2470 a 3607 2329 a FX(\(54\))0 2652 y(The)25
b(transp)s(osition)f(\()p FS(?)p FX(\))f(of)g(pro)s(of)g(nets)i(is)f
(obtained)g(b)m(y)g(simply)i(dra)m(wing)e(the)g(net)g(in)g(the)g
(transp)s(osed)0 2773 y(w)m(a)m(y)-8 b(,)34 b(as)f(it)g(has)g(b)s(een)h
(done)f(with)g(\(48\))f(and)h(\(50\).)44 b(That)33 b(this)h(has)f(the)g
(desired)h(prop)s(erties)g(should)0 2893 y(b)s(e)f(clear)g(from)f(insp)
s(ecting)j(\(53\))d(and)h(\(54\))o(.)p 3738 2893 42 42
v 0 3078 a FJ(9.3.)k(Theorem.)30 b FU(The)35 b(c)-5 b(ate)g(gory)34
b FP(SNet)p FX(\()p FC(A)23 b FX(\))35 b FU(is)f(gr)-5
b(aphic)g(al.)0 3252 y FJ(Pr)n(oof.)30 b FX(T)-8 b(rivial)33
b(\(cf.)g([LS05a]\).)p 3738 3252 V 146 3422 a(Note)f(that)g(in)g
FP(SNet)p FX(\()p FC(A)22 b FX(\))32 b(the)g(sum)h FS(f)f
FX(+)20 b FS(g)15 b FX(:)33 b FS(A)28 b FT(!)f FS(B)37
b FX(of)31 b(t)m(w)m(o)i(pro)s(ofs)e FS(f)5 b(;)17 b(g)e
FX(:)33 b FS(A)28 b FT(!)f FS(B)37 b FX(is)32 b(obtained)0
3542 y(b)m(y)37 b(taking)e(the)i(\(set-theoretic\))f(union)g(of)g(the)g
(t)m(w)m(o)g(corresp)s(onding)h(linkings.)54 b(Hence,)38
b FP(SNet)o FX(\()p FC(A)23 b FX(\))0 3663 y(is)30 b(idemp)s(oten)m(t,)
i(and)d(w)m(e)i(ha)m(v)m(e)g(that)e FS(f)38 b FT(\024)28
b FS(g)33 b FX(i\013)d(the)f(linking)i(for)e FS(f)40
b FX(is)30 b(a)f(subset)i(of)e(the)h(linking)h(for)e
FS(g)t FX(.)0 3848 y FJ(9.4.)37 b(Theorem.)30 b FU(The)35
b(c)-5 b(ate)g(gory)34 b FP(SNet)p FX(\()p FC(A)23 b
FX(\))35 b FU(is)f(an)h FK(LK)p FU(-c)-5 b(ate)g(gory.)0
4022 y FJ(Pr)n(oof.)34 b FX(Let)40 b FS(f)5 b(;)17 b(g)e
FX(:)35 b FS(A)40 b FT(!)g FS(B)45 b FX(b)s(e)40 b(t)m(w)m(o)g(maps)h
(in)f FP(SNet)o FX(\()p FC(A)23 b FX(\).)65 b(Let)40
b FS(f)51 b FX(b)s(e)40 b(giv)m(en)h(b)m(y)f(the)h(pro)s(of)e(net)0
4142 y FS(P)h Fl(B)233 4117 y FX(\026)207 4142 y FS(A;)17
b(B)44 b FX(and)39 b FS(g)j FX(b)s(e)d(giv)m(en)h(b)m(y)g
FS(Q)27 b Fl(B)1503 4117 y FX(\026)1477 4142 y FS(A;)17
b(B)5 b FX(.)63 b(Then,)41 b(b)m(y)f(what)g(has)f(b)s(een)h(said)f(ab)s
(o)m(v)m(e,)j(w)m(e)e(de\014ne)0 4262 y FS(f)e Fl(4)29
b FS(g)35 b FX(i\013)d FS(Q)c FT(\022)g FS(P)14 b FX(.)43
b(After)32 b(Theorem)h(9.2)f(it)g(only)h(remains)g(to)f(sho)m(w)h(that)
f(equation)h(\()p FK(LK-)p FX(\001)s(\))f(holds)0 4383
y(for)f(all)h FS(f)11 b FX(.)43 b(But)32 b(this)h(follo)m(ws)f
(immediately)i(from)e(the)g(de\014nition)h(of)e(comp)s(osition)i(of)e
(pro)s(of)g(nets.)p 3738 4383 V 146 4553 a(It)h(should)g(b)s(e)g
(clear,)g(that)f(the)h(category)g FP(SNet)o FX(\()p FC(A)23
b FX(\))31 b(is)h(quite)h(a)e(degenerate)i(mo)s(del)e(for)g(pro)s(ofs)0
4673 y(of)h(Bo)s(olean)h(prop)s(ositional)f(logic.)44
b(The)33 b(size)h(of)f(a)f(pro)s(of)g(net)h(is)g(at)f(most)h(quadratic)
h(in)e(the)i(size)f(of)0 4794 y(the)38 b(sequen)m(t.)62
b(This)39 b(means)g(in)f(particular,)i(that)e(the)g(information)g(ho)m
(w)h(often)e(a)h(certain)h(link)f(is)0 4914 y(used)g(in)g(a)e(pro)s(of)
h(is)g(not)g(presen)m(t)i(in)e(the)h(pro)s(of)e(net.)58
b(F)-8 b(or)36 b(this)i(reason)f(w)m(e)i(will)e(no)m(w)h(allo)m(w)g
(more)0 5034 y(than)32 b(one)g(link)h(b)s(et)m(w)m(een)h(a)e(pair)f(of)
h(complemen)m(tary)i(atoms.)2328 4998 y FQ(17)2446 5034
y FX(But)e(as)g(sho)m(wn)i(in)e([LS05b],)g(doing)p 0
TeXcolorgray 0 5152 600 4 v 79 5214 a FO(17)149 5244
y FZ(In)24 b(terms)e(of)h([LS05b])g(this)g(means)g(stepping)g(from)f
(the)i(Bo)r(olean)e(semiring)g(of)h(w)n(eigh)n(ts)f(to)h(the)g(natural)
g(n)n(um)n(b)r(ers)0 5343 y(semiring)k(of)g(w)n(eigh)n(ts.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 592 57
TeXDict begin 592 56 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(592)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 314 a FX(this)44 b(naiv)m(ely)g(means)g(losing)f
(con\015uence)i(of)d(cut)i(elimination)g(via)f(path)g(comp)s(osition.)
75 b(I.e.,)46 b(w)m(e)0 434 y(do)36 b(not)g(get)h(a)f(category)g(with)h
(asso)s(ciativ)m(e)h(arro)m(w)e(comp)s(osition.)56 b(A)36
b(p)s(ossible)i(solution)f(has)f(b)s(een)0 555 y(suggested)e(in)f
([Str05]:)0 737 y FJ(9.5.)h(Definition.)28 b FU(A)n(n)39
b FX(extended)32 b(prenet)h FU(c)-5 b(onsists)32 b(of)g(a)g(se)-5
b(quent)32 b FX(\000)p FU(,)h(a)f(\014nite)g(set)h FS(K)39
b FU(of)53 b FX(anc)m(hors)p FU(,)0 857 y(an)44 b FX(anc)m(hor)35
b(lab)s(eling)i FS(`)11 b FX(:)34 b FS(K)k FT(!)30 b
FC(A)23 b FU(,)37 b(and)f(a)h(linking)e(\(which)h(is)g(now)g(no)h
(longer)f(a)g(binary)h(r)-5 b(elation,)0 977 y(but)35
b(a)g(binary)g(function)f(to)h(the)g(natur)-5 b(als\))35
b FS(P)24 b FX(:)34 b(\()p FC(L)19 b FX(\(\000\))j FT([)g
FS(K)7 b FX(\))23 b FT(\002)f FX(\()p FC(L)d FX(\(\000\))j
FT([)h FS(K)7 b FX(\))28 b FT(!)f Fi(N)p FU(,)35 b(such)f(that)p
0 TeXcolorgray 75 1163 a(\(i\))p 0 TeXcolorgray 48 w(for)h(every)g
FS(i)27 b FT(2)i FC(L)19 b FX(\(\000\))34 b FU(with)h
FS(`)p FX(\()p FS(i)p FX(\))28 b(=)f FP(t)35 b FU(we)f(have)h
FS(P)14 b FX(\()p FS(i;)j(i)p FX(\))27 b(=)g(1)p FU(,)p
0 TeXcolorgray 45 1361 a(\(ii\))p 0 TeXcolorgray 48 w(for)35
b(every)g FS(k)30 b FT(2)e FS(K)42 b FU(we)35 b(have)982
1483 y Fh(X)878 1699 y FR(i)p FI(2)p Fv(L)12 b FQ(\(\000\))p
FI([)p FR(K)1246 1578 y FS(P)i FX(\()p FS(i;)j(k)s FX(\))27
b FT(\025)h FX(2)200 b FU(and)2389 1483 y Fh(X)2281 1699
y FR(j)t FI(2)p Fv(L)12 b FQ(\(\000\))p FI([)p FR(K)2658
1578 y FS(P)i FX(\()p FS(k)s(;)j(j)6 b FX(\))27 b FT(\025)h
FX(2)p 0 TeXcolorgray 15 1926 a FU(\(iii\))p 0 TeXcolorgray
48 w(if)35 b FS(P)14 b FX(\()p FS(i;)j(j)6 b FX(\))27
b FT(\025)h FX(1)p FU(,)34 b(then)h(one)f(of)h(the)g(fol)5
b(lowing)33 b(c)-5 b(ases)34 b(must)h(hold:)p 0 TeXcolorgray
349 2124 a FT(\017)p 0 TeXcolorgray 49 w FS(i)28 b FX(=)f
FS(j)41 b FU(and)34 b FS(`)p FX(\()p FS(i)p FX(\))28
b(=)g FP(t)34 b FU(and)g FS(P)14 b FX(\()p FS(i;)j(i)p
FX(\))28 b(=)f(1)p FU(,)35 b(or)p 0 TeXcolorgray 349
2280 a FT(\017)p 0 TeXcolorgray 49 w FS(i)h FT(6)p FX(=)g
FS(j)45 b FU(and)39 b FS(i)d FT(2)g FC(L)19 b FX(\(\000\))39
b FU(and)g FS(j)j FT(2)36 b FC(L)19 b FX(\(\000\))26
b FT([)g FS(K)46 b FU(and)39 b FS(`)p FX(\()p FS(i)p
FX(\))d(=)h(\026)-50 b FS(a)39 b FU(and)g FS(`)p FX(\()p
FS(j)6 b FX(\))35 b(=)h FS(a)k FU(for)f(some)448 2400
y FS(a)28 b FT(2)g FC(A)22 b FU(,)35 b(or)p 0 TeXcolorgray
349 2556 a FT(\017)p 0 TeXcolorgray 49 w FS(i)28 b FT(6)p
FX(=)f FS(j)41 b FU(and)34 b FS(i)28 b FT(2)g FS(K)42
b FU(and)35 b FS(j)e FT(2)28 b FC(L)20 b FX(\(\000\))i
FT([)g FS(K)42 b FU(and)34 b FS(`)p FX(\()p FS(i)p FX(\))28
b(=)g FS(`)p FX(\()p FS(j)6 b FX(\))27 b(=)h FS(a)35
b FU(for)f(some)g FS(a)28 b FT(2)g FC(A)23 b FU(.)146
2754 y FX(As)k(b)s(efore,)g(ev)m(ery)g FP(t)e FX(has)h(to)g(b)s(e)f
(link)m(ed)j(to)d(itself.)42 b(That)26 b(w)m(e)h(allo)m(w)f(only)g(one)
g(and)f(not)h(man)m(y)g(suc)m(h)0 2874 y(links)38 b(is)f(due)g(to)f
(Lemma)h(5.11)e(\(whic)m(h)j(is)f(a)f(consequence)k(of)c(ha)m(ving)h
(prop)s(er)f(units,)j(cf.)d([Str05]\).)0 2995 y(But)f(con)m(trary)g(to)
f(what)h(w)m(e)h(had)f(b)s(efore,)g(w)m(e)h(do)e(no)m(w)h(allo)m(w)g
(not)g(only)g(man)m(y)h(links)g(b)s(et)m(w)m(een)g(t)m(w)m(o)0
3115 y(atoms)28 b(but)g(also)g(\\non-direct")g(links)h(visiting)g(anc)m
(hors)f(on)g(their)g(w)m(a)m(y)-8 b(.)43 b(But)28 b(eac)m(h)h(anc)m
(hor)f(can)g(only)0 3235 y(serv)m(e)34 b(links)f(b)s(et)m(w)m(een)h
(atoms)e(of)g(the)g(same)h(name.)44 b(F)-8 b(urthermore,)33
b(an)f(anc)m(hor)g(m)m(ust)h(ha)m(v)m(e)h(at)d(least)0
3356 y(t)m(w)m(o)d(incoming)g(and)f(at)g(least)g(t)m(w)m(o)h(outgoing)f
(links.)43 b(Here)28 b(are)f(t)m(w)m(o)h(examples)h(of)d(extended)j
(prenets:)841 3809 y
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 841 3809 a 841 3809 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb2 16 {InitRnode } NewNode end end
 841 3809 a
FS(b)22 b FT(_)993 3809 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 993 3809 a FS(a)98 b(;)1283
3809 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 1283 3809 a 1 w FX(\026)-50 b FS(a)22 b FT(_)1445
3809 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 1445 3809 a FS(b)1139 4290 y
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1139 4290 a 1139
4290 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 2.66667 }
false /N@bb 16 {InitRnode } NewNode end end
 1139 4290 a FT(\017)841 4772 y
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 841 4772 a 841
4772 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 841 4772 a FS(b)g FT(^)993 4772 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 993 4772 a FS(a)98
b(;)1283 4772 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 1283 4772 a 1 w FX(\026)-50 b FS(a)22
b FT(^)1445 4772 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 1445 4772 a FS(b)1486 4772 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@bb InitNC { /AngleA -100.  def /AngleB 80.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486
4772 a 1486 4772 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@bb InitNC { /AngleA -80.  def /AngleB 100.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486 4772 a 1486 4772 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b1 InitNC { /AngleA -100.  def /AngleB 80.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486 4772
a 1486 4772 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b2 InitNC { /AngleA -80.  def /AngleB 100.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486 4772 a 1486 4772 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486 4772 a 1486
4772 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1486 4772 a 1486 4772 a
 tx@Dict begin NAngle  RotBegin  end
 1486 4772 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1486 4772 a
 tx@Dict begin RotEnd  end
 1486 4772 a 1486
4772 a
 tx@Dict begin PutEnd  end
 1486 4772 a 1486 4772 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1486 4772 a 1486 4772
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1486 4772 a 1486 4772 a
 tx@Dict begin NAngle  RotBegin  end
 1486 4772 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 1486 4772 a
 tx@Dict begin RotEnd  end
 1486 4772 a 1486 4772 a
 tx@Dict begin PutEnd  end
 1486
4772 a 1811 4290 a FX(and)2294 3532 y
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2294 3532 a 2294
3532 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb2 16 {InitRnode } NewNode end end
 2294 3532 a FS(b)g FT(_)2446 3532 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 2446 3532
a FS(a)98 b(;)2736 3532 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@a1 16 {InitRnode } NewNode end end
 2736 3532 a 1 w FX(\026)-50
b FS(a)22 b FT(_)2898 3532 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@nb1 16 {InitRnode } NewNode end end
 2898 3532 a FS(b)2617 3748
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-2-1
16 {InitRnode } NewNode end end
 2617 3748 a 2592 3965 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 3.61665 }
false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2592 3965 a 2592 3965 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 2.66667 }
false /N@bb 16 {InitRnode } NewNode end end
 2592
3965 a FT(\017)2617 4182 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-4-1
16 {InitRnode } NewNode end end
 2617 4182 a 2592 4398 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 3.61665 }
false /N@M-1-5-1 16 {InitRnode } NewNode end end
 2592
4398 a 2592 4398 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 2.66667 }
false /N@bbb 16 {InitRnode } NewNode end end
 2592 4398 a FT(\017)2617 4615 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.61665 } false /N@M-1-6-1
16 {InitRnode } NewNode end end
 2617
4615 a 2592 4832 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 3.61665 }
false /N@M-1-7-1 16 {InitRnode } NewNode end end
 2592 4832 a 2592 4832 a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 2.66667 }
false /N@aa 16 {InitRnode } NewNode end end
 2592 4832
a FT(\017)2294 5049 y
 tx@Dict begin tx@NodeDict begin {8.33331 2.33331 77.7576 38.8788 3.61665
} false /N@M-1-8-1 16 {InitRnode } NewNode end end
 2294 5049 a 2294 5049 a
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b1 16 {InitRnode } NewNode end end
 2294 5049
a FS(b)g FT(^)2446 5049 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 2446 5049 a FS(a)98 b(;)2736
5049 y
 tx@Dict begin tx@NodeDict begin {6.77774 0.0 6.16798 3.08398 3.38887
} false /N@na2 16 {InitRnode } NewNode end end
 2736 5049 a 1 w FX(\026)-50 b FS(a)22 b FT(^)2898
5049 y
 tx@Dict begin tx@NodeDict begin {8.33331 0.0 4.99576 2.49788 4.16666
} false /N@b2 16 {InitRnode } NewNode end end
 2898 5049 a FS(b)2939 5049 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@bbb InitNC { /AngleA -80.  def /AngleB 40.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939
5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb1 /N@bb InitNC { /AngleA -100.  def /AngleB 30.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nb2 /N@bb InitNC { /AngleA -80.  def /AngleB 150.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939 5049 a 2939 5049
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@bbb InitNC { /AngleA -60.  def /AngleB 60.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@bbb InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@bbb InitNC { /AngleA -120.  def /AngleB 120. 
def 1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939
5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bbb /N@b1 InitNC { /AngleA -100.  def /AngleB 80.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bbb /N@b2 InitNC { /AngleA -80.  def /AngleB 100.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049
a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2939 5049 a 2939
5049 a
 tx@Dict begin NAngle  RotBegin  end
 2939 5049 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2939 5049 a
 tx@Dict begin RotEnd  end
 2939 5049 a 2939 5049 a
 tx@Dict begin PutEnd  end
 2939 5049 a 2939
5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -90.  def /AngleB -90.  def
1.3  1.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -110.  def /AngleB -70. 
def 1.8  1.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2939 5049 a 2939 5049
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@aa InitNC { /AngleA 70.  def /AngleB 0.  def
1.2  1.2  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.3  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.3 } ifelse def /ArrowPos 0.  def /loopNo 0.3
 1 gt {CurveLength 0.3  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@aa InitNC { /AngleA 110.  def /AngleB -30.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939 5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@aa /N@a2 InitNC { /AngleA -150.  def /AngleB 70.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939
5049 a 2939 5049 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@aa /N@a2 InitNC { /AngleA 180.  def /AngleB 110.  def
1.2  1.2  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2939 5049 a 3607 4290 a FX(\(55\))0
5225 y(The)44 b(lab)s(ellings)h(of)e(the)g(anc)m(hors)i(are)e(not)g
(sho)m(wn)i(b)s(ecause)g(they)f(are)g(clear)f(from)h(the)f(linkings.)0
5345 y(Observ)m(e)35 b(that)e(while)h(in)g(a)f(simple)h(pro)s(of)f(net)
g(the)h(n)m(um)m(b)s(er)h(of)d(links)j(is)f(at)f(most)g(quadratic)h(in)
g(the)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 593 58
TeXDict begin 593 57 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(593)p 0 TeXcolorgray
0 314 a(size)44 b(of)f(the)h(sequen)m(t,)k(in)c(an)f(extended)i(net)f
(things)f(can)h(get)f(arbitrarily)h(large,)i(as)d(the)h(second)0
434 y(example)34 b(in)f(\(55\))f(sho)m(ws.)146 555 y(The)j(correctness)
h(of)d(extended)j(nets)f(is)f(de\014ned)h(similarly)g(as)f(for)f
(simple)i(nets.)48 b(But)34 b(no)m(w)h(the)0 675 y(condition)h(is)f
(not)g(that)g(ev)m(ery)i(pruning)f(m)m(ust)g(con)m(tain)g(a)f(link,)h
(but)g(it)f(m)m(ust)h(con)m(tain)g(a)f(complete)0 796
y(path)g(from)h(one)f(leaf)h(to)f(another)g(\(in)h(a)f(conjunctiv)m(e)j
(pruning)e(the)f(anc)m(hors)i(remain)f(and)f(b)s(eha)m(v)m(e)0
916 y(as)i(big)f(disjunctions\).)57 b(A)37 b(correct)g(extended)i
(prenet)e(is)g(an)g FU(extende)-5 b(d)37 b(pr)-5 b(o)g(of)38
b(net)p FX(.)55 b(The)38 b(examples)0 1036 y(in)33 b(\(55\))f(are)g
(extended)j(pro)s(of)d(nets.)0 1221 y FJ(9.6.)26 b(Cut)h(elimina)-7
b(tion)27 b(f)n(or)g(extended)f(nets.)19 b FU(The)24
b(c)-5 b(omp)g(osition)24 b(of)h(two)g(extende)-5 b(d)25
b(pr)-5 b(o)g(of)24 b(nets)0 1341 y(is)36 b(again)g(de\014ne)-5
b(d)35 b(via)h(cut)h(elimination,)e(which)h(c)-5 b(an)36
b(again)f(b)-5 b(e)36 b(understo)-5 b(o)g(d)36 b(as)g(p)-5
b(ath)36 b(c)-5 b(omp)g(osition.)0 1462 y(But)32 b(this)g(time)g(we)g
(have)f(to)h(b)-5 b(e)32 b(c)-5 b(ar)g(eful)32 b(to)g(tr)-5
b(e)g(at)33 b(the)f(anchors)f(c)-5 b(orr)g(e)g(ctly)32
b(if)g(we)f(want)h(a)g(wel)5 b(l-de\014ne)-5 b(d)0 1582
y(and)34 b(asso)-5 b(ciative)34 b(c)-5 b(omp)g(osition.)43
b(T)-7 b(o)34 b(b)-5 b(e)35 b(formal)5 b(ly)34 b(pr)-5
b(e)g(cise,)34 b(we)h(de\014ne)e(it)j(in)e(two)h(steps:)p
0 TeXcolorgray 0 1786 a(1.\))p 0 TeXcolorgray 48 w(R)-5
b(eplac)g(e)31 b(every)g(le)-5 b(af)31 b(of)h(the)f(cut)h(formula)f(by)
h(an)f(anchor,)g(while)g(the)h(links)f(r)-5 b(emain)30
b(unchange)-5 b(d.)p 0 TeXcolorgray 0 1989 a(2.\))p 0
TeXcolorgray 48 w(R)g(emove)32 b(al)5 b(l)33 b(anchors)e(that)j(have)e
(no)g(right)h(to)g(exist)f(\(i.e.,)h(that)g(have)f(less)g(than)h(two)f
(inc)-5 b(oming)168 2109 y(or)30 b(outgoing)f(links\).)42
b(This)29 b(is)h(done)f(by)h(r)-5 b(ep)g(e)g(ate)g(d)5
b(ly)29 b(p)-5 b(erforming)29 b(the)g(fol)5 b(lowing)29
b(r)-5 b(e)g(duction)29 b(steps)168 2230 y(until)35 b(no)g(further)g(r)
-5 b(e)g(duction)35 b(is)f(p)-5 b(ossible:)p 0 TeXcolorgray
284 2433 a FT(\017)p 0 TeXcolorgray 49 w FU(R)g(emove)34
b(every)g(anchor)g(without)h(any)f(outc)-5 b(oming)34
b(links,)g(and)g(r)-5 b(emove)34 b(al)5 b(l)34 b(links)g(c)-5
b(oming)383 2554 y(into)35 b(it.)p 0 TeXcolorgray 284
2716 a FT(\017)p 0 TeXcolorgray 49 w FU(R)-5 b(emove)38
b(every)h(anchor)f(without)i(any)f(inc)-5 b(oming)37
b(links,)i(and)g(r)-5 b(emove)38 b(al)5 b(l)39 b(links)f(c)-5
b(oming)383 2836 y(out)35 b(of)g(it.)p 0 TeXcolorgray
284 2998 a FT(\017)p 0 TeXcolorgray 49 w FU(If)i(ther)-5
b(e)37 b(is)h(an)f(anchor)g FS(k)j FU(with)d(only)h(one)f(link)g(c)-5
b(oming)36 b(out,)j(i.e.,)e(ther)-5 b(e)38 b(is)f(exactly)h(one)383
3118 y FS(i)28 b FT(2)g FC(L)19 b FX(\(\000\))13 b FT([)g
FS(K)39 b FU(with)31 b FS(P)14 b FX(\()p FS(k)s(;)j(i)p
FX(\))27 b(=)g(1)p FU(,)32 b(and)e FS(P)14 b FX(\()p
FS(k)s(;)j(j)6 b FX(\))27 b(=)g(0)k FU(for)g(al)5 b(l)30
b FS(j)k FT(2)28 b FC(L)19 b FX(\(\000\))13 b FT([)g
FS(K)39 b FU(with)31 b FS(j)i FT(6)p FX(=)28 b FS(i)p
FU(,)383 3239 y(then)p 0 TeXcolorgray 461 3400 a FP({)p
0 TeXcolorgray 48 w FU(for)35 b(every)f FS(l)c FT(2)e
FC(L)19 b FX(\(\000\))j FT([)f FS(K)42 b FU(incr)-5 b(e)g(ase)34
b(the)g(value)h(of)f FS(P)14 b FX(\()p FS(l)r(;)j(i)p
FX(\))34 b FU(by)h FS(P)14 b FX(\()p FS(l)r(;)j(k)s FX(\))p
FU(,)33 b(i.e,)i(al)5 b(l)34 b(links)565 3521 y(going)g(into)h
FS(k)j FU(ar)-5 b(e)35 b(r)-5 b(e)g(dir)g(e)g(cte)g(d)34
b(to)h FS(i)p FU(,)g(and)p 0 TeXcolorgray 461 3662 a
FP({)p 0 TeXcolorgray 48 w FU(r)-5 b(emove)34 b FS(k)s
FU(.)p 0 TeXcolorgray 284 3824 a FT(\017)p 0 TeXcolorgray
49 w FU(If)44 b(ther)-5 b(e)45 b(is)g(an)g(anchor)f FS(k)k
FU(with)d(only)g(one)g(link)f(going)g(in,)k(i.e.,)f(ther)-5
b(e)45 b(is)g(exactly)g(one)383 3944 y FS(i)28 b FT(2)g
FC(L)19 b FX(\(\000\))14 b FT([)g FS(K)39 b FU(with)31
b FS(P)14 b FX(\()p FS(i;)j(k)s FX(\))27 b(=)g(1)p FU(,)32
b(and)f FS(P)14 b FX(\()p FS(j;)j(k)s FX(\))27 b(=)g(0)k
FU(for)g(al)5 b(l)31 b FS(j)j FT(2)28 b FC(L)19 b FX(\(\000\))14
b FT([)g FS(K)39 b FU(with)31 b FS(j)i FT(6)p FX(=)28
b FS(i)p FU(,)383 4065 y(then)p 0 TeXcolorgray 461 4227
a FP({)p 0 TeXcolorgray 48 w FU(for)35 b(every)f FS(l)c
FT(2)e FC(L)19 b FX(\(\000\))j FT([)f FS(K)42 b FU(incr)-5
b(e)g(ase)34 b(the)g(value)h(of)f FS(P)14 b FX(\()p FS(i;)j(l)r
FX(\))34 b FU(by)h FS(P)14 b FX(\()p FS(k)s(;)j(l)r FX(\))p
FU(,)33 b(i.e,)i(al)5 b(l)34 b(links)565 4347 y(c)-5
b(oming)34 b(out)h(of)g FS(k)j FU(ar)-5 b(e)35 b(r)-5
b(eplac)g(e)g(d)33 b(by)j(links)e(c)-5 b(oming)33 b(out)j(of)e
FS(i)p FU(,)h(and)p 0 TeXcolorgray 461 4488 a FP({)p
0 TeXcolorgray 48 w FU(r)-5 b(emove)34 b FS(k)s FU(.)p
0 TeXcolorgray 284 4650 a FT(\017)p 0 TeXcolorgray 49
w FU(Set)h FS(P)14 b FX(\()p FS(k)s(;)j(k)s FX(\))27
b(=)g(0)35 b FU(for)g(al)5 b(l)34 b FS(k)d FT(2)d FS(K)7
b FU(.)p 0 TeXcolorgray 284 4812 a FT(\017)p 0 TeXcolorgray
49 w FU(Set)35 b FS(P)14 b FX(\()p FS(i;)j(i)p FX(\))27
b(=)h(1)34 b FU(for)h(al)5 b(l)34 b FS(i)i FU(with)e
FS(`)p FX(\()p FS(i)p FX(\))28 b(=)g FP(t)p FU(.)146
4994 y FX(This)33 b(sounds)g(more)e(complicated)i(than)f(it)f(actually)
h(is.)44 b(As)32 b(\014rst)g(example,)h(w)m(e)g(sho)m(w)f(here)h(the)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 594 59
TeXDict begin 594 58 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(594)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 320 a FX(case)33 b(of)g(the)g(con)m(tractibilit)m(y)h
(axiom)f(\(applied)g(to)f(a)h(single)g(atom\):)411 489
y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 411 489 a FM(t)317 738 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 317 738 a 317 738 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na1 16 {InitRnode } NewNode end end
 317 738
a 1 w FZ(\026)-43 b FN(a)41 b FV(_)499 738 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a1 16 {InitRnode } NewNode end end
 499 738
a FN(a)42 987 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 93.36499 46.6825 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 42 987 a FZ(\()88 987 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na21 16 {InitRnode } NewNode end end
 88 987 a 1 w
FZ(\026)-43 b FN(a)42 b FV(_)270 987 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a21 16 {InitRnode } NewNode end end
 270 987 a FN(a)14
b FZ(\))42 b FV(^)g FZ(\()545 987 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na22 16 {InitRnode } NewNode end end
 545 987 a 1 w FZ(\026)-43
b FN(a)41 b FV(_)727 987 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a22 16 {InitRnode } NewNode end end
 727 987 a FN(a)14 b FZ(\))88
1236 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 82.25394 41.12697 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 88 1236 a 88 1236 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na31 16 {InitRnode } NewNode end end
 88 1236 a 1 w FZ(\026)-43
b FN(a)42 b FV(_)f FZ(\()317 1236 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a31 16 {InitRnode } NewNode end end
 317 1236 a FN(a)g
FV(^)499 1236 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na32 16 {InitRnode } NewNode end end
 499 1236 a 1 w FZ(\026)-43 b FN(a)14
b FZ(\))41 b FV(_)727 1236 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a32 16 {InitRnode } NewNode end end
 727 1236 a FN(a)317 1485
y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 317 1485 a 317 1485 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 317 1485 a 1 w FZ(\026)-43 b
FN(a)41 b FV(_)499 1485 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 499 1485 a FN(a)543 1485 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end

543 1485 a 543 1485 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 543 1485 a 543 1485 a
 tx@Dict begin NAngle  RotBegin  end
 543 1485
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 543 1485 a
 tx@Dict begin RotEnd  end
 543
1485 a 543 1485 a
 tx@Dict begin PutEnd  end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na21 /N@na1 InitNC { /AngleA 60.  def /AngleB -120.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543
1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na22 /N@na1 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a21 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a22 InitNC { /AngleA -60.  def /AngleB 120.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543
1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na31 /N@na21 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na32 /N@na22 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543
1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a31 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a32 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a31 /N@na32 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543
1485 a 543 1485 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 543 1485 a 543 1485 a
 tx@Dict begin NAngle  RotBegin  end
 543 1485 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 543 1485 a
 tx@Dict begin RotEnd  end
 543 1485 a 543 1485
a
 tx@Dict begin PutEnd  end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na31 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485 a 543 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a32 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 543 1485
a 914 1088 a Fd(;)1345 489 y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1345 489 a FM(t)1260 738
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 25.00005 12.50002 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1260 738 a 1260 738 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na1 16 {InitRnode } NewNode end end
 1260 738 a FV(\017)1426 738 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a1 16 {InitRnode } NewNode end end

1426 738 a FV(\017)1094 987 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 65.0001 32.50005 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 1094 987 a 1094 987 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na21 16 {InitRnode } NewNode end end
 1094
987 a FV(\017)1260 987 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 1260 987 a FV(\017)1426 987
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na22 16 {InitRnode } NewNode end end
 1426 987 a FV(\017)1592 987 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 1592 987 a FV(\017)1094
1236 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 65.0001 32.50005 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 1094 1236 a 1094 1236 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na31 16 {InitRnode } NewNode end end
 1094 1236 a FV(\017)1260
1236 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 1260 1236 a FV(\017)1426 1236 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na32 16 {InitRnode } NewNode end end
 1426 1236 a FV(\017)1592
1236 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a32 16 {InitRnode } NewNode end end
 1592 1236 a FV(\017)1251 1485 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 1251 1485 a 1251
1485 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 1251 1485 a 1 w FZ(\026)-43 b FN(a)41 b FV(_)1433
1485 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 1433 1485 a FN(a)1477 1485 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477
1485 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1477 1485 a 1477 1485 a
 tx@Dict begin NAngle  RotBegin  end
 1477 1485 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1477 1485 a
 tx@Dict begin RotEnd  end
 1477 1485 a 1477
1485 a
 tx@Dict begin PutEnd  end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na21 /N@na1 InitNC { /AngleA 60.  def /AngleB -120.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477 1485
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na22 /N@na1 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.3  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.3 } ifelse def /ArrowPos 0.  def /loopNo 0.3
 1 gt {CurveLength 0.3  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a21 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a22 InitNC { /AngleA -60.  def /AngleB 120.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477
1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na31 /N@na21 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na32 /N@na22 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485
a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a31 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a32 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477
1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a31 /N@na32 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1477 1485 a 1477 1485
a
 tx@Dict begin NAngle  RotBegin  end
 1477 1485 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1477 1485 a
 tx@Dict begin RotEnd  end
 1477 1485 a 1477 1485 a
 tx@Dict begin PutEnd  end
 1477 1485 a 1477
1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na31 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1477 1485 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a32 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1477 1485 a 1744 1088
a Fd(;)2033 588 y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2033 588 a FM(t)1947 987 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 25.00005 12.50002 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1947 987
a 1947 987 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na1 16 {InitRnode } NewNode end end
 1947 987 a FV(\017)2113 987 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a1 16 {InitRnode } NewNode end end
 2113 987 a
FV(\017)1938 1385 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 1938 1385 a 1938 1385 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 1938 1385
a 1 w FZ(\026)-43 b FN(a)41 b FV(_)2120 1385 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 2120 1385
a FN(a)2164 1385 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2164 1385 a 2164 1385 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2164 1385
a 2164 1385 a
 tx@Dict begin NAngle  RotBegin  end
 2164 1385 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2164 1385 a
 tx@Dict begin RotEnd  end
 2164 1385 a 2164 1385 a
 tx@Dict begin PutEnd  end
 2164 1385 a 2164
1385 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a1 /N@na1 InitNC { /AngleA -110.
 def /AngleB -70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2164 1385 a 2164 1385 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2164 1385 a 2164 1385
a
 tx@Dict begin NAngle  RotBegin  end
 2164 1385 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2164 1385 a
 tx@Dict begin RotEnd  end
 2164 1385 a 2164 1385 a
 tx@Dict begin PutEnd  end
 2164 1385 a 2164
1385 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na1 InitNC { /AngleA 120.  def /AngleB -120.
 def 0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2164 1385 a 2164 1385 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a4 InitNC { /AngleA -60.  def /AngleB 60.  def
0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2164 1385 a 2275 1088
a Fd(;)2563 588 y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2563 588 a FM(t)2561 987 y
 tx@Dict begin tx@NodeDict begin {8.39996 3.60004 5.00002 2.5 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2561 987
a 2561 987 a
 tx@Dict begin tx@NodeDict begin {8.39996 3.60004 5.00002 2.5 2.39996
} false /N@a1 16 {InitRnode } NewNode end end
 2561 987 a FV(\017)2469 1385 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2469 1385
a 2469 1385 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 2469 1385 a 1 w FZ(\026)-43 b FN(a)41 b
FV(_)2651 1385 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 2651 1385 a FN(a)2695 1385 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a1 /N@a1 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2695 1385
a 2695 1385 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2695 1385 a 2695 1385 a
 tx@Dict begin NAngle  RotBegin  end
 2695 1385 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2695 1385 a
 tx@Dict begin RotEnd  end
 2695 1385 a 2695
1385 a
 tx@Dict begin PutEnd  end
 2695 1385 a 2695 1385 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a1 InitNC { /AngleA 120.  def /AngleB -170. 
def 0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2695 1385 a 2695 1385
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a4 InitNC { /AngleA -10.  def /AngleB 60.  def
0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2695 1385 a 2805 1088 a Fd(;)3094 588 y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 3094 588 a
FM(t)3091 987 y
 tx@Dict begin tx@NodeDict begin {8.39996 3.60004 5.00002 2.5 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 3091 987 a 3091 987 a
 tx@Dict begin tx@NodeDict begin {8.39996 3.60004 5.00002 2.5 2.39996
} false /N@a1 16 {InitRnode } NewNode end end
 3091 987 a FV(\017)2999
1385 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2999 1385 a 2999 1385 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 2999 1385 a 1 w FZ(\026)-43
b FN(a)42 b FV(_)3181 1385 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 3181 1385 a FN(a)3225 1385
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a1 InitNC { /AngleA 120.  def /AngleB -170. 
def 0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3225 1385 a 3225 1385 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a4 InitNC { /AngleA -10.  def /AngleB 60.  def
0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3225 1385 a 3336 1088 a Fd(;)3606
688 y
 tx@Dict begin tx@NodeDict begin {6.3492 0.0 4.4722 2.2361 3.01385
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 3606 688 a FM(t)3512 1286 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 27.23822 13.61911 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 3512 1286 a 3512 1286
a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na1 16 {InitRnode } NewNode end end
 3512 1286 a 1 w FZ(\026)-43 b FN(a)41 b FV(_)3694 1286
y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a1 16 {InitRnode } NewNode end end
 3694 1286 a FN(a)3738 1286 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 1.1  1.1  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3738 1286 a 3738 1286
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3738 1286 a 3738 1286 a
 tx@Dict begin NAngle  RotBegin  end
 3738 1286 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3738 1286 a
 tx@Dict begin RotEnd  end
 3738 1286 a 3738 1286 a
 tx@Dict begin PutEnd  end
 3738
1286 a 0 1651 a FX(Here)33 b(are)g(t)m(w)m(o)g(other)g(examples)h
(\(compare)g(with)f(\(52\))o(\):)484 1839 y
 tx@Dict begin tx@NodeDict begin {7.60416 2.12917 72.07474 36.03737
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 484 1839
a 484 1839 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 484 1839 a Fr(b)20 b Fq(_)624 1839 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 624
1839 a Fr(a)91 b(;)894 1839 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 894 1839 a 1 w Fp(\026)-46
b Fr(a)20 b Fq(_)1043 1839 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 1043 1839 a Fr(b)783 2098
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-2-1
16 {InitRnode } NewNode end end
 783 2098 a 88 2358 a
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-3-1 16 {InitRnode } NewNode end end
 88 2358 a 88 2358 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 88 2358 a
Fr(b)g Fq(^)228 2358 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 228 2358 a Fr(a)91 b(;)498 2358
y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@cna2 16 {InitRnode } NewNode end end
 498 2358 a 1 w Fp(\026)-46 b Fr(a)20 b Fq(^)647 2358
y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@cb2 16 {InitRnode } NewNode end end
 647 2358 a Fr(b)91 b(;)106 b Fp(\()943 2358 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 943 2358
a 940 2334 a Fp(\026)943 2358 y Fr(b)21 b Fq(_)f Fp(\()1119
2358 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 1119 2358 a Fo(t)g Fq(_)1261 2358 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 1261 2358
a Fr(c)p Fp(\))h Fq(^)1436 2358 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 1436 2358 a Fo(f)783
2618 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-4-1
16 {InitRnode } NewNode end end
 783 2618 a 55 2877 a
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 175.2732 87.6366 3.30017
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 55 2877 a Fp(\(\()125 2877
y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 125 2877 a 1 w Fp(\026)-46 b Fr(a)21 b Fq(^)275 2877
y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 275 2877 a Fo(t)p Fp(\))f Fq(^)452 2877 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 452 2877
a 1 w Fp(\026)-46 b Fr(a)p Fp(\))21 b Fq(^)637 2877 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end

637 2877 a Fr(b)91 b(;)898 2877 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 898 2877 a Fr(b)20
b Fq(_)g Fp(\(\()1108 2877 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 1108 2877 a Fr(a)h Fq(^)1258
2877 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 1258 2877 a Fr(c)p Fp(\))g Fq(_)1433 2877 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 1433
2877 a Fo(f)10 b Fp(\))1510 2877 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@cb2 InitNC { /AngleA -80.  def /AngleB 80. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA -105.  def /AngleB 75.
 def 0.5  0.5  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@cb2 InitNC { /AngleA -85.  def /AngleB 95. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA -100.  def /AngleB 100.
 def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510
2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1510 2877
a 1510 2877 a
 tx@Dict begin NAngle  RotBegin  end
 1510 2877 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1510 2877 a
 tx@Dict begin RotEnd  end
 1510 2877 a 1510 2877 a
 tx@Dict begin PutEnd  end
 1510 2877 a 1510
2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cna2 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1510 2877 a 1510 2877
a
 tx@Dict begin NAngle  RotBegin  end
 1510 2877 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1510 2877 a
 tx@Dict begin RotEnd  end
 1510 2877 a 1510 2877 a
 tx@Dict begin PutEnd  end
 1510 2877 a 1510
2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1510 2877 a 1510 2877
a
 tx@Dict begin NAngle  RotBegin  end
 1510 2877 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1510 2877 a
 tx@Dict begin RotEnd  end
 1510 2877 a 1510 2877 a
 tx@Dict begin PutEnd  end
 1510 2877 a 1510
2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1510 2877 a 1510 2877
a
 tx@Dict begin NAngle  RotBegin  end
 1510 2877 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1510 2877 a
 tx@Dict begin RotEnd  end
 1510 2877 a 1510 2877 a
 tx@Dict begin PutEnd  end
 1510 2877 a 1510
2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@cna2 InitNC { /AngleA 90.  def /AngleB -100.
 def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@cna2 InitNC { /AngleA 90.  def /AngleB -80. 
def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b2 InitNC { /AngleA -85.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510
2877 a 1510 2877 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cb2 /N@b3 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1510 2877 a 1510 2877 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1510 2877
a 1510 2877 a
 tx@Dict begin NAngle  RotBegin  end
 1510 2877 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1510 2877 a
 tx@Dict begin RotEnd  end
 1510 2877 a 1510 2877 a
 tx@Dict begin PutEnd  end
 1510 2877 a 1657
2360 a Fq(\000)-15 b(!)2097 1884 y
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2097 1884 a 2097 1884
a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 2097 1884 a Fr(b)20 b Fq(_)2237 1884 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 2237 1884 a
Fr(a)91 b(;)2507 1884 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 2507 1884 a 1 w Fp(\026)-46 b
Fr(a)20 b Fq(_)2656 1884 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 2656 1884 a Fr(b)91 b(;)106
b Fp(\()2952 1884 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 2952 1884 a 2949 1860 a Fp(\026)2952
1884 y Fr(b)21 b Fq(_)f Fp(\()3128 1884 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 3128 1884 a
Fo(t)g Fq(_)3270 1884 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 3270 1884 a Fr(c)p Fp(\))g Fq(^)3445
1884 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 3445 1884 a Fo(f)2792 2076 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-2-1
16 {InitRnode } NewNode end end
 2792 2076 a 2633
2268 a
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 38.32509 19.16254 3.30017
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2633 2268 a 2633 2268 a
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 5.475 2.7375 2.43333
} false /N@bb 16 {InitRnode } NewNode end end
 2633 2268 a Fq(\017)2792
2460 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-4-1
16 {InitRnode } NewNode end end
 2792 2460 a 2792 2652 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-5-1
16 {InitRnode } NewNode end end
 2792 2652 a 1859 2844
a
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 224.69391 112.34695
3.30017 } false /N@M-1-6-1 16 {InitRnode } NewNode end end
 1859 2844 a 1859 2844 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 1859 2844 a Fr(b)g Fq(^)1999
2844 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 1999 2844 a Fr(a)91 b(;)106 b Fp(\(\()2339 2844
y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 2339 2844 a 1 w Fp(\026)-46 b Fr(a)21 b Fq(^)2489 2844
y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 2489 2844 a Fo(t)p Fp(\))f Fq(^)2666 2844 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 2666 2844
a 1 w Fp(\026)-46 b Fr(a)p Fp(\))21 b Fq(^)2851 2844
y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 2851 2844 a Fr(b)91 b(;)3112 2844 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 3112 2844 a Fr(b)20
b Fq(_)g Fp(\(\()3322 2844 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 3322 2844 a Fr(a)h Fq(^)3472
2844 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 3472 2844 a Fr(c)p Fp(\))g Fq(_)3647 2844 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 3647
2844 a Fo(f)10 b Fp(\))3724 2844 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@xb1 InitNC { /AngleA -120.  def /AngleB 75.
 def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.65  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.65 } ifelse def /ArrowPos 0.  def /loopNo
0.65  1 gt {CurveLength 0.65  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@xb1 InitNC { /AngleA -100.  def /AngleB 90.
 def 1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3724
2844 a 3724 2844 a
 tx@Dict begin NAngle  RotBegin  end
 3724 2844 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3724 2844 a
 tx@Dict begin RotEnd  end
 3724 2844 a 3724 2844 a
 tx@Dict begin PutEnd  end
 3724
2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3724 2844
a 3724 2844 a
 tx@Dict begin NAngle  RotBegin  end
 3724 2844 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3724 2844 a
 tx@Dict begin RotEnd  end
 3724 2844 a 3724 2844 a
 tx@Dict begin PutEnd  end
 3724 2844 a 3724
2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3724 2844 a 3724 2844
a
 tx@Dict begin NAngle  RotBegin  end
 3724 2844 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3724 2844 a
 tx@Dict begin RotEnd  end
 3724 2844 a 3724 2844 a
 tx@Dict begin PutEnd  end
 3724 2844 a 3724
2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3724 2844 a 3724 2844
a
 tx@Dict begin NAngle  RotBegin  end
 3724 2844 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3724 2844 a
 tx@Dict begin RotEnd  end
 3724 2844 a 3724 2844 a
 tx@Dict begin PutEnd  end
 3724 2844 a 3724
2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@xa2 InitNC { /AngleA 100.  def /AngleB 90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@bb InitNC { /AngleA -75.  def /AngleB 110. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@bb InitNC { /AngleA -75.  def /AngleB 85.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b1 InitNC { /AngleA -110.  def /AngleB 115.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3724
2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b2 InitNC { /AngleA -90.  def /AngleB 115.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3724 2844 a 3724 2844 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b3 InitNC { /AngleA -70.  def /AngleB -90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3724 2844
a 3618 2360 a Fp(\(56\))0 3069 y FX(and)438 3140 y
 tx@Dict begin tx@NodeDict begin {7.60416 2.12917 72.07474 36.03737
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 438
3140 a 438 3140 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 438 3140 a Fr(b)21 b Fq(_)578 3140
y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 578 3140 a Fr(a)91 b(;)849 3140 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 849 3140 a 1 w Fp(\026)-46
b Fr(a)20 b Fq(_)998 3140 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 998 3140 a Fr(b)533 3400
y
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 49.27512 24.63756 3.30017
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 533 3400 a 533 3400 a
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 5.475 2.7375 2.43333
} false /N@bb 16 {InitRnode } NewNode end end
 533 3400 a Fq(\017)42 3660 y
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-3-1 16 {InitRnode } NewNode end end

42 3660 a 42 3660 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 42 3660 a Fr(b)h Fq(^)182 3660 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end

182 3660 a Fr(a)91 b(;)453 3660 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@cna2 16 {InitRnode } NewNode end end
 453 3660 a 1 w Fp(\026)-46
b Fr(a)20 b Fq(^)602 3660 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@cb2 16 {InitRnode } NewNode end end
 602 3660 a Fr(b)91 b(;)106
b Fp(\()898 3660 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 898 3660 a 895 3636 a Fp(\026)898
3660 y Fr(b)20 b Fq(_)g Fp(\()1073 3660 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 1073 3660 a
Fo(t)g Fq(_)1215 3660 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 1215 3660 a Fr(c)q Fp(\))g Fq(^)1391
3660 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 1391 3660 a Fo(f)738 3919 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-4-1
16 {InitRnode } NewNode end end
 738 3919 a 10 4179
a
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 175.2732 87.6366 3.30017
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 10 4179 a Fp(\(\()80 4179 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 80 4179 a 1 w Fp(\026)-46
b Fr(a)21 b Fq(^)230 4179 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 230 4179 a Fo(t)o Fp(\))g
Fq(^)407 4179 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 407 4179 a 1 w Fp(\026)-46 b Fr(a)p Fp(\))20
b Fq(^)591 4179 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 591 4179 a Fr(b)91 b(;)852 4179 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 852
4179 a Fr(b)21 b Fq(_)e Fp(\(\()1062 4179 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 1062 4179
a Fr(a)i Fq(^)1212 4179 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 1212 4179 a Fr(c)q Fp(\))f
Fq(_)1388 4179 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 1388 4179 a Fo(f)10 b Fp(\))1465 4179
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@bb InitNC { /AngleA -90.  def /AngleB 110. 
def 0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@bb InitNC { /AngleA -100.  def /AngleB 30. 
def 0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@xb1 InitNC { /AngleA -150.  def /AngleB 80.  def
0.6  0.6  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465
4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@cb2 InitNC { /AngleA -70.  def /AngleB 90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179
a 1465 4179 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1465 4179 a 1465 4179 a
 tx@Dict begin NAngle  RotBegin  end
 1465 4179 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1465 4179 a
 tx@Dict begin RotEnd  end
 1465 4179 a 1465
4179 a
 tx@Dict begin PutEnd  end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cna2 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1465 4179 a 1465 4179 a
 tx@Dict begin NAngle  RotBegin  end
 1465 4179 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 1465 4179 a
 tx@Dict begin RotEnd  end
 1465 4179 a 1465 4179 a
 tx@Dict begin PutEnd  end
 1465
4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1465 4179
a 1465 4179 a
 tx@Dict begin NAngle  RotBegin  end
 1465 4179 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1465 4179 a
 tx@Dict begin RotEnd  end
 1465 4179 a 1465 4179 a
 tx@Dict begin PutEnd  end
 1465 4179 a 1465
4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1465 4179 a 1465 4179
a
 tx@Dict begin NAngle  RotBegin  end
 1465 4179 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1465 4179 a
 tx@Dict begin RotEnd  end
 1465 4179 a 1465 4179 a
 tx@Dict begin PutEnd  end
 1465 4179 a 1465
4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@cna2 InitNC { /AngleA 90.  def /AngleB -100.
 def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@cna2 InitNC { /AngleA 90.  def /AngleB -80. 
def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b1 InitNC { /AngleA -100.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@cb2 /N@b2 InitNC { /AngleA -85.  def /AngleB 90.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465
4179 a 1465 4179 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@cb2 /N@b3 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1465 4179 a 1465 4179 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1465 4179
a 1465 4179 a
 tx@Dict begin NAngle  RotBegin  end
 1465 4179 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1465 4179 a
 tx@Dict begin RotEnd  end
 1465 4179 a 1465 4179 a
 tx@Dict begin PutEnd  end
 1465 4179 a 1612
3662 a Fq(\000)-16 b(!)2142 3186 y
 tx@Dict begin tx@NodeDict begin {9.10674 2.73749 167.49287 83.74643
3.30017 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2142 3186 a 2142 3186
a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb2 16 {InitRnode } NewNode end end
 2142 3186 a Fr(b)20 b Fq(_)2282 3186 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xna1 16 {InitRnode } NewNode end end
 2282 3186 a
Fr(a)91 b(;)2552 3186 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@xa1 16 {InitRnode } NewNode end end
 2552 3186 a 1 w Fp(\026)-46 b
Fr(a)21 b Fq(_)2701 3186 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xnb1 16 {InitRnode } NewNode end end
 2701 3186 a Fr(b)91 b(;)107
b Fp(\()2998 3186 y
 tx@Dict begin tx@NodeDict begin {9.10674 0.0 4.69937 2.34969 4.55336
} false /N@b3 16 {InitRnode } NewNode end end
 2998 3186 a 2995 3162 a Fp(\026)2998
3186 y Fr(b)20 b Fq(_)g Fp(\()3173 3186 y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@f2 16 {InitRnode } NewNode end end
 3173 3186 a
Fo(t)g Fq(_)3315 3186 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@nc1 16 {InitRnode } NewNode end end
 3315 3186 a Fr(c)p Fp(\))h Fq(^)3491
3186 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@t2 16 {InitRnode } NewNode end end
 3491 3186 a Fo(f)2837 3378 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-2-1
16 {InitRnode } NewNode end end
 2837 3378 a 2542
3570 a
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 71.17517 35.58759 3.30017
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2542 3570 a 2542 3570 a
 tx@Dict begin tx@NodeDict begin {4.86667 0.0 5.475 2.7375 2.43333
} false /N@bb 16 {InitRnode } NewNode end end
 2542 3570 a Fq(\017)2837
3762 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-4-1
16 {InitRnode } NewNode end end
 2837 3762 a 2837 3954 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.30017 } false /N@M-1-5-1
16 {InitRnode } NewNode end end
 2837 3954 a 1905 4146
a
 tx@Dict begin tx@NodeDict begin {8.2125 2.73749 224.69391 112.34695
3.30017 } false /N@M-1-6-1 16 {InitRnode } NewNode end end
 1905 4146 a 1905 4146 a
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@xb1 16 {InitRnode } NewNode end end
 1905 4146 a Fr(b)f Fq(^)2045
4146 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@xa2 16 {InitRnode } NewNode end end
 2045 4146 a Fr(a)91 b(;)106 b Fp(\(\()2385 4146
y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na1 16 {InitRnode } NewNode end end
 2385 4146 a 1 w Fp(\026)-46 b Fr(a)21 b Fq(^)2535 4146
y
 tx@Dict begin tx@NodeDict begin {6.95238 0.0 4.89705 2.44852 3.47618
} false /N@t1 16 {InitRnode } NewNode end end
 2535 4146 a Fo(t)o Fp(\))g Fq(^)2712 4146 y
 tx@Dict begin tx@NodeDict begin {6.21715 0.0 5.78806 2.89403 3.10857
} false /N@na2 16 {InitRnode } NewNode end end
 2712 4146
a 1 w Fp(\026)-46 b Fr(a)p Fp(\))20 b Fq(^)2896 4146
y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b1 16 {InitRnode } NewNode end end
 2896 4146 a Fr(b)91 b(;)3157 4146 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 4.69937 2.34969 3.80208
} false /N@b2 16 {InitRnode } NewNode end end
 3157 4146 a Fr(b)21
b Fq(_)e Fp(\(\()3367 4146 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 5.78806 2.89403 2.35728
} false /N@a2 16 {InitRnode } NewNode end end
 3367 4146 a Fr(a)i Fq(^)3517
4146 y
 tx@Dict begin tx@NodeDict begin {4.71457 0.0 4.73868 2.36934 2.35728
} false /N@c1 16 {InitRnode } NewNode end end
 3517 4146 a Fr(c)p Fp(\))g Fq(_)3693 4146 y
 tx@Dict begin tx@NodeDict begin {7.60416 0.0 5.04152 2.52075 3.80208
} false /N@f1 16 {InitRnode } NewNode end end
 3693
4146 a Fo(f)10 b Fp(\))3770 4146 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@xna1 /N@xa1 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3770 4146 a 3770 4146 a
 tx@Dict begin NAngle  RotBegin  end
 3770 4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3770 4146 a
 tx@Dict begin RotEnd  end
 3770 4146 a 3770 4146 a
 tx@Dict begin PutEnd  end
 3770
4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t1 /N@t1 InitNC { /AngleA 125. 
def /AngleB 55.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3770 4146
a 3770 4146 a
 tx@Dict begin NAngle  RotBegin  end
 3770 4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3770 4146 a
 tx@Dict begin RotEnd  end
 3770 4146 a 3770 4146 a
 tx@Dict begin PutEnd  end
 3770 4146 a 3770
4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@t2 /N@t2 InitNC { /AngleA -55. 
def /AngleB -125.  def 5.  5.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3770 4146 a 3770 4146
a
 tx@Dict begin NAngle  RotBegin  end
 3770 4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3770 4146 a
 tx@Dict begin RotEnd  end
 3770 4146 a 3770 4146 a
 tx@Dict begin PutEnd  end
 3770 4146 a 3770
4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@xa2 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3770 4146 a 3770 4146
a
 tx@Dict begin NAngle  RotBegin  end
 3770 4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3770 4146 a
 tx@Dict begin RotEnd  end
 3770 4146 a 3770 4146 a
 tx@Dict begin PutEnd  end
 3770 4146 a 3770
4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@xa2 InitNC { /AngleA 100.  def /AngleB 90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@nc1 /N@c1 InitNC { /AngleA -90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb2 /N@bb InitNC { /AngleA -75.  def /AngleB 110. 
def 0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.6  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.6 } ifelse def /ArrowPos 0.  def /loopNo 0.6
 1 gt {CurveLength 0.6  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@xnb1 /N@bb InitNC { /AngleA -90.  def /AngleB 85.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@xb1 InitNC { /AngleA -120.  def /AngleB 70.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3770
4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b1 InitNC { /AngleA -100.  def /AngleB 115.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3770 4146 a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b2 InitNC { /AngleA -70.  def /AngleB 115.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3770 4146
a 3770 4146 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@bb /N@b3 InitNC { /AngleA -50.  def /AngleB -90.  def
0.8  0.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.7  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.7 } ifelse def /ArrowPos 0.  def /loopNo 0.7
 1 gt {CurveLength 0.7  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3770 4146 a 3618 3662 a Fp(\(57\))146 4384
y FX(The)36 b(whole)g(p)s(oin)m(t)g(of)e(the)i(construction)g(of)f(the)
g(extended)i(pro)s(of)e(nets)h(is,)g(that)f(w)m(e)h(again)f(get)0
4505 y(a)c(category)-8 b(,)32 b(whic)m(h)h(w)m(e)g(denote)f(b)m(y)g
FP(ENet)o FX(\()p FC(A)23 b FX(\).)1821 4469 y FQ(18)1939
4505 y FX(This)32 b(category)g(is)g(again)f(a)h FK(B5)o
FX(-category)f(and)h(it)p 0 TeXcolorgray 0 4622 600 4
v 79 4684 a FO(18)149 4714 y FZ(The)j(restrictions)e(made)h(to)g(the)g
(anc)n(hors)e(in)j(De\014nition)g(9.5)e(are)g(c)n(hosen)g(suc)n(h)h
(that)h(w)n(e)f(indeed)g(get)g(a)g(w)n(ell-)0 4814 y(de\014ned)28
b(and)f(asso)r(ciativ)n(e)f(comp)r(osition.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 595 60
TeXDict begin 595 59 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(595)p 0 TeXcolorgray
0 314 a(is)33 b(graphical.)44 b(But)32 b(it)h(is)g FU(not)42
b FX(\015at)33 b(b)s(ecause)g(the)g(follo)m(wing)g(t)m(w)m(o)h(nets)f
(are)g(ob)m(viously)h(not)e(equal:)1087 497 y
 tx@Dict begin tx@NodeDict begin {6.66669 0.0 36.33574 18.16786 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 1087 497
a 1087 497 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 1087 497 a FS(a)67 b FT(_)1337 497 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na2 16 {InitRnode } NewNode end end
 1337
497 a FS(a)1087 1099 y
 tx@Dict begin tx@NodeDict begin {6.66669 0.0 36.33574 18.16786 3.61665
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1087 1099 a 1087 1099 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 1087 1099
a FS(a)g FT(^)1337 1099 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 1337 1099 a FS(a)1389 1099
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA -105.  def /AngleB 105. 
def 1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1389 1099 a 1389 1099 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a2 InitNC { /AngleA -75.  def /AngleB 75.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1389 1099 a 1389 1099 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a2 InitNC { /AngleA -85.  def /AngleB 95.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1389
1099 a 1389 1099 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@a1 InitNC { /AngleA -95.  def /AngleB 85.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.75  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.75 } ifelse def /ArrowPos 0.  def /loopNo
0.75  1 gt {CurveLength 0.75  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1389 1099 a 1811 795 a FX(and)2391
497 y
 tx@Dict begin tx@NodeDict begin {6.66669 0.0 36.33574 18.16786 3.61665
} false /N@M-1-1-1 16 {InitRnode } NewNode end end
 2391 497 a 2391 497 a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na1 16 {InitRnode } NewNode end end
 2391 497 a FS(a)g FT(_)2642
497 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@na2 16 {InitRnode } NewNode end end
 2642 497 a FS(a)2517 798 y
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 3.61665 }
false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2517 798 a 2517 798
a
 tx@Dict begin tx@NodeDict begin {5.33334 0.0 6.00002 3.0 2.66667 }
false /N@aa 16 {InitRnode } NewNode end end
 2517 798 a FT(\017)2391 1099 y
 tx@Dict begin tx@NodeDict begin {6.66669 0.0 36.33574 18.16786 3.61665
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2391 1099 a 2391 1099
a
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a1 16 {InitRnode } NewNode end end
 2391 1099 a FS(a)g FT(^)2642 1099 y
 tx@Dict begin tx@NodeDict begin {5.16667 0.0 6.16798 3.08398 2.58333
} false /N@a2 16 {InitRnode } NewNode end end
 2642 1099 a FS(a)2693
1099 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@aa InitNC { /AngleA -95.  def /AngleB 105.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2693 1099 a 2693 1099 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na2 /N@aa InitNC { /AngleA -85.  def /AngleB 75.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2693 1099 a 2693 1099
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@aa /N@a1 InitNC { /AngleA -105.  def /AngleB 95.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.65  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.65 } ifelse def /ArrowPos 0.  def /loopNo
0.65  1 gt {CurveLength 0.65  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2693 1099 a 2693 1099 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@aa /N@a2 InitNC { /AngleA -75.  def /AngleB 85.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.65  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.65 } ifelse def /ArrowPos 0.  def /loopNo
0.65  1 gt {CurveLength 0.65  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2693 1099 a 3607 795 a FX(\(58\))0
1281 y(whic)m(h)35 b(means)g(that)e(diagram)h(\(45\))e(do)s(es)j(not)e
(comm)m(ute.)48 b(It)34 b(is)g(also)f(easy)i(to)e(see)i(that)e
FP(ENet)o FX(\()p FC(A)23 b FX(\))0 1402 y(is)33 b(not)g(idemp)s(oten)m
(t,)g(and)g(is)g(therefore)g(not)g(an)f FK(LK)p FX(-category)-8
b(.)43 b(Ho)m(w)m(ev)m(er,)35 b(w)m(e)f(ha)m(v)m(e:)0
1586 y FJ(9.7.)50 b(Theorem.)37 b FU(The)45 b(c)-5 b(ate)g(gory)46
b FP(ENet)o FX(\()p FC(A)23 b FX(\))45 b FU(is)h(a)f
FK(B5)p FU(-c)-5 b(ate)g(gory)46 b(that)g(is)f(we)-5
b(akly)45 b(\015at)i(and)e(c)-5 b(on-)0 1707 y(tr)g(actible.)0
1881 y FJ(Pr)n(oof.)31 b FX(Again,)k(the)g(maps)44 b(^)-58
b FS(\013)t FX(,)40 b(^)-54 b FS(\033)48 b FX(^)-58 b
FS(\045)t FX(,)1457 1855 y(^)1453 1881 y FS(\025)t FX(,)35
b FK(s)5 b FX(,)35 b FK(m)t FX(,)g(\005)t(,)g(and)g(\001)k(are)34
b(giv)m(en)i(b)m(y)f(the)g(ob)m(vious)h(nets.)50 b(It)34
b(is)0 2001 y(an)e(easy)i(exercise)h(to)d(c)m(hec)m(k)j(that)d(the)h
(equations)h(demanded)g(b)m(y)g(the)f(de\014nitions)h(do)e(still)i
(hold.)p 3738 2001 42 42 v 0 2186 a FJ(9.8.)j(Theorem.)30
b FU(The)35 b(c)-5 b(ate)g(gory)34 b FP(ENet)o FX(\()p
FC(A)23 b FX(\))35 b FU(is)g(gr)-5 b(aphic)g(al.)0 2360
y FJ(Pr)n(oof.)30 b FX(T)-8 b(rivial.)p 3738 2360 V 146
2530 a(In)27 b(Figure)g(1)f(w)m(e)h(use)h(the)f(notation)f(of)g(the)g
(extended)j(pro)s(of)d(nets)h(to)f(illustrate)h(the)g(idea)g(b)s(ehind)
0 2650 y(the)j(pro)s(of)f(of)g(Theorem)i(8.6.)42 b(The)30
b(middle)h(equation)g(in)e(the)h(second)h(line)g(is)f(\(45\))o(,)g
(i.e,)h(the)f(iden)m(tit)m(y)0 2771 y(of)42 b(the)g(t)m(w)m(o)h(nets)g
(in)g(\(58\))o(.)72 b(The)43 b(left-most)g(equation)g(in)f(the)h
(second)g(line)g(and)f(the)h(righ)m(t-most)0 2891 y(equation)e(in)f
(the)g(\014rst)h(line)g(are)f(b)s(oth)f(the)i(con)m(tractibilit)m(y)h
(equation)e(\(47\).)65 b(Ev)m(erything)42 b(else)g(in)0
3012 y(Figure)h(1)f(is)i(rather)e(trivial)h(from)g(the)g(viewp)s(oin)m
(t)h(of)f(pro)s(of)f(nets.)75 b(Ho)m(w)m(ev)m(er,)47
b(since)e(w)m(e)e(do)g(not)0 3132 y(ha)m(v)m(e)i(a)e(\\coherence)j
(theorem",)h(Figure)c(1)h(cannot)f(tell)h(us)h(whether)g(the)f
(equations)h(are)e(really)0 3252 y(consequences)36 b(of)c(the)h
(axioms.)45 b(F)-8 b(or)31 b(this,)j(the)f(prop)s(er)f(pro)s(of)g(in)h
(Section)g(8)f(is)i(necessary)-8 b(.)0 3573 y FY(10.)38
b(More)g(though)m(ts)f(on)i(order)e(enric)m(hmen)m(t)0
3769 y FX(Although)i FP(ENet)n FX(\()p FC(A)23 b FX(\))38
b(is)h(not)f(an)h FK(LK)o FX(-category)-8 b(,)40 b(w)m(e)f(can)g(enric)
m(h)h(it)e(with)h(a)f(partial)g(order)g(whic)m(h)0 3889
y(is)33 b(induced)g(b)m(y)g(cut)f(elimination)h(according)g(to)e(the)i
(ideas)g(of)e([FP04c,)h(FP04a].)43 b(This)33 b(means)g(that)0
4010 y FS(f)40 b Fl(4)31 b FS(g)37 b FX(if)c FS(g)k FX(is)e(obtained)f
(from)g FS(f)44 b FX(via)34 b(cut)g(elimination)h(in)f(some)h(formal)e
(system)j(\(not)d(necessarily)0 4130 y FK(LK)f FX(or)h(another)f
(sequen)m(t)j(system\).)146 4250 y(In)49 b(category-theoretic)g(terms,)
k(this)48 b(is)h(ac)m(hiev)m(ed)h(b)m(y)f(k)m(eeping)h(prop)s(erties)f
(\(i\))f(and)h(\(iii\))f(in)0 4371 y(De\014nition)39
b(6.1,)i(but)e(b)m(y)i(dropping)f(\()p FK(LK-)p FX(\005)t(\))f(and)g
(\()p FK(LK-)p FX(\001)t(\).)63 b(It)40 b(should)g(b)s(e)f(clear)h
(that)f(there)h(is)f(a)0 4491 y(wide)30 b(range)f(of)f(p)s
(ossibilities)j(of)d(pro)m(viding)i(suc)m(h)g(a)e(partial)h(order.)42
b(As)29 b(an)g(example)h(w)m(e)g(will)g(sk)m(etc)m(h)0
4612 y(here)j(the)g(idea)g(whic)m(h)h(has)f(b)s(een)h(prop)s(osed)f(in)
g([Str05].)146 4732 y(Let)g FS(f)22 b FX(:)33 b FS(A)28
b FT(!)f FS(B)38 b FX(b)s(e)32 b(a)h(map)f(in)h FP(ENet)o
FX(\()p FC(A)23 b FX(\),)32 b(i.e.,)h(an)g(extended)h(pro)s(of)e(net,)h
(and)f(let)h FS(k)e FT(2)d FS(K)3602 4747 y FR(f)3680
4732 y FX(b)s(e)0 4852 y(an)36 b(anc)m(hor)g(in)g FS(f)11
b FX(,)37 b(and)f(let)g FS(P)1099 4867 y FR(f)1180 4852
y FX(b)s(e)g(the)g(linking)h(of)e FS(f)11 b FX(.)53 b(Then)37
b(w)m(e)g(can)f(remo)m(v)m(e)i FS(k)h FX(according)d(to)g(the)0
4973 y(cut)c(elimination)h(for)e(simple)i(pro)s(of)e(nets)h(\(as)g
(de\014ned)h(in)f([LS05b]\).)43 b(Let)32 b FS(K)2884
4937 y FI(0)2939 4973 y FX(b)s(e)g FS(K)3154 4988 y FR(f)3219
4973 y FT(n)20 b(f)p FS(k)s FT(g)32 b FX(and)f(for)0
5093 y(all)k FS(i;)17 b(j)39 b FT(2)32 b FC(L)19 b FX(\(\000\))24
b FT([)h FS(K)840 5057 y FI(0)898 5093 y FX(let)36 b
FS(P)1119 5057 y FI(0)1142 5093 y FX(\()p FS(i;)17 b(j)6
b FX(\))32 b(=)g FS(P)1544 5108 y FR(f)1589 5093 y FX(\()p
FS(i;)17 b(j)6 b FX(\))24 b(+)g FS(P)1975 5108 y FR(f)2020
5093 y FX(\()p FS(i;)17 b(k)s FX(\))24 b FT(\001)g FS(P)2366
5108 y FR(f)2411 5093 y FX(\()p FS(k)s(;)17 b(j)6 b FX(\).)51
b(No)m(w)36 b(de\014ne)h FS(g)15 b FX(:)33 b FS(A)g FT(!)f
FS(B)40 b FX(to)0 5213 y(b)s(e)33 b(the)g(result)g(of)f(applying)i(the)
f(second)h(step)f(of)f(9.6)g(to)h FS(P)2236 5177 y FI(0)2258
5213 y FS(;)17 b(K)2392 5177 y FI(0)2415 5213 y FX(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 596 61
TeXDict begin 596 60 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(596)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
242 735 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 242 735 a 115 984 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 115 984 a 115 984 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na1 16 {InitRnode } NewNode end end
 115
984 a 1 w FZ(\026)-43 b FN(a)55 b FV(_)325 984 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a1 16 {InitRnode } NewNode end end
 325
984 a FN(a)369 984 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 1.1  1.1  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 369 984 a 369 984 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 369 984 a 369
984 a
 tx@Dict begin NAngle  RotBegin  end
 369 984 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
369 984 a
 tx@Dict begin RotEnd  end
 369 984 a 369 984 a
 tx@Dict begin PutEnd  end
 369 984 a 369 984 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 110.  def /AngleB 70.  def
1.8  1.8  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 369
984 a 530 894 a FZ(=)1047 486 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1047 486 a 756 735 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 70.00012 35.00006 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end

756 735 a 756 735 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 756 735 a FV(\017)922 735 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 922 735
a FV(\017)1130 735 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a27 16 {InitRnode } NewNode end end
 1130 735 a FV(\017)1296 735 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a28 16 {InitRnode } NewNode end end
 1296
735 a FV(\017)839 984 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 50.00009 25.00005 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 839 984 a 839 984 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 839 984 a
FV(\017)1213 984 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a34 16 {InitRnode } NewNode end end
 1213 984 a FV(\017)920 1233 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 920
1233 a 920 1233 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 920 1233 a 1 w FZ(\026)-43 b FN(a)55
b FV(_)1130 1233 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 1130 1233 a FN(a)1174 1233 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a28 InitNC { /AngleA 70.  def /AngleB 110.  def
0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1174
1233 a 1174 1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a22 /N@a27 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1174 1233 a 1174 1233 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1174 1233
a 1174 1233 a
 tx@Dict begin NAngle  RotBegin  end
 1174 1233 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1174 1233 a
 tx@Dict begin RotEnd  end
 1174 1233 a 1174 1233 a
 tx@Dict begin PutEnd  end
 1174 1233 a 1174
1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a21 InitNC { /AngleA 105.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1174 1233 a 1174 1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a22 InitNC { /AngleA 75.  def /AngleB -105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1174 1233 a 1174 1233
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a27 /N@a34 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1174 1233 a 1174 1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a28 /N@a34 InitNC { /AngleA -105.  def /AngleB 75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1174 1233 a 1174 1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a31 InitNC { /AngleA 120.  def /AngleB -60. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1174
1233 a 1174 1233 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a34 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1174 1233 a 1499 894 a FZ(=)2074 361
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 2074 361 a 1725 610 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 83.99973 41.99986 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 1725 610 a 1725 610 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a11 16 {InitRnode } NewNode end end
 1725 610
a FV(\017)1841 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a12 16 {InitRnode } NewNode end end
 1841 610 a FV(\017)1957 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a13 16 {InitRnode } NewNode end end
 1957
610 a FV(\017)2148 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a16 16 {InitRnode } NewNode end end
 2148 610 a FV(\017)2265 610
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a17 16 {InitRnode } NewNode end end
 2265 610 a FV(\017)2381 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a18 16 {InitRnode } NewNode end end
 2381 610 a FV(\017)1725
859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 83.99973 41.99986 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 1725 859 a 1725 859 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 1725 859 a FV(\017)1841 859
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 1841 859 a FV(\017)2265 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a27 16 {InitRnode } NewNode end end
 2265 859 a FV(\017)2381
859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a28 16 {InitRnode } NewNode end end
 2381 859 a FV(\017)1849 1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 54.00003 27.00002 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 1849 1108 a 1849
1108 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 1849 1108 a FV(\017)2256 1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a34 16 {InitRnode } NewNode end end
 2256 1108 a FV(\017)1947
1358 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 1947 1358 a 1947 1358 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 1947 1358 a 1 w FZ(\026)-43
b FN(a)55 b FV(_)2157 1358 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 2157 1358 a FN(a)2201 1358
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a11 /N@a18 InitNC { /AngleA 70.  def /AngleB 110.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a12 /N@a13 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2201
1358 a 2201 1358 a
 tx@Dict begin NAngle  RotBegin  end
 2201 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 2201 1358 a
 tx@Dict begin RotEnd  end
 2201 1358 a 2201 1358 a
 tx@Dict begin PutEnd  end
 2201
1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a16 /N@a17 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2201 1358
a 2201 1358 a
 tx@Dict begin NAngle  RotBegin  end
 2201 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2201 1358 a
 tx@Dict begin RotEnd  end
 2201 1358 a 2201 1358 a
 tx@Dict begin PutEnd  end
 2201 1358 a 2201
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a11 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a12 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201 1358
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a13 /N@a16 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2201 1358 a 2201 1358 a
 tx@Dict begin NAngle  RotBegin  end
 2201
1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2201 1358
a
 tx@Dict begin RotEnd  end
 2201 1358 a 2201 1358 a
 tx@Dict begin PutEnd  end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a17 /N@a27 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201
1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a18 /N@a28 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a21 InitNC { /AngleA 120.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358
a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a22 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a27 /N@a34 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a28 /N@a34 InitNC { /AngleA -105.  def /AngleB 60. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 2201 1358 a 2201 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a31 InitNC { /AngleA 120.  def /AngleB -60. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2201 1358
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a34 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2201 1358 a 2584 894 a FZ(=)3237 361 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 3237 361 a 2810
610 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 102.9997 51.49985 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2810 610 a 2810 610 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a11 16 {InitRnode } NewNode end end
 2810 610 a FV(\017)2926 610
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a12 16 {InitRnode } NewNode end end
 2926 610 a FV(\017)3042 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a13 16 {InitRnode } NewNode end end
 3042 610 a FV(\017)3158
610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a15 16 {InitRnode } NewNode end end
 3158 610 a FV(\017)3275 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a14 16 {InitRnode } NewNode end end
 3275 610 a FV(\017)3391
610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a16 16 {InitRnode } NewNode end end
 3391 610 a FV(\017)3507 610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a17 16 {InitRnode } NewNode end end
 3507 610 a FV(\017)3623
610 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a18 16 {InitRnode } NewNode end end
 3623 610 a FV(\017)2810 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 102.9997 51.49985 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2810 859 a 2810 859
a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 2810 859 a FV(\017)2926 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 2926 859 a FV(\017)3042
859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a23 16 {InitRnode } NewNode end end
 3042 859 a FV(\017)3158 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a25 16 {InitRnode } NewNode end end
 3158 859 a FV(\017)3275
859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a24 16 {InitRnode } NewNode end end
 3275 859 a FV(\017)3391 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a26 16 {InitRnode } NewNode end end
 3391 859 a FV(\017)3507
859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a27 16 {InitRnode } NewNode end end
 3507 859 a FV(\017)3623 859 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a28 16 {InitRnode } NewNode end end
 3623 859 a FV(\017)2880
1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 86.00006 43.00003 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 2880 1108 a 2880 1108 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 2880 1108 a FV(\017)3104
1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a32 16 {InitRnode } NewNode end end
 3104 1108 a FV(\017)3329 1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a33 16 {InitRnode } NewNode end end
 3329 1108 a FV(\017)3553
1108 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a34 16 {InitRnode } NewNode end end
 3553 1108 a FV(\017)3110 1358 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 3110 1358 a 3110
1358 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 3110 1358 a 1 w FZ(\026)-43 b FN(a)56 b FV(_)3320
1358 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 3320 1358 a FN(a)3364 1358 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a11 /N@a18 InitNC { /AngleA 70.  def /AngleB 110.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a12 /N@a13 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 1358 a 3364 1358
a
 tx@Dict begin NAngle  RotBegin  end
 3364 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3364 1358 a
 tx@Dict begin RotEnd  end
 3364 1358 a 3364 1358 a
 tx@Dict begin PutEnd  end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a15 /N@a14 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 1358 a 3364 1358
a
 tx@Dict begin NAngle  RotBegin  end
 3364 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3364 1358 a
 tx@Dict begin RotEnd  end
 3364 1358 a 3364 1358 a
 tx@Dict begin PutEnd  end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a16 /N@a17 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 1358 a 3364 1358
a
 tx@Dict begin NAngle  RotBegin  end
 3364 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3364 1358 a
 tx@Dict begin RotEnd  end
 3364 1358 a 3364 1358 a
 tx@Dict begin PutEnd  end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a11 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a12 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a13 /N@a23 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a14 /N@a24 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a25 /N@a15 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364
1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a26 /N@a16 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a17 /N@a27 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358
a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a18 /N@a28 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a21 InitNC { /AngleA 105.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a22 InitNC { /AngleA 75.  def /AngleB -105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a23 /N@a32 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a24 /N@a32 InitNC { /AngleA -105.  def /AngleB 75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a33 /N@a25 InitNC { /AngleA 105.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.4  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.4 } ifelse def /ArrowPos 0.  def /loopNo 0.4
 1 gt {CurveLength 0.4  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a33 /N@a26 InitNC { /AngleA 75.  def /AngleB -105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364
1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a27 /N@a34 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a28 /N@a34 InitNC { /AngleA -105.  def /AngleB 75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3364 1358
a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a32 /N@a33 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 1358 a 3364
1358 a
 tx@Dict begin NAngle  RotBegin  end
 3364 1358 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3364 1358 a
 tx@Dict begin RotEnd  end
 3364 1358 a 3364 1358 a
 tx@Dict begin PutEnd  end
 3364 1358 a 3364
1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a31 InitNC { /AngleA 120.  def /AngleB -60. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3364 1358 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a34 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3364 1358 a 3218 1594
a FV(k)217 2155 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 217 2155 a 90 2404 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 90 2404 a 90 2404
a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na1 16 {InitRnode } NewNode end end
 90 2404 a 1 w FZ(\026)-43 b FN(a)55 b FV(_)300 2404
y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a1 16 {InitRnode } NewNode end end
 300 2404 a FN(a)344 2404 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 1.1  1.1  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 344 2404 a 344 2404 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 344
2404 a 344 2404 a
 tx@Dict begin NAngle  RotBegin  end
 344 2404 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 344 2404 a
 tx@Dict begin RotEnd  end
 344 2404 a 344 2404 a
 tx@Dict begin PutEnd  end
 344 2404
a 505 2314 a FZ(=)1064 1781 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 1064 1781 a 939 2030 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 30.00006 15.00003 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end

939 2030 a 939 2030 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na1 16 {InitRnode } NewNode end end
 939 2030 a FV(\017)1147 2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a1 16 {InitRnode } NewNode end end

1147 2030 a FV(\017)731 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 80.00015 40.00008 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 731 2279 a 731 2279 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na21 16 {InitRnode } NewNode end end

731 2279 a FV(\017)939 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 939 2279 a FV(\017)1147
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na22 16 {InitRnode } NewNode end end
 1147 2279 a FV(\017)1354 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 1354 2279 a FV(\017)731
2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 80.00015 40.00008 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 731 2528 a 731 2528 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na31 16 {InitRnode } NewNode end end
 731 2528 a FV(\017)939 2528
y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 939 2528 a FV(\017)1147 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na32 16 {InitRnode } NewNode end end
 1147 2528 a FV(\017)1354
2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a32 16 {InitRnode } NewNode end end
 1354 2528 a FV(\017)937 2777 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 937 2777 a 937
2777 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 937 2777 a 1 w FZ(\026)-43 b FN(a)55 b FV(_)1147
2777 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 1147 2777 a FN(a)1190 2777 y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na1 /N@a1 InitNC { /AngleA 70. 
def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190
2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1190 2777 a 1190 2777 a
 tx@Dict begin NAngle  RotBegin  end
 1190 2777 a @beginspecial
@setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1190 2777 a
 tx@Dict begin RotEnd  end
 1190 2777 a 1190
2777 a
 tx@Dict begin PutEnd  end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na21 /N@na1 InitNC { /AngleA 60.  def /AngleB -120.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190 2777
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na22 /N@na1 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.3  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.3 } ifelse def /ArrowPos 0.  def /loopNo 0.3
 1 gt {CurveLength 0.3  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a21 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a1 /N@a22 InitNC { /AngleA -60.  def /AngleB 120.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190
2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na31 /N@na21 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na32 /N@na22 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777
a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a31 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a32 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a31 /N@na32 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1190 2777 a 1190 2777
a
 tx@Dict begin NAngle  RotBegin  end
 1190 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1190 2777 a
 tx@Dict begin RotEnd  end
 1190 2777 a 1190 2777 a
 tx@Dict begin PutEnd  end
 1190 2777 a 1190
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na31 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1190 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a32 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1190 2777 a 1557 2314
a FZ(=)2115 1781 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 2115 1781 a 2115 2030 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-2-1
16 {InitRnode } NewNode end end
 2115 2030
a 1783 2279 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 80.00015 40.00008 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 1783 2279 a 1783 2279 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na21 16 {InitRnode } NewNode end end
 1783 2279 a FV(\017)1991
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 1991 2279 a FV(\017)2198 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na22 16 {InitRnode } NewNode end end
 2198 2279 a FV(\017)2406
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 2406 2279 a FV(\017)1783 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 80.00015 40.00008 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 1783 2528 a 1783
2528 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na31 16 {InitRnode } NewNode end end
 1783 2528 a FV(\017)1991 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 1991 2528 a FV(\017)2198
2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@na32 16 {InitRnode } NewNode end end
 2198 2528 a FV(\017)2406 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a32 16 {InitRnode } NewNode end end
 2406 2528 a FV(\017)1988
2777 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 1988 2777 a 1988 2777 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 1988 2777 a 1 w FZ(\026)-43
b FN(a)55 b FV(_)2198 2777 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 2198 2777 a FN(a)2242 2777
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na21 /N@a22 InitNC { /AngleA 90.  def /AngleB 90.  def
1.  1.  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3
-1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end
xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED
/y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2
x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub
cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0
3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul
by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul
mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t
mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na21 /N@a21 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2242
2777 a 2242 2777 a
 tx@Dict begin NAngle  RotBegin  end
 2242 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 2242 2777 a
 tx@Dict begin RotEnd  end
 2242 2777 a 2242 2777 a
 tx@Dict begin PutEnd  end
 2242
2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na22 /N@a21 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2242 2777
a 2242 2777 a
 tx@Dict begin NAngle  RotBegin  end
 2242 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2242 2777 a
 tx@Dict begin RotEnd  end
 2242 2777 a 2242 2777 a
 tx@Dict begin PutEnd  end
 2242 2777 a 2242
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@na22 /N@a22 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2242 2777 a 2242 2777
a
 tx@Dict begin NAngle  RotBegin  end
 2242 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2242 2777 a
 tx@Dict begin RotEnd  end
 2242 2777 a 2242 2777 a
 tx@Dict begin PutEnd  end
 2242 2777 a 2242
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na31 /N@na21 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na32 /N@na22 InitNC { /AngleA 90.  def /AngleB -90.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a31 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a32 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a31 /N@na32 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242
2777 a 2242 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2242 2777 a 2242 2777 a
 tx@Dict begin NAngle  RotBegin  end
 2242 2777
a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2242 2777 a
 tx@Dict begin RotEnd  end

2242 2777 a 2242 2777 a
 tx@Dict begin PutEnd  end
 2242 2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@na31 InitNC { /AngleA 120.  def /AngleB -60.
 def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242
2777 a 2242 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a32 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2242 2777 a 2609 2314 a FZ(=)3262
1781 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-1-1
16 {InitRnode } NewNode end end
 3262 1781 a 2835 2030 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 102.9997 51.49985 3.01385
} false /N@M-1-2-1 16 {InitRnode } NewNode end end
 2835 2030 a 2835 2030
a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a11 16 {InitRnode } NewNode end end
 2835 2030 a FV(\017)2951 2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a12 16 {InitRnode } NewNode end end
 2951 2030 a FV(\017)3067
2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a13 16 {InitRnode } NewNode end end
 3067 2030 a FV(\017)3183 2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a14 16 {InitRnode } NewNode end end
 3183 2030 a FV(\017)3300
2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a15 16 {InitRnode } NewNode end end
 3300 2030 a FV(\017)3416 2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a16 16 {InitRnode } NewNode end end
 3416 2030 a FV(\017)3532
2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a17 16 {InitRnode } NewNode end end
 3532 2030 a FV(\017)3648 2030 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a18 16 {InitRnode } NewNode end end
 3648 2030 a FV(\017)2835
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 102.9997 51.49985 3.01385
} false /N@M-1-3-1 16 {InitRnode } NewNode end end
 2835 2279 a 2835 2279 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a21 16 {InitRnode } NewNode end end
 2835 2279 a FV(\017)2951
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a22 16 {InitRnode } NewNode end end
 2951 2279 a FV(\017)3067 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a23 16 {InitRnode } NewNode end end
 3067 2279 a FV(\017)3183
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a24 16 {InitRnode } NewNode end end
 3183 2279 a FV(\017)3300 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a25 16 {InitRnode } NewNode end end
 3300 2279 a FV(\017)3416
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a26 16 {InitRnode } NewNode end end
 3416 2279 a FV(\017)3532 2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a27 16 {InitRnode } NewNode end end
 3532 2279 a FV(\017)3648
2279 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a28 16 {InitRnode } NewNode end end
 3648 2279 a FV(\017)2905 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 86.00006 43.00003 3.01385
} false /N@M-1-4-1 16 {InitRnode } NewNode end end
 2905 2528 a 2905
2528 a
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a31 16 {InitRnode } NewNode end end
 2905 2528 a FV(\017)3129 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a32 16 {InitRnode } NewNode end end
 3129 2528 a FV(\017)3354
2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a33 16 {InitRnode } NewNode end end
 3354 2528 a FV(\017)3578 2528 y
 tx@Dict begin tx@NodeDict begin {4.44444 0.0 5.00002 2.5 2.22221 }
false /N@a34 16 {InitRnode } NewNode end end
 3578 2528 a FV(\017)3135
2777 y
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 30.57147 15.28574 3.01385
} false /N@M-1-5-1 16 {InitRnode } NewNode end end
 3135 2777 a 3135 2777 a
 tx@Dict begin tx@NodeDict begin {5.67776 0.0 5.28589 2.64294 2.83888
} false /N@na4 16 {InitRnode } NewNode end end
 3135 2777 a 1 w FZ(\026)-43
b FN(a)56 b FV(_)3345 2777 y
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.28589 2.64294 2.15277
} false /N@a4 16 {InitRnode } NewNode end end
 3345 2777 a FN(a)3389 2777
y
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a11 /N@a18 InitNC { /AngleA 70.  def /AngleB 110.  def
0.7  0.7  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a12 /N@a13 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3389
2777 a 3389 2777 a
 tx@Dict begin NAngle  RotBegin  end
 3389 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial 3389 2777 a
 tx@Dict begin RotEnd  end
 3389 2777 a 3389 2777 a
 tx@Dict begin PutEnd  end
 3389
2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a15 /N@a14 InitNC { /AngleA 110.
 def /AngleB 70.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1
sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0
def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0
ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3389 2777
a 3389 2777 a
 tx@Dict begin NAngle  RotBegin  end
 3389 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3389 2777 a
 tx@Dict begin RotEnd  end
 3389 2777 a 3389 2777 a
 tx@Dict begin PutEnd  end
 3389 2777 a 3389
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a16 /N@a17 InitNC { /AngleA 70.
 def /AngleB 110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3389 2777 a 3389 2777
a
 tx@Dict begin NAngle  RotBegin  end
 3389 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 -0.1424 1.42271 -0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3389 2777 a
 tx@Dict begin RotEnd  end
 3389 2777 a 3389 2777 a
 tx@Dict begin PutEnd  end
 3389 2777 a 3389
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a21 /N@a11 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a22 /N@a12 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a13 /N@a23 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a14 /N@a24 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a25 /N@a15 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389
2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a26 /N@a16 InitNC { /AngleA 90.  def /AngleB -90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a17 /N@a27 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777
a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a18 /N@a28 InitNC { /AngleA -90.  def /AngleB 90.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a21 InitNC { /AngleA 105.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a31 /N@a22 InitNC { /AngleA 75.  def /AngleB -105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a23 /N@a32 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777
a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a24 /N@a32 InitNC { /AngleA -105.  def /AngleB 75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a33 /N@a25 InitNC { /AngleA 105.  def /AngleB -75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a33 /N@a26 InitNC { /AngleA 75.  def /AngleB -105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.8  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.8 } ifelse def /ArrowPos 0.  def /loopNo 0.8
 1 gt {CurveLength 0.8  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389
2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a27 /N@a34 InitNC { /AngleA -75.  def /AngleB 105. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a28 /N@a34 InitNC { /AngleA -105.  def /AngleB 75. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5
 1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 3389 2777
a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 2.58333 2.58333 0 0 /N@a32 /N@a33 InitNC { /AngleA -70.
 def /AngleB -110.  def 0.9  0.9  GetEdgeA GetEdgeB xA1 xB1 sub yA1
yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA
0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED
/x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB
end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def
/cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub
3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
/ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1.
} ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos
def /t0 t 0.95 mul def getValues ArrowInside pop pop pop pop } repeat
x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1
] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3389 2777 a 3389
2777 a
 tx@Dict begin NAngle  RotBegin  end
 3389 2777 a @beginspecial @setspecial
 tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 2.84544 0.1424 1.42271 0.1424  /Lineto /lineto load def
false NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 2 copy /y1 ED /x1 ED ArrowA x1 y1 /n n 1 sub def n { 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
3389 2777 a
 tx@Dict begin RotEnd  end
 3389 2777 a 3389 2777 a
 tx@Dict begin PutEnd  end
 3389 2777 a 3389
2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@na4 /N@a31 InitNC { /AngleA 120.  def /AngleB -60. 
def 0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div
dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0
def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 3389 2777 a
 tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def  0.8 SLW 0  setgray
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.58333
2.58333 0 0 /N@a34 /N@a4 InitNC { /AngleA -120.  def /AngleB 60.  def
0.3  0.3  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup
3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def
GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin
ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.54  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt
{1.0 1. 1.0 add div }{ 0.54 } ifelse def /ArrowPos 0.  def /loopNo
0.54  1 gt {CurveLength 0.54  div cvi }{ 1. } ifelse def loopNo cvi
{ /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3389 2777 a 0 TeXcolorgray
883 3039 a FX(Figure)32 b(1:)43 b(The)34 b(idea)f(of)f(the)h(pro)s(of)f
(of)g(Theorem)i(8.6)p 0 TeXcolorgray 0 TeXcolorgray 146
3407 a(F)-8 b(or)35 b(example)j(the)e(net)h(on)e(the)i(left)f(in)g
(\(58\))f(is)i(the)f(result)h(of)f(eliminating)g(the)h(anc)m(hor)f(of)g
(the)0 3527 y(net)d(on)f(the)h(righ)m(t)g(in)g(\(58\))o(.)146
3648 y(Note)41 b(that)e(this)i(anc)m(hor)g(elimination)g(pro)s(cess)g
(is)g(not)e(con\015uen)m(t,)44 b(i.e.,)f(in)d(a)g(net)g(with)h(man)m(y)
0 3768 y(anc)m(hors,)30 b(the)d(result)i(of)e(eliminating)h(all)g(of)f
(them)h(dep)s(ends)h(on)e(the)h(order)g(in)g(whic)m(h)h(they)f(are)g
(elim-)0 3888 y(inated.)44 b(This)33 b(has)f(b)s(een)h(sho)m(wn)g(in)f
([LS05b],)g(but)g(morally)h(it)f(is)g(a)g(consequence)j(of)c(Theorem)i
(8.6.)146 4009 y(There)27 b(is)g(also)e(a)h(close)h(relationship)g(to)e
(cut)h(elimination)h(in)f(the)g(calculus)h(of)f(structures.)43
b(There)0 4129 y(is)37 b(w)m(ork)g(in)f(progress)h(to)f(nail)g(do)m(wn)
h(the)f(precise)i(relation)e(b)s(et)m(w)m(een)i(the)f(anc)m(hor)g
(elimination)f(for)0 4250 y(pro)s(of)f(nets)i(de\014ned)h(ab)s(o)m(v)m
(e)f(and)f(the)h(splitting)g(tec)m(hnique)h([Gug07])d(for)h
(elimination)h(the)g(cuts)g(in)0 4370 y(system)e FK(SKS)e
FX([Br)s(\177)-51 b(u03].)146 4490 y(Let)36 b(us)g(\014nish)g(this)g
(pap)s(er)g(b)m(y)g(prop)s(osing)f(y)m(et)i(another)e(w)m(a)m(y)i(of)e
(enric)m(hing)h FP(ENet)o FX(\()p FC(A)23 b FX(\))35
b(with)h(a)0 4611 y(partial)e(order:)46 b(Since)36 b(maps)e(in)h(that)e
(category)i(are)f(just)g(directed)i(graphs,)e(w)m(e)i(can)e(de\014ne)h
FS(f)41 b Fl(4)31 b FS(g)0 4731 y FX(if)e FS(g)j FX(is)e(a)e(minor)i
(of)e FS(f)40 b FX(in)29 b(the)h(graph-theoretic)f(sense.)44
b(W)-8 b(e)29 b(ha)m(v)m(e)i(to)d(lea)m(v)m(e)j(it)e(as)g(problem)h
(for)f(future)0 4851 y(w)m(ork)k(to)g(in)m(v)m(estigate)h(the)f(pro)s
(of-theoretic)f(implications)i(of)e(this.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 597 62
TeXDict begin 597 61 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(597)p 0 TeXcolorgray
0 328 a FY(Ac)m(kno)m(wledgmen)m(ts)0 523 y FX(Some)28
b(essen)m(tial)h(parts)e(of)g(the)h(researc)m(h)g(describ)s(ed)h(here)f
(ha)m(v)m(e)h(b)s(een)f(carried)f(out)g(while)i(the)e(author)0
644 y(w)m(as)34 b(w)m(orking)f(at)f(Saarland)h(Univ)m(ersit)m(y)-8
b(,)35 b(Programming)e(Systems)h(Lab.)146 764 y(I)26
b(am)f(grateful)g(to)f(F)-8 b(ran\030)-43 b(cois)25 b(Lamarc)m(he)h
(for)f(man)m(y)h(fruitful)f(discussions)j(and)d(helpful)h(commen)m(ts)0
885 y(on)f(early)g(drafts)g(of)g(this)g(pap)s(er.)41
b(Kai)25 b(Br)s(\177)-51 b(unnler,)26 b(Alessio)g(Guglielmi,)h(and)e
(Ric)m(hard)h(McKinley)g(con-)0 1005 y(tributed)34 b(indirectly)h(to)e
(this)h(w)m(ork)g(b)m(y)h(asking)f(the)g(righ)m(t)f(questions)j(at)d
(the)g(righ)m(t)h(time.)46 b(F)-8 b(urther-)0 1125 y(more)36
b(I)f(w)m(ould)h(thank)g(the)g(anon)m(ymous)h(referee)f(for)f(sev)m
(eral)i(signi\014can)m(t)g(commen)m(ts)g(that)e(help)s(ed)0
1246 y(to)d(impro)m(v)m(e)i(the)f(pap)s(er.)0 1566 y
FY(References)p 0 TeXcolorgray 0 1761 a FX([And76])p
0 TeXcolorgray 49 w(P)m(eter)j(B.)e(Andrews.)51 b(Refutations)35
b(b)m(y)h(matings.)50 b FU(IEEE)36 b(T)-7 b(r)i(ansactions)35
b(on)h(Computers)p FX(,)382 1882 y(C-25:801{807,)31 b(1976.)p
0 TeXcolorgray 0 2084 a([Bar79])p 0 TeXcolorgray 74 w(Mic)m(hael)j
(Barr.)44 b FU(*-A)n(utonomous)35 b(Cate)-5 b(gories)p
FX(,)32 b(v)m(olume)i(752)e(of)h FU(L)-5 b(e)g(ctur)g(e)35
b(Notes)h(in)f(Math-)382 2204 y(ematics)p FX(.)43 b(Springer-V)-8
b(erlag,)32 b(1979.)p 0 TeXcolorgray 0 2406 a([Bar91])p
0 TeXcolorgray 74 w(Mic)m(hael)26 b(Barr.)31 b(*-autonomous)24
b(categories)i(and)f(linear)g(logic.)31 b FU(Mathematic)-5
b(al)27 b(Structur)-5 b(es)382 2526 y(in)35 b(Computer)f(Scienc)-5
b(e)p FX(,)32 b(1:159{178,)e(1991.)p 0 TeXcolorgray 0
2728 a([BCST96])p 0 TeXcolorgray 50 w(Ric)m(hard)36 b(Blute,)i(Robin)d
(Co)s(c)m(k)m(ett,)k(Rob)s(ert)c(Seely)-8 b(,)38 b(and)e(T)-8
b(o)s(dd)36 b(T)-8 b(rim)m(ble.)55 b(Natural)36 b(de-)382
2848 y(duction)j(and)g(coherence)h(for)e(w)m(eakly)i(distributiv)m(e)h
(categories.)62 b FU(Journal)40 b(of)g(Pur)-5 b(e)41
b(and)382 2969 y(Applie)-5 b(d)34 b(A)n(lgebr)-5 b(a)p
FX(,)32 b(113:229{296,)f(1996.)p 0 TeXcolorgray 0 3171
a([BG07])p 0 TeXcolorgray 84 w(P)m(aola)26 b(Bruscoli)h(and)f(Alessio)i
(Guglielmi.)33 b(On)26 b(the)h(pro)s(of)e(complexit)m(y)j(of)e(deep)h
(inference.)382 3291 y(In)33 b FU(Pr)-5 b(o)g(of,)34
b(Computation,)h(Complexity)f(\(PCC)g(2007\))p FX(,)e(2007.)p
0 TeXcolorgray 0 3493 a([Bib81])p 0 TeXcolorgray 80 w(W)-8
b(olfgang)24 b(Bib)s(el.)32 b(On)26 b(matrices)g(with)g(connections.)33
b FU(Journal)28 b(of)f(the)i(A)n(CM)p FX(,)c(28:633{645,)382
3613 y(1981.)p 0 TeXcolorgray 0 3815 a([Blu93])p 0 TeXcolorgray
80 w(Ric)m(hard)37 b(Blute.)56 b(Linear)36 b(logic,)i(coherence)g(and)f
(dinaturalit)m(y)-8 b(.)56 b FU(The)-5 b(or)g(etic)g(al)37
b(Computer)382 3936 y(Scienc)-5 b(e)p FX(,)31 b(115:3{41,)h(1993.)p
0 TeXcolorgray 0 4137 a([Br)s(\177)-51 b(u03])p 0 TeXcolorgray
68 w(Kai)37 b(Br)s(\177)-51 b(unnler.)56 b FU(De)-5 b(ep)38
b(Infer)-5 b(enc)g(e)37 b(and)h(Symmetry)h(for)g(Classic)-5
b(al)38 b(Pr)-5 b(o)g(ofs)p FX(.)55 b(PhD)37 b(thesis,)382
4258 y(T)-8 b(ec)m(hnisc)m(he)36 b(Univ)m(ersit\177)-49
b(at)34 b(Dresden,)g(2003.)p 0 TeXcolorgray 0 4460 a([BT01])p
0 TeXcolorgray 91 w(Kai)41 b(Br)s(\177)-51 b(unnler)42
b(and)g(Alw)m(en)h(F)-8 b(ernan)m(to)41 b(Tiu.)71 b(A)42
b(lo)s(cal)f(system)j(for)d(classical)i(logic.)71 b(In)382
4580 y(R.)38 b(Nieu)m(w)m(enh)m(uis)43 b(and)38 b(A.)h(V)-8
b(oronk)m(o)m(v,)41 b(editors,)g FU(LP)-7 b(AR)40 b(2001)p
FX(,)g(v)m(olume)g(2250)d(of)h FU(LNAI)p FX(,)382 4700
y(pages)33 b(347{361.)e(Springer-V)-8 b(erlag,)33 b(2001.)p
0 TeXcolorgray 0 4902 a([Bus91])p 0 TeXcolorgray 69 w(Sam)m(uel)27
b(R.)f(Buss.)35 b(The)27 b(undecidabilit)m(y)h(of)e FS(k)s
FX(-pro)m(v)-5 b(abilit)m(y)d(.)34 b FU(A)n(nnals)28
b(of)h(Pur)-5 b(e)29 b(and)g(Applie)-5 b(d)382 5023 y(L)g(o)g(gic)p
FX(,)32 b(53:72{102,)f(1991.)p 0 TeXcolorgray 0 5225
a([BW99])p 0 TeXcolorgray 61 w(Mic)m(hael)37 b(Barr)f(and)g(Charles)h
(W)-8 b(ells.)54 b FU(Cate)-5 b(gory)38 b(The)-5 b(ory)37
b(for)h(Computing)f(Scienc)-5 b(e)p FX(.)52 b(Les)382
5345 y(Publications)34 b(CRM,)f(Mon)m(tr)m(\023)-46 b(eal,)34
b(third)f(edition,)g(1999.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 598 63
TeXDict begin 598 62 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(598)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 TeXcolorgray 0 320 a FX([Car97])p 0
TeXcolorgray 73 w(Alessandra)f(Carb)s(one.)k(In)m(terp)s(olan)m(ts,)d
(cut)e(elimination)g(and)g(\015o)m(w)g(graphs)f(for)g(the)h(prop)s(o-)
382 440 y(sitional)33 b(calculus.)45 b FU(A)n(nnals)34
b(of)g(Pur)-5 b(e)36 b(and)e(Applie)-5 b(d)34 b(L)-5
b(o)g(gic)p FX(,)32 b(83:249{299,)f(1997.)p 0 TeXcolorgray
0 636 a([CR79])p 0 TeXcolorgray 88 w(Stephen)26 b(A.)e(Co)s(ok)g(and)g
(Rob)s(ert)g(A.)h(Rec)m(kho)m(w.)31 b(The)25 b(relativ)m(e)h
(e\016ciency)g(of)e(prop)s(ositional)382 756 y(pro)s(of)32
b(systems.)46 b FU(The)34 b(Journal)h(of)f(Symb)-5 b(olic)34
b(L)-5 b(o)g(gic)p FX(,)32 b(44\(1\):36{50,)f(1979.)p
0 TeXcolorgray 0 952 a([CS97a])p 0 TeXcolorgray 57 w(J.R.B.)51
b(Co)s(c)m(k)m(ett)i(and)e(R.A.G.)f(Seely)-8 b(.)100
b(Pro)s(of)50 b(theory)h(for)g(full)g(in)m(tuitionistic)i(linear)382
1072 y(logic,)33 b(bilinear)g(logic,)g(and)g(mix)h(categories.)45
b FU(The)-5 b(ory)34 b(and)h(Applic)-5 b(ations)34 b(of)h(Cate)-5
b(gories)p FX(,)382 1192 y(3\(5\):85{131,)31 b(1997.)p
0 TeXcolorgray 0 1388 a([CS97b])p 0 TeXcolorgray 52 w(J.R.B.)43
b(Co)s(c)m(k)m(ett)h(and)f(R.A.G.)f(Seely)-8 b(.)75 b(W)-8
b(eakly)43 b(distributiv)m(e)i(categories.)74 b FU(Journal)44
b(of)382 1508 y(Pur)-5 b(e)35 b(and)g(Applie)-5 b(d)34
b(A)n(lgebr)-5 b(a)p FX(,)32 b(114:133{173,)e(1997.)p
0 TeXcolorgray 0 1704 a([DP04])p 0 TeXcolorgray 89 w(Kosta)f(Do)-5
b(\024)-44 b(sen)29 b(and)h(Zoran)e(P)m(etri)m(\023)-46
b(c.)39 b FU(Pr)-5 b(o)g(of-The)g(or)g(etic)g(al)30 b(Coher)-5
b(enc)g(e)p FX(.)37 b(K)m(CL)29 b(Publications,)382 1824
y(London,)k(2004.)p 0 TeXcolorgray 0 2020 a([DP05])p
0 TeXcolorgray 89 w(Kosta)42 b(Do)-5 b(\024)-44 b(sen)42
b(and)g(Zoran)f(P)m(etri)m(\023)-46 b(c.)72 b(Pro)s(of-net)42
b(categories.)72 b(preprin)m(t,)45 b(Mathematical)382
2140 y(Institute,)34 b(Belgrade,)f(2005.)p 0 TeXcolorgray
0 2336 a([DP07])p 0 TeXcolorgray 89 w(Kosta)27 b(Do)-5
b(\024)-44 b(sen)27 b(and)f(Zoran)g(P)m(etri)m(\023)-46
b(c.)36 b(In)m(term)m(utation.)f(preprin)m(t,)29 b(Mathematical)f
(Institute,)382 2456 y(Belgrade,)33 b(2007.)p 0 TeXcolorgray
0 2652 a([FP04a])p 0 TeXcolorgray 51 w(Carsten)d(F)s(\177)-51
b(uhrmann)29 b(and)g(Da)m(vid)g(Pym.)39 b(On)29 b(the)h(geometry)f(of)g
(in)m(teraction)h(for)e(classical)382 2772 y(logic.)43
b(preprin)m(t,)34 b(2004.)p 0 TeXcolorgray 0 2968 a([FP04b])p
0 TeXcolorgray 49 w(Carsten)j(F)s(\177)-51 b(uhrmann)35
b(and)h(Da)m(vid)g(Pym.)55 b(On)36 b(the)g(geometry)h(of)e(in)m
(teraction)i(for)e(classi-)382 3088 y(cal)i(logic)g(\(extended)i
(abstract\).)56 b(In)38 b FU(19th)g(IEEE)h(Symp)-5 b(osium)38
b(on)g(L)-5 b(o)g(gic)39 b(in)f(Computer)382 3208 y(Scienc)-5
b(e)34 b(\(LICS)g(2004\))p FX(,)d(pages)i(211{220,)e(2004.)p
0 TeXcolorgray 0 3404 a([FP04c])p 0 TeXcolorgray 57 w(Carsten)41
b(F)s(\177)-51 b(uhrmann)39 b(and)g(Da)m(vid)h(Pym.)65
b(Order-enric)m(hed)41 b(categorical)f(mo)s(dels)g(of)g(the)382
3524 y(classical)h(sequen)m(t)i(calculus.)67 b(T)-8 b(o)40
b(app)s(ear)f(in)i FU(Journal)g(of)g(Pur)-5 b(e)42 b(and)f(Applie)-5
b(d)42 b(A)n(lgebr)-5 b(a)p FX(,)382 3645 y(2004.)p 0
TeXcolorgray 0 3840 a([Gen34])p 0 TeXcolorgray 56 w(Gerhard)24
b(Gen)m(tzen.)31 b(Un)m(tersuc)m(h)m(ungen)f(\177)-51
b(ub)s(er)24 b(das)h(logisc)m(he)h(Sc)m(hlie\031en.)g(I.)k
FU(Mathematische)382 3961 y(Zeitschrift)p FX(,)i(39:176{210,)f(1934.)p
0 TeXcolorgray 0 4156 a([Gir91])p 0 TeXcolorgray 88 w(Jean-Yv)m(es)c
(Girard.)j(A)25 b(new)h(constructiv)m(e)i(logic:)39 b(Classical)27
b(logic.)k FU(Mathematic)-5 b(al)28 b(Struc-)382 4277
y(tur)-5 b(es)35 b(in)g(Computer)f(Scienc)-5 b(e)p FX(,)32
b(1:255{296,)f(1991.)p 0 TeXcolorgray 0 4472 a([GS01])p
0 TeXcolorgray 99 w(Alessio)36 b(Guglielmi)e(and)g(Lutz)h
(Stra\031burger.)48 b(Non-comm)m(utativit)m(y)36 b(and)e(MELL)h(in)g
(the)382 4593 y(calculus)26 b(of)f(structures.)32 b(In)26
b(Lauren)m(t)f(F)-8 b(rib)s(ourg,)26 b(editor,)h FU(Computer)g(Scienc)
-5 b(e)27 b(L)-5 b(o)g(gic,)28 b(CSL)382 4713 y(2001)p
FX(,)k(v)m(olume)i(2142)e(of)g FU(LNCS)p FX(,)g(pages)h(54{68.)f
(Springer-V)-8 b(erlag,)33 b(2001.)p 0 TeXcolorgray 0
4909 a([Gug02])p 0 TeXcolorgray 50 w(Alessio)h(Guglielmi.)44
b(Subatomic)33 b(logic.)44 b(note,)32 b(No)m(v)m(em)m(b)s(er)j(2002.)p
0 TeXcolorgray 0 5104 a([Gug04a])p 0 TeXcolorgray 48
w(Alessio)i(Guglielmi.)52 b(Deep)36 b(inference)h(and)e(sp)s(eed-up)i
(in)f(pro)s(of)e(searc)m(h.)53 b(Email)36 b(to)g(the)382
5225 y(frogs)47 b(mailinglist)h(on)f(2004-08-08,)h(arc)m(hiv)m(ed)i(at)
d Fc(http://news.gmane.org/gmane)q(.)382 5345 y
(science.mathematics.frogs)q FX(,)38 b(2004.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 599 64
TeXDict begin 599 63 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(599)p 0 TeXcolorgray
0 TeXcolorgray 0 320 a([Gug04b])p 0 TeXcolorgray 48 w(Alessio)34
b(Guglielmi.)44 b(F)-8 b(ormalism)33 b(A.)43 b(note,)33
b(April)g(2004.)p 0 TeXcolorgray 0 523 a([Gug04c])p 0
TeXcolorgray 48 w(Alessio)h(Guglielmi.)44 b(F)-8 b(ormalism)33
b(B.)43 b(note,)33 b(Decem)m(b)s(er)h(2004.)p 0 TeXcolorgray
0 726 a([Gug05])p 0 TeXcolorgray 50 w(Alessio)g(Guglielmi.)44
b(Some)33 b(news)h(on)e(subatomic)i(logic.)44 b(note,)32
b(July)i(2005.)p 0 TeXcolorgray 0 930 a([Gug07])p 0 TeXcolorgray
50 w(Alessio)d(Guglielmi.)38 b(A)30 b(system)h(of)e(in)m(teraction)h
(and)g(structure.)39 b FU(A)n(CM)32 b(T)-7 b(r)i(ansactions)30
b(on)382 1050 y(Computational)k(L)-5 b(o)g(gic)p FX(,)32
b(8\(1\),)g(2007.)p 0 TeXcolorgray 0 1254 a([HdP93])p
0 TeXcolorgray 49 w(J.)40 b(Martin)f(E.)h(Hyland)g(and)f(V)-8
b(aleria)39 b(de)h(P)m(aiv)-5 b(a.)64 b(F)-8 b(ull)39
b(in)m(tuitionistic)i(linear)e(logic)h(\(ex-)382 1374
y(tended)34 b(abstract\).)43 b FU(A)n(nnals)34 b(of)h(Pur)-5
b(e)35 b(and)f(Applie)-5 b(d)35 b(L)-5 b(o)g(gic)p FX(,)32
b(64\(3\):273{291,)e(1993.)p 0 TeXcolorgray 0 1577 a([HHS05])p
0 TeXcolorgray 49 w(Robin)42 b(Houston,)k(Dominic)c(Hughes,)k(and)d
(Andrea)g(Sc)m(halk.)74 b(Mo)s(delling)43 b(linear)g(logic)382
1698 y(without)37 b(units)g(\(preliminary)h(results\).)57
b(Preprin)m(t,)38 b(a)m(v)-5 b(ailable)37 b(at)f Fc(http://arxiv.org/)
382 1818 y(abs/math/0504037)p FX(,)h(2005.)p 0 TeXcolorgray
0 2022 a([Ho)m(w80])p 0 TeXcolorgray 49 w(W.)26 b(A.)g(Ho)m(w)m(ard.)33
b(The)27 b(form)m(ulae-as-t)m(yp)s(es)g(notion)e(of)h(construction.)33
b(In)26 b(J.)g(P)-8 b(.)26 b(Seldin)h(and)382 2142 y(J.)35
b(R.)g(Hindley)-8 b(,)37 b(editors,)g FU(T)-7 b(o)36
b(H.)h(B.)g(Curry:)50 b(Essays)37 b(on)f(Combinatory)h(L)-5
b(o)g(gic,)37 b(L)-5 b(amb)g(da)382 2262 y(Calculus)35
b(and)f(F)-7 b(ormalism)p FX(,)30 b(pages)j(479{490.)f(Academic)i
(Press,)g(1980.)p 0 TeXcolorgray 0 2466 a([Hug05a])p
0 TeXcolorgray 48 w(Dominic)42 b(Hughes.)69 b(Simple)42
b(free)f(star-autonomous)g(categories)h(and)f(full)g(coherence.)382
2586 y(Preprin)m(t,)34 b(a)m(v)-5 b(ailable)33 b(at)f
Fc(http://arxiv.org/abs/mat)q(h.CT)q(/050)q(652)q(1)p
FX(,)38 b(2005.)p 0 TeXcolorgray 0 2790 a([Hug05b])p
0 TeXcolorgray 49 w(Dominic)22 b(Hughes.)27 b(Simple)c(m)m
(ultiplicativ)m(e)i(pro)s(of)c(nets)i(with)f(units.)27
b(Preprin)m(t,)e(a)m(v)-5 b(ailable)382 2910 y(at)32
b Fc(http://arxiv.org/abs/mat)q(h.CT)q(/05)q(0700)q(3)p
FX(,)38 b(2005.)p 0 TeXcolorgray 0 3113 a([Hyl04])p 0
TeXcolorgray 79 w(J.)d(Martin)h(E.)f(Hyland.)52 b(Abstract)36
b(in)m(terpretation)g(of)e(pro)s(ofs:)48 b(Classical)37
b(prop)s(ositional)382 3234 y(calculus.)31 b(In)25 b(Jerzy)g(Marcink)m
(o)m(wski)i(and)d(Andrzej)h(T)-8 b(arlec)m(ki,)28 b(editors,)e
FU(Computer)h(Scienc)-5 b(e)382 3354 y(L)g(o)g(gic,)34
b(CSL)h(2004)p FX(,)d(v)m(olume)i(3210)d(of)h FU(LNCS)p
FX(,)h(pages)g(6{21.)f(Springer-V)-8 b(erlag,)33 b(2004.)p
0 TeXcolorgray 0 3557 a([Kel64])p 0 TeXcolorgray 84 w(Gregory)d(Maxw)m
(ell)i(Kelly)-8 b(.)41 b(On)30 b(MacLane's)i(conditions)g(for)e
(coherence)i(of)e(natural)g(asso-)382 3678 y(ciativities,)k(comm)m
(utativities,)h(etc.)44 b FU(Journal)35 b(of)g(A)n(lgebr)-5
b(a)p FX(,)32 b(4:397{402,)e(1964.)p 0 TeXcolorgray 0
3881 a([KM71])p 0 TeXcolorgray 65 w(Gregory)e(Maxw)m(ell)j(Kelly)f(and)
e(Saunders)i(Mac)f(Lane.)38 b(Coherence)30 b(in)f(closed)h(categories.)
382 4002 y FU(Journal)35 b(of)f(Pur)-5 b(e)36 b(and)e(Applie)-5
b(d)34 b(A)n(lgebr)-5 b(a)p FX(,)32 b(1:97{140,)f(1971.)p
0 TeXcolorgray 0 4205 a([Laf88])p 0 TeXcolorgray 90 w(Yv)m(es)38
b(Lafon)m(t.)54 b FU(L)-5 b(o)g(gique,)38 b(Cat)n(\023)-47
b(egories)36 b(et)j(Machines)p FX(.)53 b(PhD)36 b(thesis,)j(Univ)m
(ersit)m(\023)-46 b(e)38 b(P)m(aris)f(7,)382 4325 y(1988.)p
0 TeXcolorgray 0 4529 a([Laf95])p 0 TeXcolorgray 90 w(Yv)m(es)28
b(Lafon)m(t.)k(F)-8 b(rom)25 b(pro)s(of)h(nets)h(to)e(in)m(teraction)i
(nets.)34 b(In)26 b(J.-Y.)g(Girard,)h(Y.)f(Lafon)m(t,)h(and)382
4649 y(L.)j(Regnier,)g(editors,)h FU(A)-5 b(dvanc)g(es)32
b(in)f(Line)-5 b(ar)32 b(L)-5 b(o)g(gic)p FX(,)30 b(v)m(olume)h(222)e
(of)g FU(L)-5 b(ondon)31 b(Mathemat-)382 4770 y(ic)-5
b(al)34 b(So)-5 b(ciety)35 b(L)-5 b(e)g(ctur)g(e)35 b(Notes)p
FX(,)e(pages)g(225{247.)e(Cam)m(bridge)j(Univ)m(ersit)m(y)i(Press,)e
(1995.)p 0 TeXcolorgray 0 4973 a([Lam68])p 0 TeXcolorgray
49 w(Joac)m(him)k(Lam)m(b)s(ek.)60 b(Deductiv)m(e)40
b(systems)g(and)e(categories.)g(I:)g(Syn)m(tactic)i(calculus)f(and)382
5093 y(residuated)34 b(categories.)44 b FU(Math.)35 b(Systems)g(The)-5
b(ory)p FX(,)32 b(2:287{318,)f(1968.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 600 65
TeXDict begin 600 64 bop 0 TeXcolorgray 0 TeXcolorgray
0 120 a FX(600)1275 b FZ(LUTZ)27 b(STRASSBUR)n(GER)p
0 TeXcolorgray 0 TeXcolorgray 0 320 a FX([Lam69])p 0
TeXcolorgray 49 w(Joac)m(him)33 b(Lam)m(b)s(ek.)45 b(Deductiv)m(e)35
b(systems)g(and)e(categories.)g(I)s(I.)g(standard)g(constructions)382
440 y(and)j(closed)h(categories.)53 b(In)36 b(P)-8 b(.)35
b(Hilton,)i(editor,)g FU(Cate)-5 b(gory)37 b(The)-5 b(ory,)38
b(Homolo)-5 b(gy)37 b(The)-5 b(ory)382 560 y(and)46 b(Applic)-5
b(ations)p FX(,)47 b(v)m(olume)g(86)d(of)h FU(L)-5 b(e)g(ctur)g(e)47
b(Notes)g(in)f(Mathematics)p FX(,)i(pages)d(76{122.)382
681 y(Springer,)33 b(1969.)p 0 TeXcolorgray 0 884 a([Lam01])p
0 TeXcolorgray 49 w(F)-8 b(ran\030)-43 b(cois)33 b(Lamarc)m(he.)48
b(On)33 b(the)i(algebra)e(of)g(structural)i(con)m(texts.)48
b(Accepted)36 b(at)d FU(Mathe-)382 1005 y(matic)-5 b(al)34
b(Structur)-5 b(es)36 b(in)f(Computer)f(Scienc)-5 b(e)p
FX(,)32 b(2001.)p 0 TeXcolorgray 0 1208 a([Lam07])p 0
TeXcolorgray 49 w(F)-8 b(ran\030)-43 b(cois)34 b(Lamarc)m(he.)51
b(Exploring)35 b(the)g(gap)g(b)s(et)m(w)m(een)i(linear)e(and)f
(classical)i(logic,)g(2007.)382 1328 y Fb(Theory)e(and)e(Applications)i
(of)e(Categories)p FX(,)i(18:473{535,)d(2007.)p 0 TeXcolorgray
0 1532 a([Lau99])p 0 TeXcolorgray 66 w(Olivier)g(Lauren)m(t.)39
b(P)m(olarized)31 b(pro)s(of-nets:)42 b(pro)s(of-nets)29
b(for)h(LC)g(\(extended)h(abstract\).)40 b(In)382 1652
y(Jean-Yv)m(es)28 b(Girard,)f(editor,)h FU(T)-7 b(yp)i(e)g(d)29
b(L)-5 b(amb)g(da)28 b(Calculi)h(and)f(Applic)-5 b(ations)29
b(\(TLCA)g(1999\))p FX(,)382 1773 y(v)m(olume)34 b(1581)e(of)g
FU(LNCS)p FX(,)g(pages)i(213{227.)d(Springer-V)-8 b(erlag,)32
b(1999.)p 0 TeXcolorgray 0 1976 a([Lau03])p 0 TeXcolorgray
66 w(Olivier)44 b(Lauren)m(t.)76 b(P)m(olarized)44 b(pro)s(of-nets)f
(and)h FS(\025\026)p FX(-calculus.)76 b FU(The)-5 b(or)g(etic)g(al)43
b(Computer)382 2096 y(Scienc)-5 b(e)p FX(,)31 b(290\(1\):161{188,)g
(2003.)p 0 TeXcolorgray 0 2300 a([LS86])p 0 TeXcolorgray
115 w(Joac)m(him)c(Lam)m(b)s(ek)g(and)f(Phil)h(J.)f(Scott.)33
b FU(Intr)-5 b(o)g(duction)28 b(to)h(higher)f(or)-5 b(der)29
b(c)-5 b(ate)g(goric)g(al)28 b(lo)-5 b(gic)p FX(,)382
2420 y(v)m(olume)33 b(7)e(of)f FU(Cambridge)j(studies)g(in)g(advanc)-5
b(e)g(d)33 b(mathematics)p FX(.)40 b(Cam)m(bridge)32
b(Univ)m(ersit)m(y)382 2540 y(Press,)i(1986.)p 0 TeXcolorgray
0 2744 a([LS05a])p 0 TeXcolorgray 66 w(F)-8 b(ran\030)-43
b(cois)30 b(Lamarc)m(he)h(and)f(Lutz)g(Stra\031burger.)39
b(Constructing)31 b(free)f(Bo)s(olean)g(categories.)382
2864 y(In)f FU(Pr)-5 b(o)g(c)g(e)g(e)g(dings)30 b(of)h(the)h(Twentieth)
f(A)n(nnual)g(IEEE)g(Symp)-5 b(osium)30 b(on)h(L)-5 b(o)g(gic)31
b(in)g(Computer)382 2985 y(Scienc)-5 b(e)34 b(\(LICS'05\))p
FX(,)d(pages)i(209{218,)e(2005.)p 0 TeXcolorgray 0 3188
a([LS05b])p 0 TeXcolorgray 61 w(F)-8 b(ran\030)-43 b(cois)40
b(Lamarc)m(he)g(and)g(Lutz)g(Stra\031burger.)64 b(Naming)40
b(pro)s(ofs)f(in)h(classical)h(prop)s(osi-)382 3308 y(tional)30
b(logic.)39 b(In)30 b(P)m(a)m(w)m(e )-27 b(l)32 b(Urzyczyn,)h(editor,)e
FU(T)-7 b(yp)i(e)g(d)31 b(L)-5 b(amb)g(da)32 b(Calculi)g(and)g(Applic)
-5 b(ations,)382 3429 y(TLCA)35 b(2005)p FX(,)d(v)m(olume)i(3461)d(of)h
FU(LNCS)p FX(,)h(pages)g(246{261.)e(Springer-V)-8 b(erlag,)33
b(2005.)p 0 TeXcolorgray 0 3632 a([LS06])p 0 TeXcolorgray
115 w(F)-8 b(ran\030)-43 b(cois)56 b(Lamarc)m(he)g(and)f(Lutz)h
(Stra\031burger.)112 b(F)-8 b(rom)55 b(pro)s(of)f(nets)j(to)e(the)h
(free)g(*-)382 3753 y(autonomous)33 b(category)-8 b(.)44
b FU(L)-5 b(o)g(gic)g(al)34 b(Metho)-5 b(ds)34 b(in)h(Computer)g
(Scienc)-5 b(e)p FX(,)31 b(2\(4:3\):1{44,)g(2006.)p 0
TeXcolorgray 0 3956 a([Mac63])p 0 TeXcolorgray 49 w(Saunders)37
b(Mac)f(Lane.)54 b(Natural)35 b(asso)s(ciativit)m(y)j(and)e(comm)m
(utativit)m(y)-8 b(.)55 b FU(R)n(ic)-5 b(e)37 b(University)382
4076 y(Studies)p FX(,)c(49:28{46,)e(1963.)p 0 TeXcolorgray
0 4280 a([Mac71])p 0 TeXcolorgray 49 w(Saunders)38 b(Mac)e(Lane.)55
b FU(Cate)-5 b(gories)38 b(for)g(the)g(Working)g(Mathematician)p
FX(.)54 b(Num)m(b)s(er)38 b(5)e(in)382 4400 y(Graduate)c(T)-8
b(exts)34 b(in)f(Mathematics.)h(Springer-V)-8 b(erlag,)33
b(1971.)p 0 TeXcolorgray 0 4604 a([McK05])p 0 TeXcolorgray
49 w(Ric)m(hard)58 b(McKinley)-8 b(.)118 b(New)58 b
(bureacracy/coherence.)119 b(Email)57 b(to)g(the)g(frogs)g(mail-)382
4724 y(inglist)c(on)f(2005-06-03,)i(arc)m(hiv)m(ed)g(at)d
Fc(http://news.gmane.org/g)q(mane)q(.sci)q(ence)q(.)382
4844 y(mathematics.frogs)p FX(,)37 b(2005.)p 0 TeXcolorgray
0 5048 a([P)m(ar92])p 0 TeXcolorgray 80 w(Mic)m(hel)47
b(P)m(arigot.)80 b FS(\025\026)p FX(-calculus:)69 b(An)45
b(algorithmic)g(in)m(terpretation)h(of)f(classical)h(natu-)382
5168 y(ral)40 b(deduction.)69 b(In)41 b FU(L)-5 b(o)g(gic)42
b(Pr)-5 b(o)g(gr)g(amming)41 b(and)g(A)n(utomate)-5 b(d)42
b(R)-5 b(e)g(asoning,)43 b(LP)-7 b(AR)43 b(1992)p FX(,)382
5289 y(v)m(olume)34 b(624)e(of)g FU(LNAI)p FX(,)h(pages)g(190{201.)e
(Springer-V)-8 b(erlag,)33 b(1992.)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 601 66
TeXDict begin 601 65 bop 0 TeXcolorgray 0 TeXcolorgray
741 120 a FZ(ON)28 b(THE)f(AXIOMA)-7 b(TISA)g(TION)29
b(OF)e(BOOLEAN)g(CA)-7 b(TEGORIES)594 b FX(601)p 0 TeXcolorgray
0 TeXcolorgray 0 320 a([Pra71])p 0 TeXcolorgray 77 w(Dag)26
b(Pra)m(witz.)36 b(Ideas)29 b(and)e(results)i(in)e(pro)s(of)g(theory)-8
b(.)35 b(In)28 b(J.)f(E.)h(F)-8 b(enstad,)29 b(editor,)g
FU(Pr)-5 b(o)g(c)g(e)g(e)g(d-)382 440 y(ings)25 b(of)h(the)f(Se)-5
b(c)g(ond)25 b(Sc)-5 b(andinavian)24 b(L)-5 b(o)g(gic)25
b(Symp)-5 b(osium)p FX(,)24 b(pages)f(235{307.)e(North-Holland)382
560 y(Publishing)34 b(Co.,)f(1971.)p 0 TeXcolorgray 0
764 a([Rob03])p 0 TeXcolorgray 55 w(Edm)m(und)h(P)-8
b(.)34 b(Robinson.)44 b(Pro)s(of)32 b(nets)i(for)e(classical)i(logic.)
44 b FU(Journal)35 b(of)g(L)-5 b(o)g(gic)34 b(and)h(Com-)382
884 y(putation)p FX(,)e(13:777{797,)e(2003.)p 0 TeXcolorgray
0 1088 a([See89])p 0 TeXcolorgray 90 w(R.A.G.)d(Seely)-8
b(.)37 b(Linear)28 b(logic,)h(*-autonomous)f(categories)h(and)f(cofree)
g(coalgebras.)37 b FU(Con-)382 1208 y(temp)-5 b(or)g(ary)35
b(Mathematics)p FX(,)d(92,)g(1989.)p 0 TeXcolorgray 0
1411 a([Sel01])p 0 TeXcolorgray 106 w(P)m(eter)38 b(Selinger.)58
b(Con)m(trol)37 b(categories)h(and)f(dualit)m(y:)53 b(on)37
b(the)g(categorical)g(seman)m(tics)i(of)382 1532 y(the)30
b(lam)m(b)s(da-m)m(u)f(calculus.)40 b FU(Mathematic)-5
b(al)31 b(Structur)-5 b(es)33 b(in)e(Computer)h(Scienc)-5
b(e)p FX(,)28 b(11:207{)382 1652 y(260,)k(2001.)p 0 TeXcolorgray
0 1856 a([SL04])p 0 TeXcolorgray 115 w(Lutz)c(Stra\031burger)f(and)g(F)
-8 b(ran\030)-43 b(cois)28 b(Lamarc)m(he.)35 b(On)27
b(pro)s(of)g(nets)h(for)f(m)m(ultiplicativ)m(e)j(linear)382
1976 y(logic)d(with)h(units.)36 b(In)28 b(Jerzy)g(Marcink)m(o)m(wski)i
(and)e(Andrzej)g(T)-8 b(arlec)m(ki,)30 b(editors,)f FU(Computer)382
2096 y(Scienc)-5 b(e)28 b(L)-5 b(o)g(gic,)29 b(CSL)f(2004)p
FX(,)f(v)m(olume)g(3210)e(of)g FU(LNCS)p FX(,)h(pages)g(145{159.)f
(Springer-V)-8 b(erlag,)382 2217 y(2004.)p 0 TeXcolorgray
0 2420 a([SR98])p 0 TeXcolorgray 104 w(Thomas)42 b(Streic)m(her)g(and)f
(Bernhard)g(Reus.)69 b(Classical)42 b(logic,)h(con)m(tin)m(uation)f
(seman)m(tics)382 2540 y(and)28 b(abstract)g(mac)m(hines.)38
b FU(Journal)30 b(of)g(F)-7 b(unctional)30 b(Pr)-5 b(o)g(gr)g(amming)p
FX(,)27 b(8\(6\):543{572,)g(1998.)p 0 TeXcolorgray 0
2744 a([Str05])p 0 TeXcolorgray 100 w(Lutz)43 b(Stra\031burger.)75
b(F)-8 b(rom)42 b(deep)j(inference)f(to)f(pro)s(of)f(nets.)75
b(In)44 b(P)m(aola)f(Bruscoli)h(and)382 2864 y(F)-8 b(ran\030)-43
b(cois)32 b(Lamarc)m(he,)h(editors,)g FU(Structur)-5
b(es)36 b(and)d(De)-5 b(duction)34 b(2005)g(\(Satel)5
b(lite)34 b(Workshop)382 2985 y(of)h(ICALP'05\))p FX(,)c(2005.)p
0 TeXcolorgray 0 3188 a([Sza75])p 0 TeXcolorgray 84 w(M.)i(E.)g(Szab)s
(o.)43 b(P)m(olycategories.)j FU(Comm.)33 b(A)n(lg.)p
FX(,)f(3:663{689,)f(1975.)p 0 TeXcolorgray 0 3391 a([Thi97])p
0 TeXcolorgray 79 w(Ha)m(y)m(o)24 b(Thielec)m(k)m(e.)32
b FU(Cate)-5 b(goric)g(al)25 b(Structur)-5 b(e)27 b(of)f(Continuation)g
(Passing)g(Style)p FX(.)i(PhD)23 b(thesis,)382 3512 y(Univ)m(ersit)m(y)
35 b(of)d(Edin)m(burgh,)i(1997.)0 3840 y FU(Lutz)i(Str)-5
b(a\031bur)g(ger)0 3960 y(INRIA)35 b(F)-7 b(uturs)35
b(&)759 3935 y(\023)744 3960 y(Ec)-5 b(ole)35 b(Polyte)-5
b(chnique)0 4081 y(LIX)0 4201 y(R)n(ue)35 b(de)f(Saclay)0
4321 y(91128)g(Palaise)-5 b(au)34 b(Ce)-5 b(dex)0 4442
y(F)e(r)i(anc)g(e)0 4562 y Fc(http://www.lix.polytechni)q(que.)q(fr/)q
(Labo)q(/Lut)q(z.St)q(ras)q(sbur)q(ger/)0 4682 y FX(Email:)44
b Fc(lutz@lix.polytechnique.fr)0 4878 y FX(This)35 b(article)f(ma)m(y)g
(b)s(e)f(accessed)j(via)e(WWW)g(at)f Fc(http://www.tac.mta.ca/tac)q(/)
39 b FX(or)33 b(b)m(y)i(anon)m(y-)0 4983 y(mous)22 b(ftp)g(at)f
Fc(ftp://ftp.tac.mta.ca/pu)q(b/ta)q(c/)57 b(html/volumes/18/18/18-1)q
(8.)p FT(f)6 b Fc(dvi,ps,pdf)p FT(g)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 602 67
TeXDict begin 602 66 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 307 a FZ(THEOR)-7 b(Y)33 b(AND)h(APPLICA)-7
b(TIONS)33 b(OF)g(CA)-7 b(TEGORIES)32 b(\(ISSN)i(1201-561X\))c(will)k
(disseminate)f(articles)f(that)0 407 y(signi\014can)n(tly)25
b(adv)-5 b(ance)25 b(the)i(study)f(of)f(categorical)f(algebra)g(or)h
(metho)r(ds,)i(or)e(that)h(mak)n(e)f(signi\014can)n(t)g(new)h(con)n
(tribu-)0 506 y(tions)i(to)h(mathematical)f(science)g(using)g
(categorical)e(metho)r(ds.)39 b(The)29 b(scop)r(e)f(of)g(the)h(journal)
f(includes:)38 b(all)28 b(areas)f(of)0 606 y(pure)d(category)e(theory)
-7 b(,)25 b(including)f(higher)g(dimensional)g(categories;)f
(applications)g(of)i(category)d(theory)i(to)g(algebra,)0
706 y(geometry)35 b(and)i(top)r(ology)e(and)i(other)f(areas)f(of)h
(mathematics;)41 b(applications)36 b(of)g(category)f(theory)h(to)g
(computer)0 805 y(science,)28 b(ph)n(ysics)f(and)h(other)f
(mathematical)h(sciences;)f(con)n(tributions)h(to)f(scien)n(ti\014c)h
(kno)n(wledge)f(that)h(mak)n(e)f(use)h(of)0 905 y(categorical)d(metho)r
(ds.)0 1005 y(Articles)32 b(app)r(earing)f(in)i(the)f(journal)g(ha)n(v)
n(e)f(b)r(een)i(carefully)f(and)g(critically)f(refereed)h(under)g(the)h
(resp)r(onsibilit)n(y)e(of)0 1104 y(mem)n(b)r(ers)g(of)g(the)h
(Editorial)e(Board.)46 b(Only)31 b(pap)r(ers)g(judged)g(to)g(b)r(e)h(b)
r(oth)g(signi\014can)n(t)e(and)h(excellen)n(t)g(are)f(accepted)0
1204 y(for)d(publication.)0 1303 y(The)36 b(metho)r(d)h(of)e
(distribution)i(of)f(the)g(journal)f(is)h(via)f(the)i(In)n(ternet)f(to)
r(ols)f Fa(WWW/ftp)p FZ(.)59 b(The)37 b(journal)e(is)h(arc)n(hiv)n(ed)0
1403 y(electronically)26 b(and)i(in)g(prin)n(ted)f(pap)r(er)g(format.)0
1546 y FJ(Subscription)40 b(inf)n(orma)-7 b(tion.)100
b FZ(Individual)30 b(subscrib)r(ers)f(receiv)n(e)g(\(b)n(y)h(e-mail\))g
(abstracts)f(of)h(articles)f(as)0 1645 y(they)i(are)f(published.)46
b(F)-7 b(ull)31 b(text)g(of)g(published)g(articles)f(is)h(a)n(v)-5
b(ailable)29 b(in)i(.dvi,)h(P)n(ostscript)d(and)h(PDF.)h(Details)g
(will)0 1745 y(b)r(e)37 b(e-mailed)g(to)f(new)h(subscrib)r(ers.)64
b(T)-7 b(o)37 b(subscrib)r(e,)i(send)d(e-mail)h(to)g
Fa(tac@mta.ca)32 b FZ(including)37 b(a)g(full)h(name)e(and)0
1844 y(p)r(ostal)23 b(address.)34 b(F)-7 b(or)23 b(institutional)h
(subscription,)g(send)f(enquiries)g(to)h(the)f(Managing)f(Editor,)i
(Rob)r(ert)f(Rosebrugh,)0 1944 y Fa(rrosebrugh@mta.c)o(a)p
FZ(.)0 2087 y FJ(Inf)n(orma)-7 b(tion)46 b(f)n(or)f(a)n(uthors.)112
b FZ(The)33 b(t)n(yp)r(esetting)f(language)f(of)i(the)g(journal)f(is)g
(T)3068 2104 y(E)3114 2087 y(X,)j(and)d(L)3422 2070 y
FO(A)3459 2087 y FZ(T)3505 2104 y(E)3551 2087 y(X2e)g(is)0
2186 y(the)h(preferred)f(\015a)n(v)n(our.)51 b(T)876
2204 y(E)922 2186 y(X)33 b(source)f(of)g(articles)g(for)h(publication)f
(should)h(b)r(e)g(submitted)h(b)n(y)e(e-mail)h(directly)f(to)0
2286 y(an)d(appropriate)e(Editor.)41 b(They)29 b(are)f(listed)i(b)r
(elo)n(w.)41 b(Please)28 b(obtain)g(detailed)i(information)e(on)h
(submission)g(format)0 2385 y(and)i(st)n(yle)g(\014les)h(from)f(the)h
(journal's)e(WWW)j(serv)n(er)c(at)j Fa(http://www.tac.m)o(ta)o(.ca)o
(/t)o(ac)o(/)p FZ(.)43 b(Y)-7 b(ou)31 b(ma)n(y)g(also)f(write)0
2485 y(to)d Fa(tac@mta.ca)d FZ(to)j(receiv)n(e)g(details)g(b)n(y)h
(e-mail.)0 2629 y FJ(Mana)n(ging)37 b(editor.)25 b FZ(Rob)r(ert)i
(Rosebrugh,)g(Moun)n(t)g(Allison)h(Univ)n(ersit)n(y:)36
b Fa(rrosebrugh@mta.c)o(a)0 2774 y FJ(T)60 2795 y(E)120
2774 y(Xnical)i(editor.)25 b FZ(Mic)n(hael)i(Barr,)f(McGill)i(Univ)n
(ersit)n(y:)36 b Fa(barr@math.mcgill)o(.ca)0 2918 y FJ(Transmitting)i
(editors.)0 3018 y FZ(Ric)n(hard)27 b(Blute,)h(Univ)n(ersit)n(\023)-39
b(e)26 b(d')i(Otta)n(w)n(a:)35 b Fa(rblute@uottawa.c)o(a)0
3117 y FZ(La)n(wrence)26 b(Breen,)h(Univ)n(ersit)n(\023)-39
b(e)26 b(de)i(P)n(aris)d(13:)36 b Fa(breen@math.univ-p)o(ari)o(s1)o
(3.f)o(r)0 3217 y FZ(Ronald)27 b(Bro)n(wn,)f(Univ)n(ersit)n(y)h(of)h
(North)f(W)-7 b(ales:)37 b Fa(ronnie.profbrow)o(n)h(\(at\))k
(btinternet.com)0 3317 y FZ(Aurelio)27 b(Carb)r(oni,)g(Univ)n
(ersit\022)-42 b(a)27 b(dell)g(Insubria:)37 b Fa(aurelio.carboni)o(@un)
o(in)o(su)o(bri)o(a.)o(it)0 3416 y FZ(V)-7 b(aleria)27
b(de)g(P)n(aiv)-5 b(a,)26 b(Xero)n(x)h(P)n(alo)f(Alto)i(Researc)n(h)e
(Cen)n(ter:)36 b Fa(paiva@parc.xerox)o(.co)o(m)0 3516
y FZ(Ezra)26 b(Getzler,)i(North)n(w)n(estern)e(Univ)n(ersit)n(y:)36
b Fa(getzler\(at\)nort)o(hwe)o(st)o(ern)o(\(d)o(ot\))o(ed)o(u)0
3615 y FZ(Martin)27 b(Hyland,)h(Univ)n(ersit)n(y)f(of)g(Cam)n(bridge:)
36 b Fa(M.Hyland@dpmms.)o(cam)o(.a)o(c.u)o(k)0 3715 y
FZ(P)-7 b(.)27 b(T.)h(Johnstone,)f(Univ)n(ersit)n(y)f(of)i(Cam)n
(bridge:)35 b Fa(ptj@dpmms.cam.ac.)o(uk)0 3815 y FZ(G.)28
b(Max)f(Kelly)-7 b(,)27 b(Univ)n(ersit)n(y)g(of)g(Sydney:)37
b Fa(maxk@maths.usyd.e)o(du)o(.au)0 3914 y FZ(Anders)27
b(Ko)r(c)n(k,)g(Univ)n(ersit)n(y)g(of)g(Aarh)n(us:)36
b Fa(kock@imf.au.dk)0 4014 y FZ(Stephen)28 b(Lac)n(k,)f(Univ)n(ersit)n
(y)f(of)i(W)-7 b(estern)28 b(Sydney:)36 b Fa(s.lack@uws.edu.au)0
4114 y FZ(F.)28 b(William)g(La)n(wv)n(ere,)d(State)j(Univ)n(ersit)n(y)f
(of)g(New)h(Y)-7 b(ork)27 b(at)h(Bu\013alo:)36 b Fa(wlawvere@acsu.bu)o
(ffa)o(lo)o(.ed)o(u)0 4213 y FZ(Jean-Louis)26 b(Lo)r(da)n(y)-7
b(,)27 b(Univ)n(ersit)n(\023)-39 b(e)26 b(de)h(Strasb)r(ourg:)36
b Fa(loday@math.u-st)o(ra)o(sbg)o(.f)o(r)0 4313 y FZ(Iek)n(e)27
b(Mo)r(erdijk,)g(Univ)n(ersit)n(y)g(of)h(Utrec)n(h)n(t:)36
b Fa(moerdijk@math.uu.)o(nl)0 4412 y FZ(Susan)27 b(Nie\014eld,)h(Union)
g(College:)36 b Fa(niefiels@union.e)o(du)0 4512 y FZ(Rob)r(ert)27
b(P)n(ar)n(\023)-39 b(e,)25 b(Dalhousie)i(Univ)n(ersit)n(y:)36
b Fa(pare@mathstat.dal)o(.ca)0 4612 y FZ(Jiri)27 b(Rosic)n(ky)-7
b(,)26 b(Masaryk)g(Univ)n(ersit)n(y:)36 b Fa(rosicky@math.mun)o(i.c)o
(z)0 4711 y FZ(Bro)r(ok)n(e)26 b(Shipley)-7 b(,)28 b(Univ)n(ersit)n(y)e
(of)i(Illinois)f(at)h(Chicago:)35 b Fa(bshipley@math.uic)o(.e)o(du)0
4811 y FZ(James)27 b(Stashe\013,)h(Univ)n(ersit)n(y)e(of)i(North)f
(Carolina:)35 b Fa(jds@math.unc.edu)0 4911 y FZ(Ross)27
b(Street,)h(Macquarie)e(Univ)n(ersit)n(y:)36 b Fa(street@math.mq.)o
(edu)o(.a)o(u)0 5010 y FZ(W)-7 b(alter)27 b(Tholen,)h(Y)-7
b(ork)27 b(Univ)n(ersit)n(y:)36 b Fa(tholen@mathstat)o(.yo)o(rk)o(u.)o
(ca)0 5110 y FZ(Myles)27 b(Tierney)-7 b(,)27 b(Rutgers)g(Univ)n(ersit)n
(y:)36 b Fa(tierney@math.rutg)o(er)o(s.e)o(du)0 5209
y FZ(Rob)r(ert)27 b(F.)h(C.)g(W)-7 b(alters,)27 b(Univ)n(ersit)n(y)g
(of)g(Insubria:)37 b Fa(robert.walters@)o(uni)o(ns)o(ub)o(ria)o(.i)o(t)
0 5309 y FZ(R.)28 b(J.)f(W)-7 b(o)r(o)r(d,)28 b(Dalhousie)f(Univ)n
(ersit)n(y:)36 b Fa(rjwood@mathstat.d)o(al)o(.ca)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
