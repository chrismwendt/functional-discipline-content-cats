#+STARTUP: showall
* Notes
My notes as I learn all the things.

** Settings
*** [[file:index.org][index.org]]
#+BEGIN_SRC org :tangle index.org
,#+SETUPFILE: notes.org
,#+TITLE: Notes
,#+SUBTITLE: My Notes as I learn all the things.

,#+INCLUDE: sitemap.org
#+END_SRC
*** [[file:notes.el][notes.el]]
#+BEGIN_SRC emacs-lisp :tangle notes.el
(require 'htmlize)

(setq org-html-htmlize-output-type 'inline-css)

(setq org-html-validation-link nil)

(setq org-html-postamble-format
      '(("en" "<p>Generated by <span class=\"author\">%a</span> on <span class=\"date\">%T</span> using <span class=\"creator\">%c</span>.\n")))

(let ((project              "notes")
      (base-directory       "~/org/notes/")
      (publishing-directory "~/org/notes/docs/"))
  (add-to-list
   'org-publish-project-alist
   `(,project
     :author "Eric Bailey"
     :base-directory ,base-directory
     :base-extension "org"
     :publishing-directory ,publishing-directory
     :exclude "\\(notes\\|README\\).org"
     :recursive t
     :auto-sitemap t
     :sitemap-filename "sitemap.org"
     :sitemap-title ""
     :sitemap-sort-files anti-chronologically
     :export-creator-info nil
     :export-author-info nil
     :html-postamble t
     :table-of-contents t
     :section-numbers nil
     :auto-preamble t
     :style-include-default nil
     :publishing-function org-html-publish-to-html))
  (add-to-list
   'org-publish-project-alist
   `(,(concat project "-site")
     :base-directory ,base-directory
     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf"
     :publishing-directory ,publishing-directory
     :recursive t
     :publishing-function org-publish-attachment
     :components (,project))))

;;; Reset org-publish-project-alist
;; (setq org-publish-project-alist nil)
#+END_SRC

*** [[file:notes.org][notes.org]]
#+BEGIN_SRC org :tangle notes.org
,#+AUTHOR: Eric Bailey
,#+HTML_DOCTYPE: html5
,#+KEYWORDS: notes,
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style.css">
#+END_SRC

*** [[file:docs/css/style.css][docs/css/style.css]]
#+BEGIN_SRC css :tangle docs/css/style.css
/* Local Variables:     */
/* css-indent-offset: 2 */
/* End:                 */

@import url(https://fonts.googleapis.com/css?family=Reenie+Beanie);

body, #content a {
  color: #111;
}

body {
  font-family: 'Reenie Beanie', cursive;
  font-size: 2rem;
  /* font-weight: bold; */
  background: #272822; /* #1d1e19; */
  width: 56.5rem;
  margin: 0 auto;
}

.src:before {
  color: black;
}
.src, .example {
  color: white;
  background: #272822; /* #1d1e19; */
  white-space: pre-wrap;
  /* word-wrap: normal; */
  width: 48.5rem;
}
.org-src-container, .example {
  font-size: 11pt;
}
.org-src-container pre, .example {
  padding: .5rem;
}

#content {
  /* http://lea.verou.me/css3patterns/#lined-paper */
  background-color: #FEFEFA; /* rgb(243, 229, 206); */
  background-image:
  /* linear-gradient(90deg, transparent 79px, #abced4 79px, #abced4 81px, transparent 81px), */
  linear-gradient(#ccc .05rem, transparent .05rem);
  background-size: 100% 1.38rem;

  /* background: #fdf5db; */
  padding: 2rem;
}

#text-table-of-contents {
  background: #fdf5db; /* rgb(243, 229, 206); */
  border: 1px solid #272822;
}

#postamble, #postamble a {
  color: #fdf5db; /* rgb(243, 229, 206); */
}
#+END_SRC

*** [[file:Makefile][Makefile]]
#+BEGIN_SRC makefile :tangle Makefile
package := lambdasinaction
java_src_root := src/main/java
java_srcs := $(wildcard ${java_src_root}/${package}/*/*.java)

java: ${java_srcs:.java=.class}

%.class: %.java
	javac $<
	java -cp ${java_src_root} \
	$(subst /,.,$(subst ${java_src_root}/,,$(dir $*)))$(notdir $*)
#+END_SRC
