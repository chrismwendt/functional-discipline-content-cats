functors

discrete category - no structure
the only morphisms are identities (for each object)

mapping between categories

given two categories C and D,
a functor F maps objects in C to objects in D
as well as mapping morphisms, preserving connections

a functor is a function on objects and morphisms
for a functor f, we must prove a function fmap preserves id and (.)
these two are the functor laws

thus for morphism f in C,
f :: a -> b
morphism F f in D, likewise connects objects F a, F b
F f :: F a -> F b

for every hom-set C(a, b) the functor F needs a mapping to D(F a, F b)

furthermore, Functors preserve composition of morphisms
h = g . f
F h = F g . F f

functors may do both collapsing and embedding
e.g.
if C is the singleton,
a functor from C to any D simply selects a object in D
vice versa if D is the singleton,
a functor from any C to D simply maps any object to the singleton
(and any morphisms to the identity), this is the constant functor

in our practical category of types and functions, Hask,
we are concerned with functors that map the category to itself,
the functors known as 'endofunctors'

types which map to types, these are parameterized types

the Maybe Functor
a mapping from type a to type Maybe a
data Maybe a = Nothing | Just a

Maybe is not a type but a type constructor

for our endofunctor, we also need a mapping on morphisms (functions in Hask)
thus for any
f :: a -> b
we would also like a
f' :: Maybe a -> Maybe b
f' Nothing = Nothing
f' (Just x) = Just (f x)

the morphism mapping part of our (endo)functors is implemented as a
higher order function called fmap
fmap :: (a -> b) -> (Maybe a -> Maybe b)
fmap _ Nothing = Nothing
fmap f (Just x) = Just (f x)

class Functor f where
    fmap :: (a -> b) -> f a -> f b
 
in the typeclass definition, f is a type variable like a and b,
however ghc can deduce it represents a type constructor not a type
because it is acting on other types

thus to declare a Functor instance requires a type constructor

instance Functor Maybe where
    fmap _ Nothing = Nothing
    fmap f (Just x) = Just (f x)

instance Functor List where
    fmap _ Nil = Nil
    fmap f (Cons x t) = Cons (f x) (fmap f t)

fmap :: (a -> b) -> (r -> a) -> (r -> b)

instance Functor ((->) r) where
    fmap f g = f . g

or, equivalently

fmap f g = (.) f g

which becomes

fmap = (.)

This partially applied type constructor ((->) r)
is called the reader functor

constant functor
note how the type argument a can be completely ignored

data Const c a = Const c
instance Functor (Const c) where
    fmap _ (Const v) = Const v

finally, functors between categories (morphisms and objs) compose,
just like functions between objects (sets) can compose

consider
maybeTail :: [a] -> Maybe [a]
maybeTail [] = Nothing
maybeTail (x:xs) = Just [xs]

the result of maybeTail is a composition of two functors,
Maybe . [], acting on a

square x = x * x

mis :: Maybe [Int]
mis = Just [1, 2, 3]

mis2 = fmap (fmap square) mis

consider mis2 may be rewritten as
mis2 = (fmap . fmap) square mis

the composition of two functors is a functor with fmap
as the composition of the corresponding fmaps

now, we might notice, we are operating on the category of categories,
where functors have all the same properties as morphisms do wrt sets

excluding the paradoxical category of all categories, (minding the problems
of the analogous set of all sets), we would like to consider the
category of all small categories, "Cat"
where a small category is one in which objects form a set,
as opposed to something larger than a set...
we are considering abstractions of structures where even the
infinite uncountable sets can be considered small enough to be manageable

to summarize
a functor can be intuitively thought of as
    a container, a mapping between morphisms, or
    equivalently a projection to another category
